(function(global) {

global.__DEV__ = true;

global.__BUNDLE_START_TIME__ = global.nativePerformanceNow ? global.nativePerformanceNow() : Date.now();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

'use strict';
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

global.require = _require;
global.__d = define;

var modules = Object.create(null);
if (__DEV__) {
  var verboseNamesToModuleIds = Object.create(null);
}

function define(factory, moduleId, dependencyMap) {
  if (moduleId in modules) {
    return;
  }
  modules[moduleId] = {
    dependencyMap: dependencyMap,
    exports: undefined,
    factory: factory,
    hasError: false,
    isInitialized: false };

  if (__DEV__) {
    modules[moduleId].hot = createHotReloadingObject();

    var verboseName = arguments[3];
    if (verboseName) {
      modules[moduleId].verboseName = verboseName;
      verboseNamesToModuleIds[verboseName] = moduleId;
    }
  }
}

function _require(moduleId) {
  if (__DEV__ && typeof moduleId === 'string') {
    var verboseName = moduleId;
    moduleId = verboseNamesToModuleIds[moduleId];
    if (moduleId == null) {
      throw new Error('Unknown named module: \'' + verboseName + '\'');
    } else {
      console.warn('Requiring module \'' + verboseName + '\' by name is only supported for ' + 'debugging purposes and will BREAK IN PRODUCTION!');
    }
  }

  var moduleIdReallyIsNumber = moduleId;
  var module = modules[moduleIdReallyIsNumber];
  return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
}

var inGuard = false;
function guardedLoadModule(moduleId, module) {
  if (!inGuard && global.ErrorUtils) {
    inGuard = true;
    var returnValue = void 0;
    try {
      returnValue = loadModuleImplementation(moduleId, module);
    } catch (e) {
      global.ErrorUtils.reportFatalError(e);
    }
    inGuard = false;
    return returnValue;
  } else {
    return loadModuleImplementation(moduleId, module);
  }
}

function loadModuleImplementation(moduleId, module) {
  var nativeRequire = global.nativeRequire;
  if (!module && nativeRequire) {
    nativeRequire(moduleId);
    module = modules[moduleId];
  }

  if (!module) {
    throw unknownModuleError(moduleId);
  }

  if (module.hasError) {
    throw moduleThrewError(moduleId, module.error);
  }

  if (__DEV__) {
    var Systrace = _require.Systrace;
  }

  module.isInitialized = true;
  var exports = module.exports = {};var _module = module;var factory = _module.factory,
      dependencyMap = _module.dependencyMap;
  try {
    if (__DEV__) {
      Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
    }

    var moduleObject = { exports: exports };
    if (__DEV__ && module.hot) {
      moduleObject.hot = module.hot;
    }

    factory(global, _require, moduleObject, exports, dependencyMap);

    if (!__DEV__) {
      module.factory = undefined;
      module.dependencyMap = undefined;
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
    return module.exports = moduleObject.exports;
  } catch (e) {
    module.hasError = true;
    module.error = e;
    module.isInitialized = false;
    module.exports = undefined;
    throw e;
  }
}

function unknownModuleError(id) {
  var message = 'Requiring unknown module "' + id + '".';
  if (__DEV__) {
    message += 'If you are sure the module is there, try restarting the packager. ' + 'You may also want to run `npm install`, or `yarn` (depending on your environment).';
  }
  return Error(message);
}

function moduleThrewError(id, error) {
  var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
  return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
}

if (__DEV__) {
  _require.Systrace = { beginEvent: function beginEvent() {}, endEvent: function endEvent() {} };

  var createHotReloadingObject = function createHotReloadingObject() {
    var hot = {
      acceptCallback: null,
      accept: function accept(callback) {
        hot.acceptCallback = callback;
      } };

    return hot;
  };

  var acceptAll = function acceptAll(dependentModules, inverseDependencies) {
    if (!dependentModules || dependentModules.length === 0) {
      return true;
    }

    var notAccepted = dependentModules.filter(function (module) {
      return !accept(module, undefined, inverseDependencies);
    });

    var parents = [];
    for (var i = 0; i < notAccepted.length; i++) {
      if (inverseDependencies[notAccepted[i]].length === 0) {
        return false;
      }

      parents.push.apply(parents, _toConsumableArray(inverseDependencies[notAccepted[i]]));
    }

    return acceptAll(parents, inverseDependencies);
  };

  var accept = function accept(id, factory, inverseDependencies) {
    var mod = modules[id];

    if (!mod && factory) {
      define(factory, id);
      return true;
    }var hot = mod.hot;
    if (!hot) {
      console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');

      return false;
    }

    if (factory) {
      mod.factory = factory;
    }
    mod.hasError = false;
    mod.isInitialized = false;
    _require(id);

    if (hot.acceptCallback) {
      hot.acceptCallback();
      return true;
    } else {
      if (!inverseDependencies) {
        throw new Error('Undefined `inverseDependencies`');
      }

      return acceptAll(inverseDependencies[id], inverseDependencies);
    }
  };

  global.__accept = accept;
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

Object.assign = function (target, sources) {
  if (__DEV__) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }
    if (typeof target !== 'object' && typeof target !== 'function') {
      throw new TypeError('In this environment the target of assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
    }
  }

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    if (__DEV__) {
      if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
        throw new TypeError('In this environment the sources for assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var key in nextSource) {
      if (__DEV__) {
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        if (!hasOwnProperty.call(nextSource, key)) {
          throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }
      target[key] = nextSource[key];
    }
  }

  return target;
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
var inspect = function () {

  function inspect(obj, opts) {
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    return formatValue(ctx, obj, opts.depth);
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};

    array.forEach(function (val, idx) {
      hash[val] = true;
    });

    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}'];

    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function (prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }

  function isArray(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  return inspect;
}();

var OBJECT_COLUMN_NAME = '(index)';
var LOG_LEVELS = {
  trace: 0,
  info: 1,
  warn: 2,
  error: 3
};
var INSPECTOR_LEVELS = [];
INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';

var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

if (global.nativeLoggingHook) {
  function getNativeLogFunction(level) {
    return function () {
      var str = void 0;
      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, { depth: 10 });
        }).join(', ');
      }

      var logLevel = level;
      if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        logLevel = LOG_LEVELS.warn;
      }
      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }
      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  };

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }
    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];

    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;
      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    };

    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }

  var originalConsole = global.console;
  global.console = {
    error: getNativeLogFunction(LOG_LEVELS.error),
    info: getNativeLogFunction(LOG_LEVELS.info),
    log: getNativeLogFunction(LOG_LEVELS.info),
    warn: getNativeLogFunction(LOG_LEVELS.warn),
    trace: getNativeLogFunction(LOG_LEVELS.trace),
    debug: getNativeLogFunction(LOG_LEVELS.trace),
    table: consoleTablePolyfill
  };

  if (__DEV__ && originalConsole) {
    var descriptor = Object.getOwnPropertyDescriptor(global, 'console');
    if (descriptor) {
      Object.defineProperty(global, 'originalConsole', descriptor);
    }

    Object.keys(console).forEach(function (methodName) {
      var reactNativeMethod = console[methodName];
      if (originalConsole[methodName]) {
        console[methodName] = function () {
          originalConsole[methodName].apply(originalConsole, arguments);
          reactNativeMethod.apply(console, arguments);
        };
      }
    });
  }
} else if (!global.console) {
  function consoleLoggingStub() {};
  global.console = {
    error: consoleLoggingStub,
    info: consoleLoggingStub,
    log: consoleLoggingStub,
    warn: consoleLoggingStub,
    trace: consoleLoggingStub,
    debug: consoleLoggingStub,
    table: consoleLoggingStub
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var _inGuard = 0;

var _globalHandler = function onError(e) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }
    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }
    return null;
  },
  inGuard: function inGuard() {
    return _inGuard;
  },
  guard: function guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }
    name = name || fun.name || '<generated guard>';
    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }
};

global.ErrorUtils = ErrorUtils;
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (Number.EPSILON === undefined) {
  Object.defineProperty(Number, 'EPSILON', {
    value: Math.pow(2, -52)
  });
}
if (Number.MAX_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
    value: Math.pow(2, 53) - 1
  });
}
if (Number.MIN_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
    value: -(Math.pow(2, 53) - 1)
  });
}
if (!Number.isNaN) {
  var globalIsNaN = global.isNaN;
  Object.defineProperty(Number, 'isNaN', {
    configurable: true,
    enumerable: false,
    value: function isNaN(value) {
      return typeof value === 'number' && globalIsNaN(value);
    },
    writable: true
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
    var start = Math.min(Math.max(pos, 0), string.length);
    return string.indexOf(String(search), pos) === start;
  };
}

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var stringLength = string.length;
    var searchString = String(search);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
    var end = Math.min(Math.max(pos, 0), stringLength);
    var start = end - searchString.length;
    if (start < 0) {
      return false;
    }
    return string.lastIndexOf(searchString, start) === start;
  };
}

if (!String.prototype.repeat) {
  String.prototype.repeat = function (count) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    count = Number(count) || 0;
    if (count < 0 || count === Infinity) {
      throw RangeError();
    }
    if (count === 1) {
      return string;
    }
    var result = '';
    while (count) {
      if (count & 1) {
        result += string;
      }
      if (count >>= 1) {
        string += string;
      }
    }
    return result;
  };
}

if (!String.prototype.includes) {
  String.prototype.includes = function (search, start) {
    'use strict';

    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
function findIndex(predicate, context) {
  if (this == null) {
    throw new TypeError('Array.prototype.findIndex called on null or undefined');
  }
  if (typeof predicate !== 'function') {
    throw new TypeError('predicate must be a function');
  }
  var list = Object(this);
  var length = list.length >>> 0;
  for (var i = 0; i < length; i++) {
    if (predicate.call(context, list[i], i, list)) {
      return i;
    }
  }
  return -1;
}

if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: findIndex
  });
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(predicate, context) {
      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      var index = findIndex.call(this, predicate, context);
      return index === -1 ? undefined : this[index];
    }
  });
}

if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(searchElement) {
      var O = Object(this);
      var len = parseInt(O.length) || 0;
      if (len === 0) {
        return false;
      }
      var n = parseInt(arguments[1]) || 0;
      var k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) {
          k = 0;
        }
      }
      var currentElement;
      while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
          return true;
        }
        k++;
      }
      return false;
    }
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
if (!Array.from) {
  Array.from = function (arrayLike) {
    if (arrayLike == null) {
      throw new TypeError('Object is null or undefined');
    }

    var mapFn = arguments[1];
    var thisArg = arguments[2];

    var C = this;
    var items = Object(arrayLike);
    var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';
    var mapping = typeof mapFn === 'function';
    var usingIterator = typeof items[symbolIterator] === 'function';
    var key = 0;
    var ret;
    var value;

    if (usingIterator) {
      ret = typeof C === 'function' ? new C() : [];
      var it = items[symbolIterator]();
      var next;

      while (!(next = it.next()).done) {
        value = next.value;

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    }

    var len = items.length;
    if (isNaN(len) || len < 0) {
      len = 0;
    }

    ret = typeof C === 'function' ? new C(len) : new Array(len);

    while (key < len) {
      value = items[key];

      if (mapping) {
        value = mapFn.call(thisArg, value, key);
      }

      ret[key] = value;

      key += 1;
    }

    ret.length = key;
    return ret;
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

(function () {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  if (typeof Object.entries !== 'function') {
    Object.entries = function (object) {
      if (object == null) {
        throw new TypeError('Object.entries called on non-object');
      }

      var entries = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          entries.push([key, object[key]]);
        }
      }
      return entries;
    };
  }

  if (typeof Object.values !== 'function') {
    Object.values = function (object) {
      if (object == null) {
        throw new TypeError('Object.values called on non-object');
      }

      var values = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          values.push(object[key]);
        }
      }
      return values;
    };
  }
})();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var babelHelpers = global.babelHelpers = {};

babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
};

babelHelpers.createRawReactElement = function () {
  var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
  return function createRawReactElement(type, key, props) {
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: null,
      props: props,
      _owner: null
    };
  };
}();

babelHelpers.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

babelHelpers.createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

babelHelpers.defineEnumerableProperties = function (obj, descs) {
  for (var key in descs) {
    var desc = descs[key];
    desc.configurable = desc.enumerable = true;
    if ('value' in desc) desc.writable = true;
    Object.defineProperty(obj, key, desc);
  }
  return obj;
};

babelHelpers.defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

babelHelpers.get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

babelHelpers.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

babelHelpers.interopRequireDefault = function (obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
};

babelHelpers.interopRequireWildcard = function (obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj.default = obj;
    return newObj;
  }
};

babelHelpers.objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

babelHelpers.possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

babelHelpers.slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

babelHelpers.taggedTemplateLiteral = function (strings, raw) {
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
};

babelHelpers.toArray = function (arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
};

babelHelpers.toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
__d(/* TwitchDashboardApp/index.android.js */function(global, require, module, exports) {require(12          ); // 12 = ./index.js
}, 0, null, "TwitchDashboardApp/index.android.js");
__d(/* TwitchDashboardApp/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                               ); // 27 = ./node_modules/react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\index.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require(181           ); // 181 = react-native

var _nativeBase = require(469          ); // 469 = native-base

var _LiveUserCard = require(677                            ); // 677 = ./app/components/LiveUserCard

var _LiveUserCard2 = _interopRequireDefault(_LiveUserCard);

var _TwitchAPI = require(678                  ); // 678 = ./app/lib/TwitchAPI

var _TwitchAPI2 = _interopRequireDefault(_TwitchAPI);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  TwitchDashboardApp: {
    displayName: 'TwitchDashboardApp'
  }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/index.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
  };
}

var TwitchDashboardApp = _wrapComponent('TwitchDashboardApp')(function (_Component) {
  _inherits(TwitchDashboardApp, _Component);

  function TwitchDashboardApp() {
    _classCallCheck(this, TwitchDashboardApp);

    var _this = _possibleConstructorReturn(this, (TwitchDashboardApp.__proto__ || Object.getPrototypeOf(TwitchDashboardApp)).call(this));

    _this.state = {
      live_user_cards: [],
      following_user_cards: [],
      vodcast_user_cards: [],
      live_loading: true,
      office_loading: true,
      vodcast_loading: true
    };

    if (_reactNative.Platform.OS === 'android' && _reactNative.UIManager.setLayoutAnimationEnabledExperimental) {
      _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);
    }
    return _this;
  }

  _createClass(TwitchDashboardApp, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.populateLiveUsers();
      this.populateNonLiveUsers();
      this.populateVodcastingUsers();
    }
  }, {
    key: 'populateLiveUsers',
    value: function populateLiveUsers() {
      var follows, liveUsers, userList, _iterator, _isArray, _i, _ref, user, usersInfo, passProps;

      return regeneratorRuntime.async(function populateLiveUsers$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.getUsersFollow(120750024));

            case 2:
              follows = _context.sent;

              follows.push(120750024);
              _context.next = 6;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.fetchLiveUsers(follows));

            case 6:
              liveUsers = _context.sent;
              userList = [];
              _iterator = liveUsers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator']();

            case 9:
              if (!_isArray) {
                _context.next = 15;
                break;
              }

              if (!(_i >= _iterator.length)) {
                _context.next = 12;
                break;
              }

              return _context.abrupt('break', 27);

            case 12:
              _ref = _iterator[_i++];
              _context.next = 19;
              break;

            case 15:
              _i = _iterator.next();

              if (!_i.done) {
                _context.next = 18;
                break;
              }

              return _context.abrupt('break', 27);

            case 18:
              _ref = _i.value;

            case 19:
              user = _ref;
              _context.next = 22;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.v5fetchUsersInfo(user.user_id));

            case 22:
              usersInfo = _context.sent;
              passProps = {
                username: usersInfo.display_name,
                key: user.user_id,
                user_id: user.user_id,
                title: user.title,
                viewers_count: user.viewer_count,
                start_time: user.started_at,
                image_url: user.thumbnail_url,
                game_title: usersInfo.game,
                live: true
              };


              userList.push(_react3.default.createElement(_LiveUserCard2.default, _extends({}, passProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 68
                }
              })));

            case 25:
              _context.next = 9;
              break;

            case 27:
              ;

              this.setState({
                live_user_cards: userList,
                live_loading: false
              });

            case 29:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'populateNonLiveUsers',
    value: function populateNonLiveUsers() {
      var follows, userList, _iterator2, _isArray2, _i2, _ref2, user_id, usersInfo, passProps;

      return regeneratorRuntime.async(function populateNonLiveUsers$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.getUsersFollow(120750024));

            case 2:
              follows = _context2.sent;
              userList = [];
              _iterator2 = follows, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator']();

            case 5:
              if (!_isArray2) {
                _context2.next = 11;
                break;
              }

              if (!(_i2 >= _iterator2.length)) {
                _context2.next = 8;
                break;
              }

              return _context2.abrupt('break', 23);

            case 8:
              _ref2 = _iterator2[_i2++];
              _context2.next = 15;
              break;

            case 11:
              _i2 = _iterator2.next();

              if (!_i2.done) {
                _context2.next = 14;
                break;
              }

              return _context2.abrupt('break', 23);

            case 14:
              _ref2 = _i2.value;

            case 15:
              user_id = _ref2;
              _context2.next = 18;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.v5fetchUsersInfo(user_id));

            case 18:
              usersInfo = _context2.sent;
              passProps = {
                username: usersInfo.display_name,
                key: user_id,
                user_id: user_id,
                image_url: usersInfo.logo || '',
                followers_count: usersInfo.followers,
                live: false
              };


              userList.push(_react3.default.createElement(_LiveUserCard2.default, _extends({}, passProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 93
                }
              })));

            case 21:
              _context2.next = 5;
              break;

            case 23:
              ;

              this.setState({
                following_user_cards: userList,
                offline_loading: false
              });

            case 25:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'populateVodcastingUsers',
    value: function populateVodcastingUsers() {
      var follows, vods, userList, _iterator3, _isArray3, _i3, _ref3, vod, usersInfo, passProps;

      return regeneratorRuntime.async(function populateVodcastingUsers$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.getUsersFollow(120750024));

            case 2:
              follows = _context3.sent;
              _context3.next = 5;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.fetchVodcastUsers(follows));

            case 5:
              vods = _context3.sent;
              userList = [];
              _iterator3 = vods, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator']();

            case 8:
              if (!_isArray3) {
                _context3.next = 14;
                break;
              }

              if (!(_i3 >= _iterator3.length)) {
                _context3.next = 11;
                break;
              }

              return _context3.abrupt('break', 26);

            case 11:
              _ref3 = _iterator3[_i3++];
              _context3.next = 18;
              break;

            case 14:
              _i3 = _iterator3.next();

              if (!_i3.done) {
                _context3.next = 17;
                break;
              }

              return _context3.abrupt('break', 26);

            case 17:
              _ref3 = _i3.value;

            case 18:
              vod = _ref3;
              _context3.next = 21;
              return regeneratorRuntime.awrap(_TwitchAPI2.default.v5fetchUsersInfo(vod.user_id));

            case 21:
              usersInfo = _context3.sent;
              passProps = {
                username: usersInfo.display_name,
                key: vod.user_id,
                user_id: vod.user_id,
                title: vod.title,
                viewers_count: vod.viewer_count,
                start_time: vod.started_at,
                image_url: vod.thumbnail_url,
                game_title: usersInfo.game,
                live: true
              };


              userList.push(_react3.default.createElement(_LiveUserCard2.default, _extends({}, passProps, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 122
                }
              })));

            case 24:
              _context3.next = 8;
              break;

            case 26:
              ;

              this.setState({
                vodcast_user_cards: userList,
                vodcast_loading: false
              });

            case 28:
            case 'end':
              return _context3.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'renderActivityIndicator',
    value: function renderActivityIndicator(loading_flag) {
      if (this.state[loading_flag]) {
        return _react3.default.createElement(_reactNative.ActivityIndicator, { color: 'white', size: 'large', style: styles.spinner, __source: {
            fileName: _jsxFileName,
            lineNumber: 134
          }
        });
      }
    }
  }, {
    key: 'refreshLiveFollows',
    value: function refreshLiveFollows() {
      this.setState({
        user_cards: [],
        following_user_cards: [],
        live_loading: true,
        offline_loading: true
      });

      this.populateLiveUsers();
      this.populateNonLiveUsers();
      this.populateVodcastingUsers();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react3.default.createElement(
        _nativeBase.Container,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 154
          }
        },
        _react3.default.createElement(
          _nativeBase.Header,
          { hasTabs: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 155
            }
          },
          _react3.default.createElement(
            _nativeBase.Left,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 156
              }
            },
            _react3.default.createElement(
              _nativeBase.Button,
              { transparent: true, onPress: function onPress() {
                  _this2.refreshLiveFollows();
                }, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 157
                }
              },
              _react3.default.createElement(_nativeBase.Icon, { name: 'refresh', __source: {
                  fileName: _jsxFileName,
                  lineNumber: 158
                }
              })
            )
          ),
          _react3.default.createElement(
            _nativeBase.Body,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 161
              }
            },
            _react3.default.createElement(
              _nativeBase.Title,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 162
                }
              },
              'Following'
            )
          ),
          _react3.default.createElement(_nativeBase.Right, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 164
            }
          })
        ),
        _react3.default.createElement(
          _nativeBase.Tabs,
          { initialPage: 1, __source: {
              fileName: _jsxFileName,
              lineNumber: 167
            }
          },
          _react3.default.createElement(
            _nativeBase.Tab,
            { heading: 'Live', __source: {
                fileName: _jsxFileName,
                lineNumber: 168
              }
            },
            _react3.default.createElement(
              _nativeBase.Content,
              { style: styles.content, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 169
                }
              },
              this.state.live_user_cards,
              this.renderActivityIndicator('live_loading')
            )
          ),
          _react3.default.createElement(
            _nativeBase.Tab,
            { heading: 'Offline', __source: {
                fileName: _jsxFileName,
                lineNumber: 174
              }
            },
            _react3.default.createElement(
              _nativeBase.Content,
              { style: styles.content, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 175
                }
              },
              this.state.following_user_cards,
              this.renderActivityIndicator('offline_loading')
            )
          ),
          _react3.default.createElement(
            _nativeBase.Tab,
            { heading: 'VODcasts', __source: {
                fileName: _jsxFileName,
                lineNumber: 180
              }
            },
            _react3.default.createElement(
              _nativeBase.Content,
              { style: styles.content, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 181
                }
              },
              this.state.vodcast_user_cards,
              this.renderActivityIndicator('vodcast_loading')
            )
          )
        )
      );
    }
  }]);

  return TwitchDashboardApp;
}(_react2.Component));

exports.default = TwitchDashboardApp;


var styles = _reactNative.StyleSheet.create({
  content: {
    backgroundColor: 'gray',
    flex: 1
  },
  spinner: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    alignSelf: "center"
  }
});

_reactNative.AppRegistry.registerComponent('TwitchDashboardApp', function () {
  return TwitchDashboardApp;
});
}, 12, null, "TwitchDashboardApp/index.js");
__d(/* react/index.js */function(global, require, module, exports) {'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require(14                             ); // 14 = ./cjs/react.production.min.js
} else {
  module.exports = require(26                          ); // 26 = ./cjs/react.development.js
}
}, 13, null, "react/index.js");
__d(/* react/cjs/react.production.min.js */function(global, require, module, exports) {"use strict";
function e(e) {
  for (var t = arguments.length - 1, r = "Minified React error #" + e + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + e, n = 0; n < t; n++) {
    r += "&args[]=" + encodeURIComponent(arguments[n + 1]);
  }r += " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o = new Error(r);throw o.name = "Invariant Violation", o.framesToPop = 1, o;
}function t(e, t) {}function r(e, t, r) {
  this.props = e, this.context = t, this.refs = A, this.updater = r || T;
}function n(e, t, r) {
  this.props = e, this.context = t, this.refs = A, this.updater = r || T;
}function o() {}function i(e) {
  return void 0 !== e.ref;
}function a(e) {
  return void 0 !== e.key;
}function l(e) {
  var t = e && (Z && e[Z] || e[ee]);if ("function" == typeof t) return t;
}function u(e) {
  var t = { "=": "=0", ":": "=2" };return "$" + ("" + e).replace(/[=:]/g, function (e) {
    return t[e];
  });
}function c(e) {
  var t = { "=0": "=", "=2": ":" };return ("" + ("." === e[0] && "$" === e[1] ? e.substring(2) : e.substring(1))).replace(/(=0|=2)/g, function (e) {
    return t[e];
  });
}function s(e, t) {
  return "object" == typeof e && null !== e && null != e.key ? ne.escape(e.key) : t.toString(36);
}function p(e, t, r, n) {
  var o = typeof e;if ("undefined" !== o && "boolean" !== o || (e = null), null === e || "string" === o || "number" === o || "object" === o && e.$$typeof === Y) return r(n, e, "" === t ? oe + s(e, 0) : t), 1;var i,
      a,
      l = 0,
      u = "" === t ? oe : t + ie;if (Array.isArray(e)) for (var c = 0; c < e.length; c++) {
    i = e[c], a = u + s(i, c), l += p(i, a, r, n);
  } else {
    var f = te(e);if (f) for (var d, h = f.call(e), y = 0; !(d = h.next()).done;) {
      i = d.value, a = u + s(i, y++), l += p(i, a, r, n);
    } else if ("object" === o) {
      var m = "" + e;R("31", "[object Object]" === m ? "object with keys {" + Object.keys(e).join(", ") + "}" : m, "");
    }
  }return l;
}function f(e, t, r) {
  return null == e ? 0 : p(e, "", t, r);
}function d(e) {
  return ("" + e).replace(ce, "$&/");
}function h(e, t) {
  this.func = e, this.context = t, this.count = 0;
}function y(e, t, r) {
  var n = e.func,
      o = e.context;n.call(o, t, e.count++);
}function m(e, t, r) {
  if (null == e) return e;var n = h.getPooled(t, r);ae(e, y, n), h.release(n);
}function b(e, t, r, n) {
  this.result = e, this.keyPrefix = t, this.func = r, this.context = n, this.count = 0;
}function v(e, t, r) {
  var n = e.result,
      o = e.keyPrefix,
      i = e.func,
      a = e.context,
      l = i.call(a, t, e.count++);Array.isArray(l) ? g(l, n, r, j.thatReturnsArgument) : null != l && (X.isValidElement(l) && (l = X.cloneAndReplaceKey(l, o + (!l.key || t && t.key === l.key ? "" : d(l.key) + "/") + r)), n.push(l));
}function g(e, t, r, n, o) {
  var i = "";null != r && (i = d(r) + "/");var a = b.getPooled(t, i, n, o);ae(e, v, a), b.release(a);
}function P(e, t, r) {
  if (null == e) return e;var n = [];return g(e, n, null, t, r), n;
}function k(e, t, r) {
  return null;
}function _(e, t) {
  return ae(e, k, null);
}function E(e) {
  var t = [];return g(e, t, null, j.thatReturnsArgument), t;
}function w(e) {
  return X.isValidElement(e) || R("143"), e;
}var S = require(15             );require(16                );var A = require(18                    );require(19                  );var j = require(17                      ), // 17 = fbjs/lib/emptyFunction // 19 = fbjs/lib/invariant // 18 = fbjs/lib/emptyObject // 16 = fbjs/lib/warning // 15 = object-assign
    x = require(20          ), // 20 = prop-types
    q = require(23                         ), // 23 = prop-types/checkPropTypes
    C = require(25                          ), // 25 = create-react-class/factory
    R = e,
    O = { isMounted: function isMounted(e) {
    return !1;
  }, enqueueForceUpdate: function enqueueForceUpdate(e, r, n) {
    t(e, "forceUpdate");
  }, enqueueReplaceState: function enqueueReplaceState(e, r, n, o) {
    t(e, "replaceState");
  }, enqueueSetState: function enqueueSetState(e, r, n, o) {
    t(e, "setState");
  } },
    T = O;r.prototype.isReactComponent = {}, r.prototype.setState = function (e, t) {
  "object" != typeof e && "function" != typeof e && null != e && R("85"), this.updater.enqueueSetState(this, e, t, "setState");
}, r.prototype.forceUpdate = function (e) {
  this.updater.enqueueForceUpdate(this, e, "forceUpdate");
}, o.prototype = r.prototype, n.prototype = new o(), n.prototype.constructor = n, S(n.prototype, r.prototype), n.prototype.isPureReactComponent = !0;var $ = { Component: r, PureComponent: n },
    F = function F(e) {
  var t = this;if (t.instancePool.length) {
    var r = t.instancePool.pop();return t.call(r, e), r;
  }return new t(e);
},
    U = function U(e, t) {
  var r = this;if (r.instancePool.length) {
    var n = r.instancePool.pop();return r.call(n, e, t), n;
  }return new r(e, t);
},
    I = function I(e, t, r) {
  var n = this;if (n.instancePool.length) {
    var o = n.instancePool.pop();return n.call(o, e, t, r), o;
  }return new n(e, t, r);
},
    V = function V(e, t, r, n) {
  var o = this;if (o.instancePool.length) {
    var i = o.instancePool.pop();return o.call(i, e, t, r, n), i;
  }return new o(e, t, r, n);
},
    G = function G(e) {
  var t = this;e instanceof t || R("25"), e.destructor(), t.instancePool.length < t.poolSize && t.instancePool.push(e);
},
    M = 10,
    z = F,
    D = function D(e, t) {
  var r = e;return r.instancePool = [], r.getPooled = t || z, r.poolSize || (r.poolSize = M), r.release = G, r;
},
    K = { addPoolingTo: D, oneArgumentPooler: F, twoArgumentPooler: U, threeArgumentPooler: I, fourArgumentPooler: V },
    L = K,
    N = { current: null },
    W = N,
    B = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103,
    Y = B,
    H = Object.prototype.hasOwnProperty,
    J = { key: !0, ref: !0, __self: !0, __source: !0 },
    Q = function Q(e, t, r, n, o, i, a) {
  return { $$typeof: Y, type: e, key: t, ref: r, props: a, _owner: i };
};Q.createElement = function (e, t, r) {
  var n,
      o = {},
      l = null,
      u = null,
      c = null,
      s = null;if (null != t) {
    i(t) && (u = t.ref), a(t) && (l = "" + t.key), c = void 0 === t.__self ? null : t.__self, s = void 0 === t.__source ? null : t.__source;for (n in t) {
      H.call(t, n) && !J.hasOwnProperty(n) && (o[n] = t[n]);
    }
  }var p = arguments.length - 2;if (1 === p) o.children = r;else if (p > 1) {
    for (var f = Array(p), d = 0; d < p; d++) {
      f[d] = arguments[d + 2];
    }o.children = f;
  }if (e && e.defaultProps) {
    var h = e.defaultProps;for (n in h) {
      void 0 === o[n] && (o[n] = h[n]);
    }
  }return Q(e, l, u, c, s, W.current, o);
}, Q.createFactory = function (e) {
  var t = Q.createElement.bind(null, e);return t.type = e, t;
}, Q.cloneAndReplaceKey = function (e, t) {
  return Q(e.type, t, e.ref, e._self, e._source, e._owner, e.props);
}, Q.cloneElement = function (e, t, r) {
  var n,
      o = S({}, e.props),
      l = e.key,
      u = e.ref,
      c = e._self,
      s = e._source,
      p = e._owner;if (null != t) {
    i(t) && (u = t.ref, p = W.current), a(t) && (l = "" + t.key);var f;e.type && e.type.defaultProps && (f = e.type.defaultProps);for (n in t) {
      H.call(t, n) && !J.hasOwnProperty(n) && (void 0 === t[n] && void 0 !== f ? o[n] = f[n] : o[n] = t[n]);
    }
  }var d = arguments.length - 2;if (1 === d) o.children = r;else if (d > 1) {
    for (var h = Array(d), y = 0; y < d; y++) {
      h[y] = arguments[y + 2];
    }o.children = h;
  }return Q(e.type, l, u, c, s, p, o);
}, Q.isValidElement = function (e) {
  return "object" == typeof e && null !== e && e.$$typeof === Y;
};var X = Q,
    Z = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    ee = "@@iterator",
    te = l,
    re = { escape: u, unescape: c },
    ne = re,
    oe = ".",
    ie = ":",
    ae = f,
    le = L.twoArgumentPooler,
    ue = L.fourArgumentPooler,
    ce = /\/+/g;h.prototype.destructor = function () {
  this.func = null, this.context = null, this.count = 0;
}, L.addPoolingTo(h, le), b.prototype.destructor = function () {
  this.result = null, this.keyPrefix = null, this.func = null, this.context = null, this.count = 0;
}, L.addPoolingTo(b, ue);var se = { forEach: m, map: P, mapIntoWithKeyPrefixInternal: g, count: _, toArray: E },
    pe = se,
    fe = X.createFactory,
    de = { a: fe("a"), abbr: fe("abbr"), address: fe("address"), area: fe("area"), article: fe("article"), aside: fe("aside"), audio: fe("audio"), b: fe("b"), base: fe("base"), bdi: fe("bdi"), bdo: fe("bdo"), big: fe("big"), blockquote: fe("blockquote"), body: fe("body"), br: fe("br"), button: fe("button"), canvas: fe("canvas"), caption: fe("caption"), cite: fe("cite"), code: fe("code"), col: fe("col"), colgroup: fe("colgroup"), data: fe("data"), datalist: fe("datalist"), dd: fe("dd"), del: fe("del"), details: fe("details"), dfn: fe("dfn"), dialog: fe("dialog"), div: fe("div"), dl: fe("dl"), dt: fe("dt"), em: fe("em"), embed: fe("embed"), fieldset: fe("fieldset"), figcaption: fe("figcaption"), figure: fe("figure"), footer: fe("footer"), form: fe("form"), h1: fe("h1"), h2: fe("h2"), h3: fe("h3"), h4: fe("h4"), h5: fe("h5"), h6: fe("h6"), head: fe("head"), header: fe("header"), hgroup: fe("hgroup"), hr: fe("hr"), html: fe("html"), i: fe("i"), iframe: fe("iframe"), img: fe("img"), input: fe("input"), ins: fe("ins"), kbd: fe("kbd"), keygen: fe("keygen"), label: fe("label"), legend: fe("legend"), li: fe("li"), link: fe("link"), main: fe("main"), map: fe("map"), mark: fe("mark"), menu: fe("menu"), menuitem: fe("menuitem"), meta: fe("meta"), meter: fe("meter"), nav: fe("nav"), noscript: fe("noscript"), object: fe("object"), ol: fe("ol"), optgroup: fe("optgroup"), option: fe("option"), output: fe("output"), p: fe("p"), param: fe("param"), picture: fe("picture"), pre: fe("pre"), progress: fe("progress"), q: fe("q"), rp: fe("rp"), rt: fe("rt"), ruby: fe("ruby"), s: fe("s"), samp: fe("samp"), script: fe("script"), section: fe("section"), select: fe("select"), small: fe("small"), source: fe("source"), span: fe("span"), strong: fe("strong"), style: fe("style"), sub: fe("sub"), summary: fe("summary"), sup: fe("sup"), table: fe("table"), tbody: fe("tbody"), td: fe("td"), textarea: fe("textarea"), tfoot: fe("tfoot"), th: fe("th"), thead: fe("thead"), time: fe("time"), title: fe("title"), tr: fe("tr"), track: fe("track"), u: fe("u"), ul: fe("ul"), var: fe("var"), video: fe("video"), wbr: fe("wbr"), circle: fe("circle"), clipPath: fe("clipPath"), defs: fe("defs"), ellipse: fe("ellipse"), g: fe("g"), image: fe("image"), line: fe("line"), linearGradient: fe("linearGradient"), mask: fe("mask"), path: fe("path"), pattern: fe("pattern"), polygon: fe("polygon"), polyline: fe("polyline"), radialGradient: fe("radialGradient"), rect: fe("rect"), stop: fe("stop"), svg: fe("svg"), text: fe("text"), tspan: fe("tspan") },
    he = de,
    ye = x,
    me = "16.0.0-alpha.12",
    be = w,
    ve = $.Component,
    ge = X.isValidElement,
    Pe = C(ve, ge, T),
    ke = X.createElement,
    _e = X.createFactory,
    Ee = X.cloneElement,
    we = function we(e) {
  return e;
},
    Se = { Children: { map: pe.map, forEach: pe.forEach, count: pe.count, toArray: pe.toArray, only: be }, Component: $.Component, PureComponent: $.PureComponent, createElement: ke, cloneElement: Ee, isValidElement: X.isValidElement, PropTypes: ye, checkPropTypes: q, createClass: Pe, createFactory: _e, createMixin: we, DOM: he, version: me, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: W } },
    Ae = Se;module.exports = Ae;
}, 14, null, "react/cjs/react.production.min.js");
__d(/* object-assign/index.js */function(global, require, module, exports) {/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		var test1 = new String('abc');
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(_extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};
}, 15, null, "object-assign/index.js");
__d(/* fbjs/lib/warning.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(17               ); // 17 = ./emptyFunction

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return;
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}, 16, null, "fbjs/lib/warning.js");
__d(/* fbjs/lib/emptyFunction.js */function(global, require, module, exports) {"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
}, 17, null, "fbjs/lib/emptyFunction.js");
__d(/* fbjs/lib/emptyObject.js */function(global, require, module, exports) {

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}, 18, null, "fbjs/lib/emptyObject.js");
__d(/* fbjs/lib/invariant.js */function(global, require, module, exports) {

'use strict';

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
}

module.exports = invariant;
}, 19, null, "fbjs/lib/invariant.js");
__d(/* prop-types/index.js */function(global, require, module, exports) {

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.for : '@@for') && (typeof Symbol === 'function' ? Symbol.for : '@@for')('react.element') || 0xeac7;

  var isValidElement = function isValidElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  };

  var throwOnDirectAccess = true;
  module.exports = require(21                         )(isValidElement, throwOnDirectAccess); // 21 = ./factoryWithTypeCheckers
} else {
  module.exports = require(24                          )(); // 24 = ./factoryWithThrowingShims
}
}, 20, null, "prop-types/index.js");
__d(/* prop-types/factoryWithTypeCheckers.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(17                      ); // 17 = fbjs/lib/emptyFunction
var invariant = require(19                  ); // 19 = fbjs/lib/invariant
var warning = require(16                ); // 16 = fbjs/lib/warning

var ReactPropTypesSecret = require(22                          ); // 22 = ./lib/ReactPropTypesSecret
var checkPropTypes = require(23                ); // 23 = ./checkPropTypes

module.exports = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  var ANONYMOUS = '<<anonymous>>';

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }

  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(false, 'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }

    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
}, 21, null, "prop-types/factoryWithTypeCheckers.js");
__d(/* prop-types/lib/ReactPropTypesSecret.js */function(global, require, module, exports) {

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
}, 22, null, "prop-types/lib/ReactPropTypesSecret.js");
__d(/* prop-types/checkPropTypes.js */function(global, require, module, exports) {

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require(19                  ); // 19 = fbjs/lib/invariant
  var warning = require(16                ); // 16 = fbjs/lib/warning
  var ReactPropTypesSecret = require(22                          ); // 22 = ./lib/ReactPropTypesSecret
  var loggedTypeFailures = {};
}

function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;

        try {
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;
}, 23, null, "prop-types/checkPropTypes.js");
__d(/* prop-types/factoryWithThrowingShims.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(17                      ); // 17 = fbjs/lib/emptyFunction
var invariant = require(19                  ); // 19 = fbjs/lib/invariant
var ReactPropTypesSecret = require(22                          ); // 22 = ./lib/ReactPropTypesSecret

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      return;
    }
    invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };

  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
}, 24, null, "prop-types/factoryWithThrowingShims.js");
__d(/* create-react-class/factory.js */function(global, require, module, exports) {

'use strict';

var _assign = require(15             ); // 15 = object-assign

var emptyObject = require(18                    ); // 18 = fbjs/lib/emptyObject
var _invariant = require(19                  ); // 19 = fbjs/lib/invariant

if (process.env.NODE_ENV !== 'production') {
  var warning = require(16                ); // 16 = fbjs/lib/warning
}

var MIXINS_KEY = 'mixins';

function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {

  var injectedMixins = [];

  var ReactClassInterface = {
    mixins: 'DEFINE_MANY',

    statics: 'DEFINE_MANY',

    propTypes: 'DEFINE_MANY',

    contextTypes: 'DEFINE_MANY',

    childContextTypes: 'DEFINE_MANY',

    getDefaultProps: 'DEFINE_MANY_MERGED',

    getInitialState: 'DEFINE_MANY_MERGED',

    getChildContext: 'DEFINE_MANY_MERGED',

    render: 'DEFINE_ONCE',

    componentWillMount: 'DEFINE_MANY',

    componentDidMount: 'DEFINE_MANY',

    componentWillReceiveProps: 'DEFINE_MANY',

    shouldComponentUpdate: 'DEFINE_ONCE',

    componentWillUpdate: 'DEFINE_MANY',

    componentDidUpdate: 'DEFINE_MANY',

    componentWillUnmount: 'DEFINE_MANY',

    updateComponent: 'OVERRIDE_BASE'
  };

  var RESERVED_SPEC_KEYS = {
    displayName: function displayName(Constructor, _displayName) {
      Constructor.displayName = _displayName;
    },
    mixins: function mixins(Constructor, _mixins) {
      if (_mixins) {
        for (var i = 0; i < _mixins.length; i++) {
          mixSpecIntoComponent(Constructor, _mixins[i]);
        }
      }
    },
    childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
    },
    contextTypes: function contextTypes(Constructor, _contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _contextTypes, 'context');
      }
      Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
    },

    getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
      } else {
        Constructor.getDefaultProps = _getDefaultProps;
      }
    },
    propTypes: function propTypes(Constructor, _propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
    },
    statics: function statics(Constructor, _statics) {
      mixStaticSpecIntoComponent(Constructor, _statics);
    },
    autobind: function autobind() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        if (process.env.NODE_ENV !== 'production') {
          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
    }

    if (isAlreadyDefined) {
      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
    }
  }

  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
        }
      }

      return;
    }

    _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');
    _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

      var isInherited = name in Constructor;
      _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);
      Constructor[name] = property;
    }
  }

  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);
        one[key] = two[key];
      }
    }
    return one;
  }

  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function (newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function componentDidMount() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this.__isMounted = false;
    }
  };

  var ReactClassMixin = {
    replaceState: function replaceState(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    isMounted: function isMounted() {
      if (process.env.NODE_ENV !== 'production') {
        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function ReactClassComponent() {};
  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

  function createClass(spec) {
    var Constructor = identity(function (props, context, updater) {

      if (process.env.NODE_ENV !== 'production') {
        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
      }

      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          initialState = null;
        }
      }
      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

    if (process.env.NODE_ENV !== 'production') {
      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
    }

    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;
}, 25, null, "create-react-class/factory.js");
__d(/* react/cjs/react.development.js */function(global, require, module, exports) {'use strict';

var objectAssign$1 = require(15             ); // 15 = object-assign
var warning = require(16                ); // 16 = fbjs/lib/warning
var emptyObject = require(18                    ); // 18 = fbjs/lib/emptyObject
var invariant = require(19                  ); // 19 = fbjs/lib/invariant
var emptyFunction = require(17                      ); // 17 = fbjs/lib/emptyFunction
var checkPropTypes = require(23                         ); // 23 = prop-types/checkPropTypes
var propTypes = require(20          ); // 20 = prop-types
var factory = require(25                          ); // 25 = create-react-class/factory

function warnNoop(publicInstance, callerName) {
  {
    var constructor = publicInstance.constructor;
    warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass');
  }
}

var ReactNoopUpdateQueue = {
  isMounted: function isMounted(publicInstance) {
    return false;
  },

  enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var ReactNoopUpdateQueue_1 = ReactNoopUpdateQueue;

var canDefineProperty$1 = false;
{
  try {
    Object.defineProperty({}, 'x', { get: function get() {} });
    canDefineProperty$1 = true;
  } catch (x) {}
}

var canDefineProperty_1 = canDefineProperty$1;

function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue_1;
}

ReactComponent.prototype.isReactComponent = {};

ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};

ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};

{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
    if (canDefineProperty_1) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function get() {
          warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ReactPureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue_1;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;

objectAssign$1(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

var ReactBaseClasses = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler$1 = function twoArgumentPooler$1(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler$1 = function fourArgumentPooler$1(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? invariant(false, 'Trying to release an instance into a pool of a different type.') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler$1,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler$1
};

var PooledClass_1 = PooledClass;

var ReactCurrentOwner = {
  current: null
};

var ReactCurrentOwner_1 = ReactCurrentOwner;

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var ReactElementSymbol = REACT_ELEMENT_TYPE;

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown;
var specialPropRefWarningShown;

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function warnAboutAccessingKey() {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function warnAboutAccessingRef() {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
  var element = {
    $$typeof: ReactElementSymbol,

    type: type,
    key: key,
    ref: ref,
    props: props,

    _owner: owner
  };

  {
    element._store = {};

    if (canDefineProperty_1) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });

      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });

      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== ReactElementSymbol) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner_1.current, props);
};

ReactElement.createFactory = function (type) {
  var factory$$1 = ReactElement.createElement.bind(null, type);

  factory$$1.type = type;
  return factory$$1;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  var props = objectAssign$1({}, element.props);

  var key = element.key;
  var ref = element.ref;

  var self = element._self;

  var source = element._source;

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
      owner = ReactCurrentOwner_1.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === ReactElementSymbol;
};

var ReactElement_1 = ReactElement;

var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

var getIteratorFn_1 = getIteratorFn;

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

var KeyEscapeUtils_1 = KeyEscapeUtils;

var ReactTypeOfWork = {
  IndeterminateComponent: 0,
  FunctionalComponent: 1,
  ClassComponent: 2,
  HostRoot: 3,
  HostPortal: 4,
  HostComponent: 5,
  HostText: 6,
  CoroutineComponent: 7,
  CoroutineHandlerPhase: 8,
  YieldComponent: 9,
  Fragment: 10
};

function getComponentName(instanceOrFiber) {
  if (typeof instanceOrFiber.getName === 'function') {
    var instance = instanceOrFiber;
    return instance.getName();
  }
  if (typeof instanceOrFiber.tag === 'number') {
    var fiber = instanceOrFiber;
    var type = fiber.type;

    if (typeof type === 'string') {
      return type;
    }
    if (typeof type === 'function') {
      return type.displayName || type.name;
    }
  }
  return null;
}

var getComponentName_1 = getComponentName;

var IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent;
var FunctionalComponent = ReactTypeOfWork.FunctionalComponent;
var ClassComponent = ReactTypeOfWork.ClassComponent;
var HostComponent = ReactTypeOfWork.HostComponent;

function describeComponentFrame$1(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case ClassComponent:
    case HostComponent:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName_1(fiber);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName_1(owner);
      }
      return describeComponentFrame$1(name, source, ownerName);
    default:
      return '';
  }
}

function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);

    node = node['return'];
  } while (node);
  return info;
}

var ReactFiberComponentTreeHook = {
  getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1,
  describeComponentFrame: describeComponentFrame$1
};

var getStackAddendumByWorkInProgressFiber = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber;
var describeComponentFrame = ReactFiberComponentTreeHook.describeComponentFrame;

function isNative(fn) {
  var funcToString = Function.prototype.toString;
  var reIsNative = RegExp('^' + funcToString.call(Object.prototype.hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections = typeof Array.from === 'function' && typeof Map === 'function' && isNative(Map) && Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) && typeof Set === 'function' && isNative(Set) && Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function setItem(id, item) {
    itemMap.set(id, item);
  };
  getItem = function getItem(id) {
    return itemMap.get(id);
  };
  removeItem = function removeItem(id) {
    itemMap['delete'](id);
  };
  getItemIDs = function getItemIDs() {
    return Array.from(itemMap.keys());
  };

  addRoot = function addRoot(id) {
    rootIDSet.add(id);
  };
  removeRoot = function removeRoot(id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function getRootIDs() {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  var getKeyFromID = function getKeyFromID(id) {
    return '.' + id;
  };
  var getIDFromKey = function getIDFromKey(key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function setItem(id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function getItem(id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function removeItem(id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function getItemIDs() {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function addRoot(id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function removeRoot(id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function getRootIDs() {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function _getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName = void 0;

  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id);
  return describeComponentFrame(name || '', element && element._source, ownerName || '');
}

var ReactComponentTreeHook = {
  onSetChildren: function onSetChildren(id, nextChildIDs) {
    var item = getItem(id);
    invariant(item, 'Item must have been set');
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : void 0;
      !nextChild.isMounted ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
      }
      !(nextChild.parentID === id) ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.element = element;
  },
  onMountComponent: function onMountComponent(id) {
    var item = getItem(id);
    invariant(item, 'Item must have been set');
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function onUpdateComponent(id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function onUnmountComponent(id) {
    var item = getItem(id);
    if (item) {
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function purgeUnmountedComponents() {
    if (ReactComponentTreeHook._preventPurging) {
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function isMounted(id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
    var info = '';
    if (topElement) {
      var name = _getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && getComponentName_1(owner));
    }

    var currentOwner = ReactCurrentOwner_1.current;
    if (currentOwner) {
      if (typeof currentOwner.tag === 'number') {
        var workInProgress = currentOwner;

        info += getStackAddendumByWorkInProgressFiber(workInProgress);
      } else if (typeof currentOwner._debugID === 'number') {
        info += ReactComponentTreeHook.getStackAddendumByID(currentOwner._debugID);
      }
    }
    return info;
  },
  getStackAddendumByID: function getStackAddendumByID(id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function getChildIDs(id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function getDisplayName(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return _getDisplayName(element);
  },
  getElement: function getElement(id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function getOwnerID(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function getParentID(id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function getSource(id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function getText(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function getUpdateCount(id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },

  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

var ReactComponentTreeHook_1 = ReactComponentTreeHook;

{
  var _require = ReactComponentTreeHook_1,
      getCurrentStackAddendum = _require.getCurrentStackAddendum;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

var didWarnAboutMaps = false;

function getComponentKey(component, index) {
  if (typeof component === 'object' && component !== null && component.key != null) {
    return KeyEscapeUtils_1.escape(component.key);
  }

  return index.toString(36);
}

function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || type === 'object' && children.$$typeof === ReactElementSymbol) {
    callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0;
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn_1(children);
    if (iteratorFn) {
      {
        if (iteratorFn === children.entries) {
          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentStackAddendum());
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentStackAddendum();
      }
      var childrenString = '' + children;
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

var traverseAllChildren_1 = traverseAllChildren;

var twoArgumentPooler = PooledClass_1.twoArgumentPooler;
var fourArgumentPooler = PooledClass_1.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass_1.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren_1(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass_1.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement_1.isValidElement(mappedChild)) {
      mappedChild = ReactElement_1.cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren_1(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

function countChildren(children, context) {
  return traverseAllChildren_1(children, forEachSingleChildDummy, null);
}

function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

var ReactChildren_1 = ReactChildren;

var ReactDebugCurrentFrame$1 = {};

{
  var _require$2 = ReactComponentTreeHook_1,
      getStackAddendumByID = _require$2.getStackAddendumByID,
      getCurrentStackAddendum$2 = _require$2.getCurrentStackAddendum;

  var _require2$1 = ReactFiberComponentTreeHook,
      getStackAddendumByWorkInProgressFiber$2 = _require2$1.getStackAddendumByWorkInProgressFiber;

  ReactDebugCurrentFrame$1.current = null;

  ReactDebugCurrentFrame$1.element = null;

  ReactDebugCurrentFrame$1.getStackAddendum = function () {
    var stack = null;
    var current = ReactDebugCurrentFrame$1.current;
    var element = ReactDebugCurrentFrame$1.element;
    if (current !== null) {
      if (typeof current === 'number') {
        var debugID = current;
        stack = getStackAddendumByID(debugID);
      } else if (typeof current.tag === 'number') {
        var workInProgress = current;
        stack = getStackAddendumByWorkInProgressFiber$2(workInProgress);
      }
    } else if (element !== null) {
      stack = getCurrentStackAddendum$2(element);
    }
    return stack;
  };
}

var ReactDebugCurrentFrame_1 = ReactDebugCurrentFrame$1;

{
  var checkPropTypes$1 = checkPropTypes;
  var warning$2 = warning;
  var ReactDebugCurrentFrame = ReactDebugCurrentFrame_1;

  var _require$1 = ReactComponentTreeHook_1,
      getCurrentStackAddendum$1 = _require$1.getCurrentStackAddendum;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner_1.current) {
    var name = getComponentName_1(ReactCurrentOwner_1.current);
    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner_1.current) {
    childOwner = ' It was passed a child from ' + getComponentName_1(element._owner) + '.';
  }

  warning$2(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getCurrentStackAddendum$1(element));
}

function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement_1.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement_1.isValidElement(node)) {
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn_1(node);

    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement_1.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;

  var propTypes$$1 = typeof componentClass.__propTypesSecretDontUseThesePlease === 'object' ? componentClass.__propTypesSecretDontUseThesePlease : componentClass.propTypes;

  if (propTypes$$1) {
    checkPropTypes$1(propTypes$$1, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    warning$2(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
  }
}

var ReactElementValidator$2 = {
  createElement: function createElement(type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';

    if (!validType) {
      var info = '';
      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(props);
      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      info += getCurrentStackAddendum$1();

      warning$2(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
    }

    var element = ReactElement_1.createElement.apply(this, arguments);

    if (element == null) {
      return element;
    }

    {
      ReactDebugCurrentFrame.element = element;
    }

    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    {
      ReactDebugCurrentFrame.element = null;
    }

    return element;
  },

  createFactory: function createFactory(type) {
    var validatedFactory = ReactElementValidator$2.createElement.bind(null, type);

    validatedFactory.type = type;

    {
      if (canDefineProperty_1) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            warning$2(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function cloneElement(element, props, children) {
    var newElement = ReactElement_1.cloneElement.apply(this, arguments);
    {
      ReactDebugCurrentFrame.element = newElement;
    }
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    {
      ReactDebugCurrentFrame.element = null;
    }
    return newElement;
  }
};

var ReactElementValidator_1 = ReactElementValidator$2;

var createDOMFactory = ReactElement_1.createFactory;
{
  var ReactElementValidator$1 = ReactElementValidator_1;
  createDOMFactory = ReactElementValidator$1.createFactory;
}

var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

var ReactDOMFactories_1 = ReactDOMFactories;

var ReactPropTypes = propTypes;

var ReactVersion = '16.0.0-alpha.12';

function onlyChild(children) {
  !ReactElement_1.isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;
}

var onlyChild_1 = onlyChild;

var Component = ReactBaseClasses.Component;

var isValidElement = ReactElement_1.isValidElement;

var createClass = factory(Component, isValidElement, ReactNoopUpdateQueue_1);

var createElement = ReactElement_1.createElement;
var createFactory = ReactElement_1.createFactory;
var cloneElement = ReactElement_1.cloneElement;

{
  var warning$1 = warning;
  var canDefineProperty = canDefineProperty_1;
  var ReactElementValidator = ReactElementValidator_1;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var createMixin = function createMixin(mixin) {
  return mixin;
};

var React = {

  Children: {
    map: ReactChildren_1.map,
    forEach: ReactChildren_1.forEach,
    count: ReactChildren_1.count,
    toArray: ReactChildren_1.toArray,
    only: onlyChild_1
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement_1.isValidElement,

  PropTypes: ReactPropTypes,
  checkPropTypes: checkPropTypes,
  createClass: createClass,

  createFactory: createFactory,
  createMixin: createMixin,

  DOM: ReactDOMFactories_1,

  version: ReactVersion,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: ReactCurrentOwner_1
  }
};

{
  objectAssign$1(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    ReactComponentTreeHook: ReactComponentTreeHook_1,
    ReactDebugCurrentFrame: ReactDebugCurrentFrame_1
  });

  var warnedForCheckPropTypes = false;
  var warnedForCreateMixin = false;
  var warnedForCreateClass = false;
  var warnedForPropTypes = false;

  React.createMixin = function (mixin) {
    warning$1(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. You ' + 'can use this mixin directly instead.');
    warnedForCreateMixin = true;
    return mixin;
  };

  if (canDefineProperty) {
    Object.defineProperty(React, 'checkPropTypes', {
      get: function get() {
        warning$1(warnedForCheckPropTypes, 'checkPropTypes has been moved to a separate package. ' + 'Accessing React.checkPropTypes is no longer supported ' + 'and will be removed completely in React 16. ' + 'Use the prop-types package on npm instead. ' + '(https://fb.me/migrating-from-react-proptypes)');
        warnedForCheckPropTypes = true;
        return checkPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function get() {
        warning$1(warnedForCreateClass, 'React.createClass is no longer supported. Use a plain JavaScript ' + "class instead. If you're not yet ready to migrate, " + 'create-react-class is available on npm as a drop-in replacement. ' + '(https://fb.me/migrating-from-react-create-class)');
        warnedForCreateClass = true;
        return createClass;
      }
    });

    Object.defineProperty(React, 'PropTypes', {
      get: function get() {
        warning$1(warnedForPropTypes, 'PropTypes has been moved to a separate package. ' + 'Accessing React.PropTypes is no longer supported ' + 'and will be removed completely in React 16. ' + 'Use the prop-types package on npm instead. ' + '(https://fb.me/migrating-from-react-proptypes)');
        warnedForPropTypes = true;
        return ReactPropTypes;
      }
    });
  }

  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories_1).forEach(function (factory$$1) {
    React.DOM[factory$$1] = function () {
      if (!warnedForFactories) {
        warning$1(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in the future. Use the ' + 'react-addons-dom-factories package instead.', factory$$1);
        warnedForFactories = true;
      }
      return ReactDOMFactories_1[factory$$1].apply(ReactDOMFactories_1, arguments);
    };
  });
}

var React_1 = React;

module.exports = React_1;
}, 26, null, "react/cjs/react.development.js");
__d(/* react-transform-hmr/lib/index.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i['return']) _i['return']();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError('Invalid attempt to destructure non-iterable instance');
    }
  };
}();

exports['default'] = proxyReactComponents;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
}

var _reactProxy = require(28           ); // 28 = react-proxy

var _globalWindow = require(180            ); // 180 = global/window

var _globalWindow2 = _interopRequireDefault(_globalWindow);

var componentProxies = undefined;
if (_globalWindow2['default'].__reactComponentProxies) {
  componentProxies = _globalWindow2['default'].__reactComponentProxies;
} else {
  componentProxies = {};
  Object.defineProperty(_globalWindow2['default'], '__reactComponentProxies', {
    configurable: true,
    enumerable: false,
    writable: false,
    value: componentProxies
  });
}

function proxyReactComponents(_ref) {
  var filename = _ref.filename;
  var components = _ref.components;
  var imports = _ref.imports;
  var locals = _ref.locals;

  var _imports = _slicedToArray(imports, 1);

  var React = _imports[0];

  var _locals = _slicedToArray(locals, 1);

  var hot = _locals[0].hot;

  if (!React.Component) {
    throw new Error('imports[0] for react-transform-hmr does not look like React.');
  }

  if (!hot || typeof hot.accept !== 'function') {
    throw new Error('locals[0] does not appear to be a `module` object with Hot Module ' + 'replacement API enabled. You should disable react-transform-hmr in ' + 'production by using `env` section in Babel configuration. See the ' + 'example in README: https://github.com/gaearon/react-transform-hmr');
  }

  if (Object.keys(components).some(function (key) {
    return !components[key].isInFunction;
  })) {
    hot.accept(function (err) {
      if (err) {
        console.warn('[React Transform HMR] There was an error updating ' + filename + ':');
        console.error(err);
      }
    });
  }

  var forceUpdate = (0, _reactProxy.getForceUpdate)(React);

  return function wrapWithProxy(ReactClass, uniqueId) {
    var _components$uniqueId = components[uniqueId];
    var _components$uniqueId$isInFunction = _components$uniqueId.isInFunction;
    var isInFunction = _components$uniqueId$isInFunction === undefined ? false : _components$uniqueId$isInFunction;
    var _components$uniqueId$displayName = _components$uniqueId.displayName;
    var displayName = _components$uniqueId$displayName === undefined ? uniqueId : _components$uniqueId$displayName;

    if (isInFunction) {
      return ReactClass;
    }

    var globalUniqueId = filename + '$' + uniqueId;
    if (componentProxies[globalUniqueId]) {
      (function () {
        console.info('[React Transform HMR] Patching ' + displayName);
        var instances = componentProxies[globalUniqueId].update(ReactClass);
        setTimeout(function () {
          return instances.forEach(forceUpdate);
        });
      })();
    } else {
      componentProxies[globalUniqueId] = (0, _reactProxy.createProxy)(ReactClass);
    }

    return componentProxies[globalUniqueId].get();
  };
}

module.exports = exports['default'];
}, 27, null, "react-transform-hmr/lib/index.js");
__d(/* react-proxy/modules/index.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getForceUpdate = exports.createProxy = undefined;

var _supportsProtoAssignment = require(29                         ); // 29 = ./supportsProtoAssignment

var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

var _createClassProxy = require(30                  ); // 30 = ./createClassProxy

var _createClassProxy2 = _interopRequireDefault(_createClassProxy);

var _reactDeepForceUpdate = require(179                      ); // 179 = react-deep-force-update

var _reactDeepForceUpdate2 = _interopRequireDefault(_reactDeepForceUpdate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

if (!(0, _supportsProtoAssignment2.default)()) {
  console.warn('This JavaScript environment does not support __proto__. ' + 'This means that react-proxy is unable to proxy React components. ' + 'Features that rely on react-proxy, such as react-transform-hmr, ' + 'will not function as expected.');
}

exports.createProxy = _createClassProxy2.default;
exports.getForceUpdate = _reactDeepForceUpdate2.default;
}, 28, null, "react-proxy/modules/index.js");
__d(/* react-proxy/modules/supportsProtoAssignment.js */function(global, require, module, exports) {"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = supportsProtoAssignment;
var x = {};
var y = { supports: true };
try {
  x.__proto__ = y;
} catch (err) {}

function supportsProtoAssignment() {
  return x.supports || false;
};
}, 29, null, "react-proxy/modules/supportsProtoAssignment.js");
__d(/* react-proxy/modules/createClassProxy.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

exports.default = proxyClass;
exports.default = createClassProxy;

var _find = require(31           ); // 31 = lodash/find

var _find2 = _interopRequireDefault(_find);

var _createPrototypeProxy = require(152                     ); // 152 = ./createPrototypeProxy

var _createPrototypeProxy2 = _interopRequireDefault(_createPrototypeProxy);

var _bindAutoBindMethods = require(177                    ); // 177 = ./bindAutoBindMethods

var _bindAutoBindMethods2 = _interopRequireDefault(_bindAutoBindMethods);

var _deleteUnknownAutoBindMethods = require(178                             ); // 178 = ./deleteUnknownAutoBindMethods

var _deleteUnknownAutoBindMethods2 = _interopRequireDefault(_deleteUnknownAutoBindMethods);

var _supportsProtoAssignment = require(29                         ); // 29 = ./supportsProtoAssignment

var _supportsProtoAssignment2 = _interopRequireDefault(_supportsProtoAssignment);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

var RESERVED_STATICS = ['length', 'name', 'arguments', 'caller', 'prototype', 'toString'];

function isEqualDescriptor(a, b) {
  if (!a && !b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  for (var key in a) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}

var allProxies = [];
function findProxy(Component) {
  var pair = (0, _find2.default)(allProxies, function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var key = _ref2[0];
    return key === Component;
  });
  return pair ? pair[1] : null;
}
function addProxy(Component, proxy) {
  allProxies.push([Component, proxy]);
}

function proxyClass(InitialComponent) {
  var existingProxy = findProxy(InitialComponent);
  if (existingProxy) {
    return existingProxy;
  }

  var prototypeProxy = (0, _createPrototypeProxy2.default)();
  var CurrentComponent = undefined;
  var ProxyComponent = undefined;

  var staticDescriptors = {};
  function wasStaticModifiedByUser(key) {
    var currentDescriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
    return !isEqualDescriptor(staticDescriptors[key], currentDescriptor);
  }

  function instantiate(factory, context, params) {
    var component = factory();

    try {
      return component.apply(context, params);
    } catch (err) {
      (function () {
        var instance = new (Function.prototype.bind.apply(component, [null].concat(_toConsumableArray(params))))();

        Object.keys(instance).forEach(function (key) {
          if (RESERVED_STATICS.indexOf(key) > -1) {
            return;
          }
          context[key] = instance[key];
        });
      })();
    }
  }

  try {
    ProxyComponent = new Function('factory', 'instantiate', 'return function ' + (InitialComponent.name || 'ProxyComponent') + '() {\n         return instantiate(factory, this, arguments);\n      }')(function () {
      return CurrentComponent;
    }, instantiate);
  } catch (err) {
    ProxyComponent = function ProxyComponent() {
      return instantiate(function () {
        return CurrentComponent;
      }, this, arguments);
    };
  }

  ProxyComponent.prototype = prototypeProxy.get();

  ProxyComponent.toString = function toString() {
    return CurrentComponent.toString();
  };

  function update(NextComponent) {
    if (typeof NextComponent !== 'function') {
      throw new Error('Expected a constructor.');
    }

    var existingProxy = findProxy(NextComponent);
    if (existingProxy) {
      return update(existingProxy.__getCurrent());
    }

    CurrentComponent = NextComponent;

    var mountedInstances = prototypeProxy.update(NextComponent.prototype);

    ProxyComponent.prototype.constructor = ProxyComponent;

    ProxyComponent.__proto__ = NextComponent.__proto__;

    Object.getOwnPropertyNames(NextComponent).forEach(function (key) {
      if (RESERVED_STATICS.indexOf(key) > -1) {
        return;
      }

      var staticDescriptor = _extends({}, Object.getOwnPropertyDescriptor(NextComponent, key), {
        configurable: true
      });

      if (!wasStaticModifiedByUser(key)) {
        Object.defineProperty(ProxyComponent, key, staticDescriptor);
        staticDescriptors[key] = staticDescriptor;
      }
    });

    Object.getOwnPropertyNames(ProxyComponent).forEach(function (key) {
      if (RESERVED_STATICS.indexOf(key) > -1) {
        return;
      }

      if (NextComponent.hasOwnProperty(key)) {
        return;
      }

      var descriptor = Object.getOwnPropertyDescriptor(ProxyComponent, key);
      if (descriptor && !descriptor.configurable) {
        return;
      }

      if (!wasStaticModifiedByUser(key)) {
        delete ProxyComponent[key];
        delete staticDescriptors[key];
      }
    });

    ProxyComponent.displayName = NextComponent.displayName || NextComponent.name;

    mountedInstances.forEach(_bindAutoBindMethods2.default);
    mountedInstances.forEach(_deleteUnknownAutoBindMethods2.default);

    return mountedInstances;
  };

  function get() {
    return ProxyComponent;
  }

  function getCurrent() {
    return CurrentComponent;
  }

  update(InitialComponent);

  var proxy = { get: get, update: update };
  addProxy(ProxyComponent, proxy);

  Object.defineProperty(proxy, '__getCurrent', {
    configurable: false,
    writable: false,
    enumerable: false,
    value: getCurrent
  });

  return proxy;
}

function createFallback(Component) {
  var CurrentComponent = Component;

  return {
    get: function get() {
      return CurrentComponent;
    },
    update: function update(NextComponent) {
      CurrentComponent = NextComponent;
    }
  };
}

function createClassProxy(Component) {
  return Component.__proto__ && (0, _supportsProtoAssignment2.default)() ? proxyClass(Component) : createFallback(Component);
}
}, 30, null, "react-proxy/modules/createClassProxy.js");
__d(/* lodash/find.js */function(global, require, module, exports) {var createFind = require(32             ), // 32 = ./_createFind
    findIndex = require(147          ); // 147 = ./findIndex

var find = createFind(findIndex);

module.exports = find;
}, 31, null, "lodash/find.js");
__d(/* lodash/_createFind.js */function(global, require, module, exports) {var baseIteratee = require(33               ), // 33 = ./_baseIteratee
    isArrayLike = require(118            ), // 118 = ./isArrayLike
    keys = require(100     ); // 100 = ./keys

function createFind(findIndexFunc) {
  return function (collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function predicate(key) {
        return iteratee(iterable[key], key, iterable);
      };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;
}, 32, null, "lodash/_createFind.js");
__d(/* lodash/_baseIteratee.js */function(global, require, module, exports) {var baseMatches = require(34              ), // 34 = ./_baseMatches
    baseMatchesProperty = require(127                     ), // 127 = ./_baseMatchesProperty
    identity = require(143         ), // 143 = ./identity
    isArray = require(96         ), // 96 = ./isArray
    property = require(144         ); // 144 = ./property

function baseIteratee(value) {
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;
}, 33, null, "lodash/_baseIteratee.js");
__d(/* lodash/_baseMatches.js */function(global, require, module, exports) {var baseIsMatch = require(35              ), // 35 = ./_baseIsMatch
    getMatchData = require(124              ), // 124 = ./_getMatchData
    matchesStrictComparable = require(126                         ); // 126 = ./_matchesStrictComparable

function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;
}, 34, null, "lodash/_baseMatches.js");
__d(/* lodash/_baseIsMatch.js */function(global, require, module, exports) {var Stack = require(36        ), // 36 = ./_Stack
    baseIsEqual = require(80              ); // 80 = ./_baseIsEqual

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;
}, 35, null, "lodash/_baseIsMatch.js");
__d(/* lodash/_Stack.js */function(global, require, module, exports) {var ListCache = require(37            ), // 37 = ./_ListCache
    stackClear = require(45             ), // 45 = ./_stackClear
    stackDelete = require(46              ), // 46 = ./_stackDelete
    stackGet = require(47           ), // 47 = ./_stackGet
    stackHas = require(48           ), // 48 = ./_stackHas
    stackSet = require(49           ); // 49 = ./_stackSet

function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;
}, 36, null, "lodash/_Stack.js");
__d(/* lodash/_ListCache.js */function(global, require, module, exports) {var listCacheClear = require(38                 ), // 38 = ./_listCacheClear
    listCacheDelete = require(39                  ), // 39 = ./_listCacheDelete
    listCacheGet = require(42               ), // 42 = ./_listCacheGet
    listCacheHas = require(43               ), // 43 = ./_listCacheHas
    listCacheSet = require(44               ); // 44 = ./_listCacheSet

function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;
}, 37, null, "lodash/_ListCache.js");
__d(/* lodash/_listCacheClear.js */function(global, require, module, exports) {
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;
}, 38, null, "lodash/_listCacheClear.js");
__d(/* lodash/_listCacheDelete.js */function(global, require, module, exports) {var assocIndexOf = require(40               ); // 40 = ./_assocIndexOf

var arrayProto = Array.prototype;

var splice = arrayProto.splice;

function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;
}, 39, null, "lodash/_listCacheDelete.js");
__d(/* lodash/_assocIndexOf.js */function(global, require, module, exports) {var eq = require(41    ); // 41 = ./eq

function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;
}, 40, null, "lodash/_assocIndexOf.js");
__d(/* lodash/eq.js */function(global, require, module, exports) {
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;
}, 41, null, "lodash/eq.js");
__d(/* lodash/_listCacheGet.js */function(global, require, module, exports) {var assocIndexOf = require(40               ); // 40 = ./_assocIndexOf

function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;
}, 42, null, "lodash/_listCacheGet.js");
__d(/* lodash/_listCacheHas.js */function(global, require, module, exports) {var assocIndexOf = require(40               ); // 40 = ./_assocIndexOf

function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;
}, 43, null, "lodash/_listCacheHas.js");
__d(/* lodash/_listCacheSet.js */function(global, require, module, exports) {var assocIndexOf = require(40               ); // 40 = ./_assocIndexOf

function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;
}, 44, null, "lodash/_listCacheSet.js");
__d(/* lodash/_stackClear.js */function(global, require, module, exports) {var ListCache = require(37            ); // 37 = ./_ListCache

function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;
}, 45, null, "lodash/_stackClear.js");
__d(/* lodash/_stackDelete.js */function(global, require, module, exports) {
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;
}, 46, null, "lodash/_stackDelete.js");
__d(/* lodash/_stackGet.js */function(global, require, module, exports) {
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;
}, 47, null, "lodash/_stackGet.js");
__d(/* lodash/_stackHas.js */function(global, require, module, exports) {
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;
}, 48, null, "lodash/_stackHas.js");
__d(/* lodash/_stackSet.js */function(global, require, module, exports) {var ListCache = require(37            ), // 37 = ./_ListCache
    Map = require(50      ), // 50 = ./_Map
    MapCache = require(65           ); // 65 = ./_MapCache

var LARGE_ARRAY_SIZE = 200;

function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;
}, 49, null, "lodash/_stackSet.js");
__d(/* lodash/_Map.js */function(global, require, module, exports) {var getNative = require(51            ), // 51 = ./_getNative
    root = require(56       ); // 56 = ./_root

var Map = getNative(root, 'Map');

module.exports = Map;
}, 50, null, "lodash/_Map.js");
__d(/* lodash/_getNative.js */function(global, require, module, exports) {var baseIsNative = require(52               ), // 52 = ./_baseIsNative
    getValue = require(64           ); // 64 = ./_getValue

function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;
}, 51, null, "lodash/_getNative.js");
__d(/* lodash/_baseIsNative.js */function(global, require, module, exports) {var isFunction = require(53            ), // 53 = ./isFunction
    isMasked = require(61           ), // 61 = ./_isMasked
    isObject = require(60          ), // 60 = ./isObject
    toSource = require(63           ); // 63 = ./_toSource

var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

var reIsHostCtor = /^\[object .+?Constructor\]$/;

var funcProto = Function.prototype,
    objectProto = Object.prototype;

var funcToString = funcProto.toString;

var hasOwnProperty = objectProto.hasOwnProperty;

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;
}, 52, null, "lodash/_baseIsNative.js");
__d(/* lodash/isFunction.js */function(global, require, module, exports) {var baseGetTag = require(54             ), // 54 = ./_baseGetTag
    isObject = require(60          ); // 60 = ./isObject

var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

function isFunction(value) {
    if (!isObject(value)) {
        return false;
    }

    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;
}, 53, null, "lodash/isFunction.js");
__d(/* lodash/_baseGetTag.js */function(global, require, module, exports) {var Symbol = require(55         ), // 55 = ./_Symbol
    getRawTag = require(58            ), // 58 = ./_getRawTag
    objectToString = require(59                 ); // 59 = ./_objectToString

var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

var symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

function baseGetTag(value) {
    if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;
}, 54, null, "lodash/_baseGetTag.js");
__d(/* lodash/_Symbol.js */function(global, require, module, exports) {var root = require(56       ); // 56 = ./_root

var Symbol = root.Symbol;

module.exports = Symbol;
}, 55, null, "lodash/_Symbol.js");
__d(/* lodash/_root.js */function(global, require, module, exports) {var freeGlobal = require(57             ); // 57 = ./_freeGlobal

var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;
}, 56, null, "lodash/_root.js");
__d(/* lodash/_freeGlobal.js */function(global, require, module, exports) {
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;
}, 57, null, "lodash/_freeGlobal.js");
__d(/* lodash/_getRawTag.js */function(global, require, module, exports) {var Symbol = require(55         ); // 55 = ./_Symbol

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

var nativeObjectToString = objectProto.toString;

var symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;
}, 58, null, "lodash/_getRawTag.js");
__d(/* lodash/_objectToString.js */function(global, require, module, exports) {
var objectProto = Object.prototype;

var nativeObjectToString = objectProto.toString;

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;
}, 59, null, "lodash/_objectToString.js");
__d(/* lodash/isObject.js */function(global, require, module, exports) {
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;
}, 60, null, "lodash/isObject.js");
__d(/* lodash/_isMasked.js */function(global, require, module, exports) {var coreJsData = require(62             ); // 62 = ./_coreJsData

var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();

function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;
}, 61, null, "lodash/_isMasked.js");
__d(/* lodash/_coreJsData.js */function(global, require, module, exports) {var root = require(56       ); // 56 = ./_root

var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;
}, 62, null, "lodash/_coreJsData.js");
__d(/* lodash/_toSource.js */function(global, require, module, exports) {
var funcProto = Function.prototype;

var funcToString = funcProto.toString;

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return func + '';
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;
}, 63, null, "lodash/_toSource.js");
__d(/* lodash/_getValue.js */function(global, require, module, exports) {
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;
}, 64, null, "lodash/_getValue.js");
__d(/* lodash/_MapCache.js */function(global, require, module, exports) {var mapCacheClear = require(66                ), // 66 = ./_mapCacheClear
    mapCacheDelete = require(74                 ), // 74 = ./_mapCacheDelete
    mapCacheGet = require(77              ), // 77 = ./_mapCacheGet
    mapCacheHas = require(78              ), // 78 = ./_mapCacheHas
    mapCacheSet = require(79              ); // 79 = ./_mapCacheSet

function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;
}, 65, null, "lodash/_MapCache.js");
__d(/* lodash/_mapCacheClear.js */function(global, require, module, exports) {var Hash = require(67       ), // 67 = ./_Hash
    ListCache = require(37            ), // 37 = ./_ListCache
    Map = require(50      ); // 50 = ./_Map

function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;
}, 66, null, "lodash/_mapCacheClear.js");
__d(/* lodash/_Hash.js */function(global, require, module, exports) {var hashClear = require(68            ), // 68 = ./_hashClear
    hashDelete = require(70             ), // 70 = ./_hashDelete
    hashGet = require(71          ), // 71 = ./_hashGet
    hashHas = require(72          ), // 72 = ./_hashHas
    hashSet = require(73          ); // 73 = ./_hashSet

function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}

Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;
}, 67, null, "lodash/_Hash.js");
__d(/* lodash/_hashClear.js */function(global, require, module, exports) {var nativeCreate = require(69               ); // 69 = ./_nativeCreate

function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;
}, 68, null, "lodash/_hashClear.js");
__d(/* lodash/_nativeCreate.js */function(global, require, module, exports) {var getNative = require(51            ); // 51 = ./_getNative

var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;
}, 69, null, "lodash/_nativeCreate.js");
__d(/* lodash/_hashDelete.js */function(global, require, module, exports) {
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;
}, 70, null, "lodash/_hashDelete.js");
__d(/* lodash/_hashGet.js */function(global, require, module, exports) {var nativeCreate = require(69               ); // 69 = ./_nativeCreate

var HASH_UNDEFINED = '__lodash_hash_undefined__';

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;
}, 71, null, "lodash/_hashGet.js");
__d(/* lodash/_hashHas.js */function(global, require, module, exports) {var nativeCreate = require(69               ); // 69 = ./_nativeCreate

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;
}, 72, null, "lodash/_hashHas.js");
__d(/* lodash/_hashSet.js */function(global, require, module, exports) {var nativeCreate = require(69               ); // 69 = ./_nativeCreate

var HASH_UNDEFINED = '__lodash_hash_undefined__';

function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;
}, 73, null, "lodash/_hashSet.js");
__d(/* lodash/_mapCacheDelete.js */function(global, require, module, exports) {var getMapData = require(75             ); // 75 = ./_getMapData

function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;
}, 74, null, "lodash/_mapCacheDelete.js");
__d(/* lodash/_getMapData.js */function(global, require, module, exports) {var isKeyable = require(76            ); // 76 = ./_isKeyable

function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;
}, 75, null, "lodash/_getMapData.js");
__d(/* lodash/_isKeyable.js */function(global, require, module, exports) {
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;
}, 76, null, "lodash/_isKeyable.js");
__d(/* lodash/_mapCacheGet.js */function(global, require, module, exports) {var getMapData = require(75             ); // 75 = ./_getMapData

function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;
}, 77, null, "lodash/_mapCacheGet.js");
__d(/* lodash/_mapCacheHas.js */function(global, require, module, exports) {var getMapData = require(75             ); // 75 = ./_getMapData

function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;
}, 78, null, "lodash/_mapCacheHas.js");
__d(/* lodash/_mapCacheSet.js */function(global, require, module, exports) {var getMapData = require(75             ); // 75 = ./_getMapData

function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;
}, 79, null, "lodash/_mapCacheSet.js");
__d(/* lodash/_baseIsEqual.js */function(global, require, module, exports) {var baseIsEqualDeep = require(81                  ), // 81 = ./_baseIsEqualDeep
    isObjectLike = require(105             ); // 105 = ./isObjectLike

function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;
}, 80, null, "lodash/_baseIsEqual.js");
__d(/* lodash/_baseIsEqualDeep.js */function(global, require, module, exports) {var Stack = require(36        ), // 36 = ./_Stack
    equalArrays = require(82              ), // 82 = ./_equalArrays
    equalByTag = require(88             ), // 88 = ./_equalByTag
    equalObjects = require(92               ), // 92 = ./_equalObjects
    getTag = require(119        ), // 119 = ./_getTag
    isArray = require(96         ), // 96 = ./isArray
    isBuffer = require(106         ), // 106 = ./isBuffer
    isTypedArray = require(109             ); // 109 = ./isTypedArray

var COMPARE_PARTIAL_FLAG = 1;

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;
}, 81, null, "lodash/_baseIsEqualDeep.js");
__d(/* lodash/_equalArrays.js */function(global, require, module, exports) {var SetCache = require(83           ), // 83 = ./_SetCache
    arraySome = require(86            ), // 86 = ./_arraySome
    cacheHas = require(87           ); // 87 = ./_cacheHas

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }

  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

  stack.set(array, other);
  stack.set(other, array);

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }

    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;
}, 82, null, "lodash/_equalArrays.js");
__d(/* lodash/_SetCache.js */function(global, require, module, exports) {var MapCache = require(65           ), // 65 = ./_MapCache
    setCacheAdd = require(84              ), // 84 = ./_setCacheAdd
    setCacheHas = require(85              ); // 85 = ./_setCacheHas

function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
        this.add(values[index]);
    }
}

SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;
}, 83, null, "lodash/_SetCache.js");
__d(/* lodash/_setCacheAdd.js */function(global, require, module, exports) {
var HASH_UNDEFINED = '__lodash_hash_undefined__';

function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;
}, 84, null, "lodash/_setCacheAdd.js");
__d(/* lodash/_setCacheHas.js */function(global, require, module, exports) {
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;
}, 85, null, "lodash/_setCacheHas.js");
__d(/* lodash/_arraySome.js */function(global, require, module, exports) {
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;
}, 86, null, "lodash/_arraySome.js");
__d(/* lodash/_cacheHas.js */function(global, require, module, exports) {
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;
}, 87, null, "lodash/_cacheHas.js");
__d(/* lodash/_equalByTag.js */function(global, require, module, exports) {var Symbol = require(55         ), // 55 = ./_Symbol
    Uint8Array = require(89             ), // 89 = ./_Uint8Array
    eq = require(41    ), // 41 = ./eq
    equalArrays = require(82              ), // 82 = ./_equalArrays
    mapToArray = require(90             ), // 90 = ./_mapToArray
    setToArray = require(91             ); // 91 = ./_setToArray

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }

      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;
}, 88, null, "lodash/_equalByTag.js");
__d(/* lodash/_Uint8Array.js */function(global, require, module, exports) {var root = require(56       ); // 56 = ./_root

var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;
}, 89, null, "lodash/_Uint8Array.js");
__d(/* lodash/_mapToArray.js */function(global, require, module, exports) {
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;
}, 90, null, "lodash/_mapToArray.js");
__d(/* lodash/_setToArray.js */function(global, require, module, exports) {
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;
}, 91, null, "lodash/_setToArray.js");
__d(/* lodash/_equalObjects.js */function(global, require, module, exports) {var getAllKeys = require(93             ); // 93 = ./_getAllKeys

var COMPARE_PARTIAL_FLAG = 1;

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }

  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }

    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;
}, 92, null, "lodash/_equalObjects.js");
__d(/* lodash/_getAllKeys.js */function(global, require, module, exports) {var baseGetAllKeys = require(94                 ), // 94 = ./_baseGetAllKeys
    getSymbols = require(97             ), // 97 = ./_getSymbols
    keys = require(100     ); // 100 = ./keys

function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;
}, 93, null, "lodash/_getAllKeys.js");
__d(/* lodash/_baseGetAllKeys.js */function(global, require, module, exports) {var arrayPush = require(95            ), // 95 = ./_arrayPush
    isArray = require(96         ); // 96 = ./isArray

function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;
}, 94, null, "lodash/_baseGetAllKeys.js");
__d(/* lodash/_arrayPush.js */function(global, require, module, exports) {
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;
}, 95, null, "lodash/_arrayPush.js");
__d(/* lodash/isArray.js */function(global, require, module, exports) {
var isArray = Array.isArray;

module.exports = isArray;
}, 96, null, "lodash/isArray.js");
__d(/* lodash/_getSymbols.js */function(global, require, module, exports) {var arrayFilter = require(98              ), // 98 = ./_arrayFilter
    stubArray = require(99           ); // 99 = ./stubArray

var objectProto = Object.prototype;

var propertyIsEnumerable = objectProto.propertyIsEnumerable;

var nativeGetSymbols = Object.getOwnPropertySymbols;

var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;
}, 97, null, "lodash/_getSymbols.js");
__d(/* lodash/_arrayFilter.js */function(global, require, module, exports) {
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;
}, 98, null, "lodash/_arrayFilter.js");
__d(/* lodash/stubArray.js */function(global, require, module, exports) {
function stubArray() {
  return [];
}

module.exports = stubArray;
}, 99, null, "lodash/stubArray.js");
__d(/* lodash/keys.js */function(global, require, module, exports) {var arrayLikeKeys = require(101               ), // 101 = ./_arrayLikeKeys
    baseKeys = require(114          ), // 114 = ./_baseKeys
    isArrayLike = require(118            ); // 118 = ./isArrayLike

function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;
}, 100, null, "lodash/keys.js");
__d(/* lodash/_arrayLikeKeys.js */function(global, require, module, exports) {var baseTimes = require(102           ), // 102 = ./_baseTimes
    isArguments = require(103            ), // 103 = ./isArguments
    isArray = require(96         ), // 96 = ./isArray
    isBuffer = require(106         ), // 106 = ./isBuffer
    isIndex = require(108         ), // 108 = ./_isIndex
    isTypedArray = require(109             ); // 109 = ./isTypedArray

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;
}, 101, null, "lodash/_arrayLikeKeys.js");
__d(/* lodash/_baseTimes.js */function(global, require, module, exports) {
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;
}, 102, null, "lodash/_baseTimes.js");
__d(/* lodash/isArguments.js */function(global, require, module, exports) {var baseIsArguments = require(104                 ), // 104 = ./_baseIsArguments
    isObjectLike = require(105             ); // 105 = ./isObjectLike

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

var propertyIsEnumerable = objectProto.propertyIsEnumerable;

var isArguments = baseIsArguments(function () {
    return arguments;
}()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;
}, 103, null, "lodash/isArguments.js");
__d(/* lodash/_baseIsArguments.js */function(global, require, module, exports) {var baseGetTag = require(54             ), // 54 = ./_baseGetTag
    isObjectLike = require(105             ); // 105 = ./isObjectLike

var argsTag = '[object Arguments]';

function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;
}, 104, null, "lodash/_baseIsArguments.js");
__d(/* lodash/isObjectLike.js */function(global, require, module, exports) {
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;
}, 105, null, "lodash/isObjectLike.js");
__d(/* lodash/isBuffer.js */function(global, require, module, exports) {var root = require(56       ), // 56 = ./_root
    stubFalse = require(107          ); // 107 = ./stubFalse

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

var moduleExports = freeModule && freeModule.exports === freeExports;

var Buffer = moduleExports ? root.Buffer : undefined;

var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;
}, 106, null, "lodash/isBuffer.js");
__d(/* lodash/stubFalse.js */function(global, require, module, exports) {
function stubFalse() {
  return false;
}

module.exports = stubFalse;
}, 107, null, "lodash/stubFalse.js");
__d(/* lodash/_isIndex.js */function(global, require, module, exports) {
var MAX_SAFE_INTEGER = 9007199254740991;

var reIsUint = /^(?:0|[1-9]\d*)$/;

function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;
}, 108, null, "lodash/_isIndex.js");
__d(/* lodash/isTypedArray.js */function(global, require, module, exports) {var baseIsTypedArray = require(110                  ), // 110 = ./_baseIsTypedArray
    baseUnary = require(112           ), // 112 = ./_baseUnary
    nodeUtil = require(113          ); // 113 = ./_nodeUtil

var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;
}, 109, null, "lodash/isTypedArray.js");
__d(/* lodash/_baseIsTypedArray.js */function(global, require, module, exports) {var baseGetTag = require(54             ), // 54 = ./_baseGetTag
    isLength = require(111         ), // 111 = ./isLength
    isObjectLike = require(105             ); // 105 = ./isObjectLike

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;
}, 110, null, "lodash/_baseIsTypedArray.js");
__d(/* lodash/isLength.js */function(global, require, module, exports) {
var MAX_SAFE_INTEGER = 9007199254740991;

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;
}, 111, null, "lodash/isLength.js");
__d(/* lodash/_baseUnary.js */function(global, require, module, exports) {
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;
}, 112, null, "lodash/_baseUnary.js");
__d(/* lodash/_nodeUtil.js */function(global, require, module, exports) {var freeGlobal = require(57             ); // 57 = ./_freeGlobal

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

var moduleExports = freeModule && freeModule.exports === freeExports;

var freeProcess = moduleExports && freeGlobal.process;

var nodeUtil = function () {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;
}, 113, null, "lodash/_nodeUtil.js");
__d(/* lodash/_baseKeys.js */function(global, require, module, exports) {var isPrototype = require(115             ), // 115 = ./_isPrototype
    nativeKeys = require(116            ); // 116 = ./_nativeKeys

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;
}, 114, null, "lodash/_baseKeys.js");
__d(/* lodash/_isPrototype.js */function(global, require, module, exports) {
var objectProto = Object.prototype;

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

  return value === proto;
}

module.exports = isPrototype;
}, 115, null, "lodash/_isPrototype.js");
__d(/* lodash/_nativeKeys.js */function(global, require, module, exports) {var overArg = require(117         ); // 117 = ./_overArg

var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;
}, 116, null, "lodash/_nativeKeys.js");
__d(/* lodash/_overArg.js */function(global, require, module, exports) {
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;
}, 117, null, "lodash/_overArg.js");
__d(/* lodash/isArrayLike.js */function(global, require, module, exports) {var isFunction = require(53            ), // 53 = ./isFunction
    isLength = require(111         ); // 111 = ./isLength

function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;
}, 118, null, "lodash/isArrayLike.js");
__d(/* lodash/_getTag.js */function(global, require, module, exports) {var DataView = require(120          ), // 120 = ./_DataView
    Map = require(50      ), // 50 = ./_Map
    Promise = require(121         ), // 121 = ./_Promise
    Set = require(122     ), // 122 = ./_Set
    WeakMap = require(123         ), // 123 = ./_WeakMap
    baseGetTag = require(54             ), // 54 = ./_baseGetTag
    toSource = require(63           ); // 63 = ./_toSource

var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

var getTag = baseGetTag;

if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
            switch (ctorString) {
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
        }
        return result;
    };
}

module.exports = getTag;
}, 119, null, "lodash/_getTag.js");
__d(/* lodash/_DataView.js */function(global, require, module, exports) {var getNative = require(51            ), // 51 = ./_getNative
    root = require(56       ); // 56 = ./_root

var DataView = getNative(root, 'DataView');

module.exports = DataView;
}, 120, null, "lodash/_DataView.js");
__d(/* lodash/_Promise.js */function(global, require, module, exports) {var getNative = require(51            ), // 51 = ./_getNative
    root = require(56       ); // 56 = ./_root

var Promise = getNative(root, 'Promise');

module.exports = Promise;
}, 121, null, "lodash/_Promise.js");
__d(/* lodash/_Set.js */function(global, require, module, exports) {var getNative = require(51            ), // 51 = ./_getNative
    root = require(56       ); // 56 = ./_root

var Set = getNative(root, 'Set');

module.exports = Set;
}, 122, null, "lodash/_Set.js");
__d(/* lodash/_WeakMap.js */function(global, require, module, exports) {var getNative = require(51            ), // 51 = ./_getNative
    root = require(56       ); // 56 = ./_root

var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;
}, 123, null, "lodash/_WeakMap.js");
__d(/* lodash/_getMatchData.js */function(global, require, module, exports) {var isStrictComparable = require(125                    ), // 125 = ./_isStrictComparable
    keys = require(100     ); // 100 = ./keys

function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
}

module.exports = getMatchData;
}, 124, null, "lodash/_getMatchData.js");
__d(/* lodash/_isStrictComparable.js */function(global, require, module, exports) {var isObject = require(60          ); // 60 = ./isObject

function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;
}, 125, null, "lodash/_isStrictComparable.js");
__d(/* lodash/_matchesStrictComparable.js */function(global, require, module, exports) {
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;
}, 126, null, "lodash/_matchesStrictComparable.js");
__d(/* lodash/_baseMatchesProperty.js */function(global, require, module, exports) {var baseIsEqual = require(80              ), // 80 = ./_baseIsEqual
    get = require(128    ), // 128 = ./get
    hasIn = require(140      ), // 140 = ./hasIn
    isKey = require(131       ), // 131 = ./_isKey
    isStrictComparable = require(125                    ), // 125 = ./_isStrictComparable
    matchesStrictComparable = require(126                         ), // 126 = ./_matchesStrictComparable
    toKey = require(139       ); // 139 = ./_toKey

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;
}, 127, null, "lodash/_baseMatchesProperty.js");
__d(/* lodash/get.js */function(global, require, module, exports) {var baseGet = require(129         ); // 129 = ./_baseGet

function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;
}, 128, null, "lodash/get.js");
__d(/* lodash/_baseGet.js */function(global, require, module, exports) {var castPath = require(130          ), // 130 = ./_castPath
    toKey = require(139       ); // 139 = ./_toKey

function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return index && index == length ? object : undefined;
}

module.exports = baseGet;
}, 129, null, "lodash/_baseGet.js");
__d(/* lodash/_castPath.js */function(global, require, module, exports) {var isArray = require(96         ), // 96 = ./isArray
    isKey = require(131       ), // 131 = ./_isKey
    stringToPath = require(133              ), // 133 = ./_stringToPath
    toString = require(136         ); // 136 = ./toString

function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;
}, 130, null, "lodash/_castPath.js");
__d(/* lodash/_isKey.js */function(global, require, module, exports) {var isArray = require(96         ), // 96 = ./isArray
    isSymbol = require(132         ); // 132 = ./isSymbol

var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;
}, 131, null, "lodash/_isKey.js");
__d(/* lodash/isSymbol.js */function(global, require, module, exports) {var baseGetTag = require(54             ), // 54 = ./_baseGetTag
    isObjectLike = require(105             ); // 105 = ./isObjectLike

var symbolTag = '[object Symbol]';

function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;
}, 132, null, "lodash/isSymbol.js");
__d(/* lodash/_stringToPath.js */function(global, require, module, exports) {var memoizeCapped = require(134               ); // 134 = ./_memoizeCapped

var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

var reEscapeChar = /\\(\\)?/g;

var stringToPath = memoizeCapped(function (string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function (match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});

module.exports = stringToPath;
}, 133, null, "lodash/_stringToPath.js");
__d(/* lodash/_memoizeCapped.js */function(global, require, module, exports) {var memoize = require(135        ); // 135 = ./memoize

var MAX_MEMOIZE_SIZE = 500;

function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;
}, 134, null, "lodash/_memoizeCapped.js");
__d(/* lodash/memoize.js */function(global, require, module, exports) {var MapCache = require(65           ); // 65 = ./_MapCache

var FUNC_ERROR_TEXT = 'Expected a function';

function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function memoized() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
}

memoize.Cache = MapCache;

module.exports = memoize;
}, 135, null, "lodash/memoize.js");
__d(/* lodash/toString.js */function(global, require, module, exports) {var baseToString = require(137              ); // 137 = ./_baseToString

function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;
}, 136, null, "lodash/toString.js");
__d(/* lodash/_baseToString.js */function(global, require, module, exports) {var Symbol = require(55         ), // 55 = ./_Symbol
    arrayMap = require(138          ), // 138 = ./_arrayMap
    isArray = require(96         ), // 96 = ./isArray
    isSymbol = require(132         ); // 132 = ./isSymbol

var INFINITY = 1 / 0;

var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

function baseToString(value) {
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;
}, 137, null, "lodash/_baseToString.js");
__d(/* lodash/_arrayMap.js */function(global, require, module, exports) {
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;
}, 138, null, "lodash/_arrayMap.js");
__d(/* lodash/_toKey.js */function(global, require, module, exports) {var isSymbol = require(132         ); // 132 = ./isSymbol

var INFINITY = 1 / 0;

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;
}, 139, null, "lodash/_toKey.js");
__d(/* lodash/hasIn.js */function(global, require, module, exports) {var baseHasIn = require(141           ), // 141 = ./_baseHasIn
    hasPath = require(142         ); // 142 = ./_hasPath

function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;
}, 140, null, "lodash/hasIn.js");
__d(/* lodash/_baseHasIn.js */function(global, require, module, exports) {
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;
}, 141, null, "lodash/_baseHasIn.js");
__d(/* lodash/_hasPath.js */function(global, require, module, exports) {var castPath = require(130          ), // 130 = ./_castPath
    isArguments = require(103            ), // 103 = ./isArguments
    isArray = require(96         ), // 96 = ./isArray
    isIndex = require(108         ), // 108 = ./_isIndex
    isLength = require(111         ), // 111 = ./isLength
    toKey = require(139       ); // 139 = ./_toKey

function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;
}, 142, null, "lodash/_hasPath.js");
__d(/* lodash/identity.js */function(global, require, module, exports) {
function identity(value) {
  return value;
}

module.exports = identity;
}, 143, null, "lodash/identity.js");
__d(/* lodash/property.js */function(global, require, module, exports) {var baseProperty = require(145              ), // 145 = ./_baseProperty
    basePropertyDeep = require(146                  ), // 146 = ./_basePropertyDeep
    isKey = require(131       ), // 131 = ./_isKey
    toKey = require(139       ); // 139 = ./_toKey

function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;
}, 144, null, "lodash/property.js");
__d(/* lodash/_baseProperty.js */function(global, require, module, exports) {
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;
}, 145, null, "lodash/_baseProperty.js");
__d(/* lodash/_basePropertyDeep.js */function(global, require, module, exports) {var baseGet = require(129         ); // 129 = ./_baseGet

function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;
}, 146, null, "lodash/_basePropertyDeep.js");
__d(/* lodash/findIndex.js */function(global, require, module, exports) {var baseFindIndex = require(148               ), // 148 = ./_baseFindIndex
    baseIteratee = require(33               ), // 33 = ./_baseIteratee
    toInteger = require(149          ); // 149 = ./toInteger

var nativeMax = Math.max;

function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;
}, 147, null, "lodash/findIndex.js");
__d(/* lodash/_baseFindIndex.js */function(global, require, module, exports) {
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;
}, 148, null, "lodash/_baseFindIndex.js");
__d(/* lodash/toInteger.js */function(global, require, module, exports) {var toFinite = require(150         ); // 150 = ./toFinite

function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? remainder ? result - remainder : result : 0;
}

module.exports = toInteger;
}, 149, null, "lodash/toInteger.js");
__d(/* lodash/toFinite.js */function(global, require, module, exports) {var toNumber = require(151         ); // 151 = ./toNumber

var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;
}, 150, null, "lodash/toFinite.js");
__d(/* lodash/toNumber.js */function(global, require, module, exports) {var isObject = require(60          ), // 60 = ./isObject
    isSymbol = require(132         ); // 132 = ./isSymbol

var NAN = 0 / 0;

var reTrim = /^\s+|\s+$/g;

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

var reIsBinary = /^0b[01]+$/i;

var reIsOctal = /^0o[0-7]+$/i;

var freeParseInt = parseInt;

function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;
}, 151, null, "lodash/toNumber.js");
__d(/* react-proxy/modules/createPrototypeProxy.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPrototypeProxy;

var _assign = require(153            ); // 153 = lodash/assign

var _assign2 = _interopRequireDefault(_assign);

var _difference = require(167                ); // 167 = lodash/difference

var _difference2 = _interopRequireDefault(_difference);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function createPrototypeProxy() {
  var proxy = {};
  var current = null;
  var mountedInstances = [];

  function proxyToString(name) {
    return function toString() {
      if (typeof current[name] === 'function') {
        return current[name].toString();
      } else {
        return '<method was deleted>';
      }
    };
  }

  function proxyMethod(name) {
    var proxiedMethod = function proxiedMethod() {
      if (typeof current[name] === 'function') {
        return current[name].apply(this, arguments);
      }
    };

    (0, _assign2.default)(proxiedMethod, current[name]);
    proxiedMethod.toString = proxyToString(name);

    return proxiedMethod;
  }

  function proxiedComponentDidMount() {
    mountedInstances.push(this);
    if (typeof current.componentDidMount === 'function') {
      return current.componentDidMount.apply(this, arguments);
    }
  }
  proxiedComponentDidMount.toString = proxyToString('componentDidMount');

  function proxiedComponentWillUnmount() {
    var index = mountedInstances.indexOf(this);

    if (index !== -1) {
      mountedInstances.splice(index, 1);
    }
    if (typeof current.componentWillUnmount === 'function') {
      return current.componentWillUnmount.apply(this, arguments);
    }
  }
  proxiedComponentWillUnmount.toString = proxyToString('componentWillUnmount');

  function defineProxyProperty(name, descriptor) {
    Object.defineProperty(proxy, name, descriptor);
  }

  function defineProxyPropertyWithValue(name, value) {
    var _ref = Object.getOwnPropertyDescriptor(current, name) || {};

    var _ref$enumerable = _ref.enumerable;
    var enumerable = _ref$enumerable === undefined ? false : _ref$enumerable;
    var _ref$writable = _ref.writable;
    var writable = _ref$writable === undefined ? true : _ref$writable;

    defineProxyProperty(name, {
      configurable: true,
      enumerable: enumerable,
      writable: writable,
      value: value
    });
  }

  function createAutoBindMap() {
    if (!current.__reactAutoBindMap) {
      return;
    }

    var __reactAutoBindMap = {};
    for (var name in current.__reactAutoBindMap) {
      if (typeof proxy[name] === 'function' && current.__reactAutoBindMap.hasOwnProperty(name)) {
        __reactAutoBindMap[name] = proxy[name];
      }
    }

    return __reactAutoBindMap;
  }

  function createAutoBindPairs() {
    var __reactAutoBindPairs = [];

    for (var i = 0; i < current.__reactAutoBindPairs.length; i += 2) {
      var name = current.__reactAutoBindPairs[i];
      var method = proxy[name];

      if (typeof method === 'function') {
        __reactAutoBindPairs.push(name, method);
      }
    }

    return __reactAutoBindPairs;
  }

  function update(next) {
    current = next;

    var currentNames = Object.getOwnPropertyNames(current);
    var previousName = Object.getOwnPropertyNames(proxy);
    var removedNames = (0, _difference2.default)(previousName, currentNames);

    removedNames.forEach(function (name) {
      delete proxy[name];
    });

    currentNames.forEach(function (name) {
      var descriptor = Object.getOwnPropertyDescriptor(current, name);
      if (typeof descriptor.value === 'function') {
        defineProxyPropertyWithValue(name, proxyMethod(name));
      } else {
        defineProxyProperty(name, descriptor);
      }
    });

    defineProxyPropertyWithValue('componentDidMount', proxiedComponentDidMount);
    defineProxyPropertyWithValue('componentWillUnmount', proxiedComponentWillUnmount);

    if (current.hasOwnProperty('__reactAutoBindMap')) {
      defineProxyPropertyWithValue('__reactAutoBindMap', createAutoBindMap());
    }

    if (current.hasOwnProperty('__reactAutoBindPairs')) {
      defineProxyPropertyWithValue('__reactAutoBindPairs', createAutoBindPairs());
    }

    proxy.__proto__ = next;

    return mountedInstances;
  }

  function get() {
    return proxy;
  }

  return {
    update: update,
    get: get
  };
};
}, 152, null, "react-proxy/modules/createPrototypeProxy.js");
__d(/* lodash/assign.js */function(global, require, module, exports) {var assignValue = require(154             ), // 154 = ./_assignValue
    copyObject = require(157            ), // 157 = ./_copyObject
    createAssigner = require(158                ), // 158 = ./_createAssigner
    isArrayLike = require(118            ), // 118 = ./isArrayLike
    isPrototype = require(115             ), // 115 = ./_isPrototype
    keys = require(100     ); // 100 = ./keys

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

var assign = createAssigner(function (object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});

module.exports = assign;
}, 153, null, "lodash/assign.js");
__d(/* lodash/_assignValue.js */function(global, require, module, exports) {var baseAssignValue = require(155                 ), // 155 = ./_baseAssignValue
    eq = require(41    ); // 41 = ./eq

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;
}, 154, null, "lodash/_assignValue.js");
__d(/* lodash/_baseAssignValue.js */function(global, require, module, exports) {var defineProperty = require(156                ); // 156 = ./_defineProperty

function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;
}, 155, null, "lodash/_baseAssignValue.js");
__d(/* lodash/_defineProperty.js */function(global, require, module, exports) {var getNative = require(51            ); // 51 = ./_getNative

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

module.exports = defineProperty;
}, 156, null, "lodash/_defineProperty.js");
__d(/* lodash/_copyObject.js */function(global, require, module, exports) {var assignValue = require(154             ), // 154 = ./_assignValue
    baseAssignValue = require(155                 ); // 155 = ./_baseAssignValue

function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;
}, 157, null, "lodash/_copyObject.js");
__d(/* lodash/_createAssigner.js */function(global, require, module, exports) {var baseRest = require(159          ), // 159 = ./_baseRest
    isIterateeCall = require(166                ); // 166 = ./_isIterateeCall

function createAssigner(assigner) {
  return baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;
}, 158, null, "lodash/_createAssigner.js");
__d(/* lodash/_baseRest.js */function(global, require, module, exports) {var identity = require(143         ), // 143 = ./identity
    overRest = require(160          ), // 160 = ./_overRest
    setToString = require(162             ); // 162 = ./_setToString

function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;
}, 159, null, "lodash/_baseRest.js");
__d(/* lodash/_overRest.js */function(global, require, module, exports) {var apply = require(161       ); // 161 = ./_apply

var nativeMax = Math.max;

function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;
}, 160, null, "lodash/_overRest.js");
__d(/* lodash/_apply.js */function(global, require, module, exports) {
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);
    case 1:
      return func.call(thisArg, args[0]);
    case 2:
      return func.call(thisArg, args[0], args[1]);
    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;
}, 161, null, "lodash/_apply.js");
__d(/* lodash/_setToString.js */function(global, require, module, exports) {var baseSetToString = require(163                 ), // 163 = ./_baseSetToString
    shortOut = require(165          ); // 165 = ./_shortOut

var setToString = shortOut(baseSetToString);

module.exports = setToString;
}, 162, null, "lodash/_setToString.js");
__d(/* lodash/_baseSetToString.js */function(global, require, module, exports) {var constant = require(164         ), // 164 = ./constant
    defineProperty = require(156                ), // 156 = ./_defineProperty
    identity = require(143         ); // 143 = ./identity

var baseSetToString = !defineProperty ? identity : function (func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;
}, 163, null, "lodash/_baseSetToString.js");
__d(/* lodash/constant.js */function(global, require, module, exports) {
function constant(value) {
  return function () {
    return value;
  };
}

module.exports = constant;
}, 164, null, "lodash/constant.js");
__d(/* lodash/_shortOut.js */function(global, require, module, exports) {
var HOT_COUNT = 800,
    HOT_SPAN = 16;

var nativeNow = Date.now;

function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;
}, 165, null, "lodash/_shortOut.js");
__d(/* lodash/_isIterateeCall.js */function(global, require, module, exports) {var eq = require(41    ), // 41 = ./eq
    isArrayLike = require(118            ), // 118 = ./isArrayLike
    isIndex = require(108         ), // 108 = ./_isIndex
    isObject = require(60          ); // 60 = ./isObject

function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;
}, 166, null, "lodash/_isIterateeCall.js");
__d(/* lodash/difference.js */function(global, require, module, exports) {var baseDifference = require(168                ), // 168 = ./_baseDifference
    baseFlatten = require(174             ), // 174 = ./_baseFlatten
    baseRest = require(159          ), // 159 = ./_baseRest
    isArrayLikeObject = require(176                  ); // 176 = ./isArrayLikeObject

var difference = baseRest(function (array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
});

module.exports = difference;
}, 167, null, "lodash/difference.js");
__d(/* lodash/_baseDifference.js */function(global, require, module, exports) {var SetCache = require(83           ), // 83 = ./_SetCache
    arrayIncludes = require(169               ), // 169 = ./_arrayIncludes
    arrayIncludesWith = require(173                   ), // 173 = ./_arrayIncludesWith
    arrayMap = require(138          ), // 138 = ./_arrayMap
    baseUnary = require(112           ), // 112 = ./_baseUnary
    cacheHas = require(87           ); // 87 = ./_cacheHas

var LARGE_ARRAY_SIZE = 200;

function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = comparator || value !== 0 ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    } else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;
}, 168, null, "lodash/_baseDifference.js");
__d(/* lodash/_arrayIncludes.js */function(global, require, module, exports) {var baseIndexOf = require(170             ); // 170 = ./_baseIndexOf

function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;
}, 169, null, "lodash/_arrayIncludes.js");
__d(/* lodash/_baseIndexOf.js */function(global, require, module, exports) {var baseFindIndex = require(148               ), // 148 = ./_baseFindIndex
    baseIsNaN = require(171           ), // 171 = ./_baseIsNaN
    strictIndexOf = require(172               ); // 172 = ./_strictIndexOf

function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;
}, 170, null, "lodash/_baseIndexOf.js");
__d(/* lodash/_baseIsNaN.js */function(global, require, module, exports) {
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;
}, 171, null, "lodash/_baseIsNaN.js");
__d(/* lodash/_strictIndexOf.js */function(global, require, module, exports) {
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;
}, 172, null, "lodash/_strictIndexOf.js");
__d(/* lodash/_arrayIncludesWith.js */function(global, require, module, exports) {
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;
}, 173, null, "lodash/_arrayIncludesWith.js");
__d(/* lodash/_baseFlatten.js */function(global, require, module, exports) {var arrayPush = require(95            ), // 95 = ./_arrayPush
    isFlattenable = require(175               ); // 175 = ./_isFlattenable

function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

module.exports = baseFlatten;
}, 174, null, "lodash/_baseFlatten.js");
__d(/* lodash/_isFlattenable.js */function(global, require, module, exports) {var Symbol = require(55         ), // 55 = ./_Symbol
    isArguments = require(103            ), // 103 = ./isArguments
    isArray = require(96         ); // 96 = ./isArray

var spreadableSymbol = Symbol ? typeof Symbol === 'function' ? Symbol.isConcatSpreadable : '@@isConcatSpreadable' : undefined;

function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;
}, 175, null, "lodash/_isFlattenable.js");
__d(/* lodash/isArrayLikeObject.js */function(global, require, module, exports) {var isArrayLike = require(118            ), // 118 = ./isArrayLike
    isObjectLike = require(105             ); // 105 = ./isObjectLike

function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;
}, 176, null, "lodash/isArrayLikeObject.js");
__d(/* react-proxy/modules/bindAutoBindMethods.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bindAutoBindMethods;


function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);

  boundMethod.__reactBoundContext = component;
  boundMethod.__reactBoundMethod = method;
  boundMethod.__reactBoundArguments = null;

  var componentName = component.constructor.displayName,
      _bind = boundMethod.bind;

  boundMethod.bind = function (newThis) {
    var args = Array.prototype.slice.call(arguments, 1);
    if (newThis !== component && newThis !== null) {
      console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);
    } else if (!args.length) {
      console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);
      return boundMethod;
    }

    var reboundMethod = _bind.apply(boundMethod, arguments);
    reboundMethod.__reactBoundContext = component;
    reboundMethod.__reactBoundMethod = method;
    reboundMethod.__reactBoundArguments = args;

    return reboundMethod;
  };

  return boundMethod;
}

function bindAutoBindMethodsFromMap(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (!component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      return;
    }

    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
      continue;
    }

    var method = component.__reactAutoBindMap[autoBindKey];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

function bindAutoBindMethods(component) {
  if (component.__reactAutoBindPairs) {
    bindAutoBindMethodsFromArray(component);
  } else if (component.__reactAutoBindMap) {
    bindAutoBindMethodsFromMap(component);
  }
}

function bindAutoBindMethodsFromArray(component) {
  var pairs = component.__reactAutoBindPairs;

  if (!pairs) {
    return;
  }

  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];

    if (component.hasOwnProperty(autoBindKey) && component[autoBindKey].__reactBoundContext === component) {
      continue;
    }

    var method = pairs[i + 1];

    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}
}, 177, null, "react-proxy/modules/bindAutoBindMethods.js");
__d(/* react-proxy/modules/deleteUnknownAutoBindMethods.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deleteUnknownAutoBindMethods;
function shouldDeleteClassicInstanceMethod(component, name) {
  if (component.__reactAutoBindMap && component.__reactAutoBindMap.hasOwnProperty(name)) {
    return false;
  }

  if (component.__reactAutoBindPairs && component.__reactAutoBindPairs.indexOf(name) >= 0) {
    return false;
  }

  if (component[name].__reactBoundArguments !== null) {
    return false;
  }

  return true;
}

function shouldDeleteModernInstanceMethod(component, name) {
  var prototype = component.constructor.prototype;

  var prototypeDescriptor = Object.getOwnPropertyDescriptor(prototype, name);

  if (!prototypeDescriptor || !prototypeDescriptor.get) {
    return false;
  }

  if (prototypeDescriptor.get().length !== component[name].length) {
    return false;
  }

  return true;
}

function shouldDeleteInstanceMethod(component, name) {
  var descriptor = Object.getOwnPropertyDescriptor(component, name);
  if (typeof descriptor.value !== 'function') {
    return;
  }

  if (component.__reactAutoBindMap || component.__reactAutoBindPairs) {
    return shouldDeleteClassicInstanceMethod(component, name);
  } else {
    return shouldDeleteModernInstanceMethod(component, name);
  }
}

function deleteUnknownAutoBindMethods(component) {
  var names = Object.getOwnPropertyNames(component);

  names.forEach(function (name) {
    if (shouldDeleteInstanceMethod(component, name)) {
      delete component[name];
    }
  });
}
}, 178, null, "react-proxy/modules/deleteUnknownAutoBindMethods.js");
__d(/* react-deep-force-update/lib/index.js */function(global, require, module, exports) {
'use strict';

exports.__esModule = true;
exports['default'] = getForceUpdate;
var ReactClassComponent = 2;

function traverseRenderedChildren(internalInstance, callback, argument) {
  callback(internalInstance, argument);

  if (internalInstance._renderedComponent) {
    traverseRenderedChildren(internalInstance._renderedComponent, callback, argument);
  } else {
    for (var key in internalInstance._renderedChildren) {
      if (internalInstance._renderedChildren.hasOwnProperty(key)) {
        traverseRenderedChildren(internalInstance._renderedChildren[key], callback, argument);
      }
    }
  }
}

function setPendingForceUpdate(internalInstance) {
  if (internalInstance._pendingForceUpdate === false) {
    internalInstance._pendingForceUpdate = true;
  }
}

function forceUpdateIfPending(internalInstance, React) {
  if (internalInstance._pendingForceUpdate === true) {
    var publicInstance = internalInstance._instance;
    React.Component.prototype.forceUpdate.call(publicInstance);
  }
}

function deepForceUpdateStack(instance, React) {
  var internalInstance = instance._reactInternalInstance;
  traverseRenderedChildren(internalInstance, setPendingForceUpdate);
  traverseRenderedChildren(internalInstance, forceUpdateIfPending, React);
}

function deepForceUpdate(instance, React) {
  var root = instance._reactInternalFiber || instance._reactInternalInstance;
  if (typeof root.tag !== 'number') {
    return deepForceUpdateStack(instance, React);
  }

  var node = root;
  while (true) {
    if (node.tag === ReactClassComponent) {
      var publicInstance = node.stateNode;
      var updater = publicInstance.updater;

      if (typeof publicInstance.forceUpdate === 'function') {
        publicInstance.forceUpdate();
      } else if (updater && typeof updater.enqueueForceUpdate === 'function') {
        updater.enqueueForceUpdate(publicInstance);
      }
    }
    if (node.child) {
      node.child['return'] = node;
      node = node.child;
      continue;
    }
    if (node === root) {
      return undefined;
    }
    while (!node.sibling) {
      if (!node['return'] || node['return'] === root) {
        return undefined;
      }
      node = node['return'];
    }
    node.sibling['return'] = node['return'];
    node = node.sibling;
  }
}

function getForceUpdate(React) {
  return function (instance) {
    deepForceUpdate(instance, React);
  };
}

module.exports = exports['default'];
}, 179, null, "react-deep-force-update/lib/index.js");
__d(/* global/window.js */function(global, require, module, exports) {var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined") {
    win = self;
} else {
    win = {};
}

module.exports = win;
}, 180, null, "global/window.js");
__d(/* react-native-implementation */function(global, require, module, exports) {
'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var ReactNative = {
  get AccessibilityInfo() {
    return require(183                ); // 183 = AccessibilityInfo
  },
  get ActivityIndicator() {
    return require(207                ); // 207 = ActivityIndicator
  },
  get ART() {
    return require(330             ); // 330 = ReactNativeART
  },
  get Button() {
    return require(336     ); // 336 = Button
  },
  get DatePickerIOS() {
    return require(374            ); // 374 = DatePickerIOS
  },
  get DrawerLayoutAndroid() {
    return require(375                  ); // 375 = DrawerLayoutAndroid
  },
  get FlatList() {
    return require(377       ); // 377 = FlatList
  },
  get Image() {
    return require(361    ); // 361 = Image
  },
  get ImageBackground() {
    return require(390              ); // 390 = ImageBackground
  },
  get ImageEditor() {
    return require(392          ); // 392 = ImageEditor
  },
  get ImageStore() {
    return require(393         ); // 393 = ImageStore
  },
  get KeyboardAvoidingView() {
    return require(394                   ); // 394 = KeyboardAvoidingView
  },
  get ListView() {
    return require(379       ); // 379 = ListView
  },
  get MaskedViewIOS() {
    return require(396            ); // 396 = MaskedViewIOS
  },
  get Modal() {
    return require(397    ); // 397 = Modal
  },
  get NavigatorIOS() {
    return require(418           ); // 418 = NavigatorIOS
  },
  get Picker() {
    return require(419     ); // 419 = Picker
  },
  get PickerIOS() {
    return require(420        ); // 420 = PickerIOS
  },
  get ProgressBarAndroid() {
    return require(422                 ); // 422 = ProgressBarAndroid
  },
  get ProgressViewIOS() {
    return require(423              ); // 423 = ProgressViewIOS
  },
  get ScrollView() {
    return require(363         ); // 363 = ScrollView
  },
  get SectionList() {
    return require(424          ); // 424 = SectionList
  },
  get SegmentedControlIOS() {
    return require(426                  ); // 426 = SegmentedControlIOS
  },
  get Slider() {
    return require(427     ); // 427 = Slider
  },
  get SnapshotViewIOS() {
    return require(428              ); // 428 = SnapshotViewIOS
  },
  get Switch() {
    return require(429     ); // 429 = Switch
  },
  get RefreshControl() {
    return require(384             ); // 384 = RefreshControl
  },
  get StatusBar() {
    return require(376        ); // 376 = StatusBar
  },
  get SwipeableListView() {
    return require(430                ); // 430 = SwipeableListView
  },
  get TabBarIOS() {
    return require(435        ); // 435 = TabBarIOS
  },
  get Text() {
    return require(337   ); // 337 = Text
  },
  get TextInput() {
    return require(437        ); // 437 = TextInput
  },
  get ToastAndroid() {
    return require(269           ); // 269 = ToastAndroid
  },
  get ToolbarAndroid() {
    return require(443             ); // 443 = ToolbarAndroid
  },
  get Touchable() {
    return require(338        ); // 338 = Touchable
  },
  get TouchableHighlight() {
    return require(408                 ); // 408 = TouchableHighlight
  },
  get TouchableNativeFeedback() {
    return require(345                      ); // 345 = TouchableNativeFeedback
  },
  get TouchableOpacity() {
    return require(349               ); // 349 = TouchableOpacity
  },
  get TouchableWithoutFeedback() {
    return require(346                       ); // 346 = TouchableWithoutFeedback
  },
  get View() {
    return require(285   ); // 285 = View
  },
  get ViewPagerAndroid() {
    return require(444               ); // 444 = ViewPagerAndroid
  },
  get VirtualizedList() {
    return require(385              ); // 385 = VirtualizedList
  },
  get WebView() {
    return require(445      ); // 445 = WebView
  },

  get ActionSheetIOS() {
    return require(446             ); // 446 = ActionSheetIOS
  },
  get Alert() {
    return require(256    ); // 256 = Alert
  },
  get AlertIOS() {
    return require(257       ); // 257 = AlertIOS
  },
  get Animated() {
    return require(350       ); // 350 = Animated
  },
  get AppRegistry() {
    return require(447          ); // 447 = AppRegistry
  },
  get AppState() {
    return require(271       ); // 271 = AppState
  },
  get AsyncStorage() {
    return require(453           ); // 453 = AsyncStorage
  },
  get BackAndroid() {
    return require(454          ); // 454 = BackAndroid
  },
  get BackHandler() {
    return require(452          ); // 452 = BackHandler
  },
  get CameraRoll() {
    return require(455         ); // 455 = CameraRoll
  },
  get Clipboard() {
    return require(456        ); // 456 = Clipboard
  },
  get DatePickerAndroid() {
    return require(457                ); // 457 = DatePickerAndroid
  },
  get DeviceInfo() {
    return require(317         ); // 317 = DeviceInfo
  },
  get Dimensions() {
    return require(316         ); // 316 = Dimensions
  },
  get Easing() {
    return require(359     ); // 359 = Easing
  },
  get findNodeHandle() {
    return require(211          ).findNodeHandle; // 211 = ReactNative
  },
  get I18nManager() {
    return require(417          ); // 417 = I18nManager
  },
  get ImagePickerIOS() {
    return require(458             ); // 458 = ImagePickerIOS
  },
  get InteractionManager() {
    return require(352                 ); // 352 = InteractionManager
  },
  get Keyboard() {
    return require(367       ); // 367 = Keyboard
  },
  get LayoutAnimation() {
    return require(395              ); // 395 = LayoutAnimation
  },
  get Linking() {
    return require(459      ); // 459 = Linking
  },
  get NativeEventEmitter() {
    return require(242                 ); // 242 = NativeEventEmitter
  },
  get NetInfo() {
    return require(460      ); // 460 = NetInfo
  },
  get PanResponder() {
    return require(433           ); // 433 = PanResponder
  },
  get PermissionsAndroid() {
    return require(260                 ); // 260 = PermissionsAndroid
  },
  get PixelRatio() {
    return require(315         ); // 315 = PixelRatio
  },
  get PushNotificationIOS() {
    return require(461                  ); // 461 = PushNotificationIOS
  },
  get Settings() {
    return require(462       ); // 462 = Settings
  },
  get Share() {
    return require(463    ); // 463 = Share
  },
  get StatusBarIOS() {
    return require(464           ); // 464 = StatusBarIOS
  },
  get StyleSheet() {
    return require(314         ); // 314 = StyleSheet
  },
  get Systrace() {
    return require(188       ); // 188 = Systrace
  },
  get TimePickerAndroid() {
    return require(465                ); // 465 = TimePickerAndroid
  },
  get TVEventHandler() {
    return require(342             ); // 342 = TVEventHandler
  },
  get UIManager() {
    return require(279        ); // 279 = UIManager
  },
  get unstable_batchedUpdates() {
    return require(211          ).unstable_batchedUpdates; // 211 = ReactNative
  },
  get Vibration() {
    return require(466        ); // 466 = Vibration
  },
  get VibrationIOS() {
    return require(467           ); // 467 = VibrationIOS
  },

  get DeviceEventEmitter() {
    return require(202                    ); // 202 = RCTDeviceEventEmitter
  },
  get NativeAppEventEmitter() {
    return require(264                       ); // 264 = RCTNativeAppEventEmitter
  },
  get NativeModules() {
    return require(184            ); // 184 = NativeModules
  },
  get Platform() {
    return require(192       ); // 192 = Platform
  },
  get processColor() {
    return require(297           ); // 297 = processColor
  },
  get requireNativeComponent() {
    return require(312                     ); // 312 = requireNativeComponent
  },
  get takeSnapshot() {
    return require(468           ); // 468 = takeSnapshot
  },

  get ColorPropType() {
    return require(208            ); // 208 = ColorPropType
  },
  get EdgeInsetsPropType() {
    return require(303                 ); // 303 = EdgeInsetsPropType
  },
  get PointPropType() {
    return require(364            ); // 364 = PointPropType
  },
  get ViewPropTypes() {
    return require(302            ); // 302 = ViewPropTypes
  },

  get Navigator() {
    invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
  }
};

module.exports = ReactNative;
}, 181, null, "react-native-implementation");
__d(/* fbjs/lib/invariant.js */function(global, require, module, exports) {

'use strict';

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
}

module.exports = invariant;
}, 182, null, "fbjs/lib/invariant.js");
__d(/* AccessibilityInfo */function(global, require, module, exports) {
'use strict';

var NativeModules = require(184            ); // 184 = NativeModules
var RCTDeviceEventEmitter = require(202                    ); // 202 = RCTDeviceEventEmitter

var RCTAccessibilityInfo = NativeModules.AccessibilityInfo;

var TOUCH_EXPLORATION_EVENT = 'touchExplorationDidChange';

var _subscriptions = new Map();

var AccessibilityInfo = {

  fetch: function fetch() {
    return new Promise(function (resolve, reject) {
      RCTAccessibilityInfo.isTouchExplorationEnabled(function (resp) {
        resolve(resp);
      });
    });
  },

  addEventListener: function addEventListener(eventName, handler) {
    var listener = RCTDeviceEventEmitter.addListener(TOUCH_EXPLORATION_EVENT, function (enabled) {
      handler(enabled);
    });
    _subscriptions.set(handler, listener);
  },

  removeEventListener: function removeEventListener(eventName, handler) {
    var listener = _subscriptions.get(handler);
    if (!listener) {
      return;
    }
    listener.remove();
    _subscriptions.delete(handler);
  }

};

module.exports = AccessibilityInfo;
}, 183, null, "AccessibilityInfo");
__d(/* NativeModules */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var BatchedBridge = require(185            ); // 185 = BatchedBridge

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

function genModule(config, moduleID) {
  if (!config) {
    return null;
  }

  var _config = _slicedToArray(config, 5),
      moduleName = _config[0],
      constants = _config[1],
      methods = _config[2],
      promiseMethods = _config[3],
      syncMethods = _config[4];

  invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

  if (!constants && !methods) {
    return { name: moduleName };
  }

  var module = {};
  methods && methods.forEach(function (methodName, methodID) {
    var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
    var isSync = syncMethods && arrayContains(syncMethods, methodID);
    invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
    var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
    module[methodName] = genMethod(moduleID, methodID, methodType);
  });
  _extends(module, constants);

  if (__DEV__) {
    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
  }

  return { name: moduleName, module: module };
}

global.__fbGenNativeModule = genModule;

function loadModule(name, moduleID) {
  invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
  var config = global.nativeRequireModuleConfig(name);
  var info = genModule(config, moduleID);
  return info && info.module;
}

function genMethod(moduleID, methodID, type) {
  var fn = null;
  if (type === 'promise') {
    fn = function fn() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
          return resolve(data);
        }, function (errorData) {
          return reject(createErrorFromErrorData(errorData));
        });
      });
    };
  } else if (type === 'sync') {
    fn = function fn() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return BatchedBridge.callSyncHook(moduleID, methodID, args);
    };
  } else {
    fn = function fn() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var lastArg = args.length > 0 ? args[args.length - 1] : null;
      var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
      var hasSuccessCallback = typeof lastArg === 'function';
      var hasErrorCallback = typeof secondLastArg === 'function';
      hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
      var onSuccess = hasSuccessCallback ? lastArg : null;
      var onFail = hasErrorCallback ? secondLastArg : null;
      var callbackCount = hasSuccessCallback + hasErrorCallback;
      args = args.slice(0, args.length - callbackCount);
      BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
    };
  }
  fn.type = type;
  return fn;
}

function arrayContains(array, value) {
  return array.indexOf(value) !== -1;
}

function createErrorFromErrorData(errorData) {
  var _ref = errorData || {},
      message = _ref.message,
      extraErrorInfo = _objectWithoutProperties(_ref, ['message']);

  var error = new Error(message);
  error.framesToPop = 1;
  return _extends(error, extraErrorInfo);
}

var NativeModules = {};
if (global.nativeModuleProxy) {
  NativeModules = global.nativeModuleProxy;
} else {
  var bridgeConfig = global.__fbBatchedBridgeConfig;
  invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

  var defineLazyObjectProperty = require(201                       ); // 201 = defineLazyObjectProperty
  (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
    var info = genModule(config, moduleID);
    if (!info) {
      return;
    }

    if (info.module) {
      NativeModules[info.name] = info.module;
    } else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: function get() {
            return loadModule(info.name, moduleID);
          }
        });
      }
  });
}

module.exports = NativeModules;
}, 184, null, "NativeModules");
__d(/* BatchedBridge */function(global, require, module, exports) {
'use strict';

var MessageQueue = require(186           ); // 186 = MessageQueue

var BatchedBridge = new MessageQueue();

Object.defineProperty(global, '__fbBatchedBridge', {
  configurable: true,
  value: BatchedBridge
});

module.exports = BatchedBridge;
}, 185, null, "BatchedBridge");
__d(/* MessageQueue */function(global, require, module, exports) {

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ErrorUtils = require(187         ); // 187 = ErrorUtils
var Systrace = require(188       ); // 188 = Systrace

var deepFreezeAndThrowOnMutationInDev = require(189                                ); // 189 = deepFreezeAndThrowOnMutationInDev
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var stringifySafe = require(190            ); // 190 = stringifySafe

var TO_JS = 0;
var TO_NATIVE = 1;

var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;

var TRACE_TAG_REACT_APPS = 1 << 17;

var DEBUG_INFO_LIMIT = 64;

var JSTimers = null;

var MessageQueue = function () {
  function MessageQueue() {
    var _this = this;

    _classCallCheck(this, MessageQueue);

    this.callFunctionReturnFlushedQueue = function (module, method, args) {
      _this.__guard(function () {
        _this.__callFunction(module, method, args);
      });

      return _this.flushedQueue();
    };

    this.callFunctionReturnResultAndFlushedQueue = function (module, method, args) {
      var result = void 0;
      _this.__guard(function () {
        result = _this.__callFunction(module, method, args);
      });

      return [result, _this.flushedQueue()];
    };

    this.invokeCallbackAndReturnFlushedQueue = function (cbID, args) {
      _this.__guard(function () {
        _this.__invokeCallback(cbID, args);
      });

      return _this.flushedQueue();
    };

    this.flushedQueue = function () {
      _this.__guard(function () {
        _this.__callImmediates();
      });

      var queue = _this._queue;
      _this._queue = [[], [], [], _this._callID];
      return queue[0].length ? queue : null;
    };

    this._lazyCallableModules = {};
    this._queue = [[], [], [], 0];
    this._successCallbacks = [];
    this._failureCallbacks = [];
    this._callID = 0;
    this._lastFlush = 0;
    this._eventLoopStartTime = new Date().getTime();

    if (__DEV__) {
      this._debugInfo = {};
      this._remoteModuleTable = {};
      this._remoteMethodTable = {};
    }
  }

  _createClass(MessageQueue, [{
    key: 'getEventLoopRunningTime',
    value: function getEventLoopRunningTime() {
      return new Date().getTime() - this._eventLoopStartTime;
    }
  }, {
    key: 'registerCallableModule',
    value: function registerCallableModule(name, module) {
      this._lazyCallableModules[name] = function () {
        return module;
      };
    }
  }, {
    key: 'registerLazyCallableModule',
    value: function registerLazyCallableModule(name, factory) {
      var module = void 0;
      var getValue = factory;
      this._lazyCallableModules[name] = function () {
        if (getValue) {
          module = getValue();
          getValue = null;
        }
        return module;
      };
    }
  }, {
    key: 'getCallableModule',
    value: function getCallableModule(name) {
      var getValue = this._lazyCallableModules[name];
      return getValue ? getValue() : null;
    }
  }, {
    key: 'enqueueNativeCall',
    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
      if (onFail || onSucc) {
        if (__DEV__) {
          this._debugInfo[this._callID] = [moduleID, methodID];
          if (this._callID > DEBUG_INFO_LIMIT) {
            delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
          }
        }

        onFail && params.push(this._callID << 1);
        onSucc && params.push(this._callID << 1 | 1);
        this._successCallbacks[this._callID] = onSucc;
        this._failureCallbacks[this._callID] = onFail;
      }

      if (__DEV__) {
        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
      }
      this._callID++;

      this._queue[MODULE_IDS].push(moduleID);
      this._queue[METHOD_IDS].push(methodID);

      if (__DEV__) {
        JSON.stringify(params);

        deepFreezeAndThrowOnMutationInDev(params);
      }
      this._queue[PARAMS].push(params);

      var now = new Date().getTime();
      if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        this._lastFlush = now;
        global.nativeFlushQueueImmediate(queue);
      }
      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

      if (this.__spy) {
        this.__spyNativeCall(moduleID, methodID, params, {
          failCbId: onFail ? params[params.length - 2] : -1,
          successCbId: onSucc ? params[params.length - 1] : -1
        });
      }
    }
  }, {
    key: 'callSyncHook',
    value: function callSyncHook(moduleID, methodID, args) {
      if (__DEV__) {
        invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
      }
      var returnValue = global.nativeCallSyncHook(moduleID, methodID, args);
      if (this.__spy) {
        this.__spyNativeCall(moduleID, methodID, args, {
          isSync: true,
          returnValue: returnValue
        });
      }
      return returnValue;
    }
  }, {
    key: 'createDebugLookup',
    value: function createDebugLookup(moduleID, name, methods) {
      if (__DEV__) {
        this._remoteModuleTable[moduleID] = name;
        this._remoteMethodTable[moduleID] = methods;
      }
    }
  }, {
    key: '__guard',
    value: function __guard(fn) {
      this._inCall++;
      try {
        fn();
      } catch (error) {
        ErrorUtils.reportFatalError(error);
      } finally {
        this._inCall--;
      }
    }
  }, {
    key: '__callImmediates',
    value: function __callImmediates() {
      Systrace.beginEvent('JSTimers.callImmediates()');
      if (!JSTimers) {
        JSTimers = require(191       ); // 191 = JSTimers
      }
      JSTimers.callImmediates();
      Systrace.endEvent();
    }
  }, {
    key: '__callFunction',
    value: function __callFunction(module, method, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;
      Systrace.beginEvent(module + '.' + method + '()');
      if (this.__spy) {
        this.__spyJSCall(module, method, args);
      }
      var moduleMethods = this.getCallableModule(module);
      invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
      invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
      var result = moduleMethods[method].apply(moduleMethods, args);
      Systrace.endEvent();
      return result;
    }
  }, {
    key: '__invokeCallback',
    value: function __invokeCallback(cbID, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;

      var callID = cbID >>> 1;
      var isSuccess = cbID & 1;
      var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

      if (__DEV__) {
        var debug = this._debugInfo[callID];
        var _module = debug && this._remoteModuleTable[debug[0]];
        var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];
        if (!callback) {
          var errorMessage = 'Callback with id ' + cbID + ': ' + _module + '.' + _method + '() not found';
          if (_method) {
            errorMessage = 'The callback ' + _method + '() exists in module ' + _module + ', ' + 'but only one callback may be registered to a function in a native module.';
          }
          invariant(callback, errorMessage);
        }
        var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID + '';
        if (this.__spy) {
          this.__spyJSCall(null, profileName, args, {
            failCbId: isSuccess ? -1 : cbID,
            successCbId: isSuccess ? cbID : -1
          });
        }
        Systrace.beginEvent('MessageQueue.invokeCallback(' + profileName + ', ' + stringifySafe(args) + ')');
      }

      if (!callback) {
        return;
      }

      this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
      callback.apply(null, args);

      if (__DEV__) {
        Systrace.endEvent();
      }
    }
  }, {
    key: '__spyJSCall',
    value: function __spyJSCall(module, method, methodArgs, params) {
      if (!this.__spy) {
        return;
      }
      this.__spy(_extends({
        type: TO_JS,
        isSync: false,
        module: module,
        method: method,
        failCbId: -1,
        successCbId: -1,
        args: methodArgs
      }, params));
    }
  }, {
    key: '__spyNativeCall',
    value: function __spyNativeCall(moduleID, methodID, methodArgs, params) {
      var spy = this.__spy;
      if (!spy) {
        return;
      }

      var moduleName = moduleID + '';
      var methodName = methodID;
      if (__DEV__ && isFinite(moduleID)) {
        moduleName = this._remoteModuleTable[moduleID];
        methodName = this._remoteMethodTable[moduleID][methodID];
      }

      spy(_extends({
        type: TO_NATIVE,
        isSync: false,
        module: moduleName,
        method: methodName,
        failCbId: -1,
        successCbId: -1,
        args: methodArgs
      }, params));
    }
  }], [{
    key: 'spy',
    value: function spy(spyOrToggle) {
      if (spyOrToggle === true) {
        MessageQueue.prototype.__spy = function (info) {
          console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + ' : ' + ('' + (info.module ? info.module + '.' : '') + info.method) + ('(' + JSON.stringify(info.args) + ')'));
        };
      } else if (spyOrToggle === false) {
        MessageQueue.prototype.__spy = null;
      } else {
        MessageQueue.prototype.__spy = spyOrToggle;
      }
    }
  }]);

  return MessageQueue;
}();

module.exports = MessageQueue;
}, 186, null, "MessageQueue");
__d(/* ErrorUtils */function(global, require, module, exports) {
module.exports = global.ErrorUtils;
}, 187, null, "ErrorUtils");
__d(/* Systrace */function(global, require, module, exports) {
'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var TRACE_TAG_REACT_APPS = 1 << 17;
var TRACE_TAG_JSC_CALLS = 1 << 27;

var _enabled = false;
var _asyncCookie = 0;
var _markStack = [];
var _markStackIndex = -1;

var REACT_MARKER = '\u269B';
var userTimingPolyfill = {
  mark: function mark(markName) {
    if (__DEV__) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;

          systraceLabel = markName.slice(2, cutoffIndex);
        }
        Systrace.beginEvent(systraceLabel);
      }
    }
  },
  measure: function measure(measureName, startMark, endMark) {
    if (__DEV__) {
      if (_enabled) {
        invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
        var topMark = _markStack[_markStackIndex];
        invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
        _markStackIndex--;

        Systrace.endEvent();
      }
    }
  },
  clearMarks: function clearMarks(markName) {
    if (__DEV__) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }
        if (markName === _markStack[_markStackIndex]) {
          userTimingPolyfill.measure(markName, markName);
        }
      }
    }
  },
  clearMeasures: function clearMeasures() {}
};

var Systrace = {
  getUserTimingPolyfill: function getUserTimingPolyfill() {
    return userTimingPolyfill;
  },
  setEnabled: function setEnabled(enabled) {
    if (_enabled !== enabled) {
      if (__DEV__) {
        if (enabled) {
          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);
        } else {
          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);
        }
      }
      _enabled = enabled;
    }
  },
  isEnabled: function isEnabled() {
    return _enabled;
  },
  beginEvent: function beginEvent(profileName, args) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
    }
  },
  endEvent: function endEvent() {
    if (_enabled) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
    }
  },
  beginAsyncEvent: function beginAsyncEvent(profileName) {
    var cookie = _asyncCookie;
    if (_enabled) {
      _asyncCookie++;
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
    return cookie;
  },
  endAsyncEvent: function endAsyncEvent(profileName, cookie) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
  },
  counterEvent: function counterEvent(profileName, value) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
    }
  },
  attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
    relayProfiler.attachProfileHandler('*', function (name) {
      var cookie = Systrace.beginAsyncEvent(name);
      return function () {
        Systrace.endAsyncEvent(name, cookie);
      };
    });

    relayProfiler.attachAggregateHandler('*', function (name, callback) {
      Systrace.beginEvent(name);
      callback();
      Systrace.endEvent();
    });
  },
  swizzleJSON: function swizzleJSON() {
    Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
  },
  measureMethods: function measureMethods(object, objectName, methodNames) {
    if (!__DEV__) {
      return;
    }

    methodNames.forEach(function (methodName) {
      object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
    });
  },
  measure: function measure(objName, fnName, func) {
    if (!__DEV__) {
      return func;
    }

    var profileName = objName + '.' + fnName;
    return function () {
      if (!_enabled) {
        return func.apply(this, arguments);
      }

      Systrace.beginEvent(profileName);
      var ret = func.apply(this, arguments);
      Systrace.endEvent();
      return ret;
    };
  }
};

if (__DEV__) {
  require.Systrace = Systrace;
}

module.exports = Systrace;
}, 188, null, "Systrace");
__d(/* deepFreezeAndThrowOnMutationInDev */function(global, require, module, exports) {

'use strict';

function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return;
    }

    var keys = Object.keys(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        object.__defineGetter__(key, identity.bind(null, object[key]));
        object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        deepFreezeAndThrowOnMutationInDev(object[key]);
      }
    }
  }
}

function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
}, 189, null, "deepFreezeAndThrowOnMutationInDev");
__d(/* stringifySafe */function(global, require, module, exports) {
'use strict';

function stringifySafe(arg) {
  var ret;
  var type = typeof arg;
  if (arg === undefined) {
    ret = 'undefined';
  } else if (arg === null) {
    ret = 'null';
  } else if (type === 'string') {
    ret = '"' + arg + '"';
  } else if (type === 'function') {
    try {
      ret = arg.toString();
    } catch (e) {
      ret = '[function unknown]';
    }
  } else {
    try {
      ret = JSON.stringify(arg);
    } catch (e) {
      if (typeof arg.toString === 'function') {
        try {
          ret = arg.toString();
        } catch (E) {}
      }
    }
  }
  return ret || '["' + type + '" failed to stringify]';
}

module.exports = stringifySafe;
}, 190, null, "stringifySafe");
__d(/* JSTimers */function(global, require, module, exports) {
'use strict';

var Platform = require(192       ); // 192 = Platform
var Systrace = require(188       ); // 188 = Systrace

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var _require = require(184            ), // 184 = NativeModules
    Timing = _require.Timing;

var _performanceNow = null;
function performanceNow() {
  if (!_performanceNow) {
    _performanceNow = require(193                      ); // 193 = fbjs/lib/performanceNow
  }
  return _performanceNow();
}

var FRAME_DURATION = 1000 / 60;
var IDLE_CALLBACK_FRAME_DEADLINE = 1;

var MAX_TIMER_DURATION_MS = 60 * 1000;
var IS_ANDROID = Platform.OS === 'android';
var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';

var callbacks = [];
var types = [];
var timerIDs = [];
var immediates = [];
var requestIdleCallbacks = [];
var requestIdleCallbackTimeouts = {};
var identifiers = [];

var GUID = 1;
var errors = null;

var hasEmittedTimeDriftWarning = false;

function _getFreeIndex() {
  var freeIndex = timerIDs.indexOf(null);
  if (freeIndex === -1) {
    freeIndex = timerIDs.length;
  }
  return freeIndex;
}

function _allocateCallback(func, type) {
  var id = GUID++;
  var freeIndex = _getFreeIndex();
  timerIDs[freeIndex] = id;
  callbacks[freeIndex] = func;
  types[freeIndex] = type;
  if (__DEV__) {
    var parseErrorStack = require(196              ); // 196 = parseErrorStack
    var error = new Error();
    error.framesToPop = 1;
    var stack = parseErrorStack(error);
    if (stack) {
      identifiers[freeIndex] = stack.shift();
    }
  }
  return id;
}

function _callTimer(timerID, frameTime, didTimeout) {
  require(199               )(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID); // 199 = fbjs/lib/warning

  var timerIndex = timerIDs.indexOf(timerID);
  if (timerIndex === -1) {
    return;
  }

  var type = types[timerIndex];
  var callback = callbacks[timerIndex];
  if (!callback || !type) {
    console.error('No callback found for timerID ' + timerID);
    return;
  }

  if (__DEV__) {
    var identifier = identifiers[timerIndex] || {};
    Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
  }

  if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
    _clearIndex(timerIndex);
  }

  try {
    if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
      callback();
    } else if (type === 'requestAnimationFrame') {
      callback(performanceNow());
    } else if (type === 'requestIdleCallback') {
      callback({
        timeRemaining: function timeRemaining() {
          return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
        },
        didTimeout: !!didTimeout
      });
    } else {
      console.error('Tried to call a callback with invalid type: ' + type);
    }
  } catch (e) {
    if (!errors) {
      errors = [e];
    } else {
      errors.push(e);
    }
  }

  if (__DEV__) {
    Systrace.endEvent();
  }
}

function _callImmediatesPass() {
  if (__DEV__) {
    Systrace.beginEvent('callImmediatesPass()');
  }

  if (immediates.length > 0) {
    var passImmediates = immediates.slice();
    immediates = [];

    for (var i = 0; i < passImmediates.length; ++i) {
      _callTimer(passImmediates[i], 0);
    }
  }

  if (__DEV__) {
    Systrace.endEvent();
  }
  return immediates.length > 0;
}

function _clearIndex(i) {
  timerIDs[i] = null;
  callbacks[i] = null;
  types[i] = null;
  identifiers[i] = null;
}

function _freeCallback(timerID) {
  if (timerID == null) {
    return;
  }

  var index = timerIDs.indexOf(timerID);

  if (index !== -1) {
    _clearIndex(index);
    var type = types[index];
    if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
      Timing.deleteTimer(timerID);
    }
  }
}

var JSTimers = {
  setTimeout: function setTimeout(func, duration) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
      console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
    }
    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setTimeout');
    Timing.createTimer(id, duration || 0, Date.now(), false);
    return id;
  },

  setInterval: function setInterval(func, duration) {
    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
      console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
    }
    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setInterval');
    Timing.createTimer(id, duration || 0, Date.now(), true);
    return id;
  },

  setImmediate: function setImmediate(func) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setImmediate');
    immediates.push(id);
    return id;
  },

  requestAnimationFrame: function requestAnimationFrame(func) {
    var id = _allocateCallback(func, 'requestAnimationFrame');
    Timing.createTimer(id, 1, Date.now(), false);
    return id;
  },

  requestIdleCallback: function requestIdleCallback(func, options) {
    if (requestIdleCallbacks.length === 0) {
      Timing.setSendIdleEvents(true);
    }

    var timeout = options && options.timeout;
    var id = _allocateCallback(timeout != null ? function (deadline) {
      var timeoutId = requestIdleCallbackTimeouts[id];
      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        requestIdleCallbackTimeouts[id];
      }
      return func(deadline);
    } : func, 'requestIdleCallback');
    requestIdleCallbacks.push(id);

    if (timeout != null) {
      var timeoutId = JSTimers.setTimeout(function () {
        var index = requestIdleCallbacks.indexOf(id);
        if (index > -1) {
          requestIdleCallbacks.splice(index, 1);
          _callTimer(id, performanceNow(), true);
        }
        delete requestIdleCallbackTimeouts[id];
        if (requestIdleCallbacks.length === 0) {
          Timing.setSendIdleEvents(false);
        }
      }, timeout);
      requestIdleCallbackTimeouts[id] = timeoutId;
    }
    return id;
  },

  cancelIdleCallback: function cancelIdleCallback(timerID) {
    _freeCallback(timerID);
    var index = requestIdleCallbacks.indexOf(timerID);
    if (index !== -1) {
      requestIdleCallbacks.splice(index, 1);
    }

    var timeoutId = requestIdleCallbackTimeouts[timerID];
    if (timeoutId) {
      JSTimers.clearTimeout(timeoutId);
      delete requestIdleCallbackTimeouts[timerID];
    }

    if (requestIdleCallbacks.length === 0) {
      Timing.setSendIdleEvents(false);
    }
  },

  clearTimeout: function clearTimeout(timerID) {
    _freeCallback(timerID);
  },

  clearInterval: function clearInterval(timerID) {
    _freeCallback(timerID);
  },

  clearImmediate: function clearImmediate(timerID) {
    _freeCallback(timerID);
    var index = immediates.indexOf(timerID);
    if (index !== -1) {
      immediates.splice(index, 1);
    }
  },

  cancelAnimationFrame: function cancelAnimationFrame(timerID) {
    _freeCallback(timerID);
  },

  callTimers: function callTimers(timersToCall) {
    invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');

    errors = null;
    for (var i = 0; i < timersToCall.length; i++) {
      _callTimer(timersToCall[i], 0);
    }

    if (errors) {
      var errorCount = errors.length;
      if (errorCount > 1) {
        for (var ii = 1; ii < errorCount; ii++) {
          JSTimers.setTimeout(function (error) {
            throw error;
          }.bind(null, errors[ii]), 0);
        }
      }
      throw errors[0];
    }
  },

  callIdleCallbacks: function callIdleCallbacks(frameTime) {
    if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
      return;
    }

    errors = null;
    if (requestIdleCallbacks.length > 0) {
      var passIdleCallbacks = requestIdleCallbacks.slice();
      requestIdleCallbacks = [];

      for (var i = 0; i < passIdleCallbacks.length; ++i) {
        _callTimer(passIdleCallbacks[i], frameTime);
      }
    }

    if (requestIdleCallbacks.length === 0) {
      Timing.setSendIdleEvents(false);
    }

    if (errors) {
      errors.forEach(function (error) {
        return JSTimers.setTimeout(function () {
          throw error;
        }, 0);
      });
    }
  },

  callImmediates: function callImmediates() {
    errors = null;
    while (_callImmediatesPass()) {}
    if (errors) {
      errors.forEach(function (error) {
        return JSTimers.setTimeout(function () {
          throw error;
        }, 0);
      });
    }
  },
  emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
    if (hasEmittedTimeDriftWarning) {
      return;
    }
    hasEmittedTimeDriftWarning = true;
    console.warn(warningMessage);
  }
};

if (!Timing) {
  console.warn("Timing native module is not available, can't set timers.");

  module.exports = {
    callImmediates: JSTimers.callImmediates,
    setImmediate: JSTimers.setImmediate
  };
} else {
  module.exports = JSTimers;
}
}, 191, null, "JSTimers");
__d(/* Platform */function(global, require, module, exports) {

'use strict';

var NativeModules = require(184            ); // 184 = NativeModules

var Platform = {
  OS: 'android',
  get Version() {
    var constants = NativeModules.PlatformConstants;
    return constants && constants.Version;
  },
  get isTesting() {
    var constants = NativeModules.PlatformConstants;
    return constants && constants.isTesting;
  },
  select: function select(obj) {
    return 'android' in obj ? obj.android : obj.default;
  }
};

module.exports = Platform;
}, 192, null, "Platform");
__d(/* fbjs/lib/performanceNow.js */function(global, require, module, exports) {'use strict';

var performance = require(194            ); // 194 = ./performance

var performanceNow;

if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
}, 193, null, "fbjs/lib/performanceNow.js");
__d(/* fbjs/lib/performance.js */function(global, require, module, exports) {

'use strict';

var ExecutionEnvironment = require(195                     ); // 195 = ./ExecutionEnvironment

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
}, 194, null, "fbjs/lib/performance.js");
__d(/* fbjs/lib/ExecutionEnvironment.js */function(global, require, module, exports) {

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM };

module.exports = ExecutionEnvironment;
}, 195, null, "fbjs/lib/ExecutionEnvironment.js");
__d(/* parseErrorStack */function(global, require, module, exports) {
'use strict';

function parseErrorStack(e) {
  if (!e || !e.stack) {
    return [];
  }

  var stacktraceParser = require(197                ); // 197 = stacktrace-parser
  var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);

  var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;
  while (framesToPop--) {
    stack.shift();
  }
  return stack;
}

module.exports = parseErrorStack;
}, 196, null, "parseErrorStack");
__d(/* stacktrace-parser/index.js */function(global, require, module, exports) {module.exports = require(198                         ); // 198 = ./lib/stacktrace-parser.js
}, 197, null, "stacktrace-parser/index.js");
__d(/* stacktrace-parser/lib/stacktrace-parser.js */function(global, require, module, exports) {

var UNKNOWN_FUNCTION = '<unknown>';

var StackTraceParser = {
    parse: function parse(stackString) {
        var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
            node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            lines = stackString.split('\n'),
            stack = [],
            parts,
            element;

        for (var i = 0, j = lines.length; i < j; ++i) {
            if (parts = gecko.exec(lines[i])) {
                element = {
                    'file': parts[3],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[4],
                    'column': parts[5] ? +parts[5] : null
                };
            } else if (parts = chrome.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else if (parts = node.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else {
                continue;
            }

            stack.push(element);
        }

        return stack;
    }
};

module.exports = StackTraceParser;
}, 198, null, "stacktrace-parser/lib/stacktrace-parser.js");
__d(/* fbjs/lib/warning.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(200              ); // 200 = ./emptyFunction

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
}, 199, null, "fbjs/lib/warning.js");
__d(/* fbjs/lib/emptyFunction.js */function(global, require, module, exports) {"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
}, 200, null, "fbjs/lib/emptyFunction.js");
__d(/* defineLazyObjectProperty */function(global, require, module, exports) {

'use strict';

function defineLazyObjectProperty(object, name, descriptor) {
  var get = descriptor.get;

  var enumerable = descriptor.enumerable !== false;
  var writable = descriptor.writable !== false;

  var value = void 0;
  var valueSet = false;
  function getValue() {
    if (!valueSet) {
      valueSet = true;
      setValue(get());
    }
    return value;
  }
  function setValue(newValue) {
    value = newValue;
    valueSet = true;
    Object.defineProperty(object, name, {
      value: newValue,
      configurable: true,
      enumerable: enumerable,
      writable: writable
    });
  }

  Object.defineProperty(object, name, {
    get: getValue,
    set: setValue,
    configurable: true,
    enumerable: enumerable
  });
}

module.exports = defineLazyObjectProperty;
}, 201, null, "defineLazyObjectProperty");
__d(/* RCTDeviceEventEmitter */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require(203           ); // 203 = EventEmitter
var EventSubscriptionVendor = require(206                      ); // 206 = EventSubscriptionVendor

function checkNativeEventModule(eventType) {
  if (eventType) {
    if (eventType.lastIndexOf('statusBar', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
    }
    if (eventType.lastIndexOf('keyboard', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
    }
    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
      throw new Error('`' + eventType + '` event should be registered via the AppState module');
    }
  }
}

var RCTDeviceEventEmitter = function (_EventEmitter) {
  _inherits(RCTDeviceEventEmitter, _EventEmitter);

  function RCTDeviceEventEmitter() {
    _classCallCheck(this, RCTDeviceEventEmitter);

    var sharedSubscriber = new EventSubscriptionVendor();

    var _this = _possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }

  _createClass(RCTDeviceEventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      return _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        _get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
      }
    }
  }]);

  return RCTDeviceEventEmitter;
}(EventEmitter);

module.exports = new RCTDeviceEventEmitter();
}, 202, null, "RCTDeviceEventEmitter");
__d(/* EventEmitter */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EmitterSubscription = require(204                  ); // 204 = EmitterSubscription
var EventSubscriptionVendor = require(206                      ); // 206 = EventSubscriptionVendor

var emptyFunction = require(200                     ); // 200 = fbjs/lib/emptyFunction
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var EventEmitter = function () {
  function EventEmitter(subscriber) {
    _classCallCheck(this, EventEmitter);

    this._subscriber = subscriber || new EventSubscriptionVendor();
  }

  _createClass(EventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {

      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      var _this = this;

      return this.addListener(eventType, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this.removeCurrentListener();
        listener.apply(context, args);
      });
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
      this.removeSubscription(this._currentSubscription);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');
      this._subscriber.removeSubscription(subscription);
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
        return subscription.listener;
      }) : [];
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription) {
            this._currentSubscription = subscription;
            subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
          }
        }
        this._currentSubscription = null;
      }
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventType, listener) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription && subscription.listener === listener) {
            subscription.remove();
          }
        }
      }
    }
  }]);

  return EventEmitter;
}();

module.exports = EventEmitter;
}, 203, null, "EventEmitter");
__d(/* EmitterSubscription */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventSubscription = require(205                ); // 205 = EventSubscription

var EmitterSubscription = function (_EventSubscription) {
  _inherits(EmitterSubscription, _EventSubscription);

  function EmitterSubscription(emitter, subscriber, listener, context) {
    _classCallCheck(this, EmitterSubscription);

    var _this = _possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

    _this.emitter = emitter;
    _this.listener = listener;
    _this.context = context;
    return _this;
  }

  _createClass(EmitterSubscription, [{
    key: 'remove',
    value: function remove() {
      this.emitter.removeSubscription(this);
    }
  }]);

  return EmitterSubscription;
}(EventSubscription);

module.exports = EmitterSubscription;
}, 204, null, "EmitterSubscription");
__d(/* EventSubscription */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventSubscription = function () {
  function EventSubscription(subscriber) {
    _classCallCheck(this, EventSubscription);

    this.subscriber = subscriber;
  }

  _createClass(EventSubscription, [{
    key: 'remove',
    value: function remove() {
      this.subscriber.removeSubscription(this);
    }
  }]);

  return EventSubscription;
}();

module.exports = EventSubscription;
}, 205, null, "EventSubscription");
__d(/* EventSubscriptionVendor */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    _classCallCheck(this, EventSubscriptionVendor);

    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  _createClass(EventSubscriptionVendor, [{
    key: 'addSubscription',
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: 'removeAllSubscriptions',
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;

      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: 'getSubscriptionsForType',
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);

  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
}, 206, null, "EventSubscriptionVendor");
__d(/* ActivityIndicator */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\ActivityIndicator\\ActivityIndicator.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var ColorPropType = require(208            ); // 208 = ColorPropType
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(314         ); // 314 = StyleSheet
var View = require(285   ); // 285 = View
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var GRAY = '#999999';

var ActivityIndicator = createReactClass({
  displayName: 'ActivityIndicator',
  mixins: [NativeMethodsMixin],

  propTypes: _extends({}, ViewPropTypes, {
    animating: PropTypes.bool,

    color: ColorPropType,

    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),

    hidesWhenStopped: PropTypes.bool
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      animating: true,
      color: Platform.OS === 'ios' ? GRAY : undefined,
      hidesWhenStopped: true,
      size: 'small'
    };
  },
  render: function render() {
    var _props = this.props,
        onLayout = _props.onLayout,
        style = _props.style,
        props = _objectWithoutProperties(_props, ['onLayout', 'style']);

    var sizeStyle = void 0;

    switch (props.size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        break;
      case 'large':
        sizeStyle = styles.sizeLarge;
        break;
      default:
        sizeStyle = { height: props.size, width: props.size };
        break;
    }

    return React.createElement(
      View,
      {
        onLayout: onLayout,
        style: [styles.container, style], __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      },
      React.createElement(RCTActivityIndicator, _extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      }))
    );
  }
});

var styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  sizeSmall: {
    width: 20,
    height: 20
  },
  sizeLarge: {
    width: 36,
    height: 36
  }
});

if (Platform.OS === 'ios') {
  var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, { nativeOnly: { activityIndicatorViewStyle: true } });
} else if (Platform.OS === 'android') {
  var RCTActivityIndicator = requireNativeComponent('AndroidProgressBar', ActivityIndicator, { nativeOnly: {
      indeterminate: true,
      progress: true,
      styleAttr: true
    } });
}

module.exports = ActivityIndicator;
}, 207, null, "ActivityIndicator");
__d(/* ColorPropType */function(global, require, module, exports) {
'use strict';

var normalizeColor = require(209             ); // 209 = normalizeColor

var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
  var color = props[propName];
  if (color === undefined || color === null) {
    if (isRequired) {
      return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
    }
    return;
  }

  if (typeof color === 'number') {
    return;
  }

  if (normalizeColor(color) === null) {
    return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + 'Valid color formats are\n  - \'#f0f\' (#rgb)\n  - \'#f0fc\' (#rgba)\n  - \'#ff00ff\' (#rrggbb)\n  - \'#ff00ff00\' (#rrggbbaa)\n  - \'rgb(255, 255, 255)\'\n  - \'rgba(255, 255, 255, 1.0)\'\n  - \'hsl(360, 100%, 100%)\'\n  - \'hsla(360, 100%, 100%, 1.0)\'\n  - \'transparent\'\n  - \'red\'\n  - 0xff00ff00 (0xrrggbbaa)\n');
  }
};

var ColorPropType = colorPropType.bind(null, false);
ColorPropType.isRequired = colorPropType.bind(null, true);

module.exports = ColorPropType;
}, 208, null, "ColorPropType");
__d(/* normalizeColor */function(global, require, module, exports) {
'use strict';

function normalizeColor(color) {
  var match;

  if (typeof color === 'number') {
    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
      return color;
    }
    return null;
  }

  if (match = matchers.hex6.exec(color)) {
    return parseInt(match[1] + 'ff', 16) >>> 0;
  }

  if (names.hasOwnProperty(color)) {
    return names[color];
  }

  if (match = matchers.rgb.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
  }

  if (match = matchers.rgba.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }

  if (match = matchers.hex3.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
  }

  if (match = matchers.hex8.exec(color)) {
    return parseInt(match[1], 16) >>> 0;
  }

  if (match = matchers.hex4.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }

  if (match = matchers.hsl.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
  }

  if (match = matchers.hsla.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }

  return null;
}

function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}

function hslToRgb(h, s, l) {
  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  var p = 2 * l - q;
  var r = hue2rgb(p, q, h + 1 / 3);
  var g = hue2rgb(p, q, h);
  var b = hue2rgb(p, q, h - 1 / 3);

  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}

var NUMBER = '[-+]?\\d*\\.?\\d+';
var PERCENTAGE = NUMBER + '%';

function call() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
}

var matchers = {
  rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
  rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
  hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
  hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
  hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#([0-9a-fA-F]{6})$/,
  hex8: /^#([0-9a-fA-F]{8})$/
};

function parse255(str) {
  var int = parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}

function parse360(str) {
  var int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}

function parse1(str) {
  var num = parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}

function parsePercentage(str) {
  var int = parseFloat(str);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}

var names = {
  transparent: 0x00000000,

  aliceblue: 0xf0f8ffff,
  antiquewhite: 0xfaebd7ff,
  aqua: 0x00ffffff,
  aquamarine: 0x7fffd4ff,
  azure: 0xf0ffffff,
  beige: 0xf5f5dcff,
  bisque: 0xffe4c4ff,
  black: 0x000000ff,
  blanchedalmond: 0xffebcdff,
  blue: 0x0000ffff,
  blueviolet: 0x8a2be2ff,
  brown: 0xa52a2aff,
  burlywood: 0xdeb887ff,
  burntsienna: 0xea7e5dff,
  cadetblue: 0x5f9ea0ff,
  chartreuse: 0x7fff00ff,
  chocolate: 0xd2691eff,
  coral: 0xff7f50ff,
  cornflowerblue: 0x6495edff,
  cornsilk: 0xfff8dcff,
  crimson: 0xdc143cff,
  cyan: 0x00ffffff,
  darkblue: 0x00008bff,
  darkcyan: 0x008b8bff,
  darkgoldenrod: 0xb8860bff,
  darkgray: 0xa9a9a9ff,
  darkgreen: 0x006400ff,
  darkgrey: 0xa9a9a9ff,
  darkkhaki: 0xbdb76bff,
  darkmagenta: 0x8b008bff,
  darkolivegreen: 0x556b2fff,
  darkorange: 0xff8c00ff,
  darkorchid: 0x9932ccff,
  darkred: 0x8b0000ff,
  darksalmon: 0xe9967aff,
  darkseagreen: 0x8fbc8fff,
  darkslateblue: 0x483d8bff,
  darkslategray: 0x2f4f4fff,
  darkslategrey: 0x2f4f4fff,
  darkturquoise: 0x00ced1ff,
  darkviolet: 0x9400d3ff,
  deeppink: 0xff1493ff,
  deepskyblue: 0x00bfffff,
  dimgray: 0x696969ff,
  dimgrey: 0x696969ff,
  dodgerblue: 0x1e90ffff,
  firebrick: 0xb22222ff,
  floralwhite: 0xfffaf0ff,
  forestgreen: 0x228b22ff,
  fuchsia: 0xff00ffff,
  gainsboro: 0xdcdcdcff,
  ghostwhite: 0xf8f8ffff,
  gold: 0xffd700ff,
  goldenrod: 0xdaa520ff,
  gray: 0x808080ff,
  green: 0x008000ff,
  greenyellow: 0xadff2fff,
  grey: 0x808080ff,
  honeydew: 0xf0fff0ff,
  hotpink: 0xff69b4ff,
  indianred: 0xcd5c5cff,
  indigo: 0x4b0082ff,
  ivory: 0xfffff0ff,
  khaki: 0xf0e68cff,
  lavender: 0xe6e6faff,
  lavenderblush: 0xfff0f5ff,
  lawngreen: 0x7cfc00ff,
  lemonchiffon: 0xfffacdff,
  lightblue: 0xadd8e6ff,
  lightcoral: 0xf08080ff,
  lightcyan: 0xe0ffffff,
  lightgoldenrodyellow: 0xfafad2ff,
  lightgray: 0xd3d3d3ff,
  lightgreen: 0x90ee90ff,
  lightgrey: 0xd3d3d3ff,
  lightpink: 0xffb6c1ff,
  lightsalmon: 0xffa07aff,
  lightseagreen: 0x20b2aaff,
  lightskyblue: 0x87cefaff,
  lightslategray: 0x778899ff,
  lightslategrey: 0x778899ff,
  lightsteelblue: 0xb0c4deff,
  lightyellow: 0xffffe0ff,
  lime: 0x00ff00ff,
  limegreen: 0x32cd32ff,
  linen: 0xfaf0e6ff,
  magenta: 0xff00ffff,
  maroon: 0x800000ff,
  mediumaquamarine: 0x66cdaaff,
  mediumblue: 0x0000cdff,
  mediumorchid: 0xba55d3ff,
  mediumpurple: 0x9370dbff,
  mediumseagreen: 0x3cb371ff,
  mediumslateblue: 0x7b68eeff,
  mediumspringgreen: 0x00fa9aff,
  mediumturquoise: 0x48d1ccff,
  mediumvioletred: 0xc71585ff,
  midnightblue: 0x191970ff,
  mintcream: 0xf5fffaff,
  mistyrose: 0xffe4e1ff,
  moccasin: 0xffe4b5ff,
  navajowhite: 0xffdeadff,
  navy: 0x000080ff,
  oldlace: 0xfdf5e6ff,
  olive: 0x808000ff,
  olivedrab: 0x6b8e23ff,
  orange: 0xffa500ff,
  orangered: 0xff4500ff,
  orchid: 0xda70d6ff,
  palegoldenrod: 0xeee8aaff,
  palegreen: 0x98fb98ff,
  paleturquoise: 0xafeeeeff,
  palevioletred: 0xdb7093ff,
  papayawhip: 0xffefd5ff,
  peachpuff: 0xffdab9ff,
  peru: 0xcd853fff,
  pink: 0xffc0cbff,
  plum: 0xdda0ddff,
  powderblue: 0xb0e0e6ff,
  purple: 0x800080ff,
  rebeccapurple: 0x663399ff,
  red: 0xff0000ff,
  rosybrown: 0xbc8f8fff,
  royalblue: 0x4169e1ff,
  saddlebrown: 0x8b4513ff,
  salmon: 0xfa8072ff,
  sandybrown: 0xf4a460ff,
  seagreen: 0x2e8b57ff,
  seashell: 0xfff5eeff,
  sienna: 0xa0522dff,
  silver: 0xc0c0c0ff,
  skyblue: 0x87ceebff,
  slateblue: 0x6a5acdff,
  slategray: 0x708090ff,
  slategrey: 0x708090ff,
  snow: 0xfffafaff,
  springgreen: 0x00ff7fff,
  steelblue: 0x4682b4ff,
  tan: 0xd2b48cff,
  teal: 0x008080ff,
  thistle: 0xd8bfd8ff,
  tomato: 0xff6347ff,
  turquoise: 0x40e0d0ff,
  violet: 0xee82eeff,
  wheat: 0xf5deb3ff,
  white: 0xffffffff,
  whitesmoke: 0xf5f5f5ff,
  yellow: 0xffff00ff,
  yellowgreen: 0x9acd32ff
};

module.exports = normalizeColor;
}, 209, null, "normalizeColor");
__d(/* NativeMethodsMixin */function(global, require, module, exports) {

'use strict';

var _require = require(211          ), // 211 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;


module.exports = NativeMethodsMixin;
}, 210, null, "NativeMethodsMixin");
__d(/* ReactNative */function(global, require, module, exports) {
'use strict';

var ReactNativeFeatureFlags = require(212                      ); // 212 = ReactNativeFeatureFlags

var ReactNative = void 0;

if (__DEV__) {
  ReactNative = ReactNativeFeatureFlags.useFiber ? require(213                   ) : require(284                   ); // 284 = ReactNativeStack-dev // 213 = ReactNativeFiber-dev
} else {
  ReactNative = ReactNativeFeatureFlags.useFiber ? require(328                    ) : require(329                    ); // 329 = ReactNativeStack-prod // 328 = ReactNativeFiber-prod
}

module.exports = ReactNative;
}, 211, null, "ReactNative");
__d(/* ReactNativeFeatureFlags */function(global, require, module, exports) {

'use strict';

var ReactNativeFeatureFlags = {
  useFiber: false
};

module.exports = ReactNativeFeatureFlags;
}, 212, null, "ReactNativeFeatureFlags");
__d(/* ReactNativeFiber-dev */function(global, require, module, exports) {
"use strict";

var _extends2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var invariant = require(182                 ), // 182 = fbjs/lib/invariant
    warning = require(199               ), // 199 = fbjs/lib/warning
    ExceptionsManager = require(214                ); // 214 = ExceptionsManager

require(219             ); // 219 = InitializeCore

var RCTEventEmitter = require(278              ), // 278 = RCTEventEmitter
    emptyFunction = require(200                     ), // 200 = fbjs/lib/emptyFunction
    UIManager = require(279        ), // 279 = UIManager
    checkPropTypes = require(23                         ), // 23 = prop-types/checkPropTypes
    emptyObject = require(280                   ), // 280 = fbjs/lib/emptyObject
    react = require(13     ), // 13 = react
    shallowEqual = require(281                    ), // 281 = fbjs/lib/shallowEqual
    deepDiffer = require(282         ), // 282 = deepDiffer
    flattenStyle = require(273           ), // 273 = flattenStyle
    TextInputState = require(283             ), // 283 = TextInputState
    deepFreezeAndThrowOnMutationInDev = require(189                                ), // 189 = deepFreezeAndThrowOnMutationInDev
    ExecutionEnvironment = require(195                            ), // 195 = fbjs/lib/ExecutionEnvironment
    performanceNow = require(193                      ), // 193 = fbjs/lib/performanceNow
    defaultShowDialog = function defaultShowDialog(capturedError) {
    return !0;
},
    showDialog = defaultShowDialog;

function logCapturedError(capturedError) {
    if (!1 !== showDialog(capturedError)) {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            error = capturedError.error,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry,
            message = error.message,
            name = error.name,
            stack = error.stack,
            errorSummary = message ? name + ": " + message : name,
            componentNameMessage = componentName ? "React caught an error thrown by " + componentName + "." : "React caught an error thrown by one of your components.",
            formattedCallStack = stack.slice(0, errorSummary.length) === errorSummary ? stack.slice(errorSummary.length) : stack;
        formattedCallStack = formattedCallStack.trim().split("\n").map(function (line) {
            return "\n    " + line.trim();
        }).join();
        var errorBoundaryMessage = void 0;
        errorBoundaryMessage = errorBoundaryFound && errorBoundaryName ? willRetry ? "React will try to recreate this component tree from scratch " + "using the error boundary you provided, " + errorBoundaryName + "." : "This error was initially handled by the error boundary " + errorBoundaryName + ". " + "Recreating the tree from scratch failed so React will unmount the tree." : "Consider adding an error boundary to your tree to customize error handling behavior.", console.error(componentNameMessage + " You should fix this error in your code. " + errorBoundaryMessage + "\n\n" + errorSummary + "\n\n" + "The error is located at: " + componentStack + "\n\n" + "The error was thrown at: " + formattedCallStack);
    }
}

var injection = {
    injectDialog: function injectDialog(fn) {
        invariant(showDialog === defaultShowDialog, "The custom dialog was already injected."), invariant("function" == typeof fn, "Injected showDialog() must be a function."), showDialog = fn;
    }
},
    logCapturedError_1 = logCapturedError,
    ReactFiberErrorLogger = {
    injection: injection,
    logCapturedError: logCapturedError_1
},
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
};

if ("undefined" != typeof window && "function" == typeof window.dispatchEvent && "undefined" != typeof document && "function" == typeof document.createEvent) {
    var fakeNode = document.createElement("react"),
        depth = 0;
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        depth++;
        var thisDepth = depth,
            funcArgs = Array.prototype.slice.call(arguments, 3),
            boundFunc = function boundFunc() {
            func.apply(context, funcArgs);
        },
            fakeEventError = null,
            onFakeEventError = function onFakeEventError(event) {
            depth === thisDepth && (fakeEventError = event.error);
        },
            evtType = "react-" + (name || "invokeguardedcallback") + "-" + depth;
        window.addEventListener("error", onFakeEventError), fakeNode.addEventListener(evtType, boundFunc, !1);
        var evt = document.createEvent("Event");
        return evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), fakeNode.removeEventListener(evtType, boundFunc, !1), window.removeEventListener("error", onFakeEventError), depth--, fakeEventError;
    };
}

var _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection$1 = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected, warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

var validateEventDispatches;

validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances,
        listenersIsArr = Array.isArray(dispatchListeners),
        listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0,
        instancesIsArr = Array.isArray(dispatchInstances),
        instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
};

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    validateEventDispatches(event);
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection$1
},
    EventPluginUtils_1 = EventPluginUtils,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching;

function ReactNativeFiberErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error,
        errorToHandle = void 0;
    if (error instanceof Error) {
        var message = error.message,
            name = error.name,
            summary = message ? name + ": " + message : name;
        errorToHandle = error;
        try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
        } catch (e) {}
    } else errorToHandle = "string" == typeof error ? new Error(error + "\n\nThis error is located at:" + componentStack) : new Error("Unspecified error at:" + componentStack);
    return ExceptionsManager.handleException(errorToHandle, !1), !1;
}

var showDialog$1 = ReactNativeFiberErrorDialog,
    ReactNativeFiberErrorDialog_1 = {
    showDialog: showDialog$1
},
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName, "onDoubleClick" === registrationName && (EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName);
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: {},
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    warning(inst, "Dispatching inst must not be null");
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    didWarnForAddedNewProperty = !1,
    isProxySupported = "function" == typeof Proxy,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    delete this.nativeEvent, delete this.preventDefault, delete this.stopPropagation, this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            delete this[propName];
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

_extends2(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null)), Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction)), Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    _extends2(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = _extends2({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, isProxySupported && (SyntheticEvent = new Proxy(SyntheticEvent, {
    construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
    },
    apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
            set: function set(target, prop, value) {
                return "isPersistent" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information."), didWarnForAddedNewProperty = !0), target[prop] = value, !0;
            }
        });
    }
})), PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent;

function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = "function" == typeof getVal;
    return {
        configurable: !0,
        set: set,
        get: get
    };
    function set(val) {
        return warn(isFunction ? "setting the method" : "setting the property", "This is effectively a no-op"), val;
    }
    function get() {
        return warn(isFunction ? "accessing the method" : "accessing the property", isFunction ? "This is a no-op function" : "This is set to null"), getVal;
    }
    function warn(action, result) {
        warning(!1, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
    }
}

var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin,
    instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? warning(!1, "A view is reporting that a touch occurred on tag zero.") : rootNodeID = target), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) {
            for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];
                if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = i;
                    break;
                }
            }
            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
            warning(null != activeRecord && activeRecord.touchActive, "Cannot find single active touch.");
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
},
    REACT_PORTAL_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") || 60106,
    createPortal = function createPortal(children, containerInfo, implementation) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
},
    isPortal = function isPortal(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_PORTAL_TYPE;
},
    REACT_PORTAL_TYPE_1 = REACT_PORTAL_TYPE,
    ReactPortal = {
    createPortal: createPortal,
    isPortal: isPortal,
    REACT_PORTAL_TYPE: REACT_PORTAL_TYPE_1
},
    commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {},
    ReactFeatureFlags = {
    disableNewFiberFeatures: !1,
    enableAsyncSubtreeAPI: !1
},
    ReactFeatureFlags_1 = ReactFeatureFlags,
    ReactTypeOfSideEffect = {
    NoEffect: 0,
    PerformedWork: 1,
    Placement: 2,
    Update: 4,
    PlacementAndUpdate: 6,
    Deletion: 8,
    ContentReset: 16,
    Callback: 32,
    Err: 64,
    Ref: 128
},
    ReactPriorityLevel = {
    NoWork: 0,
    SynchronousPriority: 1,
    TaskPriority: 2,
    HighPriority: 3,
    LowPriority: 4,
    OffscreenPriority: 5
},
    CallbackEffect = ReactTypeOfSideEffect.Callback,
    NoWork = ReactPriorityLevel.NoWork,
    SynchronousPriority = ReactPriorityLevel.SynchronousPriority,
    TaskPriority = ReactPriorityLevel.TaskPriority,
    ClassComponent = ReactTypeOfWork.ClassComponent,
    HostRoot = ReactTypeOfWork.HostRoot,
    warning$3 = warning;

function comparePriority(a, b) {
    return a !== TaskPriority && a !== SynchronousPriority || b !== TaskPriority && b !== SynchronousPriority ? a === NoWork && b !== NoWork ? -255 : a !== NoWork && b === NoWork ? 255 : a - b : 0;
}

function createUpdateQueue() {
    var queue = {
        first: null,
        last: null,
        hasForceUpdate: !1,
        callbackList: null
    };
    return queue.isProcessing = !1, queue;
}

function cloneUpdate(update) {
    return {
        priorityLevel: update.priorityLevel,
        partialState: update.partialState,
        callback: update.callback,
        isReplace: update.isReplace,
        isForced: update.isForced,
        isTopLevelUnmount: update.isTopLevelUnmount,
        next: null
    };
}

function insertUpdateIntoQueue(queue, update, insertAfter, insertBefore) {
    null !== insertAfter ? insertAfter.next = update : (update.next = queue.first, queue.first = update), null !== insertBefore ? update.next = insertBefore : queue.last = update;
}

function findInsertionPosition(queue, update) {
    var priorityLevel = update.priorityLevel,
        insertAfter = null,
        insertBefore = null;
    if (null !== queue.last && comparePriority(queue.last.priorityLevel, priorityLevel) <= 0) insertAfter = queue.last;else for (insertBefore = queue.first; null !== insertBefore && comparePriority(insertBefore.priorityLevel, priorityLevel) <= 0;) {
        insertAfter = insertBefore, insertBefore = insertBefore.next;
    }return insertAfter;
}

function ensureUpdateQueues(fiber) {
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue());
    var queue2 = void 0;
    return null !== alternateFiber ? null === (queue2 = alternateFiber.updateQueue) && (queue2 = alternateFiber.updateQueue = createUpdateQueue()) : queue2 = null, [queue1, queue2 !== queue1 ? queue2 : null];
}

function insertUpdate(fiber, update) {
    var _ensureUpdateQueues = ensureUpdateQueues(fiber),
        queue1 = _ensureUpdateQueues[0],
        queue2 = _ensureUpdateQueues[1];
    (queue1.isProcessing || null !== queue2 && queue2.isProcessing) && warning$3(!1, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
    var insertAfter1 = findInsertionPosition(queue1, update),
        insertBefore1 = null !== insertAfter1 ? insertAfter1.next : queue1.first;
    if (null === queue2) return insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), null;
    var insertAfter2 = findInsertionPosition(queue2, update),
        insertBefore2 = null !== insertAfter2 ? insertAfter2.next : queue2.first;
    if (insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), insertBefore1 === insertBefore2 && null !== insertBefore1 || insertAfter1 === insertAfter2 && null !== insertAfter1) return null === insertAfter2 && (queue2.first = update), null === insertBefore2 && (queue2.last = null), null;
    var update2 = cloneUpdate(update);
    return insertUpdateIntoQueue(queue2, update2, insertAfter2, insertBefore2), update2;
}

function addUpdate(fiber, partialState, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addUpdate_1 = addUpdate;

function addReplaceUpdate(fiber, state, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: state,
        callback: callback,
        isReplace: !0,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addReplaceUpdate_1 = addReplaceUpdate;

function addForceUpdate(fiber, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: null,
        callback: callback,
        isReplace: !1,
        isForced: !0,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addForceUpdate_1 = addForceUpdate;

function getUpdatePriority(fiber) {
    var updateQueue = fiber.updateQueue;
    return null === updateQueue ? NoWork : fiber.tag !== ClassComponent && fiber.tag !== HostRoot ? NoWork : null !== updateQueue.first ? updateQueue.first.priorityLevel : NoWork;
}

var getUpdatePriority_1 = getUpdatePriority;

function addTopLevelUpdate$1(fiber, partialState, callback, priorityLevel) {
    var isTopLevelUnmount = null === partialState.element,
        update = {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: isTopLevelUnmount,
        next: null
    },
        update2 = insertUpdate(fiber, update);
    if (isTopLevelUnmount) {
        var _ensureUpdateQueues2 = ensureUpdateQueues(fiber),
            queue1 = _ensureUpdateQueues2[0],
            queue2 = _ensureUpdateQueues2[1];
        null !== queue1 && null !== update.next && (update.next = null, queue1.last = update), null !== queue2 && null !== update2 && null !== update2.next && (update2.next = null, queue2.last = update);
    }
}

var addTopLevelUpdate_1 = addTopLevelUpdate$1;

function getStateFromUpdate(update, instance, prevState, props) {
    var partialState = update.partialState;
    if ("function" == typeof partialState) {
        return partialState.call(instance, prevState, props);
    }
    return partialState;
}

function beginUpdateQueue(current, workInProgress, queue, instance, prevState, props, priorityLevel) {
    if (null !== current && current.updateQueue === queue) {
        var currentQueue = queue;
        queue = workInProgress.updateQueue = {
            first: currentQueue.first,
            last: currentQueue.last,
            callbackList: null,
            hasForceUpdate: !1
        };
    }
    queue.isProcessing = !0;
    for (var callbackList = queue.callbackList, hasForceUpdate = queue.hasForceUpdate, state = prevState, dontMutatePrevState = !0, update = queue.first; null !== update && comparePriority(update.priorityLevel, priorityLevel) <= 0;) {
        queue.first = update.next, null === queue.first && (queue.last = null);
        var _partialState = void 0;
        update.isReplace ? (state = getStateFromUpdate(update, instance, state, props), dontMutatePrevState = !0) : (_partialState = getStateFromUpdate(update, instance, state, props)) && (state = dontMutatePrevState ? _extends2({}, state, _partialState) : _extends2(state, _partialState), dontMutatePrevState = !1), update.isForced && (hasForceUpdate = !0), null === update.callback || update.isTopLevelUnmount && null !== update.next || (callbackList = null !== callbackList ? callbackList : [], callbackList.push(update.callback), workInProgress.effectTag |= CallbackEffect), update = update.next;
    }
    return queue.callbackList = callbackList, queue.hasForceUpdate = hasForceUpdate, null !== queue.first || null !== callbackList || hasForceUpdate || (workInProgress.updateQueue = null), queue.isProcessing = !1, state;
}

var beginUpdateQueue_1 = beginUpdateQueue;

function commitCallbacks(finishedWork, queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) {
        queue.callbackList = null;
        for (var i = 0; i < callbackList.length; i++) {
            var _callback = callbackList[i];
            invariant("function" == typeof _callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback), _callback.call(context);
        }
    }
}

var commitCallbacks_1 = commitCallbacks,
    ReactFiberUpdateQueue = {
    addUpdate: addUpdate_1,
    addReplaceUpdate: addReplaceUpdate_1,
    addForceUpdate: addForceUpdate_1,
    getUpdatePriority: getUpdatePriority_1,
    addTopLevelUpdate: addTopLevelUpdate_1,
    beginUpdateQueue: beginUpdateQueue_1,
    commitCallbacks: commitCallbacks_1
};

function getComponentName$1(instanceOrFiber) {
    if ("function" == typeof instanceOrFiber.getName) {
        return instanceOrFiber.getName();
    }
    if ("number" == typeof instanceOrFiber.tag) {
        var fiber = instanceOrFiber,
            type = fiber.type;
        if ("string" == typeof type) return type;
        if ("function" == typeof type) return type.displayName || type.name;
    }
    return null;
}

var getComponentName_1 = getComponentName$1,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    ReactInternals = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
};

_extends2(ReactGlobalSharedState, {
    ReactComponentTreeHook: ReactInternals.ReactComponentTreeHook,
    ReactDebugCurrentFrame: ReactInternals.ReactDebugCurrentFrame
});

var ReactGlobalSharedState_1 = ReactGlobalSharedState,
    ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner,
    warning$4 = warning,
    HostRoot$2 = ReactTypeOfWork.HostRoot,
    HostComponent$2 = ReactTypeOfWork.HostComponent,
    HostText = ReactTypeOfWork.HostText,
    ClassComponent$2 = ReactTypeOfWork.ClassComponent,
    NoEffect = ReactTypeOfSideEffect.NoEffect,
    Placement = ReactTypeOfSideEffect.Placement,
    MOUNTING = 1,
    MOUNTED = 2,
    UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
        node = node.return;
    } else {
        if ((node.effectTag & Placement) !== NoEffect) return MOUNTING;
        for (; node.return;) {
            if (node = node.return, (node.effectTag & Placement) !== NoEffect) return MOUNTING;
        }
    }
    return node.tag === HostRoot$2 ? MOUNTED : UNMOUNTED;
}

var isFiberMounted$1 = function isFiberMounted$1(fiber) {
    return isFiberMountedImpl(fiber) === MOUNTED;
},
    isMounted = function isMounted(component) {
    var owner = ReactCurrentOwner.current;
    if (null !== owner && owner.tag === ClassComponent$2) {
        var ownerFiber = owner,
            instance = ownerFiber.stateNode;
        warning$4(instance._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName_1(ownerFiber) || "A component"), instance._warnedAboutRefsInRender = !0;
    }
    var fiber = ReactInstanceMap_1.get(component);
    return !!fiber && isFiberMountedImpl(fiber) === MOUNTED;
};

function assertIsMounted(fiber) {
    invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
}

function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        var state = isFiberMountedImpl(fiber);
        return invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component."), state === MOUNTING ? null : fiber;
    }
    for (var a = fiber, b = alternate; !0;) {
        var parentA = a.return,
            parentB = parentA ? parentA.alternate : null;
        if (!parentA || !parentB) break;
        if (parentA.child === parentB.child) {
            for (var child = parentA.child; child;) {
                if (child === a) return assertIsMounted(parentA), fiber;
                if (child === b) return assertIsMounted(parentA), alternate;
                child = child.sibling;
            }
            invariant(!1, "Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;else {
            for (var didFindChild = !1, _child = parentA.child; _child;) {
                if (_child === a) {
                    didFindChild = !0, a = parentA, b = parentB;
                    break;
                }
                if (_child === b) {
                    didFindChild = !0, b = parentA, a = parentB;
                    break;
                }
                _child = _child.sibling;
            }
            if (!didFindChild) {
                for (_child = parentB.child; _child;) {
                    if (_child === a) {
                        didFindChild = !0, a = parentB, b = parentA;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = !0, b = parentB, a = parentA;
                        break;
                    }
                    _child = _child.sibling;
                }
                invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "related to the return pointer.");
            }
        }
        invariant(a.alternate === b, "Return fibers should always be each others' alternates.");
    }
    return invariant(a.tag === HostRoot$2, "Unable to find node on an unmounted component."), a.stateNode.current === a ? fiber : alternate;
}

var findCurrentFiberUsingSlowPath_1 = findCurrentFiberUsingSlowPath,
    findCurrentHostFiber$1 = function findCurrentHostFiber$1(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) return null;
    for (var node = currentParent; !0;) {
        if (node.tag === HostComponent$2 || node.tag === HostText) return node;
        if (node.child) node.child.return = node, node = node.child;else {
            if (node === currentParent) return null;
            for (; !node.sibling;) {
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    return null;
},
    ReactFiberTreeReflection = {
    isFiberMounted: isFiberMounted$1,
    isMounted: isMounted,
    findCurrentFiberUsingSlowPath: findCurrentFiberUsingSlowPath_1,
    findCurrentHostFiber: findCurrentHostFiber$1
},
    valueStack = [],
    fiberStack = [],
    index = -1,
    createCursor$1 = function createCursor$1(defaultValue) {
    return {
        current: defaultValue
    };
},
    isEmpty = function isEmpty() {
    return -1 === index;
},
    pop$1 = function pop$1(cursor, fiber) {
    if (index < 0) return void warning(!1, "Unexpected pop.");
    fiber !== fiberStack[index] && warning(!1, "Unexpected Fiber popped."), cursor.current = valueStack[index], valueStack[index] = null, fiberStack[index] = null, index--;
},
    push$1 = function push$1(cursor, value, fiber) {
    index++, valueStack[index] = cursor.current, fiberStack[index] = fiber, cursor.current = value;
},
    reset = function reset() {
    for (; index > -1;) {
        valueStack[index] = null, fiberStack[index] = null, index--;
    }
},
    ReactFiberStack = {
    createCursor: createCursor$1,
    isEmpty: isEmpty,
    pop: pop$1,
    push: push$1,
    reset: reset
},
    IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$3 = ReactTypeOfWork.ClassComponent,
    HostComponent$3 = ReactTypeOfWork.HostComponent;

function describeComponentFrame(name, source, ownerName) {
    return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
}

function describeFiber(fiber) {
    switch (fiber.tag) {
        case IndeterminateComponent:
        case FunctionalComponent:
        case ClassComponent$3:
        case HostComponent$3:
            var owner = fiber._debugOwner,
                source = fiber._debugSource,
                name = getComponentName_1(fiber),
                ownerName = null;
            return owner && (ownerName = getComponentName_1(owner)), describeComponentFrame(name, source, ownerName);

        default:
            return "";
    }
}

function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
    var info = "",
        node = workInProgress;
    do {
        info += describeFiber(node), node = node.return;
    } while (node);
    return info;
}

var ReactFiberComponentTreeHook = {
    getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1,
    describeComponentFrame: describeComponentFrame
},
    getComponentName$3 = getComponentName_1,
    _require$1 = ReactFiberComponentTreeHook,
    getStackAddendumByWorkInProgressFiber = _require$1.getStackAddendumByWorkInProgressFiber;

function getCurrentFiberOwnerName() {
    var fiber = ReactDebugCurrentFiber$2.current;
    return null === fiber ? null : null != fiber._debugOwner ? getComponentName$3(fiber._debugOwner) : null;
}

function getCurrentFiberStackAddendum() {
    var fiber = ReactDebugCurrentFiber$2.current;
    return null === fiber ? null : getStackAddendumByWorkInProgressFiber(fiber);
}

var ReactDebugCurrentFiber$2 = {
    current: null,
    phase: null,
    getCurrentFiberOwnerName: getCurrentFiberOwnerName,
    getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
},
    ReactDebugCurrentFiber_1 = ReactDebugCurrentFiber$2,
    ReactDebugFiberPerf = null,
    _require$2 = ReactTypeOfWork,
    HostRoot$3 = _require$2.HostRoot,
    HostComponent$4 = _require$2.HostComponent,
    HostText$1 = _require$2.HostText,
    HostPortal = _require$2.HostPortal,
    YieldComponent = _require$2.YieldComponent,
    Fragment = _require$2.Fragment,
    getComponentName$4 = getComponentName_1,
    reactEmoji = "⚛",
    warningEmoji = "⛔",
    supportsUserTiming = "undefined" != typeof performance && "function" == typeof performance.mark && "function" == typeof performance.clearMarks && "function" == typeof performance.measure && "function" == typeof performance.clearMeasures,
    currentFiber = null,
    currentPhase = null,
    currentPhaseFiber = null,
    isCommitting = !1,
    hasScheduledUpdateInCurrentCommit = !1,
    hasScheduledUpdateInCurrentPhase = !1,
    commitCountInCurrentWorkLoop = 0,
    effectCountInCurrentCommit = 0,
    labelsInCurrentCommit = new Set(),
    formatMarkName = function formatMarkName(markName) {
    return reactEmoji + " " + markName;
},
    formatLabel = function formatLabel(label, warning$$1) {
    return (warning$$1 ? warningEmoji + " " : reactEmoji + " ") + label + (warning$$1 ? " Warning: " + warning$$1 : "");
},
    beginMark = function beginMark(markName) {
    performance.mark(formatMarkName(markName));
},
    clearMark = function clearMark(markName) {
    performance.clearMarks(formatMarkName(markName));
},
    endMark = function endMark(label, markName, warning$$1) {
    var formattedMarkName = formatMarkName(markName),
        formattedLabel = formatLabel(label, warning$$1);
    try {
        performance.measure(formattedLabel, formattedMarkName);
    } catch (err) {}
    performance.clearMarks(formattedMarkName), performance.clearMeasures(formattedLabel);
},
    getFiberMarkName = function getFiberMarkName(label, debugID) {
    return label + " (#" + debugID + ")";
},
    getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
    return null === phase ? componentName + " [" + (isMounted ? "update" : "mount") + "]" : componentName + "." + phase;
},
    beginFiberMark = function beginFiberMark(fiber, phase) {
    var componentName = getComponentName$4(fiber) || "Unknown",
        debugID = fiber._debugID,
        isMounted = null !== fiber.alternate,
        label = getFiberLabel(componentName, isMounted, phase);
    if (isCommitting && labelsInCurrentCommit.has(label)) return !1;
    labelsInCurrentCommit.add(label);
    var markName = getFiberMarkName(label, debugID);
    return beginMark(markName), !0;
},
    clearFiberMark = function clearFiberMark(fiber, phase) {
    var componentName = getComponentName$4(fiber) || "Unknown",
        debugID = fiber._debugID,
        isMounted = null !== fiber.alternate,
        label = getFiberLabel(componentName, isMounted, phase),
        markName = getFiberMarkName(label, debugID);
    clearMark(markName);
},
    endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
    var componentName = getComponentName$4(fiber) || "Unknown",
        debugID = fiber._debugID,
        isMounted = null !== fiber.alternate,
        label = getFiberLabel(componentName, isMounted, phase),
        markName = getFiberMarkName(label, debugID);
    endMark(label, markName, warning$$1);
},
    shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
    switch (fiber.tag) {
        case HostRoot$3:
        case HostComponent$4:
        case HostText$1:
        case HostPortal:
        case YieldComponent:
        case Fragment:
            return !0;

        default:
            return !1;
    }
},
    clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
    null !== currentPhase && null !== currentPhaseFiber && clearFiberMark(currentPhaseFiber, currentPhase), currentPhaseFiber = null, currentPhase = null, hasScheduledUpdateInCurrentPhase = !1;
},
    pauseTimers = function pauseTimers() {
    for (var fiber = currentFiber; fiber;) {
        fiber._debugIsCurrentlyTiming && endFiberMark(fiber, null, null), fiber = fiber.return;
    }
},
    resumeTimersRecursively = function resumeTimersRecursively(fiber) {
    null !== fiber.return && resumeTimersRecursively(fiber.return), fiber._debugIsCurrentlyTiming && beginFiberMark(fiber, null);
},
    resumeTimers = function resumeTimers() {
    null !== currentFiber && resumeTimersRecursively(currentFiber);
};

ReactDebugFiberPerf = {
    recordEffect: function recordEffect() {
        effectCountInCurrentCommit++;
    },
    recordScheduleUpdate: function recordScheduleUpdate() {
        isCommitting && (hasScheduledUpdateInCurrentCommit = !0), null !== currentPhase && "componentWillMount" !== currentPhase && "componentWillReceiveProps" !== currentPhase && (hasScheduledUpdateInCurrentPhase = !0);
    },
    startWorkTimer: function startWorkTimer(fiber) {
        supportsUserTiming && !shouldIgnoreFiber(fiber) && (currentFiber = fiber, beginFiberMark(fiber, null) && (fiber._debugIsCurrentlyTiming = !0));
    },
    cancelWorkTimer: function cancelWorkTimer(fiber) {
        supportsUserTiming && !shouldIgnoreFiber(fiber) && (fiber._debugIsCurrentlyTiming = !1, clearFiberMark(fiber, null));
    },
    stopWorkTimer: function stopWorkTimer(fiber) {
        supportsUserTiming && !shouldIgnoreFiber(fiber) && (currentFiber = fiber.return, fiber._debugIsCurrentlyTiming && (fiber._debugIsCurrentlyTiming = !1, endFiberMark(fiber, null, null)));
    },
    startPhaseTimer: function startPhaseTimer(fiber, phase) {
        supportsUserTiming && (clearPendingPhaseMeasurement(), beginFiberMark(fiber, phase) && (currentPhaseFiber = fiber, currentPhase = phase));
    },
    stopPhaseTimer: function stopPhaseTimer() {
        if (supportsUserTiming) {
            if (null !== currentPhase && null !== currentPhaseFiber) {
                endFiberMark(currentPhaseFiber, currentPhase, hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null);
            }
            currentPhase = null, currentPhaseFiber = null;
        }
    },
    startWorkLoopTimer: function startWorkLoopTimer() {
        supportsUserTiming && (commitCountInCurrentWorkLoop = 0, beginMark("(React Tree Reconciliation)"), resumeTimers());
    },
    stopWorkLoopTimer: function stopWorkLoopTimer() {
        if (supportsUserTiming) {
            var warning$$1 = commitCountInCurrentWorkLoop > 1 ? "There were cascading updates" : null;
            commitCountInCurrentWorkLoop = 0, pauseTimers(), endMark("(React Tree Reconciliation)", "(React Tree Reconciliation)", warning$$1);
        }
    },
    startCommitTimer: function startCommitTimer() {
        supportsUserTiming && (isCommitting = !0, hasScheduledUpdateInCurrentCommit = !1, labelsInCurrentCommit.clear(), beginMark("(Committing Changes)"));
    },
    stopCommitTimer: function stopCommitTimer() {
        if (supportsUserTiming) {
            var warning$$1 = null;
            hasScheduledUpdateInCurrentCommit ? warning$$1 = "Lifecycle hook scheduled a cascading update" : commitCountInCurrentWorkLoop > 0 && (warning$$1 = "Caused by a cascading update in earlier commit"), hasScheduledUpdateInCurrentCommit = !1, commitCountInCurrentWorkLoop++, isCommitting = !1, labelsInCurrentCommit.clear(), endMark("(Committing Changes)", "(Committing Changes)", warning$$1);
        }
    },
    startCommitHostEffectsTimer: function startCommitHostEffectsTimer() {
        supportsUserTiming && (effectCountInCurrentCommit = 0, beginMark("(Committing Host Effects)"));
    },
    stopCommitHostEffectsTimer: function stopCommitHostEffectsTimer() {
        if (supportsUserTiming) {
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0, endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
    },
    startCommitLifeCyclesTimer: function startCommitLifeCyclesTimer() {
        supportsUserTiming && (effectCountInCurrentCommit = 0, beginMark("(Calling Lifecycle Methods)"));
    },
    stopCommitLifeCyclesTimer: function stopCommitLifeCyclesTimer() {
        if (supportsUserTiming) {
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0, endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
    }
};

var ReactDebugFiberPerf_1 = ReactDebugFiberPerf,
    _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    isFiberMounted = ReactFiberTreeReflection.isFiberMounted,
    ClassComponent$1 = ReactTypeOfWork.ClassComponent,
    HostRoot$1 = ReactTypeOfWork.HostRoot,
    createCursor = ReactFiberStack.createCursor,
    pop = ReactFiberStack.pop,
    push = ReactFiberStack.push,
    ReactDebugCurrentFiber$1 = ReactDebugCurrentFiber_1,
    _require4 = ReactGlobalSharedState_1,
    ReactDebugCurrentFrame = _require4.ReactDebugCurrentFrame,
    _require5 = ReactDebugFiberPerf_1,
    startPhaseTimer = _require5.startPhaseTimer,
    stopPhaseTimer = _require5.stopPhaseTimer,
    warnedAboutMissingGetChildContext = {},
    contextStackCursor = createCursor(emptyObject),
    didPerformWorkStackCursor = createCursor(!1),
    previousContext = emptyObject;

function getUnmaskedContext(workInProgress) {
    return isContextProvider$1(workInProgress) ? previousContext : contextStackCursor.current;
}

var getUnmaskedContext_1 = getUnmaskedContext;

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

var cacheContext_1 = cacheContext,
    getMaskedContext = function getMaskedContext(workInProgress, unmaskedContext) {
    var type = workInProgress.type,
        contextTypes = type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {};
    for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
    }var name = getComponentName_1(workInProgress) || "Unknown";
    return ReactDebugCurrentFrame.current = workInProgress, checkPropTypes(contextTypes, context, "context", name, ReactDebugCurrentFrame.getStackAddendum), ReactDebugCurrentFrame.current = null, instance && cacheContext(workInProgress, unmaskedContext, context), context;
},
    hasContextChanged = function hasContextChanged() {
    return didPerformWorkStackCursor.current;
};

function isContextConsumer(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.contextTypes;
}

var isContextConsumer_1 = isContextConsumer;

function isContextProvider$1(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.childContextTypes;
}

var isContextProvider_1 = isContextProvider$1;

function popContextProvider(fiber) {
    isContextProvider$1(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
}

var popContextProvider_1 = popContextProvider,
    pushTopLevelContextObject = function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack"), push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
};

function processChildContext$1(fiber, parentContext, isReconciling) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" != typeof instance.getChildContext) {
        var componentName = getComponentName_1(fiber) || "Unknown";
        return warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, warning(!1, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName)), parentContext;
    }
    var childContext = void 0;
    ReactDebugCurrentFiber$1.phase = "getChildContext", startPhaseTimer(fiber, "getChildContext"), childContext = instance.getChildContext(), stopPhaseTimer(), ReactDebugCurrentFiber$1.phase = null;
    for (var contextKey in childContext) {
        invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName_1(fiber) || "Unknown", contextKey);
    }var name = getComponentName_1(fiber) || "Unknown",
        workInProgress = isReconciling ? fiber : null;
    return ReactDebugCurrentFrame.current = workInProgress, checkPropTypes(childContextTypes, childContext, "child context", name, ReactDebugCurrentFrame.getStackAddendum), ReactDebugCurrentFrame.current = null, _extends$2({}, parentContext, childContext);
}

var processChildContext_1 = processChildContext$1,
    pushContextProvider = function pushContextProvider(workInProgress) {
    if (!isContextProvider$1(workInProgress)) return !1;
    var instance = workInProgress.stateNode,
        memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress), push(didPerformWorkStackCursor, !1, workInProgress), !0;
},
    invalidateContextProvider = function invalidateContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point.");
    var mergedContext = processChildContext$1(workInProgress, previousContext, !0);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, mergedContext, workInProgress), push(didPerformWorkStackCursor, !0, workInProgress);
},
    resetContext = function resetContext() {
    previousContext = emptyObject, contextStackCursor.current = emptyObject, didPerformWorkStackCursor.current = !1;
},
    findCurrentUnmaskedContext$1 = function findCurrentUnmaskedContext$1(fiber) {
    invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent$1, "Expected subtree parent to be a mounted class component");
    for (var node = fiber; node.tag !== HostRoot$1;) {
        if (isContextProvider$1(node)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
        var parent = node.return;
        invariant(parent, "Found unexpected detached subtree parent"), node = parent;
    }
    return node.stateNode.context;
},
    ReactFiberContext = {
    getUnmaskedContext: getUnmaskedContext_1,
    cacheContext: cacheContext_1,
    getMaskedContext: getMaskedContext,
    hasContextChanged: hasContextChanged,
    isContextConsumer: isContextConsumer_1,
    isContextProvider: isContextProvider_1,
    popContextProvider: popContextProvider_1,
    pushTopLevelContextObject: pushTopLevelContextObject,
    processChildContext: processChildContext_1,
    pushContextProvider: pushContextProvider,
    invalidateContextProvider: invalidateContextProvider,
    resetContext: resetContext,
    findCurrentUnmaskedContext: findCurrentUnmaskedContext$1
},
    ReactTypeOfInternalContext = {
    NoContext: 0,
    AsyncUpdates: 1
},
    IndeterminateComponent$1 = ReactTypeOfWork.IndeterminateComponent,
    ClassComponent$4 = ReactTypeOfWork.ClassComponent,
    HostRoot$4 = ReactTypeOfWork.HostRoot,
    HostComponent$5 = ReactTypeOfWork.HostComponent,
    HostText$2 = ReactTypeOfWork.HostText,
    HostPortal$1 = ReactTypeOfWork.HostPortal,
    CoroutineComponent = ReactTypeOfWork.CoroutineComponent,
    YieldComponent$1 = ReactTypeOfWork.YieldComponent,
    Fragment$1 = ReactTypeOfWork.Fragment,
    NoWork$1 = ReactPriorityLevel.NoWork,
    NoContext = ReactTypeOfInternalContext.NoContext,
    NoEffect$1 = ReactTypeOfSideEffect.NoEffect,
    getComponentName$5 = getComponentName_1,
    hasBadMapPolyfill = !1;

try {
    var nonExtensibleObject = Object.preventExtensions({});
    new Map([[nonExtensibleObject, null]]), new Set([nonExtensibleObject]);
} catch (e) {
    hasBadMapPolyfill = !0;
}

var debugCounter = 1,
    createFiber = function createFiber(tag, key, internalContextTag) {
    var fiber = {
        tag: tag,
        key: key,
        type: null,
        stateNode: null,
        return: null,
        child: null,
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: null,
        updateQueue: null,
        memoizedState: null,
        internalContextTag: internalContextTag,
        effectTag: NoEffect$1,
        nextEffect: null,
        firstEffect: null,
        lastEffect: null,
        pendingWorkPriority: NoWork$1,
        alternate: null
    };
    return fiber._debugID = debugCounter++, fiber._debugSource = null, fiber._debugOwner = null, fiber._debugIsCurrentlyTiming = !1, hasBadMapPolyfill || "function" != typeof Object.preventExtensions || Object.preventExtensions(fiber), fiber;
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

var createWorkInProgress = function createWorkInProgress(current, renderPriority) {
    var workInProgress = current.alternate;
    return null === workInProgress ? (workInProgress = createFiber(current.tag, current.key, current.internalContextTag), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress._debugID = current._debugID, workInProgress._debugSource = current._debugSource, workInProgress._debugOwner = current._debugOwner, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.effectTag = NoWork$1, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null), workInProgress.pendingWorkPriority = renderPriority, workInProgress.child = current.child, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.sibling = current.sibling, workInProgress.index = current.index, workInProgress.ref = current.ref, workInProgress;
},
    createHostRootFiber$1 = function createHostRootFiber$1() {
    return createFiber(HostRoot$4, null, NoContext);
},
    createFiberFromElement = function createFiberFromElement(element, internalContextTag, priorityLevel) {
    var owner = null;
    owner = element._owner;
    var fiber = createFiberFromElementType(element.type, element.key, internalContextTag, owner);
    return fiber.pendingProps = element.props, fiber.pendingWorkPriority = priorityLevel, fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
},
    createFiberFromFragment = function createFiberFromFragment(elements, internalContextTag, priorityLevel) {
    var fiber = createFiber(Fragment$1, null, internalContextTag);
    return fiber.pendingProps = elements, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromText = function createFiberFromText(content, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostText$2, null, internalContextTag);
    return fiber.pendingProps = content, fiber.pendingWorkPriority = priorityLevel, fiber;
};

function createFiberFromElementType(type, key, internalContextTag, debugOwner) {
    var fiber = void 0;
    if ("function" == typeof type) fiber = shouldConstruct(type) ? createFiber(ClassComponent$4, key, internalContextTag) : createFiber(IndeterminateComponent$1, key, internalContextTag), fiber.type = type;else if ("string" == typeof type) fiber = createFiber(HostComponent$5, key, internalContextTag), fiber.type = type;else if ("object" == typeof type && null !== type && "number" == typeof type.tag) fiber = type;else {
        var info = "";
        (void 0 === type || "object" == typeof type && null !== type && 0 === Object.keys(type).length) && (info += " You likely forgot to export your component from the file " + "it's defined in.");
        var ownerName = debugOwner ? getComponentName$5(debugOwner) : null;
        ownerName && (info += "\n\nCheck the render method of `" + ownerName + "`."), invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
    }
    return fiber;
}

var createFiberFromElementType_1 = createFiberFromElementType,
    createFiberFromHostInstanceForDeletion = function createFiberFromHostInstanceForDeletion() {
    var fiber = createFiber(HostComponent$5, null, NoContext);
    return fiber.type = "DELETED", fiber;
},
    createFiberFromCoroutine = function createFiberFromCoroutine(coroutine, internalContextTag, priorityLevel) {
    var fiber = createFiber(CoroutineComponent, coroutine.key, internalContextTag);
    return fiber.type = coroutine.handler, fiber.pendingProps = coroutine, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromYield = function createFiberFromYield(yieldNode, internalContextTag, priorityLevel) {
    return createFiber(YieldComponent$1, null, internalContextTag);
},
    createFiberFromPortal = function createFiberFromPortal(portal, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostPortal$1, portal.key, internalContextTag);
    return fiber.pendingProps = portal.children || [], fiber.pendingWorkPriority = priorityLevel, fiber.stateNode = {
        containerInfo: portal.containerInfo,
        implementation: portal.implementation
    }, fiber;
},
    largerPriority = function largerPriority(p1, p2) {
    return p1 !== NoWork$1 && (p2 === NoWork$1 || p2 > p1) ? p1 : p2;
},
    ReactFiber = {
    createWorkInProgress: createWorkInProgress,
    createHostRootFiber: createHostRootFiber$1,
    createFiberFromElement: createFiberFromElement,
    createFiberFromFragment: createFiberFromFragment,
    createFiberFromText: createFiberFromText,
    createFiberFromElementType: createFiberFromElementType_1,
    createFiberFromHostInstanceForDeletion: createFiberFromHostInstanceForDeletion,
    createFiberFromCoroutine: createFiberFromCoroutine,
    createFiberFromYield: createFiberFromYield,
    createFiberFromPortal: createFiberFromPortal,
    largerPriority: largerPriority
},
    createHostRootFiber = ReactFiber.createHostRootFiber,
    createFiberRoot$1 = function createFiberRoot$1(containerInfo) {
    var uninitializedFiber = createHostRootFiber(),
        root = {
        current: uninitializedFiber,
        containerInfo: containerInfo,
        isScheduled: !1,
        nextScheduledRoot: null,
        context: null,
        pendingContext: null
    };
    return uninitializedFiber.stateNode = root, root;
},
    ReactFiberRoot = {
    createFiberRoot: createFiberRoot$1
},
    REACT_COROUTINE_TYPE$1,
    REACT_YIELD_TYPE$1;

"function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") ? (REACT_COROUTINE_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.coroutine"), REACT_YIELD_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.yield")) : (REACT_COROUTINE_TYPE$1 = 60104, REACT_YIELD_TYPE$1 = 60105);

var createCoroutine = function createCoroutine(children, handler, props) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
        coroutine = {
        $$typeof: REACT_COROUTINE_TYPE$1,
        key: null == key ? null : "" + key,
        children: children,
        handler: handler,
        props: props
    };
    return Object.freeze && (Object.freeze(coroutine.props), Object.freeze(coroutine)), coroutine;
},
    createYield = function createYield(value) {
    var yieldNode = {
        $$typeof: REACT_YIELD_TYPE$1,
        value: value
    };
    return Object.freeze && Object.freeze(yieldNode), yieldNode;
},
    isCoroutine = function isCoroutine(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_COROUTINE_TYPE$1;
},
    isYield = function isYield(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_YIELD_TYPE$1;
},
    REACT_YIELD_TYPE_1 = REACT_YIELD_TYPE$1,
    REACT_COROUTINE_TYPE_1 = REACT_COROUTINE_TYPE$1,
    ReactCoroutine = {
    createCoroutine: createCoroutine,
    createYield: createYield,
    isCoroutine: isCoroutine,
    isYield: isYield,
    REACT_YIELD_TYPE: REACT_YIELD_TYPE_1,
    REACT_COROUTINE_TYPE: REACT_COROUTINE_TYPE_1
},
    REACT_COROUTINE_TYPE = ReactCoroutine.REACT_COROUTINE_TYPE,
    REACT_YIELD_TYPE = ReactCoroutine.REACT_YIELD_TYPE,
    REACT_PORTAL_TYPE$1 = ReactPortal.REACT_PORTAL_TYPE,
    _require3$3 = ReactDebugCurrentFiber_1,
    getCurrentFiberStackAddendum$1 = _require3$3.getCurrentFiberStackAddendum,
    warning$7 = warning,
    didWarnAboutMaps = !1,
    ownerHasKeyUseWarning = {},
    warnForMissingKey = function warnForMissingKey(child) {
    if (null !== child && "object" == typeof child && child._store && !child._store.validated && null == child.key) {
        invariant("object" == typeof child._store, "React Component in warnForMissingKey should have a _store"), child._store.validated = !0;
        var currentComponentErrorInfo = "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + (getCurrentFiberStackAddendum$1() || "");
        ownerHasKeyUseWarning[currentComponentErrorInfo] || (ownerHasKeyUseWarning[currentComponentErrorInfo] = !0, warning$7(!1, "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.%s", getCurrentFiberStackAddendum$1()));
    }
},
    createWorkInProgress$2 = ReactFiber.createWorkInProgress,
    createFiberFromElement$1 = ReactFiber.createFiberFromElement,
    createFiberFromFragment$1 = ReactFiber.createFiberFromFragment,
    createFiberFromText$1 = ReactFiber.createFiberFromText,
    createFiberFromCoroutine$1 = ReactFiber.createFiberFromCoroutine,
    createFiberFromYield$1 = ReactFiber.createFiberFromYield,
    createFiberFromPortal$1 = ReactFiber.createFiberFromPortal,
    isArray = Array.isArray,
    FunctionalComponent$2 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$7 = ReactTypeOfWork.ClassComponent,
    HostText$4 = ReactTypeOfWork.HostText,
    HostPortal$4 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$2 = ReactTypeOfWork.CoroutineComponent,
    YieldComponent$3 = ReactTypeOfWork.YieldComponent,
    Fragment$3 = ReactTypeOfWork.Fragment,
    NoEffect$2 = ReactTypeOfSideEffect.NoEffect,
    Placement$3 = ReactTypeOfSideEffect.Placement,
    Deletion$1 = ReactTypeOfSideEffect.Deletion,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103;

function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || void 0 === maybeIterable) return null;
    var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    return "function" == typeof iteratorFn ? iteratorFn : null;
}

function coerceRef(current, element) {
    var mixedRef = element.ref;
    if (null !== mixedRef && "function" != typeof mixedRef && element._owner) {
        var owner = element._owner,
            inst = void 0;
        if (owner) if ("number" == typeof owner.tag) {
            var ownerFiber = owner;
            invariant(ownerFiber.tag === ClassComponent$7, "Stateless function components cannot have refs."), inst = ownerFiber.stateNode;
        } else inst = owner.getPublicInstance();
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
        var stringRef = "" + mixedRef;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;
        var ref = function ref(value) {
            var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
            null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        return ref._stringRef = stringRef, ref;
    }
    return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) {
        var addendum = "";
        addendum = " If you meant to render a collection of children, use an array " + "instead." + (getCurrentFiberStackAddendum$1() || ""), invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
    }
}

function ChildReconciler(shouldClone, shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            if (!shouldClone) {
                if (null === childToDelete.alternate) return;
                childToDelete = childToDelete.alternate;
            }
            var last = returnFiber.lastEffect;
            null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete, childToDelete.nextEffect = null, childToDelete.effectTag = Deletion$1;
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for (var childToDelete = currentFirstChild; null !== childToDelete;) {
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
        }return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
        for (var existingChildren = new Map(), existingChild = currentFirstChild; null !== existingChild;) {
            null !== existingChild.key ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
        }return existingChildren;
    }
    function useFiber(fiber, priority) {
        if (shouldClone) {
            var clone = createWorkInProgress$2(fiber, priority);
            return clone.index = 0, clone.sibling = null, clone;
        }
        return fiber.pendingWorkPriority = priority, fiber.effectTag = NoEffect$2, fiber.index = 0, fiber.sibling = null, fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        if (newFiber.index = newIndex, !shouldTrackSideEffects) return lastPlacedIndex;
        var current = newFiber.alternate;
        if (null !== current) {
            var oldIndex = current.index;
            return oldIndex < lastPlacedIndex ? (newFiber.effectTag = Placement$3, lastPlacedIndex) : oldIndex;
        }
        return newFiber.effectTag = Placement$3, lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        return shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = Placement$3), newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, priority) {
        if (null === current || current.tag !== HostText$4) {
            var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = textContent, existing.return = returnFiber, existing;
    }
    function updateElement(returnFiber, current, element, priority) {
        if (null === current || current.type !== element.type) {
            var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
            return created.ref = coerceRef(current, element), created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.ref = coerceRef(current, element), existing.pendingProps = element.props, existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
    }
    function updateCoroutine(returnFiber, current, coroutine, priority) {
        if (null === current || current.tag !== CoroutineComponent$2) {
            var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
    }
    function updateYield(returnFiber, current, yieldNode, priority) {
        if (null === current || current.tag !== YieldComponent$3) {
            var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
            return created.type = yieldNode.value, created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.type = yieldNode.value, existing.return = returnFiber, existing;
    }
    function updatePortal(returnFiber, current, portal, priority) {
        if (null === current || current.tag !== HostPortal$4 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
    }
    function updateFragment(returnFiber, current, fragment, priority) {
        if (null === current || current.tag !== Fragment$3) {
            var created = createFiberFromFragment$1(fragment, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = fragment, existing.return = returnFiber, existing;
    }
    function createChild(returnFiber, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            var created = createFiberFromText$1("" + newChild, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    var _created = createFiberFromElement$1(newChild, returnFiber.internalContextTag, priority);
                    return _created.ref = coerceRef(null, newChild), _created.return = returnFiber, _created;

                case REACT_COROUTINE_TYPE:
                    var _created2 = createFiberFromCoroutine$1(newChild, returnFiber.internalContextTag, priority);
                    return _created2.return = returnFiber, _created2;

                case REACT_YIELD_TYPE:
                    var _created3 = createFiberFromYield$1(newChild, returnFiber.internalContextTag, priority);
                    return _created3.type = newChild.value, _created3.return = returnFiber, _created3;

                case REACT_PORTAL_TYPE$1:
                    var _created4 = createFiberFromPortal$1(newChild, returnFiber.internalContextTag, priority);
                    return _created4.return = returnFiber, _created4;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created5 = createFiberFromFragment$1(newChild, returnFiber.internalContextTag, priority);
                return _created5.return = returnFiber, _created5;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, priority) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" == typeof newChild || "number" == typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, priority);
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_COROUTINE_TYPE:
                    return newChild.key === key ? updateCoroutine(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_YIELD_TYPE:
                    return null === key ? updateYield(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_PORTAL_TYPE$1:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, priority) : null;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, priority);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            return updateTextNode(returnFiber, existingChildren.get(newIdx) || null, "" + newChild, priority);
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return updateElement(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_COROUTINE_TYPE:
                    return updateCoroutine(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_YIELD_TYPE:
                    return updateYield(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);

                case REACT_PORTAL_TYPE$1:
                    return updatePortal(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                return updateFragment(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function warnOnInvalidKey(child, knownKeys) {
        if ("object" != typeof child || null === child) return knownKeys;
        switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_COROUTINE_TYPE:
            case REACT_PORTAL_TYPE$1:
                warnForMissingKey(child);
                var key = child.key;
                if ("string" != typeof key) break;
                if (null === knownKeys) {
                    knownKeys = new Set(), knownKeys.add(key);
                    break;
                }
                if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                }
                warning$7(!1, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", key, getCurrentFiberStackAddendum$1());
        }
        return knownKeys;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, priority) {
        for (var knownKeys = null, i = 0; i < newChildren.length; i++) {
            knownKeys = warnOnInvalidKey(newChildren[i], knownKeys);
        }
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], priority);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], priority);
                _newFiber && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], priority);
            _newFiber2 && (shouldTrackSideEffects && null !== _newFiber2.alternate && existingChildren.delete(null === _newFiber2.key ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, priority) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (invariant("function" == typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue."), "function" == typeof newChildrenIterable.entries) {
            newChildrenIterable.entries === iteratorFn && (warning$7(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentFiberStackAddendum$1()), didWarnAboutMaps = !0);
        }
        var _newChildren = iteratorFn.call(newChildrenIterable);
        if (_newChildren) for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
            var child = _step.value;
            knownKeys = warnOnInvalidKey(child, knownKeys);
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        invariant(null != newChildren, "An iterable object provided no iterator.");
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, priority);
            if (null === newFiber) {
                oldFiber || (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, priority);
                null !== _newFiber3 && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, priority);
            null !== _newFiber4 && (shouldTrackSideEffects && null !== _newFiber4.alternate && existingChildren.delete(null === _newFiber4.key ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, priority) {
        if (null !== currentFirstChild && currentFirstChild.tag === HostText$4) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, priority);
            return existing.pendingProps = textContent, existing.return = returnFiber, existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleElement(returnFiber, currentFirstChild, element, priority) {
        for (var key = element.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.type === element.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.ref = coerceRef(child, element), existing.pendingProps = element.props, existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
        return created.ref = coerceRef(currentFirstChild, element), created.return = returnFiber, created;
    }
    function reconcileSingleCoroutine(returnFiber, currentFirstChild, coroutine, priority) {
        for (var key = coroutine.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === CoroutineComponent$2) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleYield(returnFiber, currentFirstChild, yieldNode, priority) {
        var child = currentFirstChild;
        if (null !== child) {
            if (child.tag === YieldComponent$3) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, priority);
                return existing.type = yieldNode.value, existing.return = returnFiber, existing;
            }
            deleteRemainingChildren(returnFiber, child);
        }
        var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
        return created.type = yieldNode.value, created.return = returnFiber, created;
    }
    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, priority) {
        for (var key = portal.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === HostPortal$4 && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, priority) {
        var disableNewFiberFeatures = ReactFeatureFlags_1.disableNewFiberFeatures,
            isObject = "object" == typeof newChild && null !== newChild;
        if (isObject) if (disableNewFiberFeatures) switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        } else switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_COROUTINE_TYPE:
                return placeSingleChild(reconcileSingleCoroutine(returnFiber, currentFirstChild, newChild, priority));

            case REACT_YIELD_TYPE:
                return placeSingleChild(reconcileSingleYield(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        }
        if (disableNewFiberFeatures) switch (returnFiber.tag) {
            case ClassComponent$7:
                if (returnFiber.stateNode.render._isMockFunction && void 0 === newChild) break;
                var Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s.render(): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", Component.displayName || Component.name || "Component");
                break;

            case FunctionalComponent$2:
                var _Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s(...): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", _Component.displayName || _Component.name || "Component");
        }
        if ("string" == typeof newChild || "number" == typeof newChild) return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, priority));
        if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, priority);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, priority);
        if (isObject && throwOnInvalidObjectType(returnFiber, newChild), !disableNewFiberFeatures && void 0 === newChild) switch (returnFiber.tag) {
            case ClassComponent$7:
                if (returnFiber.stateNode.render._isMockFunction) break;

            case FunctionalComponent$2:
                var _Component2 = returnFiber.type;
                invariant(!1, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", _Component2.displayName || _Component2.name || "Component");
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
}

var reconcileChildFibers$1 = ChildReconciler(!0, !0),
    reconcileChildFibersInPlace$1 = ChildReconciler(!1, !0),
    mountChildFibersInPlace$1 = ChildReconciler(!1, !1),
    cloneChildFibers$1 = function cloneChildFibers$1(current, workInProgress) {
    if (invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented."), null !== workInProgress.child) {
        var currentChild = workInProgress.child,
            newChild = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
        for (newChild.pendingProps = currentChild.pendingProps, workInProgress.child = newChild, newChild.return = workInProgress; null !== currentChild.sibling;) {
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority), newChild.pendingProps = currentChild.pendingProps, newChild.return = workInProgress;
        }newChild.sibling = null;
    }
},
    ReactChildFiber = {
    reconcileChildFibers: reconcileChildFibers$1,
    reconcileChildFibersInPlace: reconcileChildFibersInPlace$1,
    mountChildFibersInPlace: mountChildFibersInPlace$1,
    cloneChildFibers: cloneChildFibers$1
},
    Update$1 = ReactTypeOfSideEffect.Update,
    AsyncUpdates$1 = ReactTypeOfInternalContext.AsyncUpdates,
    cacheContext$1 = ReactFiberContext.cacheContext,
    getMaskedContext$2 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$2 = ReactFiberContext.getUnmaskedContext,
    isContextConsumer$1 = ReactFiberContext.isContextConsumer,
    addUpdate$1 = ReactFiberUpdateQueue.addUpdate,
    addReplaceUpdate$1 = ReactFiberUpdateQueue.addReplaceUpdate,
    addForceUpdate$1 = ReactFiberUpdateQueue.addForceUpdate,
    beginUpdateQueue$2 = ReactFiberUpdateQueue.beginUpdateQueue,
    _require5$1 = ReactFiberContext,
    hasContextChanged$2 = _require5$1.hasContextChanged,
    isMounted$1 = ReactFiberTreeReflection.isMounted,
    isArray$1 = Array.isArray,
    _require7$1 = ReactDebugFiberPerf_1,
    startPhaseTimer$1 = _require7$1.startPhaseTimer,
    stopPhaseTimer$1 = _require7$1.stopPhaseTimer,
    warning$8 = warning,
    warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
    warning$8(null === callback || "function" == typeof callback, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
},
    ReactFiberClassComponent = function ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState) {
    var updater = {
        isMounted: isMounted$1,
        enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, warnOnInvalidCallback(callback, "setState"), addUpdate$1(fiber, partialState, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, warnOnInvalidCallback(callback, "replaceState"), addReplaceUpdate$1(fiber, state, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, warnOnInvalidCallback(callback, "forceUpdate"), addForceUpdate$1(fiber, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        }
    };
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
        if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return !0;
        var instance = workInProgress.stateNode,
            type = workInProgress.type;
        if ("function" == typeof instance.shouldComponentUpdate) {
            startPhaseTimer$1(workInProgress, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
            return stopPhaseTimer$1(), warning$8(void 0 !== shouldUpdate, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName_1(workInProgress) || "Unknown"), shouldUpdate;
        }
        return !type.prototype || !type.prototype.isPureReactComponent || !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }
    function checkClassInstance(workInProgress) {
        var instance = workInProgress.stateNode,
            type = workInProgress.type,
            name = getComponentName_1(workInProgress),
            renderPresent = instance.render;
        warning$8(renderPresent, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        warning$8(noGetInitialStateOnES6, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        warning$8(noGetDefaultPropsOnES6, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
        var noInstancePropTypes = !instance.propTypes;
        warning$8(noInstancePropTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
        var noInstanceContextTypes = !instance.contextTypes;
        warning$8(noInstanceContextTypes, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
        var noComponentShouldUpdate = "function" != typeof instance.componentShouldUpdate;
        warning$8(noComponentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name), type.prototype && type.prototype.isPureReactComponent && void 0 !== instance.shouldComponentUpdate && warning$8(!1, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName_1(workInProgress) || "A pure component");
        var noComponentDidUnmount = "function" != typeof instance.componentDidUnmount;
        warning$8(noComponentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
        var noComponentWillRecieveProps = "function" != typeof instance.componentWillRecieveProps;
        warning$8(noComponentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== workInProgress.pendingProps;
        warning$8(void 0 === instance.props || !hasMutatedProps, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
        var noInstanceDefaultProps = !instance.defaultProps;
        warning$8(noInstanceDefaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
        var state = instance.state;
        state && ("object" != typeof state || isArray$1(state)) && invariant(!1, "%s.state: must be set to an object or null", getComponentName_1(workInProgress)), "function" == typeof instance.getChildContext && invariant("object" == typeof workInProgress.type.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", getComponentName_1(workInProgress));
    }
    function resetInputPointers(workInProgress, instance) {
        instance.props = workInProgress.memoizedProps, instance.state = workInProgress.memoizedState;
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = updater, workInProgress.stateNode = instance, ReactInstanceMap_1.set(instance, workInProgress);
    }
    function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext$2(workInProgress),
            needsContext = isContextConsumer$1(workInProgress),
            context = needsContext ? getMaskedContext$2(workInProgress, unmaskedContext) : emptyObject,
            instance = new ctor(props, context);
        return adoptClassInstance(workInProgress, instance), needsContext && cacheContext$1(workInProgress, unmaskedContext, context), instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer$1(workInProgress, "componentWillMount");
        var oldState = instance.state;
        instance.componentWillMount(), stopPhaseTimer$1(), oldState !== instance.state && (warning$8(!1, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName_1(workInProgress)), updater.enqueueReplaceState(instance, instance.state, null));
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
        startPhaseTimer$1(workInProgress, "componentWillReceiveProps");
        var oldState = instance.state;
        instance.componentWillReceiveProps(newProps, newContext), stopPhaseTimer$1(), instance.state !== oldState && (warning$8(!1, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName_1(workInProgress)), updater.enqueueReplaceState(instance, instance.state, null));
    }
    function mountClassInstance(workInProgress, priorityLevel) {
        var current = workInProgress.alternate;
        checkClassInstance(workInProgress);
        var instance = workInProgress.stateNode,
            state = instance.state || null,
            props = workInProgress.pendingProps;
        invariant(props, "There must be pending props for an initial mount. This error is " + "likely caused by a bug in React. Please file an issue.");
        var unmaskedContext = getUnmaskedContext$2(workInProgress);
        if (instance.props = props, instance.state = state, instance.refs = emptyObject, instance.context = getMaskedContext$2(workInProgress, unmaskedContext), ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != workInProgress.type && !0 === workInProgress.type.unstable_asyncUpdates && (workInProgress.internalContextTag |= AsyncUpdates$1), "function" == typeof instance.componentWillMount) {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && (instance.state = beginUpdateQueue$2(current, workInProgress, updateQueue, instance, state, props, priorityLevel));
        }
        "function" == typeof instance.componentDidMount && (workInProgress.effectTag |= Update$1);
    }
    function updateClassInstance(current, workInProgress, priorityLevel) {
        var instance = workInProgress.stateNode;
        resetInputPointers(workInProgress, instance);
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps;
        newProps || (newProps = oldProps, invariant(null != newProps, "There should always be pending or memoized props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext$2(workInProgress),
            newContext = getMaskedContext$2(workInProgress, newUnmaskedContext);
        "function" != typeof instance.componentWillReceiveProps || oldProps === newProps && oldContext === newContext || callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
        var oldState = workInProgress.memoizedState,
            newState = void 0;
        if (newState = null !== workInProgress.updateQueue ? beginUpdateQueue$2(current, workInProgress, workInProgress.updateQueue, instance, oldState, newProps, priorityLevel) : oldState, !(oldProps !== newProps || oldState !== newState || hasContextChanged$2() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), !1;
        var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
        return shouldUpdate ? ("function" == typeof instance.componentWillUpdate && (startPhaseTimer$1(workInProgress, "componentWillUpdate"), instance.componentWillUpdate(newProps, newState, newContext), stopPhaseTimer$1()), "function" == typeof instance.componentDidUpdate && (workInProgress.effectTag |= Update$1)) : ("function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, newState)), instance.props = newProps, instance.state = newState, instance.context = newContext, shouldUpdate;
    }
    return {
        adoptClassInstance: adoptClassInstance,
        constructClassInstance: constructClassInstance,
        mountClassInstance: mountClassInstance,
        updateClassInstance: updateClassInstance
    };
},
    mountChildFibersInPlace = ReactChildFiber.mountChildFibersInPlace,
    reconcileChildFibers = ReactChildFiber.reconcileChildFibers,
    reconcileChildFibersInPlace = ReactChildFiber.reconcileChildFibersInPlace,
    cloneChildFibers = ReactChildFiber.cloneChildFibers,
    beginUpdateQueue$1 = ReactFiberUpdateQueue.beginUpdateQueue,
    getMaskedContext$1 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$1 = ReactFiberContext.getUnmaskedContext,
    hasContextChanged$1 = ReactFiberContext.hasContextChanged,
    pushContextProvider$1 = ReactFiberContext.pushContextProvider,
    pushTopLevelContextObject$1 = ReactFiberContext.pushTopLevelContextObject,
    invalidateContextProvider$1 = ReactFiberContext.invalidateContextProvider,
    IndeterminateComponent$2 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$1 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$6 = ReactTypeOfWork.ClassComponent,
    HostRoot$6 = ReactTypeOfWork.HostRoot,
    HostComponent$7 = ReactTypeOfWork.HostComponent,
    HostText$3 = ReactTypeOfWork.HostText,
    HostPortal$3 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$1 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$2 = ReactTypeOfWork.YieldComponent,
    Fragment$2 = ReactTypeOfWork.Fragment,
    NoWork$3 = ReactPriorityLevel.NoWork,
    OffscreenPriority$1 = ReactPriorityLevel.OffscreenPriority,
    PerformedWork$1 = ReactTypeOfSideEffect.PerformedWork,
    Placement$2 = ReactTypeOfSideEffect.Placement,
    ContentReset$1 = ReactTypeOfSideEffect.ContentReset,
    Err$1 = ReactTypeOfSideEffect.Err,
    Ref$1 = ReactTypeOfSideEffect.Ref,
    ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner,
    ReactDebugCurrentFiber$4 = ReactDebugCurrentFiber_1,
    _require7 = ReactDebugFiberPerf_1,
    cancelWorkTimer = _require7.cancelWorkTimer,
    warning$6 = warning,
    warnedAboutStatelessRefs = {},
    ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext) {
    var shouldSetTextContent = config.shouldSetTextContent,
        useSyncScheduling = config.useSyncScheduling,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance,
        _ReactFiberClassCompo = ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState),
        adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
        constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
        mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
        updateClassInstance = _ReactFiberClassCompo.updateClassInstance;
    function reconcileChildren(current, workInProgress, nextChildren) {
        reconcileChildrenAtPriority(current, workInProgress, nextChildren, workInProgress.pendingWorkPriority);
    }
    function reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel) {
        null === current ? workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, priorityLevel) : workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
    }
    function updateFragment(current, workInProgress) {
        var nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = workInProgress.memoizedProps);else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren), workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        null === ref || current && current.ref === ref || (workInProgress.effectTag |= Ref$1);
    }
    function updateFunctionalComponent(current, workInProgress) {
        var fn = workInProgress.type,
            nextProps = workInProgress.pendingProps,
            memoizedProps = workInProgress.memoizedProps;
        if (hasContextChanged$1()) null === nextProps && (nextProps = memoizedProps);else {
            if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
            if ("function" == typeof fn.shouldComponentUpdate && !fn.shouldComponentUpdate(memoizedProps, nextProps)) return memoizeProps(workInProgress, nextProps), bailoutOnAlreadyFinishedWork(current, workInProgress);
        }
        var nextChildren,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        return ReactCurrentOwner$2.current = workInProgress, ReactDebugCurrentFiber$4.phase = "render", nextChildren = fn(nextProps, context), ReactDebugCurrentFiber$4.phase = null, workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, priorityLevel) {
        var hasContext = pushContextProvider$1(workInProgress),
            shouldUpdate = void 0;
        return null === current ? workInProgress.stateNode ? invariant(!1, "Resuming work not yet implemented.") : (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, priorityLevel), shouldUpdate = !0) : shouldUpdate = updateClassInstance(current, workInProgress, priorityLevel), finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
    }
    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
        if (markRef(current, workInProgress), !shouldUpdate) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var instance = workInProgress.stateNode;
        ReactCurrentOwner$2.current = workInProgress;
        var nextChildren = void 0;
        return ReactDebugCurrentFiber$4.phase = "render", nextChildren = instance.render(), ReactDebugCurrentFiber$4.phase = null, workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeState(workInProgress, instance.state), memoizeProps(workInProgress, instance.props), hasContext && invalidateContextProvider$1(workInProgress), workInProgress.child;
    }
    function updateHostRoot(current, workInProgress, priorityLevel) {
        var root = workInProgress.stateNode;
        root.pendingContext ? pushTopLevelContextObject$1(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject$1(workInProgress, root.context, !1), pushHostContainer(workInProgress, root.containerInfo);
        var updateQueue = workInProgress.updateQueue;
        if (null !== updateQueue) {
            var prevState = workInProgress.memoizedState,
                state = beginUpdateQueue$1(current, workInProgress, updateQueue, null, prevState, null, priorityLevel);
            if (prevState === state) return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
            var element = state.element;
            return null !== current && null !== current.child || !enterHydrationState(workInProgress) ? (resetHydrationState(), reconcileChildren(current, workInProgress, element)) : (workInProgress.effectTag |= Placement$2, workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, priorityLevel)), memoizeState(workInProgress, state), workInProgress.child;
        }
        return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    function updateHostComponent(current, workInProgress, renderPriority) {
        pushHostContext(workInProgress), null === current && tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type,
            memoizedProps = workInProgress.memoizedProps,
            nextProps = workInProgress.pendingProps;
        null === nextProps && (nextProps = memoizedProps, invariant(null !== nextProps, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var prevProps = null !== current ? current.memoizedProps : null;
        if (hasContextChanged$1()) ;else if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var nextChildren = nextProps.children;
        return shouldSetTextContent(type, nextProps) ? nextChildren = null : prevProps && shouldSetTextContent(type, prevProps) && (workInProgress.effectTag |= ContentReset$1), markRef(current, workInProgress), renderPriority !== OffscreenPriority$1 && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps) ? (workInProgress.pendingWorkPriority = OffscreenPriority$1, null) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child);
    }
    function updateHostText(current, workInProgress) {
        null === current && tryToClaimNextHydratableInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        return null === nextProps && (nextProps = workInProgress.memoizedProps), memoizeProps(workInProgress, nextProps), null;
    }
    function mountIndeterminateComponent(current, workInProgress, priorityLevel) {
        invariant(null === current, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
        var value,
            fn = workInProgress.type,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        if (ReactCurrentOwner$2.current = workInProgress, value = fn(props, context), workInProgress.effectTag |= PerformedWork$1, "object" == typeof value && null !== value && "function" == typeof value.render) {
            workInProgress.tag = ClassComponent$6;
            var hasContext = pushContextProvider$1(workInProgress);
            return adoptClassInstance(workInProgress, value), mountClassInstance(workInProgress, priorityLevel), finishClassComponent(current, workInProgress, !0, hasContext);
        }
        workInProgress.tag = FunctionalComponent$1;
        var Component = workInProgress.type;
        if (Component && warning$6(!Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", Component.displayName || Component.name || "Component"), null !== workInProgress.ref) {
            var info = "",
                ownerName = ReactDebugCurrentFiber$4.getCurrentFiberOwnerName();
            ownerName && (info += "\n\nCheck the render method of `" + ownerName + "`.");
            var warningKey = ownerName || workInProgress._debugID || "",
                debugSource = workInProgress._debugSource;
            debugSource && (warningKey = debugSource.fileName + ":" + debugSource.lineNumber), warnedAboutStatelessRefs[warningKey] || (warnedAboutStatelessRefs[warningKey] = !0, warning$6(!1, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber$4.getCurrentFiberStackAddendum()));
        }
        return reconcileChildren(current, workInProgress, value), memoizeProps(workInProgress, props), workInProgress.child;
    }
    function updateCoroutineComponent(current, workInProgress) {
        var nextCoroutine = workInProgress.pendingProps;
        hasContextChanged$1() ? null === nextCoroutine && (nextCoroutine = current && current.memoizedProps, invariant(null !== nextCoroutine, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue.")) : null !== nextCoroutine && workInProgress.memoizedProps !== nextCoroutine || (nextCoroutine = workInProgress.memoizedProps);
        var nextChildren = nextCoroutine.children,
            priorityLevel = workInProgress.pendingWorkPriority;
        return null === current ? workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel), memoizeProps(workInProgress, nextCoroutine), workInProgress.stateNode;
    }
    function updatePortalComponent(current, workInProgress) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var priorityLevel = workInProgress.pendingWorkPriority,
            nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = current && current.memoizedProps, invariant(null != nextChildren, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return null === current ? (workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel), memoizeProps(workInProgress, nextChildren)) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren)), workInProgress.child;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
        return cancelWorkTimer(workInProgress), cloneChildFibers(current, workInProgress), workInProgress.child;
    }
    function bailoutOnLowPriority(current, workInProgress) {
        switch (cancelWorkTimer(workInProgress), workInProgress.tag) {
            case ClassComponent$6:
                pushContextProvider$1(workInProgress);
                break;

            case HostPortal$3:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        }
        return null;
    }
    function memoizeProps(workInProgress, nextProps) {
        workInProgress.memoizedProps = nextProps;
    }
    function memoizeState(workInProgress, nextState) {
        workInProgress.memoizedState = nextState;
    }
    function beginWork(current, workInProgress, priorityLevel) {
        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        switch (ReactDebugCurrentFiber$4.current = workInProgress, workInProgress.tag) {
            case IndeterminateComponent$2:
                return mountIndeterminateComponent(current, workInProgress, priorityLevel);

            case FunctionalComponent$1:
                return updateFunctionalComponent(current, workInProgress);

            case ClassComponent$6:
                return updateClassComponent(current, workInProgress, priorityLevel);

            case HostRoot$6:
                return updateHostRoot(current, workInProgress, priorityLevel);

            case HostComponent$7:
                return updateHostComponent(current, workInProgress, priorityLevel);

            case HostText$3:
                return updateHostText(current, workInProgress);

            case CoroutineHandlerPhase:
                workInProgress.tag = CoroutineComponent$1;

            case CoroutineComponent$1:
                return updateCoroutineComponent(current, workInProgress);

            case YieldComponent$2:
                return null;

            case HostPortal$3:
                return updatePortalComponent(current, workInProgress);

            case Fragment$2:
                return updateFragment(current, workInProgress);

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function beginFailedWork(current, workInProgress, priorityLevel) {
        if (invariant(workInProgress.tag === ClassComponent$6 || workInProgress.tag === HostRoot$6, "Invalid type of work. This error is likely caused by a bug in React. " + "Please file an issue."), workInProgress.effectTag |= Err$1, null === current ? workInProgress.child = null : workInProgress.child !== current.child && (workInProgress.child = current.child), workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        if (workInProgress.firstEffect = null, workInProgress.lastEffect = null, reconcileChildrenAtPriority(current, workInProgress, null, priorityLevel), workInProgress.tag === ClassComponent$6) {
            var instance = workInProgress.stateNode;
            workInProgress.memoizedProps = instance.props, workInProgress.memoizedState = instance.state;
        }
        return workInProgress.child;
    }
    return {
        beginWork: beginWork,
        beginFailedWork: beginFailedWork
    };
},
    reconcileChildFibers$2 = ReactChildFiber.reconcileChildFibers,
    popContextProvider$2 = ReactFiberContext.popContextProvider,
    IndeterminateComponent$3 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$3 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$8 = ReactTypeOfWork.ClassComponent,
    HostRoot$7 = ReactTypeOfWork.HostRoot,
    HostComponent$8 = ReactTypeOfWork.HostComponent,
    HostText$5 = ReactTypeOfWork.HostText,
    HostPortal$5 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$3 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase$1 = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$4 = ReactTypeOfWork.YieldComponent,
    Fragment$4 = ReactTypeOfWork.Fragment,
    Placement$4 = ReactTypeOfSideEffect.Placement,
    Ref$2 = ReactTypeOfSideEffect.Ref,
    Update$2 = ReactTypeOfSideEffect.Update,
    OffscreenPriority$2 = ReactPriorityLevel.OffscreenPriority,
    ReactDebugCurrentFiber$5 = ReactDebugCurrentFiber_1,
    ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState;
    function markUpdate(workInProgress) {
        workInProgress.effectTag |= Update$2;
    }
    function markRef(workInProgress) {
        workInProgress.effectTag |= Ref$2;
    }
    function appendAllYields(yields, workInProgress) {
        var node = workInProgress.stateNode;
        for (node && (node.return = workInProgress); null !== node;) {
            if (node.tag === HostComponent$8 || node.tag === HostText$5 || node.tag === HostPortal$5) invariant(!1, "A coroutine cannot have host component children.");else if (node.tag === YieldComponent$4) yields.push(node.type);else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function moveCoroutineToHandlerPhase(current, workInProgress) {
        var coroutine = workInProgress.memoizedProps;
        invariant(coroutine, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue."), workInProgress.tag = CoroutineHandlerPhase$1;
        var yields = [];
        appendAllYields(yields, workInProgress);
        var fn = coroutine.handler,
            props = coroutine.props,
            nextChildren = fn(props, yields),
            currentFirstChild = null !== current ? current.child : null,
            priority = workInProgress.pendingWorkPriority;
        return workInProgress.child = reconcileChildFibers$2(workInProgress, currentFirstChild, nextChildren, priority), workInProgress.child;
    }
    function appendAllChildren(parent, workInProgress) {
        for (var node = workInProgress.child; null !== node;) {
            if (node.tag === HostComponent$8 || node.tag === HostText$5) appendInitialChild(parent, node.stateNode);else if (node.tag === HostPortal$5) ;else if (null !== node.child) {
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node = node.sibling;
        }
    }
    function completeWork(current, workInProgress, renderPriority) {
        ReactDebugCurrentFiber$5.current = workInProgress;
        var newProps = workInProgress.pendingProps;
        switch (null === newProps ? newProps = workInProgress.memoizedProps : workInProgress.pendingWorkPriority === OffscreenPriority$2 && renderPriority !== OffscreenPriority$2 || (workInProgress.pendingProps = null), workInProgress.tag) {
            case FunctionalComponent$3:
                return null;

            case ClassComponent$8:
                return popContextProvider$2(workInProgress), null;

            case HostRoot$7:
                var fiberRoot = workInProgress.stateNode;
                return fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), null !== current && null !== current.child || (popHydrationState(workInProgress), workInProgress.effectTag &= ~Placement$4), null;

            case HostComponent$8:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer(),
                    type = workInProgress.type;
                if (null !== current && null != workInProgress.stateNode) {
                    var oldProps = current.memoizedProps,
                        instance = workInProgress.stateNode,
                        currentHostContext = getHostContext(),
                        updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                    workInProgress.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress), current.ref !== workInProgress.ref && markRef(workInProgress);
                } else {
                    if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _currentHostContext = getHostContext();
                    if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, rootContainerInstance) && markUpdate(workInProgress);else {
                        var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
                        appendAllChildren(_instance, workInProgress), finalizeInitialChildren(_instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress), workInProgress.stateNode = _instance;
                    }
                    null !== workInProgress.ref && markRef(workInProgress);
                }
                return null;

            case HostText$5:
                var newText = newProps;
                if (current && null != workInProgress.stateNode) {
                    current.memoizedProps !== newText && markUpdate(workInProgress);
                } else {
                    if ("string" != typeof newText) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _rootContainerInstance = getRootHostContainer(),
                        _currentHostContext2 = getHostContext();
                    popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                }
                return null;

            case CoroutineComponent$3:
                return moveCoroutineToHandlerPhase(current, workInProgress);

            case CoroutineHandlerPhase$1:
                return workInProgress.tag = CoroutineComponent$3, null;

            case YieldComponent$4:
            case Fragment$4:
                return null;

            case HostPortal$5:
                return markUpdate(workInProgress), popHostContainer(workInProgress), null;

            case IndeterminateComponent$3:
                invariant(!1, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    return {
        completeWork: completeWork
    };
},
    rendererID = null,
    injectInternals$1 = null,
    onCommitRoot$1 = null,
    onCommitUnmount$1 = null;

if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && __REACT_DEVTOOLS_GLOBAL_HOOK__.supportsFiber) {
    var inject$1 = __REACT_DEVTOOLS_GLOBAL_HOOK__.inject,
        onCommitFiberRoot = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberRoot,
        onCommitFiberUnmount = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberUnmount;
    injectInternals$1 = function injectInternals$1(internals) {
        warning(null == rendererID, "Cannot inject into DevTools twice."), rendererID = inject$1(internals);
    }, onCommitRoot$1 = function onCommitRoot$1(root) {
        if (null != rendererID) try {
            onCommitFiberRoot(rendererID, root);
        } catch (err) {
            warning(!1, "React DevTools encountered an error: %s", err);
        }
    }, onCommitUnmount$1 = function onCommitUnmount$1(fiber) {
        if (null != rendererID) try {
            onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            warning(!1, "React DevTools encountered an error: %s", err);
        }
    };
}

var injectInternals_1 = injectInternals$1,
    onCommitRoot_1 = onCommitRoot$1,
    onCommitUnmount_1 = onCommitUnmount$1,
    ReactFiberDevToolsHook = {
    injectInternals: injectInternals_1,
    onCommitRoot: onCommitRoot_1,
    onCommitUnmount: onCommitUnmount_1
},
    ClassComponent$9 = ReactTypeOfWork.ClassComponent,
    HostRoot$8 = ReactTypeOfWork.HostRoot,
    HostComponent$9 = ReactTypeOfWork.HostComponent,
    HostText$6 = ReactTypeOfWork.HostText,
    HostPortal$6 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$4 = ReactTypeOfWork.CoroutineComponent,
    commitCallbacks$1 = ReactFiberUpdateQueue.commitCallbacks,
    onCommitUnmount = ReactFiberDevToolsHook.onCommitUnmount,
    invokeGuardedCallback$2 = ReactErrorUtils_1.invokeGuardedCallback,
    Placement$5 = ReactTypeOfSideEffect.Placement,
    Update$3 = ReactTypeOfSideEffect.Update,
    Callback$1 = ReactTypeOfSideEffect.Callback,
    ContentReset$2 = ReactTypeOfSideEffect.ContentReset,
    _require5$2 = ReactDebugFiberPerf_1,
    startPhaseTimer$2 = _require5$2.startPhaseTimer,
    stopPhaseTimer$2 = _require5$2.stopPhaseTimer,
    ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError) {
    var commitMount = config.commitMount,
        commitUpdate = config.commitUpdate,
        resetTextContent = config.resetTextContent,
        commitTextUpdate = config.commitTextUpdate,
        appendChild = config.appendChild,
        appendChildToContainer = config.appendChildToContainer,
        insertBefore = config.insertBefore,
        insertInContainerBefore = config.insertInContainerBefore,
        removeChild = config.removeChild,
        removeChildFromContainer = config.removeChildFromContainer,
        getPublicInstance = config.getPublicInstance,
        callComponentWillUnmountWithTimerInDev = function callComponentWillUnmountWithTimerInDev(current, instance) {
        startPhaseTimer$2(current, "componentWillUnmount"), instance.componentWillUnmount(), stopPhaseTimer$2();
    };
    function safelyCallComponentWillUnmount(current, instance) {
        var unmountError = invokeGuardedCallback$2(null, callComponentWillUnmountWithTimerInDev, null, current, instance);
        unmountError && captureError(current, unmountError);
    }
    function safelyDetachRef(current) {
        var ref = current.ref;
        if (null !== ref) {
            var refError = invokeGuardedCallback$2(null, ref, null, null);
            null !== refError && captureError(current, refError);
        }
    }
    function getHostParentFiber(fiber) {
        for (var parent = fiber.return; null !== parent;) {
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        invariant(!1, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent$9 || fiber.tag === HostRoot$8 || fiber.tag === HostPortal$6;
    }
    function getHostSibling(fiber) {
        var node = fiber;
        siblings: for (; !0;) {
            for (; null === node.sibling;) {
                if (null === node.return || isHostParent(node.return)) return null;
                node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent$9 && node.tag !== HostText$6;) {
                if (node.effectTag & Placement$5) continue siblings;
                if (null === node.child || node.tag === HostPortal$6) continue siblings;
                node.child.return = node, node = node.child;
            }
            if (!(node.effectTag & Placement$5)) return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork),
            parent = void 0,
            isContainer = void 0;
        switch (parentFiber.tag) {
            case HostComponent$9:
                parent = parentFiber.stateNode, isContainer = !1;
                break;

            case HostRoot$8:
            case HostPortal$6:
                parent = parentFiber.stateNode.containerInfo, isContainer = !0;
                break;

            default:
                invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
        }
        parentFiber.effectTag & ContentReset$2 && (resetTextContent(parent), parentFiber.effectTag &= ~ContentReset$2);
        for (var before = getHostSibling(finishedWork), node = finishedWork; !0;) {
            if (node.tag === HostComponent$9 || node.tag === HostText$6) before ? isContainer ? insertInContainerBefore(parent, node.stateNode, before) : insertBefore(parent, node.stateNode, before) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (node.tag === HostPortal$6) ;else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitNestedUnmounts(root) {
        for (var node = root; !0;) {
            if (commitUnmount(node), null === node.child || node.tag === HostPortal$6) {
                if (node === root) return;
                for (; null === node.sibling;) {
                    if (null === node.return || node.return === root) return;
                    node = node.return;
                }
                node.sibling.return = node.return, node = node.sibling;
            } else node.child.return = node, node = node.child;
        }
    }
    function unmountHostComponents(current) {
        for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0; !0;) {
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: for (; !0;) {
                    switch (invariant(null !== parent, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue."), parent.tag) {
                        case HostComponent$9:
                            currentParent = parent.stateNode, currentParentIsContainer = !1;
                            break findParent;

                        case HostRoot$8:
                        case HostPortal$6:
                            currentParent = parent.stateNode.containerInfo, currentParentIsContainer = !0;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = !0;
            }
            if (node.tag === HostComponent$9 || node.tag === HostText$6) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (node.tag === HostPortal$6) {
                if (currentParent = node.stateNode.containerInfo, null !== node.child) {
                    node.child.return = node, node = node.child;
                    continue;
                }
            } else if (commitUnmount(node), null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === current) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === current) return;
                node = node.return, node.tag === HostPortal$6 && (currentParentIsValid = !1);
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitDeletion(current) {
        unmountHostComponents(current), current.return = null, current.child = null, current.alternate && (current.alternate.child = null, current.alternate.return = null);
    }
    function commitUnmount(current) {
        switch ("function" == typeof onCommitUnmount && onCommitUnmount(current), current.tag) {
            case ClassComponent$9:
                safelyDetachRef(current);
                var instance = current.stateNode;
                return void ("function" == typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(current, instance));

            case HostComponent$9:
                return void safelyDetachRef(current);

            case CoroutineComponent$4:
                return void commitNestedUnmounts(current.stateNode);

            case HostPortal$6:
                return void unmountHostComponents(current);
        }
    }
    function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                return;

            case HostComponent$9:
                var instance = finishedWork.stateNode;
                if (null != instance) {
                    var newProps = finishedWork.memoizedProps,
                        oldProps = null !== current ? current.memoizedProps : newProps,
                        type = finishedWork.type,
                        updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null, null !== updatePayload && commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
                return;

            case HostText$6:
                invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode,
                    newText = finishedWork.memoizedProps,
                    oldText = null !== current ? current.memoizedProps : newText;
                return void commitTextUpdate(textInstance, oldText, newText);

            case HostRoot$8:
            case HostPortal$6:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update$3) if (null === current) startPhaseTimer$2(finishedWork, "componentDidMount"), instance.componentDidMount(), stopPhaseTimer$2();else {
                    var prevProps = current.memoizedProps,
                        prevState = current.memoizedState;
                    startPhaseTimer$2(finishedWork, "componentDidUpdate"), instance.componentDidUpdate(prevProps, prevState), stopPhaseTimer$2();
                }
                return void (finishedWork.effectTag & Callback$1 && null !== finishedWork.updateQueue && commitCallbacks$1(finishedWork, finishedWork.updateQueue, instance));

            case HostRoot$8:
                var updateQueue = finishedWork.updateQueue;
                if (null !== updateQueue) {
                    var _instance = finishedWork.child && finishedWork.child.stateNode;
                    commitCallbacks$1(finishedWork, updateQueue, _instance);
                }
                return;

            case HostComponent$9:
                var _instance2 = finishedWork.stateNode;
                if (null === current && finishedWork.effectTag & Update$3) {
                    var type = finishedWork.type,
                        props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props, finishedWork);
                }
                return;

            case HostText$6:
            case HostPortal$6:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (null !== ref) {
            var instance = finishedWork.stateNode;
            switch (finishedWork.tag) {
                case HostComponent$9:
                    ref(getPublicInstance(instance));
                    break;

                default:
                    ref(instance);
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        null !== currentRef && currentRef(null);
    }
    return {
        commitPlacement: commitPlacement,
        commitDeletion: commitDeletion,
        commitWork: commitWork,
        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
    };
},
    createCursor$2 = ReactFiberStack.createCursor,
    pop$2 = ReactFiberStack.pop,
    push$2 = ReactFiberStack.push,
    NO_CONTEXT = {},
    ReactFiberHostContext = function ReactFiberHostContext(config) {
    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = createCursor$2(NO_CONTEXT),
        contextFiberStackCursor = createCursor$2(NO_CONTEXT),
        rootInstanceStackCursor = createCursor$2(NO_CONTEXT);
    function requiredContext(c) {
        return invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue."), c;
    }
    function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
    }
    function pushHostContainer(fiber, nextRootInstance) {
        push$2(rootInstanceStackCursor, nextRootInstance, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber), pop$2(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        return requiredContext(contextStackCursor.current);
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current),
            nextContext = getChildHostContext(context, fiber.type, rootInstance);
        context !== nextContext && (push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextContext, fiber));
    }
    function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber));
    }
    function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT, rootInstanceStackCursor.current = NO_CONTEXT;
    }
    return {
        getHostContext: getHostContext,
        getRootHostContainer: getRootHostContainer,
        popHostContainer: popHostContainer,
        popHostContext: popHostContext,
        pushHostContainer: pushHostContainer,
        pushHostContext: pushHostContext,
        resetHostContainer: resetHostContainer
    };
},
    HostComponent$10 = ReactTypeOfWork.HostComponent,
    HostText$7 = ReactTypeOfWork.HostText,
    HostRoot$9 = ReactTypeOfWork.HostRoot,
    Deletion$2 = ReactTypeOfSideEffect.Deletion,
    Placement$6 = ReactTypeOfSideEffect.Placement,
    createFiberFromHostInstanceForDeletion$1 = ReactFiber.createFiberFromHostInstanceForDeletion,
    ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
    var shouldSetTextContent = config.shouldSetTextContent,
        canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        didNotHydrateInstance = config.didNotHydrateInstance,
        didNotFindHydratableInstance = config.didNotFindHydratableInstance,
        didNotFindHydratableTextInstance = config.didNotFindHydratableTextInstance;
    if (!(canHydrateInstance && canHydrateTextInstance && getNextHydratableSibling && getFirstHydratableChild && hydrateInstance && hydrateTextInstance && didNotHydrateInstance && didNotFindHydratableInstance && didNotFindHydratableTextInstance)) return {
        enterHydrationState: function enterHydrationState() {
            return !1;
        },
        resetHydrationState: function resetHydrationState() {},
        tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
        prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
            invariant(!1, "React bug.");
        },
        prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
            invariant(!1, "React bug.");
        },
        popHydrationState: function popHydrationState(fiber) {
            return !1;
        }
    };
    var hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChild(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, !0;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch (returnFiber.tag) {
            case HostRoot$9:
                didNotHydrateInstance(returnFiber.stateNode.containerInfo, instance);
                break;

            case HostComponent$10:
                didNotHydrateInstance(returnFiber.stateNode, instance);
        }
        var childToDelete = createFiberFromHostInstanceForDeletion$1();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber, childToDelete.effectTag = Deletion$2, null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement$6;
        var parentInstance;
        switch (returnFiber.tag) {
            case HostComponent$10:
                parentInstance = returnFiber.stateNode;
                break;

            default:
                return;
        }
        switch (fiber.tag) {
            case HostComponent$10:
                var type = fiber.type,
                    props = fiber.pendingProps;
                didNotFindHydratableInstance(parentInstance, type, props);
                break;

            case HostText$7:
                var text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentInstance, text);
        }
    }
    function canHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
            case HostComponent$10:
                var type = fiber.type,
                    props = fiber.pendingProps;
                return canHydrateInstance(nextInstance, type, props);

            case HostText$7:
                var text = fiber.pendingProps;
                return canHydrateTextInstance(nextInstance, text);

            default:
                return !1;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
            if (!canHydrate(fiber, nextInstance)) {
                if (!(nextInstance = getNextHydratableSibling(nextInstance)) || !canHydrate(fiber, nextInstance)) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
                deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }
            fiber.stateNode = nextInstance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance) {
        var instance = fiber.stateNode,
            updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, fiber);
        return fiber.updateQueue = updatePayload, null !== updatePayload;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        return hydrateTextInstance(textInstance, fiber.memoizedProps, fiber);
    }
    function popToNextHostParent(fiber) {
        for (var parent = fiber.return; null !== parent && parent.tag !== HostComponent$10 && parent.tag !== HostRoot$9;) {
            parent = parent.return;
        }hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (fiber.tag !== HostComponent$10 || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (var nextInstance = nextHydratableInstance; nextInstance;) {
            deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }return popToNextHostParent(fiber), nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
    }
    function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1;
    }
    return {
        enterHydrationState: enterHydrationState,
        resetHydrationState: resetHydrationState,
        tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
        prepareToHydrateHostInstance: prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
        popHydrationState: popHydrationState
    };
},
    ReactFiberInstrumentation$2 = {
    debugTool: null
},
    ReactFiberInstrumentation_1 = ReactFiberInstrumentation$2,
    popContextProvider$1 = ReactFiberContext.popContextProvider,
    reset$1 = ReactFiberStack.reset,
    getStackAddendumByWorkInProgressFiber$2 = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber,
    logCapturedError$1 = ReactFiberErrorLogger.logCapturedError,
    invokeGuardedCallback$1 = ReactErrorUtils_1.invokeGuardedCallback,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner,
    createWorkInProgress$1 = ReactFiber.createWorkInProgress,
    largerPriority$1 = ReactFiber.largerPriority,
    onCommitRoot = ReactFiberDevToolsHook.onCommitRoot,
    NoWork$2 = ReactPriorityLevel.NoWork,
    SynchronousPriority$1 = ReactPriorityLevel.SynchronousPriority,
    TaskPriority$1 = ReactPriorityLevel.TaskPriority,
    HighPriority = ReactPriorityLevel.HighPriority,
    LowPriority = ReactPriorityLevel.LowPriority,
    OffscreenPriority = ReactPriorityLevel.OffscreenPriority,
    AsyncUpdates = ReactTypeOfInternalContext.AsyncUpdates,
    PerformedWork = ReactTypeOfSideEffect.PerformedWork,
    Placement$1 = ReactTypeOfSideEffect.Placement,
    Update = ReactTypeOfSideEffect.Update,
    PlacementAndUpdate = ReactTypeOfSideEffect.PlacementAndUpdate,
    Deletion = ReactTypeOfSideEffect.Deletion,
    ContentReset = ReactTypeOfSideEffect.ContentReset,
    Callback = ReactTypeOfSideEffect.Callback,
    Err = ReactTypeOfSideEffect.Err,
    Ref = ReactTypeOfSideEffect.Ref,
    HostRoot$5 = ReactTypeOfWork.HostRoot,
    HostComponent$6 = ReactTypeOfWork.HostComponent,
    HostPortal$2 = ReactTypeOfWork.HostPortal,
    ClassComponent$5 = ReactTypeOfWork.ClassComponent,
    getUpdatePriority$1 = ReactFiberUpdateQueue.getUpdatePriority,
    _require14 = ReactFiberContext,
    resetContext$1 = _require14.resetContext,
    warning$5 = warning,
    ReactFiberInstrumentation$1 = ReactFiberInstrumentation_1,
    ReactDebugCurrentFiber$3 = ReactDebugCurrentFiber_1,
    _require15 = ReactDebugFiberPerf_1,
    recordEffect = _require15.recordEffect,
    recordScheduleUpdate = _require15.recordScheduleUpdate,
    startWorkTimer = _require15.startWorkTimer,
    stopWorkTimer = _require15.stopWorkTimer,
    startWorkLoopTimer = _require15.startWorkLoopTimer,
    stopWorkLoopTimer = _require15.stopWorkLoopTimer,
    startCommitTimer = _require15.startCommitTimer,
    stopCommitTimer = _require15.stopCommitTimer,
    startCommitHostEffectsTimer = _require15.startCommitHostEffectsTimer,
    stopCommitHostEffectsTimer = _require15.stopCommitHostEffectsTimer,
    startCommitLifeCyclesTimer = _require15.startCommitLifeCyclesTimer,
    stopCommitLifeCyclesTimer = _require15.stopCommitLifeCyclesTimer,
    warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(instance) {
    var ctor = instance.constructor;
    warning$5(!1, "Can only update a mounted or mounting component. This usually means " + "you called setState, replaceState, or forceUpdate on an unmounted " + "component. This is a no-op.\n\nPlease check the code for the " + "%s component.", ctor && (ctor.displayName || ctor.name) || "ReactClass");
},
    warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
    switch (ReactDebugCurrentFiber$3.phase) {
        case "getChildContext":
            warning$5(!1, "setState(...): Cannot call setState() inside getChildContext()");
            break;

        case "render":
            warning$5(!1, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`.");
    }
},
    timeHeuristicForUnitOfWork = 1,
    ReactFiberScheduler = function ReactFiberScheduler(config) {
    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        resetHostContainer = hostContext.resetHostContainer,
        _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext),
        beginWork = _ReactFiberBeginWork.beginWork,
        beginFailedWork = _ReactFiberBeginWork.beginFailedWork,
        _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
        completeWork = _ReactFiberCompleteWo.completeWork,
        _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
        commitPlacement = _ReactFiberCommitWork.commitPlacement,
        commitDeletion = _ReactFiberCommitWork.commitDeletion,
        commitWork = _ReactFiberCommitWork.commitWork,
        commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
        commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
        commitDetachRef = _ReactFiberCommitWork.commitDetachRef,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        useSyncScheduling = config.useSyncScheduling,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        priorityContext = NoWork$2,
        priorityContextBeforeReconciliation = NoWork$2,
        isPerformingWork = !1,
        deadlineHasExpired = !1,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        nextUnitOfWork = null,
        nextPriorityLevel = NoWork$2,
        nextEffect = null,
        pendingCommit = null,
        nextScheduledRoot = null,
        lastScheduledRoot = null,
        isCallbackScheduled = !1,
        capturedErrors = null,
        failedBoundaries = null,
        commitPhaseBoundaries = null,
        firstUncaughtError = null,
        fatalError = null,
        isCommitting = !1,
        isUnmounting = !1;
    function resetContextStack() {
        reset$1(), resetContext$1(), resetHostContainer();
    }
    function findNextUnitOfWork() {
        for (; null !== nextScheduledRoot && nextScheduledRoot.current.pendingWorkPriority === NoWork$2;) {
            nextScheduledRoot.isScheduled = !1;
            var next = nextScheduledRoot.nextScheduledRoot;
            if (nextScheduledRoot.nextScheduledRoot = null, nextScheduledRoot === lastScheduledRoot) return nextScheduledRoot = null, lastScheduledRoot = null, nextPriorityLevel = NoWork$2, null;
            nextScheduledRoot = next;
        }
        for (var root = nextScheduledRoot, highestPriorityRoot = null, highestPriorityLevel = NoWork$2; null !== root;) {
            root.current.pendingWorkPriority !== NoWork$2 && (highestPriorityLevel === NoWork$2 || highestPriorityLevel > root.current.pendingWorkPriority) && (highestPriorityLevel = root.current.pendingWorkPriority, highestPriorityRoot = root), root = root.nextScheduledRoot;
        }return null !== highestPriorityRoot ? (nextPriorityLevel = highestPriorityLevel, priorityContext = nextPriorityLevel, resetContextStack(), createWorkInProgress$1(highestPriorityRoot.current, highestPriorityLevel)) : (nextPriorityLevel = NoWork$2, null);
    }
    function commitAllHostEffects() {
        for (; null !== nextEffect;) {
            ReactDebugCurrentFiber$3.current = nextEffect, recordEffect();
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset && config.resetTextContent(nextEffect.stateNode), effectTag & Ref) {
                var current = nextEffect.alternate;
                null !== current && commitDetachRef(current);
            }
            switch (effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork)) {
                case Placement$1:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    break;

                case PlacementAndUpdate:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;

                case Update:
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;

                case Deletion:
                    isUnmounting = !0, commitDeletion(nextEffect), isUnmounting = !1;
            }
            nextEffect = nextEffect.nextEffect;
        }
        ReactDebugCurrentFiber$3.current = null;
    }
    function commitAllLifeCycles() {
        for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
                recordEffect();
                var current = nextEffect.alternate;
                commitLifeCycles(current, nextEffect);
            }
            effectTag & Ref && (recordEffect(), commitAttachRef(nextEffect)), effectTag & Err && (recordEffect(), commitErrorHandling(nextEffect));
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null, nextEffect = next;
        }
    }
    function commitAllWork(finishedWork) {
        isCommitting = !0, startCommitTimer(), pendingCommit = null;
        var root = finishedWork.stateNode;
        invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue."), ReactCurrentOwner$1.current = null;
        var previousPriorityContext = priorityContext;
        priorityContext = TaskPriority$1;
        var firstEffect = void 0;
        for (finishedWork.effectTag > PerformedWork ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, firstEffect = finishedWork.firstEffect) : firstEffect = finishedWork : firstEffect = finishedWork.firstEffect, prepareForCommit(), nextEffect = firstEffect, startCommitHostEffectsTimer(); null !== nextEffect;) {
            var _error = null;
            _error = invokeGuardedCallback$1(null, commitAllHostEffects, null), null !== _error && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        for (stopCommitHostEffectsTimer(), resetAfterCommit(), root.current = finishedWork, nextEffect = firstEffect, startCommitLifeCyclesTimer(); null !== nextEffect;) {
            var _error2 = null;
            _error2 = invokeGuardedCallback$1(null, commitAllLifeCycles, null), null !== _error2 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error2), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        isCommitting = !1, stopCommitLifeCyclesTimer(), stopCommitTimer(), "function" == typeof onCommitRoot && onCommitRoot(finishedWork.stateNode), !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork), commitPhaseBoundaries && (commitPhaseBoundaries.forEach(scheduleErrorRecovery), commitPhaseBoundaries = null), priorityContext = previousPriorityContext;
    }
    function resetWorkPriority(workInProgress, renderPriority) {
        if (!(workInProgress.pendingWorkPriority !== NoWork$2 && workInProgress.pendingWorkPriority > renderPriority)) {
            for (var newPriority = getUpdatePriority$1(workInProgress), child = workInProgress.child; null !== child;) {
                newPriority = largerPriority$1(newPriority, child.pendingWorkPriority), child = child.sibling;
            }workInProgress.pendingWorkPriority = newPriority;
        }
    }
    function completeUnitOfWork(workInProgress) {
        for (; !0;) {
            var current = workInProgress.alternate,
                next = completeWork(current, workInProgress, nextPriorityLevel),
                returnFiber = workInProgress.return,
                siblingFiber = workInProgress.sibling;
            if (resetWorkPriority(workInProgress, nextPriorityLevel), null !== next) return stopWorkTimer(workInProgress), !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), next;
            if (null !== returnFiber) {
                null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect);
                workInProgress.effectTag > PerformedWork && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress);
            }
            if (stopWorkTimer(workInProgress), !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), null !== siblingFiber) return siblingFiber;
            if (null === returnFiber) return nextPriorityLevel < HighPriority ? commitAllWork(workInProgress) : pendingCommit = workInProgress, null;
            workInProgress = returnFiber;
        }
        return null;
    }
    function performUnitOfWork(workInProgress) {
        var current = workInProgress.alternate;
        startWorkTimer(workInProgress);
        var next = beginWork(current, workInProgress, nextPriorityLevel);
        return !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, ReactDebugCurrentFiber$3.current = null, next;
    }
    function performFailedUnitOfWork(workInProgress) {
        var current = workInProgress.alternate;
        startWorkTimer(workInProgress);
        var next = beginFailedWork(current, workInProgress, nextPriorityLevel);
        return !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, ReactDebugCurrentFiber$3.current = null, next;
    }
    function clearErrors() {
        for (null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()); null !== capturedErrors && capturedErrors.size && null !== nextUnitOfWork && nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= TaskPriority$1;) {
            null === (nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork());
        }
    }
    function workLoopAsync(minPriorityLevel, deadline) {
        for (; null !== nextUnitOfWork && !deadlineHasExpired;) {
            if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                if (null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && null !== pendingCommit) if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                    if (commitAllWork(pendingCommit), nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel < HighPriority) break;
                } else deadlineHasExpired = !0;
            } else deadlineHasExpired = !0;
        }
    }
    function workLoopSync(minPriorityLevel) {
        for (; null !== nextUnitOfWork && !(null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel > TaskPriority$1));) {}
    }
    function workLoop(minPriorityLevel, deadline) {
        clearErrors(), null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()), nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= minPriorityLevel && (nextPriorityLevel <= TaskPriority$1 ? workLoopSync(minPriorityLevel) : null !== deadline && workLoopAsync(minPriorityLevel, deadline));
    }
    function performDeferredWork(deadline) {
        performWork(OffscreenPriority, deadline);
    }
    function performWork(minPriorityLevel, deadline) {
        startWorkLoopTimer(), invariant(!isPerformingWork, "performWork was called recursively. This error is likely caused " + "by a bug in React. Please file an issue."), isPerformingWork = !0;
        for (var hasRemainingAsyncWork = !1; null === fatalError;) {
            null === pendingCommit || deadlineHasExpired || commitAllWork(pendingCommit), priorityContextBeforeReconciliation = priorityContext;
            var _error3 = null;
            if (_error3 = invokeGuardedCallback$1(null, workLoop, null, minPriorityLevel, deadline), priorityContext = priorityContextBeforeReconciliation, null === _error3) {
                switch (nextPriorityLevel) {
                    case SynchronousPriority$1:
                    case TaskPriority$1:
                        if (nextPriorityLevel <= minPriorityLevel) continue;
                        break;

                    case HighPriority:
                    case LowPriority:
                    case OffscreenPriority:
                        if (null === deadline) hasRemainingAsyncWork = !0;else {
                            if (!deadlineHasExpired && nextPriorityLevel <= minPriorityLevel) continue;
                            hasRemainingAsyncWork = !0;
                        }
                        break;

                    case NoWork$2:
                        break;

                    default:
                        invariant(!1, "Switch statement should be exhuastive.");
                }
                break;
            }
            var failedWork = nextUnitOfWork;
            if (null === failedWork) null === fatalError && (fatalError = _error3);else {
                var maybeBoundary = captureError(failedWork, _error3);
                if (null !== maybeBoundary) {
                    var boundary = maybeBoundary;
                    beginFailedWork(boundary.alternate, boundary, nextPriorityLevel), unwindContexts(failedWork, boundary), nextUnitOfWork = completeUnitOfWork(boundary);
                }
            }
        }
        null !== deadline && (isCallbackScheduled = !1), hasRemainingAsyncWork && !isCallbackScheduled && (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
        var errorToThrow = null !== fatalError ? fatalError : firstUncaughtError;
        if (isPerformingWork = !1, deadlineHasExpired = !1, fatalError = null, firstUncaughtError = null, capturedErrors = null, failedBoundaries = null, stopWorkLoopTimer(), null !== errorToThrow) throw errorToThrow;
    }
    function captureError(failedWork, error) {
        ReactCurrentOwner$1.current = null, ReactDebugCurrentFiber$3.current = null, ReactDebugCurrentFiber$3.phase = null, nextUnitOfWork = null;
        var boundary = null,
            errorBoundaryFound = !1,
            willRetry = !1,
            errorBoundaryName = null;
        if (failedWork.tag === HostRoot$5) boundary = failedWork, isFailedBoundary(failedWork) && (fatalError = error);else for (var node = failedWork.return; null !== node && null === boundary;) {
            if (node.tag === ClassComponent$5) {
                var instance = node.stateNode;
                "function" == typeof instance.unstable_handleError && (errorBoundaryFound = !0, errorBoundaryName = getComponentName_1(node), boundary = node, willRetry = !0);
            } else node.tag === HostRoot$5 && (boundary = node);
            if (isFailedBoundary(node)) {
                if (isUnmounting) return null;
                if (null !== commitPhaseBoundaries && (commitPhaseBoundaries.has(node) || null !== node.alternate && commitPhaseBoundaries.has(node.alternate))) return null;
                boundary = null, willRetry = !1;
            }
            node = node.return;
        }
        if (null !== boundary) {
            null === failedBoundaries && (failedBoundaries = new Set()), failedBoundaries.add(boundary);
            var _componentStack = getStackAddendumByWorkInProgressFiber$2(failedWork),
                _componentName = getComponentName_1(failedWork);
            return null === capturedErrors && (capturedErrors = new Map()), capturedErrors.set(boundary, {
                componentName: _componentName,
                componentStack: _componentStack,
                error: error,
                errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                errorBoundaryFound: errorBoundaryFound,
                errorBoundaryName: errorBoundaryName,
                willRetry: willRetry
            }), isCommitting ? (null === commitPhaseBoundaries && (commitPhaseBoundaries = new Set()), commitPhaseBoundaries.add(boundary)) : scheduleErrorRecovery(boundary), boundary;
        }
        return null === firstUncaughtError && (firstUncaughtError = error), null;
    }
    function hasCapturedError(fiber) {
        return null !== capturedErrors && (capturedErrors.has(fiber) || null !== fiber.alternate && capturedErrors.has(fiber.alternate));
    }
    function isFailedBoundary(fiber) {
        return null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== fiber.alternate && failedBoundaries.has(fiber.alternate));
    }
    function commitErrorHandling(effectfulFiber) {
        var capturedError = void 0;
        null !== capturedErrors && (capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber), null == capturedError && null !== effectfulFiber.alternate && (effectfulFiber = effectfulFiber.alternate, capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber))), invariant(null != capturedError, "No error for given unit of work. This error is likely caused by a " + "bug in React. Please file an issue.");
        var error = capturedError.error;
        try {
            logCapturedError$1(capturedError);
        } catch (e) {
            console.error(e);
        }
        switch (effectfulFiber.tag) {
            case ClassComponent$5:
                var instance = effectfulFiber.stateNode,
                    info = {
                    componentStack: capturedError.componentStack
                };
                return void instance.unstable_handleError(error, info);

            case HostRoot$5:
                return void (null === firstUncaughtError && (firstUncaughtError = error));

            default:
                invariant(!1, "Invalid type of work. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function unwindContexts(from, to) {
        for (var node = from; null !== node && node !== to && node.alternate !== to;) {
            switch (node.tag) {
                case ClassComponent$5:
                    popContextProvider$1(node);
                    break;

                case HostComponent$6:
                    popHostContext(node);
                    break;

                case HostRoot$5:
                case HostPortal$2:
                    popHostContainer(node);
            }
            stopWorkTimer(node), node = node.return;
        }
    }
    function scheduleRoot(root, priorityLevel) {
        priorityLevel !== NoWork$2 && (root.isScheduled || (root.isScheduled = !0, lastScheduledRoot ? (lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot = root) : (nextScheduledRoot = root, lastScheduledRoot = root)));
    }
    function scheduleUpdate(fiber, priorityLevel) {
        if (recordScheduleUpdate(), priorityLevel <= nextPriorityLevel && (nextUnitOfWork = null), fiber.tag === ClassComponent$5) {
            var instance = fiber.stateNode;
            warnAboutInvalidUpdates(instance);
        }
        for (var node = fiber, shouldContinue = !0; null !== node && shouldContinue;) {
            if (shouldContinue = !1, (node.pendingWorkPriority === NoWork$2 || node.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.pendingWorkPriority = priorityLevel), null !== node.alternate && (node.alternate.pendingWorkPriority === NoWork$2 || node.alternate.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.alternate.pendingWorkPriority = priorityLevel), null === node.return) {
                if (node.tag !== HostRoot$5) return void (fiber.tag === ClassComponent$5 && warnAboutUpdateOnUnmounted(fiber.stateNode));
                if (scheduleRoot(node.stateNode, priorityLevel), !isPerformingWork) switch (priorityLevel) {
                    case SynchronousPriority$1:
                        isUnbatchingUpdates ? performWork(SynchronousPriority$1, null) : performWork(TaskPriority$1, null);
                        break;

                    case TaskPriority$1:
                        invariant(isBatchingUpdates, "Task updates can only be scheduled as a nested update or " + "inside batchedUpdates.");
                        break;

                    default:
                        isCallbackScheduled || (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
                }
            }
            node = node.return;
        }
    }
    function getPriorityContext(fiber, forceAsync) {
        var priorityLevel = priorityContext;
        return priorityLevel === NoWork$2 && (priorityLevel = !useSyncScheduling || fiber.internalContextTag & AsyncUpdates || forceAsync ? LowPriority : SynchronousPriority$1), priorityLevel === SynchronousPriority$1 && (isPerformingWork || isBatchingUpdates) ? TaskPriority$1 : priorityLevel;
    }
    function scheduleErrorRecovery(fiber) {
        scheduleUpdate(fiber, TaskPriority$1);
    }
    function performWithPriority(priorityLevel, fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = priorityLevel;
        try {
            fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;
        try {
            return fn(a);
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isPerformingWork || isBatchingUpdates || performWork(TaskPriority$1, null);
        }
    }
    function unbatchedUpdates(fn) {
        var previousIsUnbatchingUpdates = isUnbatchingUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isUnbatchingUpdates = isBatchingUpdates, isBatchingUpdates = !1;
        try {
            return fn();
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isUnbatchingUpdates = previousIsUnbatchingUpdates;
        }
    }
    function syncUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = SynchronousPriority$1;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function deferredUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = LowPriority;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    return {
        scheduleUpdate: scheduleUpdate,
        getPriorityContext: getPriorityContext,
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates
    };
},
    getContextFiber = function getContextFiber(arg) {
    invariant(!1, "Missing injection for fiber getContextForSubtree");
};

function getContextForSubtree(parentComponent) {
    if (!parentComponent) return emptyObject;
    var instance = ReactInstanceMap_1.get(parentComponent);
    return "number" == typeof instance.tag ? getContextFiber(instance) : instance._processChildContext(instance._context);
}

getContextForSubtree._injectFiber = function (fn) {
    getContextFiber = fn;
};

var getContextForSubtree_1 = getContextForSubtree,
    addTopLevelUpdate = ReactFiberUpdateQueue.addTopLevelUpdate,
    findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext,
    isContextProvider = ReactFiberContext.isContextProvider,
    processChildContext = ReactFiberContext.processChildContext,
    createFiberRoot = ReactFiberRoot.createFiberRoot,
    HostComponent$1 = ReactTypeOfWork.HostComponent,
    warning$2 = warning,
    ReactFiberInstrumentation = ReactFiberInstrumentation_1,
    ReactDebugCurrentFiber = ReactDebugCurrentFiber_1,
    getComponentName = getComponentName_1,
    findCurrentHostFiber = ReactFiberTreeReflection.findCurrentHostFiber;

getContextForSubtree_1._injectFiber(function (fiber) {
    var parentContext = findCurrentUnmaskedContext(fiber);
    return isContextProvider(fiber) ? processChildContext(fiber, parentContext, !1) : parentContext;
});

var ReactFiberReconciler = function ReactFiberReconciler(config) {
    var getPublicInstance = config.getPublicInstance,
        _ReactFiberScheduler = ReactFiberScheduler(config),
        scheduleUpdate = _ReactFiberScheduler.scheduleUpdate,
        getPriorityContext = _ReactFiberScheduler.getPriorityContext,
        performWithPriority = _ReactFiberScheduler.performWithPriority,
        batchedUpdates = _ReactFiberScheduler.batchedUpdates,
        unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
        syncUpdates = _ReactFiberScheduler.syncUpdates,
        deferredUpdates = _ReactFiberScheduler.deferredUpdates;
    function scheduleTopLevelUpdate(current, element, callback) {
        "render" === ReactDebugCurrentFiber.phase && null !== ReactDebugCurrentFiber.current && warning$2(!1, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(ReactDebugCurrentFiber.current) || "Unknown");
        var forceAsync = ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != element && null != element.type && !0 === element.type.unstable_asyncUpdates,
            priorityLevel = getPriorityContext(current, forceAsync),
            nextState = {
            element: element
        };
        callback = void 0 === callback ? null : callback, warning$2(null === callback || "function" == typeof callback, "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback), addTopLevelUpdate(current, nextState, callback, priorityLevel), scheduleUpdate(current, priorityLevel);
    }
    return {
        createContainer: function createContainer(containerInfo) {
            return createFiberRoot(containerInfo);
        },
        updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current;
            ReactFiberInstrumentation.debugTool && (null === current.alternate ? ReactFiberInstrumentation.debugTool.onMountContainer(container) : null === element ? ReactFiberInstrumentation.debugTool.onUnmountContainer(container) : ReactFiberInstrumentation.debugTool.onUpdateContainer(container));
            var context = getContextForSubtree_1(parentComponent);
            null === container.context ? container.context = context : container.pendingContext = context, scheduleTopLevelUpdate(current, element, callback);
        },
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates,
        getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) return null;
            switch (containerFiber.child.tag) {
                case HostComponent$1:
                    return getPublicInstance(containerFiber.child.stateNode);

                default:
                    return containerFiber.child.stateNode;
            }
        },
        findHostInstance: function findHostInstance(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            return null === hostFiber ? null : hostFiber.stateNode;
        }
    };
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return Object.freeze(object), objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps$1(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps$1
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    warnForStyleProps = NativeMethodsMixinUtils.warnForStyleProps,
    ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
        _classCallCheck$1(this, ReactNativeFiberHostComponent), this._nativeTag = tag, this._children = [], this.viewConfig = viewConfig;
    }
    return ReactNativeFiberHostComponent.prototype.blur = function () {
        TextInputState.blurTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.focus = function () {
        TextInputState.focusTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.measure = function (callback) {
        UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
        warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, this.viewConfig.validAttributes);
        UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
    }, ReactNativeFiberHostComponent;
}(),
    ReactNativeFiberHostComponent_1 = ReactNativeFiberHostComponent,
    viewConfigs = new Map(),
    ReactNativeViewConfigRegistry = {
    register: function register(viewConfig) {
        var name = viewConfig.uiViewClassName;
        return invariant(!viewConfigs.has(name), "Tried to register two views with the same name %s", name), viewConfigs.set(name, viewConfig), name;
    },
    get: function get(name) {
        var config = viewConfigs.get(name);
        return invariant(config, "View config not found for name %s", name), config;
    }
},
    ReactNativeViewConfigRegistry_1 = ReactNativeViewConfigRegistry,
    precacheFiberNode$1 = ReactNativeComponentTree_1.precacheFiberNode,
    uncacheFiberNode$1 = ReactNativeComponentTree_1.uncacheFiberNode,
    updateFiberProps$1 = ReactNativeComponentTree_1.updateFiberProps;

function recursivelyUncacheFiberNode(node) {
    "number" == typeof node ? uncacheFiberNode$1(node) : (uncacheFiberNode$1(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
}

var NativeRenderer = ReactFiberReconciler({
    appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        index >= 0 ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
    },
    appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag;
        UIManager.setChildren(parentInstance, [childTag]);
    },
    appendInitialChild: function appendInitialChild(parentInstance, child) {
        parentInstance._children.push(child);
    },
    commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
            text: newText
        });
    },
    commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
    commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
        var viewConfig = instance.viewConfig;
        updateFiberProps$1(instance._nativeTag, newProps);
        var updatePayload = ReactNativeAttributePayload_1.diff(oldProps, newProps, viewConfig.validAttributes);
        UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag(),
            viewConfig = ReactNativeViewConfigRegistry_1.get(type);
        for (var key in viewConfig.validAttributes) {
            props.hasOwnProperty(key) && deepFreezeAndThrowOnMutationInDev(props[key]);
        }var updatePayload = ReactNativeAttributePayload_1.create(props, viewConfig.validAttributes);
        UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
        var component = new ReactNativeFiberHostComponent_1(tag, viewConfig);
        return precacheFiberNode$1(internalInstanceHandle, tag), updateFiberProps$1(tag, props), component;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        return UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
        }), precacheFiberNode$1(internalInstanceHandle, tag), tag;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
        if (0 === parentInstance._children.length) return !1;
        var nativeTags = parentInstance._children.map(function (child) {
            return "number" == typeof child ? child : child._nativeTag;
        });
        return UIManager.setChildren(parentInstance._nativeTag, nativeTags), !1;
    },
    getRootHostContext: function getRootHostContext() {
        return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
        return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
        return instance;
    },
    insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        if (index >= 0) {
            children.splice(index, 1);
            var beforeChildIndex = children.indexOf(beforeChild);
            children.splice(beforeChildIndex, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
        } else {
            var _beforeChildIndex = children.indexOf(beforeChild);
            children.splice(_beforeChildIndex, 0, child);
            var childTag = "number" == typeof child ? child : child._nativeTag;
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
        }
    },
    insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
        invariant("number" != typeof parentInstance, "Container does not support insertBefore operation");
    },
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        return emptyObject;
    },
    removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children,
            index = children.indexOf(child);
        children.splice(index, 1), UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
    },
    removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child), UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
    },
    resetAfterCommit: function resetAfterCommit() {},
    resetTextContent: function resetTextContent(instance) {},
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
        return !1;
    },
    scheduleDeferredCallback: commonjsGlobal.requestIdleCallback,
    shouldSetTextContent: function shouldSetTextContent(type, props) {
        return !1;
    },
    useSyncScheduling: !0
}),
    ReactNativeFiberRenderer = NativeRenderer,
    getClosestInstanceFromNode = ReactNativeComponentTree_1.getClosestInstanceFromNode,
    findCurrentFiberUsingSlowPath$1 = ReactFiberTreeReflection.findCurrentFiberUsingSlowPath,
    HostComponent$11 = ReactTypeOfWork.HostComponent,
    getInspectorDataForViewTag = void 0,
    traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
    instance && (hierarchy.unshift(instance), traverseOwnerTreeUp(hierarchy, instance._debugOwner));
},
    getOwnerHierarchy = function getOwnerHierarchy(instance) {
    var hierarchy = [];
    return traverseOwnerTreeUp(hierarchy, instance), hierarchy;
},
    lastNonHostInstance = function lastNonHostInstance(hierarchy) {
    for (var i = hierarchy.length - 1; i > 1; i--) {
        var instance = hierarchy[i];
        if (instance.tag !== HostComponent$11) return instance;
    }
    return hierarchy[0];
},
    getHostProps = function getHostProps(fiber) {
    var host = ReactFiberTreeReflection.findCurrentHostFiber(fiber);
    return host ? host.memoizedProps || emptyObject : emptyObject;
},
    getHostNode = function getHostNode(fiber, findNodeHandle) {
    for (var hostNode = void 0; fiber;) {
        if (null !== fiber.stateNode && fiber.tag === HostComponent$11 && (hostNode = findNodeHandle(fiber.stateNode)), hostNode) return hostNode;
        fiber = fiber.child;
    }
    return null;
},
    createHierarchy = function createHierarchy(fiberHierarchy) {
    return fiberHierarchy.map(function (fiber) {
        return {
            name: getComponentName_1(fiber),
            getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                    measure: function measure(callback) {
                        return UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                    },
                    props: getHostProps(fiber),
                    source: fiber._debugSource
                };
            }
        };
    });
};

getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
    var closestInstance = getClosestInstanceFromNode(viewTag);
    if (!closestInstance) return {
        hierarchy: [],
        props: emptyObject,
        selection: null,
        source: null
    };
    var fiber = findCurrentFiberUsingSlowPath$1(closestInstance),
        fiberHierarchy = getOwnerHierarchy(fiber),
        instance = lastNonHostInstance(fiberHierarchy),
        hierarchy = createHierarchy(fiberHierarchy),
        props = getHostProps(instance),
        source = instance._debugSource;
    return {
        hierarchy: hierarchy,
        props: props,
        selection: fiberHierarchy.indexOf(instance),
        source: source
    };
};

var ReactNativeFiberInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    ReactVersion = "16.0.0-alpha.13",
    ReactNativeFeatureFlags = require(212                      ), // 212 = ReactNativeFeatureFlags
    ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner,
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return ReactNativeFiberRenderer.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    var owner = ReactCurrentOwner$3.current;
    if (null !== owner && (warning(owner._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", owner.getName() || "A component"), owner._warnedAboutRefsInRender = !0), null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    findNumericNodeHandleFiber = function findNumericNodeHandleFiber(componentOrHandle) {
    var instance = findNodeHandle_1(componentOrHandle);
    return null == instance || "number" == typeof instance ? instance : instance._nativeTag;
},
    DevOnlyStubShim = null;

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$2(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(react.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback$3 = NativeMethodsMixinUtils.mountSafeCallback,
    throwOnStylesProp$1 = NativeMethodsMixinUtils.throwOnStylesProp,
    warnForStyleProps$2 = NativeMethodsMixinUtils.warnForStyleProps,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$3(this, onFail), mountSafeCallback$3(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig;
        warnForStyleProps$2(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID;
        warnForStyleProps$2(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_DEV = NativeMethodsMixin;

invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, "Do not override existing functions."), NativeMethodsMixin_DEV.componentWillMount = function () {
    throwOnStylesProp$1(this, this.props);
}, NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
    throwOnStylesProp$1(this, newProps);
};

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath,
    createReactNativeComponentClassFiber = function createReactNativeComponentClassFiber(viewConfig) {
    return ReactNativeViewConfigRegistry_1.register(viewConfig);
},
    createReactNativeComponentClassFiber_1 = createReactNativeComponentClassFiber,
    ReactNativeFeatureFlags$3 = require(212                      ), // 212 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? createReactNativeComponentClassFiber_1 : DevOnlyStubShim,
    ReactNativeFeatureFlags$4 = require(212                      ), // 212 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot,
    ReactInvalidSetStateWarningHook = {},
    processingChildContext = !1,
    warnInvalidSetState = function warnInvalidSetState() {
    warning(!processingChildContext, "setState(...): Cannot call setState() inside getChildContext()");
};

ReactInvalidSetStateWarningHook = {
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        processingChildContext = !0;
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        processingChildContext = !1;
    },
    onSetState: function onSetState() {
        warnInvalidSetState();
    }
};

var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook,
    ReactHostOperationHistoryHook = null,
    history = [];

ReactHostOperationHistoryHook = {
    onHostOperation: function onHostOperation(operation) {
        history.push(operation);
    },
    clearHistory: function clearHistory() {
        ReactHostOperationHistoryHook._preventClearing || (history = []);
    },
    getHistory: function getHistory() {
        return history;
    }
};

var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook,
    ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook,
    ReactDebugTool = null,
    hooks = [],
    didHookThrowForEvent = {},
    callHook = function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
    try {
        fn.call(context, arg1, arg2, arg3, arg4, arg5);
    } catch (e) {
        warning(didHookThrowForEvent[event], "Exception thrown by hook while handling %s: %s", event, e + "\n" + e.stack), didHookThrowForEvent[event] = !0;
    }
},
    emitEvent = function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
    for (var i = 0; i < hooks.length; i++) {
        var hook = hooks[i],
            fn = hook[event];
        fn && callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
},
    _isProfiling = !1,
    flushHistory = [],
    lifeCycleTimerStack = [],
    currentFlushNesting = 0,
    currentFlushMeasurements = [],
    currentFlushStartTime = 0,
    currentTimerDebugID = null,
    currentTimerStartTime = 0,
    currentTimerNestedFlushDuration = 0,
    currentTimerType = null,
    lifeCycleTimerHasWarned = !1,
    clearHistory = function clearHistory() {
    ReactComponentTreeHook.purgeUnmountedComponents(), ReactHostOperationHistoryHook_1.clearHistory();
},
    getTreeSnapshot = function getTreeSnapshot(registeredIDs) {
    return registeredIDs.reduce(function (tree, id) {
        var ownerID = ReactComponentTreeHook.getOwnerID(id),
            parentID = ReactComponentTreeHook.getParentID(id);
        return tree[id] = {
            displayName: ReactComponentTreeHook.getDisplayName(id),
            text: ReactComponentTreeHook.getText(id),
            updateCount: ReactComponentTreeHook.getUpdateCount(id),
            childIDs: ReactComponentTreeHook.getChildIDs(id),
            ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
            parentID: parentID
        }, tree;
    }, {});
},
    resetMeasurements = function resetMeasurements() {
    var previousStartTime = currentFlushStartTime,
        previousMeasurements = currentFlushMeasurements,
        previousOperations = ReactHostOperationHistoryHook_1.getHistory();
    if (0 === currentFlushNesting) return currentFlushStartTime = 0, currentFlushMeasurements = [], void clearHistory();
    if (previousMeasurements.length || previousOperations.length) {
        var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
        flushHistory.push({
            duration: performanceNow() - previousStartTime,
            measurements: previousMeasurements || [],
            operations: previousOperations || [],
            treeSnapshot: getTreeSnapshot(registeredIDs)
        });
    }
    clearHistory(), currentFlushStartTime = performanceNow(), currentFlushMeasurements = [];
},
    checkDebugID = function checkDebugID(debugID) {
    arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning(!1, "ReactDebugTool: debugID may not be empty.");
},
    beginLifeCycleTimer = function beginLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning(!1, "There is an internal error in the React performance measurement code." + "\n\nDid not expect %s timer to start while %s timer is still in " + "progress for %s instance.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), currentTimerStartTime = performanceNow(), currentTimerNestedFlushDuration = 0, currentTimerDebugID = debugID, currentTimerType = timerType);
},
    endLifeCycleTimer = function endLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning(!1, "There is an internal error in the React performance measurement code. " + "We did not expect %s timer to stop while %s timer is still in " + "progress for %s instance. Please report this as a bug in React.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), _isProfiling && currentFlushMeasurements.push({
        timerType: timerType,
        instanceID: debugID,
        duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    }), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null);
},
    pauseCurrentLifeCycleTimer = function pauseCurrentLifeCycleTimer() {
    var currentTimer = {
        startTime: currentTimerStartTime,
        nestedFlushStartTime: performanceNow(),
        debugID: currentTimerDebugID,
        timerType: currentTimerType
    };
    lifeCycleTimerStack.push(currentTimer), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null;
},
    resumeCurrentLifeCycleTimer = function resumeCurrentLifeCycleTimer() {
    var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
        startTime = _lifeCycleTimerStack$.startTime,
        nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
        debugID = _lifeCycleTimerStack$.debugID,
        timerType = _lifeCycleTimerStack$.timerType,
        nestedFlushDuration = performanceNow() - nestedFlushStartTime;
    currentTimerStartTime = startTime, currentTimerNestedFlushDuration += nestedFlushDuration, currentTimerDebugID = debugID, currentTimerType = timerType;
},
    lastMarkTimeStamp = 0,
    canUsePerformanceMeasure = "undefined" != typeof performance && "function" == typeof performance.mark && "function" == typeof performance.clearMarks && "function" == typeof performance.measure && "function" == typeof performance.clearMeasures,
    shouldMark = function shouldMark(debugID) {
    if (!_isProfiling || !canUsePerformanceMeasure) return !1;
    var element = ReactComponentTreeHook.getElement(debugID);
    return null != element && "object" == typeof element && !("string" == typeof element.type);
},
    markBegin = function markBegin(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType;
        lastMarkTimeStamp = performanceNow(), performance.mark(markName);
    }
},
    markEnd = function markEnd(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType,
            displayName = ReactComponentTreeHook.getDisplayName(debugID) || "Unknown";
        if (performanceNow() - lastMarkTimeStamp > .1) {
            var measurementName = displayName + " [" + markType + "]";
            performance.measure(measurementName, markName);
        }
        performance.clearMarks(markName), measurementName && performance.clearMeasures(measurementName);
    }
};

ReactDebugTool = {
    addHook: function addHook(hook) {
        hooks.push(hook);
    },
    removeHook: function removeHook(hook) {
        for (var i = 0; i < hooks.length; i++) {
            hooks[i] === hook && (hooks.splice(i, 1), i--);
        }
    },
    isProfiling: function isProfiling() {
        return _isProfiling;
    },
    beginProfiling: function beginProfiling() {
        _isProfiling || (_isProfiling = !0, flushHistory.length = 0, resetMeasurements(), ReactDebugTool.addHook(ReactHostOperationHistoryHook_1));
    },
    endProfiling: function endProfiling() {
        _isProfiling && (_isProfiling = !1, resetMeasurements(), ReactDebugTool.removeHook(ReactHostOperationHistoryHook_1));
    },
    getFlushHistory: function getFlushHistory() {
        return flushHistory;
    },
    onBeginFlush: function onBeginFlush() {
        currentFlushNesting++, resetMeasurements(), pauseCurrentLifeCycleTimer(), emitEvent("onBeginFlush");
    },
    onEndFlush: function onEndFlush() {
        resetMeasurements(), currentFlushNesting--, resumeCurrentLifeCycleTimer(), emitEvent("onEndFlush");
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), emitEvent("onBeginLifeCycleTimer", debugID, timerType), markBegin(debugID, timerType), beginLifeCycleTimer(debugID, timerType);
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), endLifeCycleTimer(debugID, timerType), markEnd(debugID, timerType), emitEvent("onEndLifeCycleTimer", debugID, timerType);
    },
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        emitEvent("onBeginProcessingChildContext");
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        emitEvent("onEndProcessingChildContext");
    },
    onHostOperation: function onHostOperation(operation) {
        checkDebugID(operation.instanceID), emitEvent("onHostOperation", operation);
    },
    onSetState: function onSetState() {
        emitEvent("onSetState");
    },
    onSetChildren: function onSetChildren(debugID, childDebugIDs) {
        checkDebugID(debugID), childDebugIDs.forEach(checkDebugID), emitEvent("onSetChildren", debugID, childDebugIDs);
    },
    onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
        checkDebugID(debugID), checkDebugID(parentDebugID, !0), emitEvent("onBeforeMountComponent", debugID, element, parentDebugID), markBegin(debugID, "mount");
    },
    onMountComponent: function onMountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "mount"), emitEvent("onMountComponent", debugID);
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
        checkDebugID(debugID), emitEvent("onBeforeUpdateComponent", debugID, element), markBegin(debugID, "update");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "update"), emitEvent("onUpdateComponent", debugID);
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
        checkDebugID(debugID), emitEvent("onBeforeUnmountComponent", debugID), markBegin(debugID, "unmount");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "unmount"), emitEvent("onUnmountComponent", debugID);
    },
    onTestEvent: function onTestEvent() {
        emitEvent("onTestEvent");
    }
}, ReactDebugTool.addHook(ReactInvalidSetStateWarningHook_1), ReactDebugTool.addHook(ReactComponentTreeHook);

var url = ExecutionEnvironment.canUseDOM && window.location.href || "";

/[?&]react_perf\b/.test(url) && ReactDebugTool.beginProfiling();

var ReactDebugTool_1 = ReactDebugTool,
    lowPriorityWarning = function lowPriorityWarning() {},
    printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }var argIndex = 0,
        message = "Warning: " + format.replace(/%s/g, function () {
        return args[argIndex++];
    });
    "undefined" != typeof console && console.warn(message);
    try {
        throw new Error(message);
    } catch (x) {}
};

lowPriorityWarning = function lowPriorityWarning(condition, format) {
    if (void 0 === format) throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
    if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
        }printWarning.apply(void 0, [format].concat(args));
    }
};

var lowPriorityWarning_1 = lowPriorityWarning,
    _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
};

function roundFloat(val) {
    var base = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
        n = Math.pow(10, base);
    return Math.floor(val * n) / n;
}

function consoleTable(table) {
    console.table(table);
}

function getLastMeasurements() {
    return ReactDebugTool_1.getFlushHistory();
}

function getExclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
        var displayName = treeSnapshot[instanceID].displayName,
            key = displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            counts: {},
            durations: {},
            totalDuration: 0
        }), stats.durations[timerType] || (stats.durations[timerType] = 0), stats.counts[timerType] || (stats.counts[timerType] = 0), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID,
                timerType = measurement.timerType;
            updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
                stats.totalDuration += duration, stats.durations[timerType] += duration, stats.counts[timerType]++;
            });
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$3({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.totalDuration - a.totalDuration;
    });
}

function getInclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc.displayName,
            ownerID = _treeSnapshot$instanc.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    var isCompositeByID = {};
    return flushHistory.forEach(function (flush) {
        flush.measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (isCompositeByID[instanceID] = !0);
        });
    }), flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                    stats.renderCount++;
                });
                for (var nextParentID = instanceID; nextParentID;) {
                    isCompositeByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                        stats.inclusiveRenderDuration += duration;
                    }), nextParentID = treeSnapshot[nextParentID].parentID;
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$3({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getWasted() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc2.displayName,
            ownerID = _treeSnapshot$instanc2.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot,
            operations = flush.operations,
            isDefinitelyNotWastedByID = {};
        operations.forEach(function (operation) {
            for (var instanceID = operation.instanceID, nextParentID = instanceID; nextParentID;) {
                isDefinitelyNotWastedByID[nextParentID] = !0, nextParentID = treeSnapshot[nextParentID].parentID;
            }
        });
        var renderedCompositeIDs = {};
        measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (renderedCompositeIDs[instanceID] = !0);
        }), measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                var updateCount = treeSnapshot[instanceID].updateCount;
                if (!isDefinitelyNotWastedByID[instanceID] && 0 !== updateCount) {
                    updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                        stats.renderCount++;
                    });
                    for (var nextParentID = instanceID; nextParentID;) {
                        renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                            stats.inclusiveRenderDuration += duration;
                        }), nextParentID = treeSnapshot[nextParentID].parentID;
                    }
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$3({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getOperations() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        stats = [];
    return flushHistory.forEach(function (flush, flushIndex) {
        var operations = flush.operations,
            treeSnapshot = flush.treeSnapshot;
        operations.forEach(function (operation) {
            var instanceID = operation.instanceID,
                type = operation.type,
                payload = operation.payload,
                _treeSnapshot$instanc3 = treeSnapshot[instanceID],
                displayName = _treeSnapshot$instanc3.displayName,
                ownerID = _treeSnapshot$instanc3.ownerID,
                owner = treeSnapshot[ownerID],
                key = (owner ? owner.displayName + " > " : "") + displayName;
            stats.push({
                flushIndex: flushIndex,
                instanceID: instanceID,
                key: key,
                type: type,
                ownerID: ownerID,
                payload: payload
            });
        });
    }), stats;
}

function printExclusive(flushHistory) {
    consoleTable(getExclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            totalDuration = item.totalDuration,
            renderCount = item.counts.render || 0,
            renderDuration = item.durations.render || 0;
        return {
            Component: key,
            "Total time (ms)": roundFloat(totalDuration),
            "Instance count": instanceCount,
            "Total render time (ms)": roundFloat(renderDuration),
            "Average render time (ms)": renderCount ? roundFloat(renderDuration / renderCount) : void 0,
            "Render count": renderCount,
            "Total lifecycle time (ms)": roundFloat(totalDuration - renderDuration)
        };
    }));
}

function printInclusive(flushHistory) {
    consoleTable(getInclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive render time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printWasted(flushHistory) {
    consoleTable(getWasted(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive wasted time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printOperations(flushHistory) {
    consoleTable(getOperations(flushHistory).map(function (stat) {
        return {
            "Owner > Node": stat.key,
            Operation: stat.type,
            Payload: "object" == typeof stat.payload ? JSON.stringify(stat.payload) : stat.payload,
            "Flush index": stat.flushIndex,
            "Owner Component ID": stat.ownerID,
            "DOM Component ID": stat.instanceID
        };
    }));
}

var warnedAboutPrintDOM = !1;

function printDOM(measurements) {
    return lowPriorityWarning_1(warnedAboutPrintDOM, "`ReactPerf.printDOM(...)` is deprecated. Use " + "`ReactPerf.printOperations(...)` instead."), warnedAboutPrintDOM = !0, printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = !1;

function getMeasurementsSummaryMap(measurements) {
    return lowPriorityWarning_1(warnedAboutGetMeasurementsSummaryMap, "`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use " + "`ReactPerf.getWasted(...)` instead."), warnedAboutGetMeasurementsSummaryMap = !0, getWasted(measurements);
}

function start() {
    ReactDebugTool_1.beginProfiling();
}

function stop() {
    ReactDebugTool_1.endProfiling();
}

function isRunning() {
    return ReactDebugTool_1.isProfiling();
}

var ReactPerfAnalysis = {
    getLastMeasurements: getLastMeasurements,
    getExclusive: getExclusive,
    getInclusive: getInclusive,
    getWasted: getWasted,
    getOperations: getOperations,
    printExclusive: printExclusive,
    printInclusive: printInclusive,
    printWasted: printWasted,
    printOperations: printOperations,
    start: start,
    stop: stop,
    isRunning: isRunning,
    printDOM: printDOM,
    getMeasurementsSummaryMap: getMeasurementsSummaryMap
},
    ReactPerf = ReactPerfAnalysis,
    injectInternals = ReactFiberDevToolsHook.injectInternals;

ReactNativeInjection.inject(), ReactGenericBatching_1.injection.injectFiberBatchedUpdates(ReactNativeFiberRenderer.batchedUpdates);

var roots = new Map();

ReactFiberErrorLogger.injection.injectDialog(ReactNativeFiberErrorDialog_1.showDialog);

var ReactNativeFiber = {
    NativeComponent: ReactNativeComponent_1,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
        var root = roots.get(containerTag);
        return root || (root = ReactNativeFiberRenderer.createContainer(containerTag), roots.set(containerTag, root)), ReactNativeFiberRenderer.updateContainer(element, root, null, callback), ReactNativeFiberRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        var root = roots.get(containerTag);
        root && ReactNativeFiberRenderer.updateContainer(null, root, null, function () {
            roots.delete(containerTag);
        });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeFiber.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unstable_createPortal: function unstable_createPortal(children, containerTag) {
        var key = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
        return ReactPortal.createPortal(children, containerTag, null, key);
    },
    unstable_batchedUpdates: ReactGenericBatching_1.batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

_extends2(ReactNativeFiber.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    ReactDebugTool: ReactDebugTool_1,
    ReactPerf: ReactPerf
}), "function" == typeof injectInternals && injectInternals({
    findFiberByHostInstance: ReactNativeComponentTree_1.getClosestInstanceFromNode,
    findHostInstanceByFiber: ReactNativeFiberRenderer.findHostInstance,
    getInspectorDataForViewTag: ReactNativeFiberInspector.getInspectorDataForViewTag,
    bundleType: 1,
    version: ReactVersion
});

var ReactNativeFiberEntry = ReactNativeFiber;

module.exports = ReactNativeFiberEntry;
}, 213, null, "ReactNativeFiber-dev");
__d(/* ExceptionsManager */function(global, require, module, exports) {
'use strict';

var exceptionID = 0;
function reportException(e, isFatal) {
  var _require = require(184            ), // 184 = NativeModules
      ExceptionsManager = _require.ExceptionsManager;

  if (ExceptionsManager) {
    var parseErrorStack = require(196              ); // 196 = parseErrorStack
    var stack = parseErrorStack(e);
    var currentExceptionID = ++exceptionID;
    if (isFatal) {
      ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
    } else {
      ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
    }
    if (__DEV__) {
      var symbolicateStackTrace = require(215                    ); // 215 = symbolicateStackTrace
      symbolicateStackTrace(stack).then(function (prettyStack) {
        if (prettyStack) {
          ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
        } else {
          throw new Error('The stack is null');
        }
      }).catch(function (error) {
        return console.warn('Unable to symbolicate stack trace: ' + error.message);
      });
    }
  }
}

function handleException(e, isFatal) {
  if (!e.message) {
    e = new Error(e);
  }
  if (console._errorOriginal) {
    console._errorOriginal(e.message);
  } else {
    console.error(e.message);
  }
  reportException(e, isFatal);
}

function reactConsoleErrorHandler() {
  console._errorOriginal.apply(console, arguments);
  if (!console.reportErrorsAsExceptions) {
    return;
  }

  if (arguments[0] && arguments[0].stack) {
    reportException(arguments[0], false);
  } else {
    var stringifySafe = require(190            ); // 190 = stringifySafe
    var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');
    if (str.slice(0, 10) === '"Warning: ') {
      return;
    }
    var error = new Error('console.error: ' + str);
    error.framesToPop = 1;
    reportException(error, false);
  }
}

function installConsoleErrorReporter() {
  if (console._errorOriginal) {
    return;
  }

  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {
    console.reportErrorsAsExceptions = true;
  }
}

module.exports = { handleException: handleException, installConsoleErrorReporter: installConsoleErrorReporter };
}, 214, null, "ExceptionsManager");
__d(/* symbolicateStackTrace */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getDevServer = require(216           ); // 216 = getDevServer

var _require = require(184            ), // 184 = NativeModules
    SourceCode = _require.SourceCode;

var fetch = void 0;

function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack) {
  var devServer, stackCopy, foundInternalSource, response, json;
  return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!fetch) {
            fetch = global.fetch || require(217    ).fetch; // 217 = fetch
          }

          devServer = getDevServer();

          if (devServer.bundleLoadedFromServer) {
            _context.next = 4;
            break;
          }

          throw new Error('Bundle was not loaded from the packager');

        case 4:
          stackCopy = stack;


          if (SourceCode.scriptURL) {
            foundInternalSource = false;

            stackCopy = stack.map(function (frame) {
              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                return _extends({}, frame, { file: SourceCode.scriptURL });
              }

              foundInternalSource = true;
              return frame;
            });
          }

          _context.next = 8;
          return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({ stack: stackCopy })
          }));

        case 8:
          response = _context.sent;
          _context.next = 11;
          return regeneratorRuntime.awrap(response.json());

        case 11:
          json = _context.sent;
          return _context.abrupt('return', json.stack);

        case 13:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}

module.exports = symbolicateStackTrace;
}, 215, null, "symbolicateStackTrace");
__d(/* getDevServer */function(global, require, module, exports) {
'use strict';

var _require = require(184            ), // 184 = NativeModules
    SourceCode = _require.SourceCode;

var _cachedDevServerURL = void 0;
var FALLBACK = 'http://localhost:8081/';

function getDevServer() {
  if (_cachedDevServerURL === undefined) {
    var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
    _cachedDevServerURL = match ? match[0] : null;
  }

  return {
    url: _cachedDevServerURL || FALLBACK,
    bundleLoadedFromServer: _cachedDevServerURL !== null
  };
}

module.exports = getDevServer;
}, 216, null, "getDevServer");
__d(/* fetch */function(global, require, module, exports) {

'use strict';

require(218           ); // 218 = whatwg-fetch

module.exports = { fetch: fetch, Headers: Headers, Request: Request, Response: Response };
}, 217, null, "fetch");
__d(/* whatwg-fetch/fetch.js */function(global, require, module, exports) {(function (self) {
  'use strict';

  if (self.fetch) {
    return;
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  if (support.arrayBuffer) {
    var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

    var isDataView = function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    };

    var isArrayBufferView = ArrayBuffer.isView || function (obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value;
  }

  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return { done: value === undefined, value: value };
      }
    };

    if (support.iterable) {
      iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];
    if (!list) {
      list = [];
      this.map[name] = list;
    }
    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  Headers.prototype.keys = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };

  Headers.prototype.values = function () {
    var items = [];
    this.forEach(function (value) {
      items.push(value);
    });
    return iteratorFor(items);
  };

  Headers.prototype.entries = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };

  if (support.iterable) {
    Headers.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('');
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);

        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        throw new Error('unsupported BodyInit type');
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    this.text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text');
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  }

  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (typeof input === 'string') {
      this.url = input;
    } else {
      if (input.bodyUsed) {
        throw new TypeError('Already read');
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    return new Request(this, { body: this._bodyInit });
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    rawHeaders.split('\r\n').forEach(function (line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = 'status' in options ? options.status : 200;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };

  Response.error = function () {
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response;
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code');
    }

    return new Response(null, { status: status, headers: { location: url } });
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function (input, init) {
    return new Promise(function (resolve, reject) {
      var request = new Request(input, init);
      var xhr = new XMLHttpRequest();

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : this);
}, 218, null, "whatwg-fetch/fetch.js");
__d(/* InitializeCore */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

if (global.GLOBAL === undefined) {
  global.GLOBAL = global;
}

if (global.window === undefined) {
  global.window = global;
}

var defineLazyObjectProperty = require(201                       ); // 201 = defineLazyObjectProperty

function defineLazyProperty(object, name, getValue) {
  var descriptor = Object.getOwnPropertyDescriptor(object, name);
  if (__DEV__ && descriptor) {
    var backupName = 'original' + name[0].toUpperCase() + name.substr(1);
    Object.defineProperty(object, backupName, _extends({}, descriptor, {
      value: object[name]
    }));
  }

  var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      configurable = _ref.configurable;

  if (descriptor && !configurable) {
    console.error('Failed to set polyfill. ' + name + ' is not configurable.');
    return;
  }

  defineLazyObjectProperty(object, name, {
    get: getValue,
    enumerable: enumerable !== false,
    writable: writable !== false
  });
}

function polyfillGlobal(name, getValue) {
  defineLazyProperty(global, name, getValue);
}

global.process = global.process || {};
global.process.env = global.process.env || {};
if (!global.process.env.NODE_ENV) {
  global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
}

if (global.__RCTProfileIsProfiling) {
  var Systrace = require(188       ); // 188 = Systrace
  Systrace.setEnabled(true);
}

if (__DEV__ && global.performance === undefined) {
  var _Systrace = require(188       ); // 188 = Systrace
  global.performance = _Systrace.getUserTimingPolyfill();
}

var ExceptionsManager = require(214                ); // 214 = ExceptionsManager
ExceptionsManager.installConsoleErrorReporter();

if (!global.__fbDisableExceptionsManager) {
  var handleError = function handleError(e, isFatal) {
    try {
      ExceptionsManager.handleException(e, isFatal);
    } catch (ee) {
      console.log('Failed to print error: ', ee.message);

      throw e;
    }
  };

  var ErrorUtils = require(187         ); // 187 = ErrorUtils
  ErrorUtils.setGlobalHandler(handleError);
}

var _shouldPolyfillCollection = require(220                           ); // 220 = _shouldPolyfillES6Collection
if (_shouldPolyfillCollection('Map')) {
  polyfillGlobal('Map', function () {
    return require(221  ); // 221 = Map
  });
}
if (_shouldPolyfillCollection('Set')) {
  polyfillGlobal('Set', function () {
    return require(225  ); // 225 = Set
  });
}

polyfillGlobal('Promise', function () {
  return require(226      ); // 226 = Promise
});

polyfillGlobal('regeneratorRuntime', function () {
  delete global.regeneratorRuntime;
  require(234                          ); // 234 = regenerator-runtime/runtime
  return global.regeneratorRuntime;
});

var defineLazyTimer = function defineLazyTimer(name) {
  polyfillGlobal(name, function () {
    return require(191       )[name]; // 191 = JSTimers
  });
};
defineLazyTimer('setTimeout');
defineLazyTimer('setInterval');
defineLazyTimer('setImmediate');
defineLazyTimer('clearTimeout');
defineLazyTimer('clearInterval');
defineLazyTimer('clearImmediate');
defineLazyTimer('requestAnimationFrame');
defineLazyTimer('cancelAnimationFrame');
defineLazyTimer('requestIdleCallback');
defineLazyTimer('cancelIdleCallback');

polyfillGlobal('XMLHttpRequest', function () {
  return require(235             ); // 235 = XMLHttpRequest
});
polyfillGlobal('FormData', function () {
  return require(246       ); // 246 = FormData
});

polyfillGlobal('fetch', function () {
  return require(217    ).fetch; // 217 = fetch
});
polyfillGlobal('Headers', function () {
  return require(217    ).Headers; // 217 = fetch
});
polyfillGlobal('Request', function () {
  return require(217    ).Request; // 217 = fetch
});
polyfillGlobal('Response', function () {
  return require(217    ).Response; // 217 = fetch
});
polyfillGlobal('WebSocket', function () {
  return require(247        ); // 247 = WebSocket
});
polyfillGlobal('Blob', function () {
  return require(248   ); // 248 = Blob
});
polyfillGlobal('URL', function () {
  return require(255  ); // 255 = URL
});

if (!global.alert) {
  global.alert = function (text) {
    require(256    ).alert('Alert', '' + text); // 256 = Alert
  };
}

var navigator = global.navigator;
if (navigator === undefined) {
  global.navigator = navigator = {};
}

defineLazyProperty(navigator, 'product', function () {
  return 'ReactNative';
});
defineLazyProperty(navigator, 'geolocation', function () {
  return require(258          ); // 258 = Geolocation
});

var BatchedBridge = require(185            ); // 185 = BatchedBridge
BatchedBridge.registerLazyCallableModule('Systrace', function () {
  return require(188       ); // 188 = Systrace
});
BatchedBridge.registerLazyCallableModule('JSTimers', function () {
  return require(191       ); // 191 = JSTimers
});
BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
  return require(261          ); // 261 = HeapCapture
});
BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
  return require(262               ); // 262 = SamplingProfiler
});
BatchedBridge.registerLazyCallableModule('RCTLog', function () {
  return require(263     ); // 263 = RCTLog
});
BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
  return require(202                    ); // 202 = RCTDeviceEventEmitter
});
BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
  return require(264                       ); // 264 = RCTNativeAppEventEmitter
});
BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
  return require(265                ); // 265 = PerformanceLogger
});

if (__DEV__) {
  if (!global.__RCTProfileIsProfiling) {
    BatchedBridge.registerCallableModule('HMRClient', require(267        )); // 267 = HMRClient

    if (!window.document) {
      require(270            ); // 270 = setupDevtools
    }

    var JSInspector = require(275          ); // 275 = JSInspector
    JSInspector.registerAgent(require(276           )); // 276 = NetworkAgent
  }
}
}, 219, null, "InitializeCore");
__d(/* _shouldPolyfillES6Collection */function(global, require, module, exports) {
'use strict';

function _shouldActuallyPolyfillES6Collection(collectionName) {
  var Collection = global[collectionName];
  if (Collection == null) {
    return true;
  }

  if (typeof global.Symbol !== 'function') {
    return true;
  }

  var proto = Collection.prototype;

  return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
}

var cache = {};

function _shouldPolyfillES6Collection(collectionName) {
  var result = cache[collectionName];
  if (result !== undefined) {
    return result;
  }

  result = _shouldActuallyPolyfillES6Collection(collectionName);
  cache[collectionName] = result;
  return result;
}

module.exports = _shouldPolyfillES6Collection;
}, 220, null, "_shouldPolyfillES6Collection");
__d(/* Map */function(global, require, module, exports) {

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _shouldPolyfillES6Collection = require(220                           ); // 220 = _shouldPolyfillES6Collection
var guid = require(222   ); // 222 = guid
var isNode = require(223              ); // 223 = fbjs/lib/isNode
var toIterator = require(224         ); // 224 = toIterator

module.exports = function (global, undefined) {
  if (!_shouldPolyfillES6Collection('Map')) {
    return global.Map;
  }

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VALUE = 'key+value';

  var KEY_PREFIX = '$map_';

  var SECRET_SIZE_PROP;
  if (__DEV__) {
    SECRET_SIZE_PROP = '$size' + guid();
  }

  var OLD_IE_HASH_PREFIX = 'IE_HASH_';

  var Map = function () {
    function Map(iterable) {
      _classCallCheck(this, Map);

      if (!isObject(this)) {
        throw new TypeError('Wrong map object type.');
      }

      initMap(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          if (!isObject(next.value)) {
            throw new TypeError('Expected iterable items to be pair objects.');
          }
          this.set(next.value[0], next.value[1]);
        }
      }
    }

    _createClass(Map, [{
      key: 'clear',
      value: function clear() {
        initMap(this);
      }
    }, {
      key: 'has',
      value: function has(key) {
        var index = getIndex(this, key);
        return !!(index != null && this._mapData[index]);
      }
    }, {
      key: 'set',
      value: function set(key, value) {
        var index = getIndex(this, key);

        if (index != null && this._mapData[index]) {
          this._mapData[index][1] = value;
        } else {
          index = this._mapData.push([key, value]) - 1;
          setIndex(this, key, index);
          if (__DEV__) {
            this[SECRET_SIZE_PROP] += 1;
          } else {
            this.size += 1;
          }
        }

        return this;
      }
    }, {
      key: 'get',
      value: function get(key) {
        var index = getIndex(this, key);
        if (index == null) {
          return undefined;
        } else {
          return this._mapData[index][1];
        }
      }
    }, {
      key: 'delete',
      value: function _delete(key) {
        var index = getIndex(this, key);
        if (index != null && this._mapData[index]) {
          setIndex(this, key, undefined);
          this._mapData[index] = undefined;
          if (__DEV__) {
            this[SECRET_SIZE_PROP] -= 1;
          } else {
            this.size -= 1;
          }
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: 'entries',
      value: function entries() {
        return new MapIterator(this, KIND_KEY_VALUE);
      }
    }, {
      key: 'keys',
      value: function keys() {
        return new MapIterator(this, KIND_KEY);
      }
    }, {
      key: 'values',
      value: function values() {
        return new MapIterator(this, KIND_VALUE);
      }
    }, {
      key: 'forEach',
      value: function forEach(callback, thisArg) {
        if (typeof callback !== 'function') {
          throw new TypeError('Callback must be callable.');
        }

        var boundCallback = callback.bind(thisArg || undefined);
        var mapData = this._mapData;

        for (var i = 0; i < mapData.length; i++) {
          var entry = mapData[i];
          if (entry != null) {
            boundCallback(entry[1], entry[0], this);
          }
        }
      }
    }]);

    return Map;
  }();

  Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

  var MapIterator = function () {
    function MapIterator(map, kind) {
      _classCallCheck(this, MapIterator);

      if (!(isObject(map) && map._mapData)) {
        throw new TypeError('Object is not a map.');
      }

      if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
        throw new Error('Invalid iteration kind.');
      }

      this._map = map;
      this._nextIndex = 0;
      this._kind = kind;
    }

    _createClass(MapIterator, [{
      key: 'next',
      value: function next() {
        if (!this instanceof Map) {
          throw new TypeError('Expected to be called on a MapIterator.');
        }

        var map = this._map;
        var index = this._nextIndex;
        var kind = this._kind;

        if (map == null) {
          return createIterResultObject(undefined, true);
        }

        var entries = map._mapData;

        while (index < entries.length) {
          var record = entries[index];

          index += 1;
          this._nextIndex = index;

          if (record) {
            if (kind === KIND_KEY) {
              return createIterResultObject(record[0], false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(record[1], false);
            } else if (kind) {
              return createIterResultObject(record, false);
            }
          }
        }

        this._map = undefined;

        return createIterResultObject(undefined, true);
      }
    }]);

    return MapIterator;
  }();

  MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
    return this;
  };

  function getIndex(map, key) {
    if (isObject(key)) {
      var hash = getHash(key);
      return map._objectIndex[hash];
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        return map._stringIndex[prefixedKey];
      } else {
        return map._otherIndex[prefixedKey];
      }
    }
  }

  function setIndex(map, key, index) {
    var shouldDelete = index == null;

    if (isObject(key)) {
      var hash = getHash(key);
      if (shouldDelete) {
        delete map._objectIndex[hash];
      } else {
        map._objectIndex[hash] = index;
      }
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        if (shouldDelete) {
          delete map._stringIndex[prefixedKey];
        } else {
          map._stringIndex[prefixedKey] = index;
        }
      } else {
        if (shouldDelete) {
          delete map._otherIndex[prefixedKey];
        } else {
          map._otherIndex[prefixedKey] = index;
        }
      }
    }
  }

  function initMap(map) {
    map._mapData = [];

    map._objectIndex = {};

    map._stringIndex = {};

    map._otherIndex = {};

    if (__DEV__) {
      if (isES5) {
        if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
          map[SECRET_SIZE_PROP] = 0;
        } else {
          Object.defineProperty(map, SECRET_SIZE_PROP, {
            value: 0,
            writable: true
          });
          Object.defineProperty(map, 'size', {
            set: function set(v) {
              console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
              throw new Error('The map size property is not writable.');
            },
            get: function get() {
              return map[SECRET_SIZE_PROP];
            }
          });
        }

        return;
      }
    }

    map.size = 0;
  }

  function isObject(o) {
    return o != null && (typeof o === 'object' || typeof o === 'function');
  }

  function createIterResultObject(value, done) {
    return { value: value, done: done };
  }

  var isES5 = function () {
    try {
      Object.defineProperty({}, 'x', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  function isExtensible(o) {
    if (!isES5) {
      return true;
    } else {
      return Object.isExtensible(o);
    }
  }

  function getIENodeHash(node) {
    var uniqueID;
    switch (node.nodeType) {
      case 1:
        uniqueID = node.uniqueID;
        break;
      case 9:
        uniqueID = node.documentElement.uniqueID;
        break;
      default:
        return null;
    }

    if (uniqueID) {
      return OLD_IE_HASH_PREFIX + uniqueID;
    } else {
      return null;
    }
  }

  var getHash = function () {
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    var hashProperty = guid();
    var hashCounter = 0;

    return function getHash(o) {
      if (o[hashProperty]) {
        return o[hashProperty];
      } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
        return o.propertyIsEnumerable[hashProperty];
      } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
        return getIENodeHash(o);
      } else if (!isES5 && o[hashProperty]) {
        return o[hashProperty];
      }

      if (isExtensible(o)) {
        hashCounter += 1;
        if (isES5) {
          Object.defineProperty(o, hashProperty, {
            enumerable: false,
            writable: false,
            configurable: false,
            value: hashCounter
          });
        } else if (o.propertyIsEnumerable) {
          o.propertyIsEnumerable = function () {
            return propIsEnumerable.apply(this, arguments);
          };
          o.propertyIsEnumerable[hashProperty] = hashCounter;
        } else if (isNode(o)) {
          o[hashProperty] = hashCounter;
        } else {
          throw new Error('Unable to set a non-enumerable property on object.');
        }
        return hashCounter;
      } else {
        throw new Error('Non-extensible objects are not allowed as keys.');
      }
    };
  }();

  return Map;
}(Function('return this')());
}, 221, null, "Map");
__d(/* guid */function(global, require, module, exports) {

'use strict';

function guid() {
  return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
}

module.exports = guid;
}, 222, null, "guid");
__d(/* fbjs/lib/isNode.js */function(global, require, module, exports) {'use strict';

function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
}, 223, null, "fbjs/lib/isNode.js");
__d(/* toIterator */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var KIND_KEY = 'key';
var KIND_VALUE = 'value';
var KIND_KEY_VAL = 'key+value';

var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';

var toIterator = function () {
  if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
    return function () {
      var ArrayIterator = function () {
        function ArrayIterator(array, kind) {
          _classCallCheck(this, ArrayIterator);

          if (!Array.isArray(array)) {
            throw new TypeError('Object is not an Array');
          }
          this._iteratedObject = array;
          this._kind = kind;
          this._nextIndex = 0;
        }

        _createClass(ArrayIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof ArrayIterator) {
              throw new TypeError('Object is not an ArrayIterator');
            }

            if (this._iteratedObject == null) {
              return createIterResultObject(undefined, true);
            }

            var array = this._iteratedObject;
            var len = this._iteratedObject.length;
            var index = this._nextIndex;
            var kind = this._kind;

            if (index >= len) {
              this._iteratedObject = undefined;
              return createIterResultObject(undefined, true);
            }

            this._nextIndex = index + 1;

            if (kind === KIND_KEY) {
              return createIterResultObject(index, false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(array[index], false);
            } else if (kind === KIND_KEY_VAL) {
              return createIterResultObject([index, array[index]], false);
            }
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);

        return ArrayIterator;
      }();

      var StringIterator = function () {
        function StringIterator(string) {
          _classCallCheck(this, StringIterator);

          if (typeof string !== 'string') {
            throw new TypeError('Object is not a string');
          }
          this._iteratedString = string;
          this._nextIndex = 0;
        }

        _createClass(StringIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof StringIterator) {
              throw new TypeError('Object is not a StringIterator');
            }

            if (this._iteratedString == null) {
              return createIterResultObject(undefined, true);
            }

            var index = this._nextIndex;
            var s = this._iteratedString;
            var len = s.length;

            if (index >= len) {
              this._iteratedString = undefined;
              return createIterResultObject(undefined, true);
            }

            var ret;
            var first = s.charCodeAt(index);

            if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
              ret = s[index];
            } else {
              var second = s.charCodeAt(index + 1);
              if (second < 0xDC00 || second > 0xDFFF) {
                ret = s[index];
              } else {
                ret = s[index] + s[index + 1];
              }
            }

            this._nextIndex = index + ret.length;

            return createIterResultObject(ret, false);
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);

        return StringIterator;
      }();

      function createIterResultObject(value, done) {
        return { value: value, done: done };
      }

      return function (object, kind) {
        if (typeof object === 'string') {
          return new StringIterator(object);
        } else if (Array.isArray(object)) {
          return new ArrayIterator(object, kind || KIND_VALUE);
        } else {
          return object[ITERATOR_SYMBOL]();
        }
      };
    }();
  } else {
    return function (object) {
      return object[ITERATOR_SYMBOL]();
    };
  }
}();

_extends(toIterator, {
  KIND_KEY: KIND_KEY,
  KIND_VALUE: KIND_VALUE,
  KIND_KEY_VAL: KIND_KEY_VAL,
  ITERATOR_SYMBOL: ITERATOR_SYMBOL
});

module.exports = toIterator;
}, 224, null, "toIterator");
__d(/* Set */function(global, require, module, exports) {

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Map = require(221  ); // 221 = Map

var _shouldPolyfillES6Collection = require(220                           ); // 220 = _shouldPolyfillES6Collection
var toIterator = require(224         ); // 224 = toIterator

module.exports = function (global) {
  if (!_shouldPolyfillES6Collection('Set')) {
    return global.Set;
  }

  var Set = function () {
    function Set(iterable) {
      _classCallCheck(this, Set);

      if (this == null || typeof this !== 'object' && typeof this !== 'function') {
        throw new TypeError('Wrong set object type.');
      }

      initSet(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          this.add(next.value);
        }
      }
    }

    _createClass(Set, [{
      key: 'add',
      value: function add(value) {
        this._map.set(value, value);
        this.size = this._map.size;
        return this;
      }
    }, {
      key: 'clear',
      value: function clear() {
        initSet(this);
      }
    }, {
      key: 'delete',
      value: function _delete(value) {
        var ret = this._map.delete(value);
        this.size = this._map.size;
        return ret;
      }
    }, {
      key: 'entries',
      value: function entries() {
        return this._map.entries();
      }
    }, {
      key: 'forEach',
      value: function forEach(callback) {
        var thisArg = arguments[1];
        var it = this._map.keys();
        var next;
        while (!(next = it.next()).done) {
          callback.call(thisArg, next.value, next.value, this);
        }
      }
    }, {
      key: 'has',
      value: function has(value) {
        return this._map.has(value);
      }
    }, {
      key: 'values',
      value: function values() {
        return this._map.values();
      }
    }]);

    return Set;
  }();

  Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;

  Set.prototype.keys = Set.prototype.values;

  function initSet(set) {
    set._map = new Map();
    set.size = set._map.size;
  }

  return Set;
}(Function('return this')());
}, 225, null, "Set");
__d(/* Promise */function(global, require, module, exports) {
'use strict';

var Promise = require(227                      ); // 227 = fbjs/lib/Promise.native

if (__DEV__) {
  require(231                                      ).enable({ // 231 = promise/setimmediate/rejection-tracking
    allRejections: true,
    onUnhandled: function onUnhandled(id) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var message = void 0;
      var stack = void 0;

      var stringValue = Object.prototype.toString.call(error);
      if (stringValue === '[object Error]') {
        message = Error.prototype.toString.call(error);
        stack = error.stack;
      } else {
        message = require(232            )(error); // 232 = pretty-format
      }

      var warning = 'Possible Unhandled Promise Rejection (id: ' + id + '):\n' + (message + '\n') + (stack == null ? '' : stack);
      console.warn(warning);
    },
    onHandled: function onHandled(id) {
      var warning = 'Promise Rejection Handled (id: ' + id + ')\n' + 'This means you can ignore any previous messages of the form ' + ('"Possible Unhandled Promise Rejection (id: ' + id + '):"');
      console.warn(warning);
    }
  });
}

module.exports = Promise;
}, 226, null, "Promise");
__d(/* fbjs/lib/Promise.native.js */function(global, require, module, exports) {

'use strict';

var Promise = require(228                                  ); // 228 = promise/setimmediate/es6-extensions
require(230                        ); // 230 = promise/setimmediate/done

Promise.prototype['finally'] = function (onSettled) {
  return this.then(onSettled, onSettled);
};

module.exports = Promise;
}, 227, null, "fbjs/lib/Promise.native.js");
__d(/* promise/setimmediate/es6-extensions.js */function(global, require, module, exports) {'use strict';

var Promise = require(229        ); // 229 = ./core.js

module.exports = Promise;

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._65 = 1;
  p._55 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._65 === 3) {
            val = val._55;
          }
          if (val._65 === 1) return res(i, val._55);
          if (val._65 === 2) reject(val._55);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function (value) {
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};
}, 228, null, "promise/setimmediate/es6-extensions.js");
__d(/* promise/setimmediate/core.js */function(global, require, module, exports) {'use strict';

function noop() {}

var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('Promise constructor\'s argument is not a function');
  }
  this._40 = 0;
  this._65 = 0;
  this._55 = null;
  this._72 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._37 = null;
Promise._87 = null;
Promise._61 = noop;

Promise.prototype.then = function (onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
}
function handle(self, deferred) {
  while (self._65 === 3) {
    self = self._55;
  }
  if (Promise._37) {
    Promise._37(self);
  }
  if (self._65 === 0) {
    if (self._40 === 0) {
      self._40 = 1;
      self._72 = deferred;
      return;
    }
    if (self._40 === 1) {
      self._40 = 2;
      self._72 = [self._72, deferred];
      return;
    }
    self._72.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  setImmediate(function () {
    var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._65 === 1) {
        resolve(deferred.promise, self._55);
      } else {
        reject(deferred.promise, self._55);
      }
      return;
    }
    var ret = tryCallOne(cb, self._55);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  if (newValue === self) {
    return reject(self, new TypeError('A promise cannot be resolved with itself.'));
  }
  if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (then === self.then && newValue instanceof Promise) {
      self._65 = 3;
      self._55 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._65 = 1;
  self._55 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._65 = 2;
  self._55 = newValue;
  if (Promise._87) {
    Promise._87(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._40 === 1) {
    handle(self, self._72);
    self._72 = null;
  }
  if (self._40 === 2) {
    for (var i = 0; i < self._72.length; i++) {
      handle(self, self._72[i]);
    }
    self._72 = null;
  }
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  });
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}
}, 229, null, "promise/setimmediate/core.js");
__d(/* promise/setimmediate/done.js */function(global, require, module, exports) {'use strict';

var Promise = require(229        ); // 229 = ./core.js

module.exports = Promise;
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this;
  self.then(null, function (err) {
    setTimeout(function () {
      throw err;
    }, 0);
  });
};
}, 230, null, "promise/setimmediate/done.js");
__d(/* promise/setimmediate/rejection-tracking.js */function(global, require, module, exports) {'use strict';

var Promise = require(229     ); // 229 = ./core

var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];

var enabled = false;
exports.disable = disable;
function disable() {
  enabled = false;
  Promise._37 = null;
  Promise._87 = null;
}

exports.enable = enable;
function enable(options) {
  options = options || {};
  if (enabled) disable();
  enabled = true;
  var id = 0;
  var displayId = 0;
  var rejections = {};
  Promise._37 = function (promise) {
    if (promise._65 === 2 && rejections[promise._51]) {
      if (rejections[promise._51].logged) {
        onHandled(promise._51);
      } else {
        clearTimeout(rejections[promise._51].timeout);
      }
      delete rejections[promise._51];
    }
  };
  Promise._87 = function (promise, err) {
    if (promise._40 === 0) {
      promise._51 = id++;
      rejections[promise._51] = {
        displayId: null,
        error: err,
        timeout: setTimeout(onUnhandled.bind(null, promise._51), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
        logged: false
      };
    }
  };
  function onUnhandled(id) {
    if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
      rejections[id].displayId = displayId++;
      if (options.onUnhandled) {
        rejections[id].logged = true;
        options.onUnhandled(rejections[id].displayId, rejections[id].error);
      } else {
        rejections[id].logged = true;
        logError(rejections[id].displayId, rejections[id].error);
      }
    }
  }
  function onHandled(id) {
    if (rejections[id].logged) {
      if (options.onHandled) {
        options.onHandled(rejections[id].displayId, rejections[id].error);
      } else if (!rejections[id].onUnhandled) {
        console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
        console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
      }
    }
  }
}

function logError(id, error) {
  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
  var errStr = (error && (error.stack || error)) + '';
  errStr.split('\n').forEach(function (line) {
    console.warn('  ' + line);
  });
}

function matchWhitelist(error, list) {
  return list.some(function (cls) {
    return error instanceof cls;
  });
}
}, 231, null, "promise/setimmediate/rejection-tracking.js");
__d(/* pretty-format/index.js */function(global, require, module, exports) {'use strict';

var printString = require(233            ); // 233 = ./printString

var toString = Object.prototype.toString;
var toISOString = Date.prototype.toISOString;
var errorToString = Error.prototype.toString;
var regExpToString = RegExp.prototype.toString;
var symbolToString = (typeof Symbol === 'function' ? Symbol.prototype : '@@prototype').toString;

var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
var NEWLINE_REGEXP = /\n/ig;

var getSymbols = Object.getOwnPropertySymbols || function (obj) {
  return [];
};

function isToStringedArrayType(toStringed) {
  return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
}

function printNumber(val) {
  if (val != +val) return 'NaN';
  var isNegativeZero = val === 0 && 1 / val < 0;
  return isNegativeZero ? '-0' : '' + val;
}

function printFunction(val, printFunctionName) {
  if (!printFunctionName) {
    return '[Function]';
  } else if (val.name === '') {
    return '[Function anonymous]';
  } else {
    return '[Function ' + val.name + ']';
  }
}

function printSymbol(val) {
  return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
}

function printError(val) {
  return '[' + errorToString.call(val) + ']';
}

function printBasicValue(val, printFunctionName, escapeRegex) {
  if (val === true || val === false) return '' + val;
  if (val === undefined) return 'undefined';
  if (val === null) return 'null';

  var typeOf = typeof val;

  if (typeOf === 'number') return printNumber(val);
  if (typeOf === 'string') return '"' + printString(val) + '"';
  if (typeOf === 'function') return printFunction(val, printFunctionName);
  if (typeOf === 'symbol') return printSymbol(val);

  var toStringed = toString.call(val);

  if (toStringed === '[object WeakMap]') return 'WeakMap {}';
  if (toStringed === '[object WeakSet]') return 'WeakSet {}';
  if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') return printFunction(val, printFunctionName);
  if (toStringed === '[object Symbol]') return printSymbol(val);
  if (toStringed === '[object Date]') return toISOString.call(val);
  if (toStringed === '[object Error]') return printError(val);
  if (toStringed === '[object RegExp]') {
    if (escapeRegex) {
      return printString(regExpToString.call(val));
    }
    return regExpToString.call(val);
  };
  if (toStringed === '[object Arguments]' && val.length === 0) return 'Arguments []';
  if (isToStringedArrayType(toStringed) && val.length === 0) return val.constructor.name + ' []';

  if (val instanceof Error) return printError(val);

  return false;
}

function printList(list, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var body = '';

  if (list.length) {
    body += edgeSpacing;

    var innerIndent = prevIndent + indent;

    for (var i = 0; i < list.length; i++) {
      body += innerIndent + print(list[i], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      if (i < list.length - 1) {
        body += ',' + spacing;
      }
    }

    body += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return '[' + body + ']';
}

function printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  return (min ? '' : 'Arguments ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
}

function printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  return (min ? '' : val.constructor.name + ' ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
}

function printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var result = 'Map {';
  var iterator = val.entries();
  var current = iterator.next();

  if (!current.done) {
    result += edgeSpacing;

    var innerIndent = prevIndent + indent;

    while (!current.done) {
      var key = print(current.value[0], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
      var value = print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      result += innerIndent + key + ' => ' + value;

      current = iterator.next();

      if (!current.done) {
        result += ',' + spacing;
      }
    }

    result += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return result + '}';
}

function printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var constructor = min ? '' : val.constructor ? val.constructor.name + ' ' : 'Object ';
  var result = constructor + '{';
  var keys = Object.keys(val).sort();
  var symbols = getSymbols(val);

  if (symbols.length) {
    keys = keys.filter(function (key) {
      return !(typeof key === 'symbol' || toString.call(key) === '[object Symbol]');
    }).concat(symbols);
  }

  if (keys.length) {
    result += edgeSpacing;

    var innerIndent = prevIndent + indent;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var name = print(key, indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
      var value = print(val[key], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      result += innerIndent + name + ': ' + value;

      if (i < keys.length - 1) {
        result += ',' + spacing;
      }
    }

    result += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return result + '}';
}

function printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var result = 'Set {';
  var iterator = val.entries();
  var current = iterator.next();

  if (!current.done) {
    result += edgeSpacing;

    var innerIndent = prevIndent + indent;

    while (!current.done) {
      result += innerIndent + print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      current = iterator.next();

      if (!current.done) {
        result += ',' + spacing;
      }
    }

    result += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return result + '}';
}

function printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  refs = refs.slice();
  if (refs.indexOf(val) > -1) {
    return '[Circular]';
  } else {
    refs.push(val);
  }

  currentDepth++;

  var hitMaxDepth = currentDepth > maxDepth;

  if (callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
    return print(val.toJSON(), indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  var toStringed = toString.call(val);
  if (toStringed === '[object Arguments]') {
    return hitMaxDepth ? '[Arguments]' : printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (isToStringedArrayType(toStringed)) {
    return hitMaxDepth ? '[Array]' : printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (toStringed === '[object Map]') {
    return hitMaxDepth ? '[Map]' : printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (toStringed === '[object Set]') {
    return hitMaxDepth ? '[Set]' : printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (typeof val === 'object') {
    return hitMaxDepth ? '[Object]' : printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }
}

function printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var match = false;
  var plugin = void 0;

  for (var p = 0; p < plugins.length; p++) {
    plugin = plugins[p];

    if (plugin.test(val)) {
      match = true;
      break;
    }
  }

  if (!match) {
    return false;
  }

  function boundPrint(val) {
    return print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function boundIndent(str) {
    var indentation = prevIndent + indent;
    return indentation + str.replace(NEWLINE_REGEXP, '\n' + indentation);
  }

  return plugin.print(val, boundPrint, boundIndent, {
    edgeSpacing: edgeSpacing,
    spacing: spacing
  });
}

function print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var basic = printBasicValue(val, printFunctionName, escapeRegex);
  if (basic) return basic;

  var plugin = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  if (plugin) return plugin;

  return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
}

var DEFAULTS = {
  callToJSON: true,
  indent: 2,
  maxDepth: Infinity,
  min: false,
  plugins: [],
  printFunctionName: true,
  escapeRegex: false
};

function validateOptions(opts) {
  Object.keys(opts).forEach(function (key) {
    if (!DEFAULTS.hasOwnProperty(key)) {
      throw new Error('prettyFormat: Invalid option: ' + key);
    }
  });

  if (opts.min && opts.indent !== undefined && opts.indent !== 0) {
    throw new Error('prettyFormat: Cannot run with min option and indent');
  }
}

function normalizeOptions(opts) {
  var result = {};

  Object.keys(DEFAULTS).forEach(function (key) {
    return result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key];
  });

  if (result.min) {
    result.indent = 0;
  }

  return result;
}

function createIndent(indent) {
  return new Array(indent + 1).join(' ');
}

function prettyFormat(val, opts) {
  if (!opts) {
    opts = DEFAULTS;
  } else {
    validateOptions(opts);
    opts = normalizeOptions(opts);
  }

  var indent = void 0;
  var refs = void 0;
  var prevIndent = '';
  var currentDepth = 0;
  var spacing = opts.min ? ' ' : '\n';
  var edgeSpacing = opts.min ? '' : '\n';

  if (opts && opts.plugins.length) {
    indent = createIndent(opts.indent);
    refs = [];
    var pluginsResult = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
    if (pluginsResult) return pluginsResult;
  }

  var basicResult = printBasicValue(val, opts.printFunctionName, opts.escapeRegex);
  if (basicResult) return basicResult;

  if (!indent) indent = createIndent(opts.indent);
  if (!refs) refs = [];
  return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
}

module.exports = prettyFormat;
}, 232, null, "pretty-format/index.js");
__d(/* pretty-format/printString.js */function(global, require, module, exports) {'use strict';

var ESCAPED_CHARACTERS = /(\\|\"|\')/g;

module.exports = function printString(val) {
  return val.replace(ESCAPED_CHARACTERS, '\\$1');
};
}, 233, null, "pretty-format/printString.js");
__d(/* regenerator-runtime/runtime.js */function(global, require, module, exports) {

!function (global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined;
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      module.exports = runtime;
    }

    return;
  }

  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  var ContinueSentinel = {};

  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  runtime.awrap = function (arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value instanceof AwaitArgument) {
          return Promise.resolve(value.arg).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }

    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

    return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
            context.delegate = null;

            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              continue;
            }
          }

          var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

          if (record.type === "throw") {
            context.delegate = null;

            method = "throw";
            arg = record.arg;
            continue;
          }

          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          context.sent = context._sent = arg;
        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            method = "next";
            arg = undefined;
          }
        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              arg = undefined;
            }
          } else {
            return info;
          }
        } else if (record.type === "throw") {
          state = GenStateCompleted;

          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function stop() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },

    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
}, 234, null, "regenerator-runtime/runtime.js");
__d(/* XMLHttpRequest */function(global, require, module, exports) {
'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventTarget = require(236                ); // 236 = event-target-shim
var RCTNetworking = require(240            ); // 240 = RCTNetworking

var base64 = require(245        ); // 245 = base64-js
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var warning = require(199               ); // 199 = fbjs/lib/warning

var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;

var SUPPORTED_RESPONSE_TYPES = {
  arraybuffer: typeof global.ArrayBuffer === 'function',
  blob: typeof global.Blob === 'function',
  document: false,
  json: true,
  text: true,
  '': true
};

var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];

var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

var XMLHttpRequestEventTarget = function (_EventTarget) {
  _inherits(XMLHttpRequestEventTarget, _EventTarget);

  function XMLHttpRequestEventTarget() {
    _classCallCheck(this, XMLHttpRequestEventTarget);

    return _possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
  }

  return XMLHttpRequestEventTarget;
}(EventTarget.apply(undefined, REQUEST_EVENTS));

var XMLHttpRequest = function (_EventTarget2) {
  _inherits(XMLHttpRequest, _EventTarget2);

  _createClass(XMLHttpRequest, null, [{
    key: 'setInterceptor',
    value: function setInterceptor(interceptor) {
      XMLHttpRequest._interceptor = interceptor;
    }
  }]);

  function XMLHttpRequest() {
    _classCallCheck(this, XMLHttpRequest);

    var _this2 = _possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

    _this2.UNSENT = UNSENT;
    _this2.OPENED = OPENED;
    _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
    _this2.LOADING = LOADING;
    _this2.DONE = DONE;
    _this2.readyState = UNSENT;
    _this2.status = 0;
    _this2.timeout = 0;
    _this2.withCredentials = true;
    _this2.upload = new XMLHttpRequestEventTarget();
    _this2._aborted = false;
    _this2._hasError = false;
    _this2._method = null;
    _this2._response = '';
    _this2._url = null;
    _this2._timedOut = false;
    _this2._trackingName = 'unknown';
    _this2._incrementalEvents = false;

    _this2._reset();
    return _this2;
  }

  _createClass(XMLHttpRequest, [{
    key: '_reset',
    value: function _reset() {
      this.readyState = this.UNSENT;
      this.responseHeaders = undefined;
      this.status = 0;
      delete this.responseURL;

      this._requestId = null;

      this._cachedResponse = undefined;
      this._hasError = false;
      this._headers = {};
      this._response = '';
      this._responseType = '';
      this._sent = false;
      this._lowerCaseResponseHeaders = {};

      this._clearSubscriptions();
      this._timedOut = false;
    }
  }, {
    key: '__didCreateRequest',
    value: function __didCreateRequest(requestId) {
      this._requestId = requestId;

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
    }
  }, {
    key: '__didUploadProgress',
    value: function __didUploadProgress(requestId, progress, total) {
      if (requestId === this._requestId) {
        this.upload.dispatchEvent({
          type: 'progress',
          lengthComputable: true,
          loaded: progress,
          total: total
        });
      }
    }
  }, {
    key: '__didReceiveResponse',
    value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
      if (requestId === this._requestId) {
        this.status = status;
        this.setResponseHeaders(responseHeaders);
        this.setReadyState(this.HEADERS_RECEIVED);
        if (responseURL || responseURL === '') {
          this.responseURL = responseURL;
        } else {
          delete this.responseURL;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
      }
    }
  }, {
    key: '__didReceiveData',
    value: function __didReceiveData(requestId, response) {
      if (requestId !== this._requestId) {
        return;
      }
      this._response = response;
      this._cachedResponse = undefined;
      this.setReadyState(this.LOADING);

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
    }
  }, {
    key: '__didReceiveIncrementalData',
    value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
      if (requestId !== this._requestId) {
        return;
      }
      if (!this._response) {
        this._response = responseText;
      } else {
        this._response += responseText;
      }

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);

      this.setReadyState(this.LOADING);
      this.__didReceiveDataProgress(requestId, progress, total);
    }
  }, {
    key: '__didReceiveDataProgress',
    value: function __didReceiveDataProgress(requestId, loaded, total) {
      if (requestId !== this._requestId) {
        return;
      }
      this.dispatchEvent({
        type: 'progress',
        lengthComputable: total >= 0,
        loaded: loaded,
        total: total
      });
    }
  }, {
    key: '__didCompleteResponse',
    value: function __didCompleteResponse(requestId, error, timeOutError) {
      if (requestId === this._requestId) {
        if (error) {
          if (this._responseType === '' || this._responseType === 'text') {
            this._response = error;
          }
          this._hasError = true;
          if (timeOutError) {
            this._timedOut = true;
          }
        }
        this._clearSubscriptions();
        this._requestId = null;
        this.setReadyState(this.DONE);

        if (error) {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
        } else {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
        }
      }
    }
  }, {
    key: '_clearSubscriptions',
    value: function _clearSubscriptions() {
      (this._subscriptions || []).forEach(function (sub) {
        sub.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: 'getAllResponseHeaders',
    value: function getAllResponseHeaders() {
      if (!this.responseHeaders) {
        return null;
      }
      var headers = this.responseHeaders || {};
      return Object.keys(headers).map(function (headerName) {
        return headerName + ': ' + headers[headerName];
      }).join('\r\n');
    }
  }, {
    key: 'getResponseHeader',
    value: function getResponseHeader(header) {
      var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
      return value !== undefined ? value : null;
    }
  }, {
    key: 'setRequestHeader',
    value: function setRequestHeader(header, value) {
      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      this._headers[header.toLowerCase()] = String(value);
    }
  }, {
    key: 'setTrackingName',
    value: function setTrackingName(trackingName) {
      this._trackingName = trackingName;
      return this;
    }
  }, {
    key: 'open',
    value: function open(method, url, async) {
      if (this.readyState !== this.UNSENT) {
        throw new Error('Cannot open, already sending');
      }
      if (async !== undefined && !async) {
        throw new Error('Synchronous http requests are not supported');
      }
      if (!url) {
        throw new Error('Cannot load an empty url');
      }
      this._method = method.toUpperCase();
      this._url = url;
      this._aborted = false;
      this.setReadyState(this.OPENED);
    }
  }, {
    key: 'send',
    value: function send(data) {
      var _this3 = this;

      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      if (this._sent) {
        throw new Error('Request has already been sent');
      }
      this._sent = true;
      var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

      this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
        return _this3.__didUploadProgress.apply(_this3, _toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
        return _this3.__didReceiveResponse.apply(_this3, _toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
        return _this3.__didReceiveData.apply(_this3, _toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
        return _this3.__didReceiveIncrementalData.apply(_this3, _toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
        return _this3.__didReceiveDataProgress.apply(_this3, _toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
        return _this3.__didCompleteResponse.apply(_this3, _toConsumableArray(args));
      }));

      var nativeResponseType = 'text';
      if (this._responseType === 'arraybuffer' || this._responseType === 'blob') {
        nativeResponseType = 'base64';
      }

      invariant(this._method, 'Request method needs to be defined.');
      invariant(this._url, 'Request URL needs to be defined.');
      RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
    }
  }, {
    key: 'abort',
    value: function abort() {
      this._aborted = true;
      if (this._requestId) {
        RCTNetworking.abortRequest(this._requestId);
      }

      if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
        this._reset();
        this.setReadyState(this.DONE);
      }

      this._reset();
    }
  }, {
    key: 'setResponseHeaders',
    value: function setResponseHeaders(responseHeaders) {
      this.responseHeaders = responseHeaders || null;
      var headers = responseHeaders || {};
      this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
        return lcaseHeaders;
      }, {});
    }
  }, {
    key: 'setReadyState',
    value: function setReadyState(newState) {
      this.readyState = newState;
      this.dispatchEvent({ type: 'readystatechange' });
      if (newState === this.DONE) {
        if (this._aborted) {
          this.dispatchEvent({ type: 'abort' });
        } else if (this._hasError) {
          if (this._timedOut) {
            this.dispatchEvent({ type: 'timeout' });
          } else {
            this.dispatchEvent({ type: 'error' });
          }
        } else {
          this.dispatchEvent({ type: 'load' });
        }
        this.dispatchEvent({ type: 'loadend' });
      }
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, listener) {
      if (type === 'readystatechange' || type === 'progress') {
        this._incrementalEvents = true;
      }
      _get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), 'addEventListener', this).call(this, type, listener);
    }
  }, {
    key: 'responseType',
    get: function get() {
      return this._responseType;
    },
    set: function set(responseType) {
      if (this._sent) {
        throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
      }
      if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
        warning(false, 'The provided value \'' + responseType + '\' is not a valid \'responseType\'.');
        return;
      }

      invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', 'The provided value \'' + responseType + '\' is unsupported in this environment.');
      this._responseType = responseType;
    }
  }, {
    key: 'responseText',
    get: function get() {
      if (this._responseType !== '' && this._responseType !== 'text') {
        throw new Error("The 'responseText' property is only available if 'responseType' " + ('is set to \'\' or \'text\', but it is \'' + this._responseType + '\'.'));
      }
      if (this.readyState < LOADING) {
        return '';
      }
      return this._response;
    }
  }, {
    key: 'response',
    get: function get() {
      var responseType = this.responseType;

      if (responseType === '' || responseType === 'text') {
        return this.readyState < LOADING || this._hasError ? '' : this._response;
      }

      if (this.readyState !== DONE) {
        return null;
      }

      if (this._cachedResponse !== undefined) {
        return this._cachedResponse;
      }

      switch (responseType) {
        case 'document':
          this._cachedResponse = null;
          break;

        case 'arraybuffer':
          this._cachedResponse = base64.toByteArray(this._response).buffer;
          break;

        case 'blob':
          this._cachedResponse = new global.Blob([base64.toByteArray(this._response).buffer], { type: this.getResponseHeader('content-type') || '' });
          break;

        case 'json':
          try {
            this._cachedResponse = JSON.parse(this._response);
          } catch (_) {
            this._cachedResponse = null;
          }
          break;

        default:
          this._cachedResponse = null;
      }

      return this._cachedResponse;
    }
  }]);

  return XMLHttpRequest;
}(EventTarget.apply(undefined, _toConsumableArray(XHR_EVENTS)));

XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;


module.exports = XMLHttpRequest;
}, 235, null, "XMLHttpRequest");
__d(/* event-target-shim/lib/event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(237        ); // 237 = ./commons
var CustomEventTarget = require(238                    ); // 238 = ./custom-event-target
var EventWrapper = require(239              ); // 239 = ./event-wrapper
var LISTENERS = Commons.LISTENERS;
var CAPTURE = Commons.CAPTURE;
var BUBBLE = Commons.BUBBLE;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;
var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
var createEventWrapper = EventWrapper.createEventWrapper;
var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;

var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

var EventTarget = module.exports = function EventTarget() {
    if (this instanceof EventTarget) {
        Object.defineProperty(this, LISTENERS, { value: Object.create(null) });
    } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(EventTarget, arguments[0]);
    } else if (arguments.length > 0) {
        var types = Array(arguments.length);
        for (var i = 0; i < arguments.length; ++i) {
            types[i] = arguments[i];
        }

        return defineCustomEventTarget(EventTarget, types);
    } else {
        throw new TypeError("Cannot call a class as a function");
    }
};

EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
    constructor: {
        value: EventTarget,
        writable: true,
        configurable: true
    },

    addEventListener: {
        value: function addEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }
            if (typeof listener !== "function" && typeof listener !== "object") {
                throw new TypeError("\"listener\" is not an object.");
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var node = this[LISTENERS][type];
            if (node == null) {
                this[LISTENERS][type] = newNode(listener, kind);
                return true;
            }

            var prev = null;
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    return false;
                }
                prev = node;
                node = node.next;
            }

            prev.next = newNode(listener, kind);
            return true;
        },
        configurable: true,
        writable: true
    },

    removeEventListener: {
        value: function removeEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var prev = null;
            var node = this[LISTENERS][type];
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    if (prev == null) {
                        this[LISTENERS][type] = node.next;
                    } else {
                        prev.next = node.next;
                    }
                    return true;
                }

                prev = node;
                node = node.next;
            }

            return false;
        },
        configurable: true,
        writable: true
    },

    dispatchEvent: {
        value: function dispatchEvent(event) {
            var node = this[LISTENERS][event.type];
            if (node == null) {
                return true;
            }

            var wrapped = createEventWrapper(event, this);

            while (node != null) {
                if (typeof node.listener === "function") {
                    node.listener.call(this, wrapped);
                } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                    node.listener.handleEvent(wrapped);
                }

                if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                    break;
                }
                node = node.next;
            }

            return !wrapped.defaultPrevented;
        },
        configurable: true,
        writable: true
    }
});
}, 236, null, "event-target-shim/lib/event-target.js");
__d(/* event-target-shim/lib/commons.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
  return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
};

exports.LISTENERS = createUniqueKey("listeners");

exports.CAPTURE = 1;

exports.BUBBLE = 2;

exports.ATTRIBUTE = 3;

exports.newNode = function newNode(listener, kind) {
  return { listener: listener, kind: kind, next: null };
};
}, 237, null, "event-target-shim/lib/commons.js");
__d(/* event-target-shim/lib/custom-event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(237        ); // 237 = ./commons
var LISTENERS = Commons.LISTENERS;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;

function getAttributeListener(eventTarget, type) {
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            return node.listener;
        }
        node = node.next;
    }
    return null;
}

function setAttributeListener(eventTarget, type, listener) {
    if (typeof listener !== "function" && typeof listener !== "object") {
        listener = null;
    }

    var prev = null;
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = node.next;
            } else {
                prev.next = node.next;
            }
        } else {
            prev = node;
        }

        node = node.next;
    }

    if (listener != null) {
        if (prev == null) {
            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
        } else {
            prev.next = newNode(listener, ATTRIBUTE);
        }
    }
}

exports.defineCustomEventTarget = function (EventTargetBase, types) {
    function EventTarget() {
        EventTargetBase.call(this);
    }

    var descripter = {
        constructor: {
            value: EventTarget,
            configurable: true,
            writable: true
        }
    };

    types.forEach(function (type) {
        descripter["on" + type] = {
            get: function get() {
                return getAttributeListener(this, type);
            },
            set: function set(listener) {
                setAttributeListener(this, type, listener);
            },
            configurable: true,
            enumerable: true
        };
    });

    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);

    return EventTarget;
};
}, 238, null, "event-target-shim/lib/custom-event-target.js");
__d(/* event-target-shim/lib/event-wrapper.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = require(237        ).createUniqueKey; // 237 = ./commons

var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");

var CANCELED_FLAG = createUniqueKey("canceled_flag");

var ORIGINAL_EVENT = createUniqueKey("original_event");

var wrapperPrototypeDefinition = Object.freeze({
    stopPropagation: Object.freeze({
        value: function stopPropagation() {
            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopPropagation === "function") {
                e.stopPropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    stopImmediatePropagation: Object.freeze({
        value: function stopImmediatePropagation() {
            this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;

            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopImmediatePropagation === "function") {
                e.stopImmediatePropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    preventDefault: Object.freeze({
        value: function preventDefault() {
            if (this.cancelable === true) {
                this[CANCELED_FLAG] = true;
            }

            var e = this[ORIGINAL_EVENT];
            if (typeof e.preventDefault === "function") {
                e.preventDefault();
            }
        },
        writable: true,
        configurable: true
    }),

    defaultPrevented: Object.freeze({
        get: function defaultPrevented() {
            return this[CANCELED_FLAG];
        },
        enumerable: true,
        configurable: true
    })
});

exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
    var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
    var propertyDefinition = {
        type: { value: event.type, enumerable: true },
        target: { value: eventTarget, enumerable: true },
        currentTarget: { value: eventTarget, enumerable: true },
        eventPhase: { value: 2, enumerable: true },
        bubbles: { value: Boolean(event.bubbles), enumerable: true },
        cancelable: { value: Boolean(event.cancelable), enumerable: true },
        timeStamp: { value: timeStamp, enumerable: true },
        isTrusted: { value: false, enumerable: true }
    };
    propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = { value: false, writable: true };
    propertyDefinition[CANCELED_FLAG] = { value: false, writable: true };
    propertyDefinition[ORIGINAL_EVENT] = { value: event };

    if (typeof event.detail !== "undefined") {
        propertyDefinition.detail = { value: event.detail, enumerable: true };
    }

    return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
};
}, 239, null, "event-target-shim/lib/event-wrapper.js");
__d(/* RCTNetworking */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MissingNativeEventEmitterShim = require(241                            ); // 241 = MissingNativeEventEmitterShim
var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var RCTNetworkingNative = require(184            ).Networking; // 184 = NativeModules
var convertRequestBody = require(243                 ); // 243 = convertRequestBody

function convertHeadersMapToArray(headers) {
  var headerArray = [];
  for (var name in headers) {
    headerArray.push([name, headers[name]]);
  }
  return headerArray;
}

var _requestId = 1;
function generateRequestId() {
  return _requestId++;
}

var RCTNetworking = function (_NativeEventEmitter) {
  _inherits(RCTNetworking, _NativeEventEmitter);

  function RCTNetworking() {
    _classCallCheck(this, RCTNetworking);

    var _this = _possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

    _this.isAvailable = true;
    return _this;
  }

  _createClass(RCTNetworking, [{
    key: 'sendRequest',
    value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
      var body = convertRequestBody(data);
      if (body && body.formData) {
        body.formData = body.formData.map(function (part) {
          return _extends({}, part, {
            headers: convertHeadersMapToArray(part.headers)
          });
        });
      }
      var requestId = generateRequestId();
      RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), _extends({}, body, { trackingName: trackingName }), responseType, incrementalUpdates, timeout, withCredentials);
      callback(requestId);
    }
  }, {
    key: 'abortRequest',
    value: function abortRequest(requestId) {
      RCTNetworkingNative.abortRequest(requestId);
    }
  }, {
    key: 'clearCookies',
    value: function clearCookies(callback) {
      RCTNetworkingNative.clearCookies(callback);
    }
  }]);

  return RCTNetworking;
}(NativeEventEmitter);

if (__DEV__ && !RCTNetworkingNative) {
  var MissingNativeRCTNetworkingShim = function (_MissingNativeEventEm) {
    _inherits(MissingNativeRCTNetworkingShim, _MissingNativeEventEm);

    function MissingNativeRCTNetworkingShim() {
      _classCallCheck(this, MissingNativeRCTNetworkingShim);

      return _possibleConstructorReturn(this, (MissingNativeRCTNetworkingShim.__proto__ || Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this, 'RCTNetworking', 'Networking'));
    }

    _createClass(MissingNativeRCTNetworkingShim, [{
      key: 'sendRequest',
      value: function sendRequest() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'abortRequest',
      value: function abortRequest() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'clearCookies',
      value: function clearCookies() {
        this.throwMissingNativeModule();
      }
    }]);

    return MissingNativeRCTNetworkingShim;
  }(MissingNativeEventEmitterShim);

  RCTNetworking = new MissingNativeRCTNetworkingShim();
} else {
  RCTNetworking = new RCTNetworking();
}

module.exports = RCTNetworking;
}, 240, null, "RCTNetworking");
__d(/* MissingNativeEventEmitterShim */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EmitterSubscription = require(204                  ); // 204 = EmitterSubscription
var EventEmitter = require(203           ); // 203 = EventEmitter

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var MissingNativeEventEmitterShim = function (_EventEmitter) {
  _inherits(MissingNativeEventEmitterShim, _EventEmitter);

  function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
    _classCallCheck(this, MissingNativeEventEmitterShim);

    var _this = _possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

    _this.isAvailable = false;

    _this._nativeModuleName = nativeModuleName;
    _this._nativeEventEmitterName = nativeEventEmitterName;
    return _this;
  }

  _createClass(MissingNativeEventEmitterShim, [{
    key: 'throwMissingNativeModule',
    value: function throwMissingNativeModule() {
      invariant(false, 'Cannot use \'' + this._nativeEventEmitterName + '\' module when ' + ('native \'' + this._nativeModuleName + '\' is not included in the build. ') + ('Either include it, or check \'' + this._nativeEventEmitterName + '\'.isAvailable ') + 'before calling any methods.');
    }
  }, {
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      this.throwMissingNativeModule();
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this.throwMissingNativeModule();
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      this.throwMissingNativeModule();
    }
  }]);

  return MissingNativeEventEmitterShim;
}(EventEmitter);

module.exports = MissingNativeEventEmitterShim;
}, 241, null, "MissingNativeEventEmitterShim");
__d(/* NativeEventEmitter */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require(203           ); // 203 = EventEmitter
var Platform = require(192       ); // 192 = Platform
var RCTDeviceEventEmitter = require(202                    ); // 202 = RCTDeviceEventEmitter
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var NativeEventEmitter = function (_EventEmitter) {
  _inherits(NativeEventEmitter, _EventEmitter);

  function NativeEventEmitter(nativeModule) {
    _classCallCheck(this, NativeEventEmitter);

    var _this = _possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

    if (Platform.OS === 'ios') {
      invariant(nativeModule, 'Native module cannot be null.');
      _this._nativeModule = nativeModule;
    }
    return _this;
  }

  _createClass(NativeEventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      if (Platform.OS === 'ios') {
        this._nativeModule.addListener(eventType);
      }
      return _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      invariant(eventType, 'eventType argument is required.');
      if (Platform.OS === 'ios') {
        var count = this.listeners(eventType).length;
        this._nativeModule.removeListeners(count);
      }
      _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (Platform.OS === 'ios') {
        this._nativeModule.removeListeners(1);
      }
      _get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
    }
  }]);

  return NativeEventEmitter;
}(EventEmitter);

module.exports = NativeEventEmitter;
}, 242, null, "NativeEventEmitter");
__d(/* convertRequestBody */function(global, require, module, exports) {
'use strict';

var binaryToBase64 = require(244             ); // 244 = binaryToBase64

var FormData = require(246       ); // 246 = FormData

function convertRequestBody(body) {
  if (typeof body === 'string') {
    return { string: body };
  }
  if (body instanceof FormData) {
    return { formData: body.getParts() };
  }
  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
    return { base64: binaryToBase64(body) };
  }
  return body;
}

module.exports = convertRequestBody;
}, 243, null, "convertRequestBody");
__d(/* binaryToBase64 */function(global, require, module, exports) {
'use strict';

var base64 = require(245        ); // 245 = base64-js

function binaryToBase64(data) {
  if (data instanceof ArrayBuffer) {
    data = new Uint8Array(data);
  }
  if (data instanceof Uint8Array) {
    return base64.fromByteArray(data);
  }
  if (!ArrayBuffer.isView(data)) {
    throw new Error('data must be ArrayBuffer or typed array');
  }
  var _data = data,
      buffer = _data.buffer,
      byteOffset = _data.byteOffset,
      byteLength = _data.byteLength;

  return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}

module.exports = binaryToBase64;
}, 244, null, "binaryToBase64");
__d(/* base64-js/index.js */function(global, require, module, exports) {'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0; i < l; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = '';
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}
}, 245, null, "base64-js/index.js");
__d(/* FormData */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FormData = function () {
  function FormData() {
    _classCallCheck(this, FormData);

    this._parts = [];
  }

  _createClass(FormData, [{
    key: 'append',
    value: function append(key, value) {
      this._parts.push([key, value]);
    }
  }, {
    key: 'getParts',
    value: function getParts() {
      return this._parts.map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            name = _ref2[0],
            value = _ref2[1];

        var contentDisposition = 'form-data; name="' + name + '"';

        var headers = { 'content-disposition': contentDisposition };

        if (typeof value === 'object' && value) {
          if (typeof value.name === 'string') {
            headers['content-disposition'] += '; filename="' + value.name + '"';
          }
          if (typeof value.type === 'string') {
            headers['content-type'] = value.type;
          }
          return _extends({}, value, { headers: headers, fieldName: name });
        }

        return { string: String(value), headers: headers, fieldName: name };
      });
    }
  }]);

  return FormData;
}();

module.exports = FormData;
}, 246, null, "FormData");
__d(/* WebSocket */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Blob = require(248   ); // 248 = Blob
var EventTarget = require(236                ); // 236 = event-target-shim
var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var NativeModules = require(184            ); // 184 = NativeModules
var Platform = require(192       ); // 192 = Platform
var WebSocketEvent = require(254             ); // 254 = WebSocketEvent

var base64 = require(245        ); // 245 = base64-js
var binaryToBase64 = require(244             ); // 244 = binaryToBase64
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var WebSocketModule = NativeModules.WebSocketModule;


var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;

var CLOSE_NORMAL = 1000;

var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];

var nextWebSocketId = 0;

var WebSocket = function (_EventTarget) {
  _inherits(WebSocket, _EventTarget);

  function WebSocket(url, protocols, options) {
    _classCallCheck(this, WebSocket);

    var _this = _possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

    _this.CONNECTING = CONNECTING;
    _this.OPEN = OPEN;
    _this.CLOSING = CLOSING;
    _this.CLOSED = CLOSED;
    _this.readyState = CONNECTING;

    if (typeof protocols === 'string') {
      protocols = [protocols];
    }

    if (!Array.isArray(protocols)) {
      protocols = null;
    }

    if (!WebSocket.isAvailable) {
      throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');
    }

    _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
    _this._socketId = nextWebSocketId++;
    _this._registerEvents();
    WebSocketModule.connect(url, protocols, options, _this._socketId);
    return _this;
  }

  _createClass(WebSocket, [{
    key: 'close',
    value: function close(code, reason) {
      if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
        return;
      }

      this.readyState = this.CLOSING;
      this._close(code, reason);
    }
  }, {
    key: 'send',
    value: function send(data) {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      if (data instanceof Blob) {
        var BlobModule = NativeModules.BlobModule;
        invariant(BlobModule, 'Native module BlobModule is required for blob support');
        BlobModule.sendBlob(data, this._socketId);
        return;
      }

      if (typeof data === 'string') {
        WebSocketModule.send(data, this._socketId);
        return;
      }

      if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
        WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
        return;
      }

      throw new Error('Unsupported data type');
    }
  }, {
    key: 'ping',
    value: function ping() {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      WebSocketModule.ping(this._socketId);
    }
  }, {
    key: '_close',
    value: function _close(code, reason) {
      if (Platform.OS === 'android') {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        WebSocketModule.close(statusCode, closeReason, this._socketId);
      } else {
        WebSocketModule.close(this._socketId);
      }
    }
  }, {
    key: '_unregisterEvents',
    value: function _unregisterEvents() {
      this._subscriptions.forEach(function (e) {
        return e.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: '_registerEvents',
    value: function _registerEvents() {
      var _this2 = this;

      this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        var data = ev.data;
        switch (ev.type) {
          case 'binary':
            data = base64.toByteArray(ev.data).buffer;
            break;
          case 'blob':
            data = Blob.create(ev.data);
            break;
        }
        _this2.dispatchEvent(new WebSocketEvent('message', { data: data }));
      }), this._eventEmitter.addListener('websocketOpen', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.OPEN;
        _this2.dispatchEvent(new WebSocketEvent('open'));
      }), this._eventEmitter.addListener('websocketClosed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('close', {
          code: ev.code,
          reason: ev.reason
        }));
        _this2._unregisterEvents();
        _this2.close();
      }), this._eventEmitter.addListener('websocketFailed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('error', {
          message: ev.message
        }));
        _this2.dispatchEvent(new WebSocketEvent('close', {
          message: ev.message
        }));
        _this2._unregisterEvents();
        _this2.close();
      })];
    }
  }, {
    key: 'binaryType',
    get: function get() {
      return this._binaryType;
    },
    set: function set(binaryType) {
      if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
        throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
      }
      if (this._binaryType === 'blob' || binaryType === 'blob') {
        var BlobModule = NativeModules.BlobModule;
        invariant(BlobModule, 'Native module BlobModule is required for blob support');
        if (BlobModule) {
          if (binaryType === 'blob') {
            BlobModule.enableBlobSupport(this._socketId);
          } else {
            BlobModule.disableBlobSupport(this._socketId);
          }
        }
      }
      this._binaryType = binaryType;
    }
  }]);

  return WebSocket;
}(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;
WebSocket.isAvailable = !!WebSocketModule;


module.exports = WebSocket;
}, 247, null, "WebSocket");
__d(/* Blob */function(global, require, module, exports) {

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var uuid = require(249   ); // 249 = uuid

var _require = require(184            ), // 184 = NativeModules
    BlobModule = _require.BlobModule;

var Blob = function () {
  _createClass(Blob, null, [{
    key: 'create',
    value: function create(props) {
      return _extends(Object.create(Blob.prototype), props);
    }
  }]);

  function Blob(parts, options) {
    _classCallCheck(this, Blob);

    var blobId = uuid();
    var size = 0;
    parts.forEach(function (part) {
      invariant(part instanceof Blob, 'Can currently only create a Blob from other Blobs');
      size += part.size;
    });
    BlobModule.createFromParts(parts, blobId);
    return Blob.create({
      blobId: blobId,
      offset: 0,
      size: size
    });
  }

  _createClass(Blob, [{
    key: 'slice',
    value: function slice(start, end) {
      var offset = this.offset;
      var size = this.size;
      if (typeof start === 'number') {
        if (start > size) {
          start = size;
        }
        offset += start;
        size -= start;

        if (typeof end === 'number') {
          if (end < 0) {
            end = this.size + end;
          }
          size = end - start;
        }
      }
      return Blob.create({
        blobId: this.blobId,
        offset: offset,
        size: size
      });
    }
  }, {
    key: 'close',
    value: function close() {
      BlobModule.release(this.blobId);
    }
  }]);

  return Blob;
}();

module.exports = Blob;
}, 248, null, "Blob");
__d(/* uuid/index.js */function(global, require, module, exports) {var v1 = require(250   ); // 250 = ./v1
var v4 = require(253   ); // 253 = ./v4

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;
}, 249, null, "uuid/index.js");
__d(/* uuid/v1.js */function(global, require, module, exports) {
var rng = require(251        ); // 251 = ./lib/rng
var bytesToUuid = require(252                ); // 252 = ./lib/bytesToUuid

var _seedBytes = rng();

var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

var _lastMSecs = 0,
    _lastNSecs = 0;

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  msecs += 12219292800000;

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  b[i++] = tmh >>> 24 & 0xf | 0x10;
  b[i++] = tmh >>> 16 & 0xff;

  b[i++] = clockseq >>> 8 | 0x80;

  b[i++] = clockseq & 0xff;

  var node = options.node || _nodeId;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;
}, 250, null, "uuid/v1.js");
__d(/* uuid/lib/rng-browser.js */function(global, require, module, exports) {
var rng;

var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) {
  var rnds8 = new Uint8Array(16);
  rng = function whatwgRNG() {
    crypto.getRandomValues(rnds8);
    return rnds8;
  };
}

if (!rng) {
  var rnds = new Array(16);
  rng = function rng() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

module.exports = rng;
}, 251, null, "uuid/lib/rng-browser.js");
__d(/* uuid/lib/bytesToUuid.js */function(global, require, module, exports) {
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;
}, 252, null, "uuid/lib/bytesToUuid.js");
__d(/* uuid/v4.js */function(global, require, module, exports) {var rng = require(251        ); // 251 = ./lib/rng
var bytesToUuid = require(252                ); // 252 = ./lib/bytesToUuid

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;
}, 253, null, "uuid/v4.js");
__d(/* WebSocketEvent */function(global, require, module, exports) {

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
  _classCallCheck(this, WebSocketEvent);

  this.type = type.toString();
  _extends(this, eventInitDict);
};

module.exports = WebSocketEvent;
}, 254, null, "WebSocketEvent");
__d(/* URL */function(global, require, module, exports) {

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Blob = require(248   ); // 248 = Blob

var _require = require(184            ), // 184 = NativeModules
    BlobModule = _require.BlobModule;

var BLOB_URL_PREFIX = null;

if (typeof BlobModule.BLOB_URI_SCHEME === 'string') {
  BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';
  if (typeof BlobModule.BLOB_URI_HOST === 'string') {
    BLOB_URL_PREFIX += '//' + BlobModule.BLOB_URI_HOST + '/';
  }
}

var URL = function () {
  function URL() {
    _classCallCheck(this, URL);

    throw new Error('Creating BlobURL objects is not supported yet.');
  }

  _createClass(URL, null, [{
    key: 'createObjectURL',
    value: function createObjectURL(blob) {
      if (BLOB_URL_PREFIX === null) {
        throw new Error('Cannot create URL for blob!');
      }
      return '' + BLOB_URL_PREFIX + blob.blobId + '?offset=' + blob.offset + '&size=' + blob.size;
    }
  }, {
    key: 'revokeObjectURL',
    value: function revokeObjectURL(url) {}
  }]);

  return URL;
}();

module.exports = URL;
}, 255, null, "URL");
__d(/* Alert */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AlertIOS = require(257       ); // 257 = AlertIOS
var NativeModules = require(184            ); // 184 = NativeModules
var Platform = require(192       ); // 192 = Platform

var Alert = function () {
  function Alert() {
    _classCallCheck(this, Alert);
  }

  _createClass(Alert, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options, type) {
      if (Platform.OS === 'ios') {
        if (typeof type !== 'undefined') {
          console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          AlertIOS.alert(title, message, buttons, type);
          return;
        }
        AlertIOS.alert(title, message, buttons);
      } else if (Platform.OS === 'android') {
        AlertAndroid.alert(title, message, buttons, options);
      }
    }
  }]);

  return Alert;
}();

var AlertAndroid = function () {
  function AlertAndroid() {
    _classCallCheck(this, AlertAndroid);
  }

  _createClass(AlertAndroid, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options) {
      var config = {
        title: title || '',
        message: message || ''
      };

      if (options) {
        config = _extends({}, config, { cancelable: options.cancelable });
      }

      var validButtons = buttons ? buttons.slice(0, 3) : [{ text: 'OK' }];
      var buttonPositive = validButtons.pop();
      var buttonNegative = validButtons.pop();
      var buttonNeutral = validButtons.pop();
      if (buttonNeutral) {
        config = _extends({}, config, { buttonNeutral: buttonNeutral.text || '' });
      }
      if (buttonNegative) {
        config = _extends({}, config, { buttonNegative: buttonNegative.text || '' });
      }
      if (buttonPositive) {
        config = _extends({}, config, { buttonPositive: buttonPositive.text || '' });
      }
      NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
        return console.warn(errorMessage);
      }, function (action, buttonKey) {
        if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
          if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
            buttonNeutral.onPress && buttonNeutral.onPress();
          } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
            buttonNegative.onPress && buttonNegative.onPress();
          } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
            buttonPositive.onPress && buttonPositive.onPress();
          }
        } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
          options && options.onDismiss && options.onDismiss();
        }
      });
    }
  }]);

  return AlertAndroid;
}();

module.exports = Alert;
}, 256, null, "Alert");
__d(/* AlertIOS */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RCTAlertManager = require(184            ).AlertManager; // 184 = NativeModules

var AlertIOS = function () {
  function AlertIOS() {
    _classCallCheck(this, AlertIOS);
  }

  _createClass(AlertIOS, null, [{
    key: 'alert',
    value: function alert(title, message, callbackOrButtons, type) {
      if (typeof type !== 'undefined') {
        console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
        this.prompt(title, message, callbackOrButtons, type);
        return;
      }
      this.prompt(title, message, callbackOrButtons, 'default');
    }
  }, {
    key: 'prompt',
    value: function prompt(title, message, callbackOrButtons) {
      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
      var defaultValue = arguments[4];
      var keyboardType = arguments[5];

      if (typeof type === 'function') {
        console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');

        var callback = type;
        var defaultValue = message;
        RCTAlertManager.alertWithArgs({
          title: title || undefined,
          type: 'plain-text',
          defaultValue: defaultValue
        }, function (id, value) {
          callback(value);
        });
        return;
      }

      var callbacks = [];
      var buttons = [];
      var cancelButtonKey;
      var destructiveButtonKey;
      if (typeof callbackOrButtons === 'function') {
        callbacks = [callbackOrButtons];
      } else if (callbackOrButtons instanceof Array) {
        callbackOrButtons.forEach(function (btn, index) {
          callbacks[index] = btn.onPress;
          if (btn.style === 'cancel') {
            cancelButtonKey = String(index);
          } else if (btn.style === 'destructive') {
            destructiveButtonKey = String(index);
          }
          if (btn.text || index < (callbackOrButtons || []).length - 1) {
            var btnDef = {};
            btnDef[index] = btn.text || '';
            buttons.push(btnDef);
          }
        });
      }

      RCTAlertManager.alertWithArgs({
        title: title || undefined,
        message: message || undefined,
        buttons: buttons,
        type: type || undefined,
        defaultValue: defaultValue,
        cancelButtonKey: cancelButtonKey,
        destructiveButtonKey: destructiveButtonKey,
        keyboardType: keyboardType
      }, function (id, value) {
        var cb = callbacks[id];
        cb && cb(value);
      });
    }
  }]);

  return AlertIOS;
}();

module.exports = AlertIOS;
}, 257, null, "AlertIOS");
__d(/* Geolocation */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var RCTLocationObserver = require(184            ).LocationObserver; // 184 = NativeModules

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var logError = require(259       ); // 259 = logError
var warning = require(199               ); // 199 = fbjs/lib/warning

var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

var Platform = require(192       ); // 192 = Platform
var PermissionsAndroid = require(260                 ); // 260 = PermissionsAndroid

var subscriptions = [];
var updatesEnabled = false;

var Geolocation = {
  requestAuthorization: function requestAuthorization() {
    RCTLocationObserver.requestAuthorization();
  },

  getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
    var hasPermission, status;
    return regeneratorRuntime.async(function getCurrentPosition$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
            hasPermission = true;

            if (!(Platform.OS === 'android' && Platform.Version >= 23)) {
              _context.next = 11;
              break;
            }

            _context.next = 5;
            return regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

          case 5:
            hasPermission = _context.sent;

            if (hasPermission) {
              _context.next = 11;
              break;
            }

            _context.next = 9;
            return regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

          case 9:
            status = _context.sent;

            hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

          case 11:
            if (hasPermission) {
              RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
            }

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, null, this);
  },

  watchPosition: function watchPosition(success, error, options) {
    if (!updatesEnabled) {
      RCTLocationObserver.startObserving(options || {});
      updatesEnabled = true;
    }
    var watchID = subscriptions.length;
    subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
    return watchID;
  },

  clearWatch: function clearWatch(watchID) {
    var sub = subscriptions[watchID];
    if (!sub) {
      return;
    }

    sub[0].remove();

    var sub1 = sub[1];sub1 && sub1.remove();
    subscriptions[watchID] = undefined;
    var noWatchers = true;
    for (var ii = 0; ii < subscriptions.length; ii++) {
      if (subscriptions[ii]) {
        noWatchers = false;
      }
    }
    if (noWatchers) {
      Geolocation.stopObserving();
    }
  },

  stopObserving: function stopObserving() {
    if (updatesEnabled) {
      RCTLocationObserver.stopObserving();
      updatesEnabled = false;
      for (var ii = 0; ii < subscriptions.length; ii++) {
        var sub = subscriptions[ii];
        if (sub) {
          warning(false, 'Called stopObserving with existing subscriptions.');
          sub[0].remove();

          var sub1 = sub[1];sub1 && sub1.remove();
        }
      }
      subscriptions = [];
    }
  }
};

module.exports = Geolocation;
}, 258, null, "Geolocation");
__d(/* logError */function(global, require, module, exports) {
'use strict';

var logError = function logError() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 1 && args[0] instanceof Error) {
    var err = args[0];
    console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
  } else {
    console.error.apply(console, args);
  }
};

module.exports = logError;
}, 259, null, "logError");
__d(/* PermissionsAndroid */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NativeModules = require(184            ); // 184 = NativeModules

var PermissionsAndroid = function () {
  function PermissionsAndroid() {
    _classCallCheck(this, PermissionsAndroid);

    this.PERMISSIONS = {
      READ_CALENDAR: 'android.permission.READ_CALENDAR',
      WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
      CAMERA: 'android.permission.CAMERA',
      READ_CONTACTS: 'android.permission.READ_CONTACTS',
      WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
      GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
      ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
      ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
      RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
      READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
      CALL_PHONE: 'android.permission.CALL_PHONE',
      READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
      WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
      ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
      USE_SIP: 'android.permission.USE_SIP',
      PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
      BODY_SENSORS: 'android.permission.BODY_SENSORS',
      SEND_SMS: 'android.permission.SEND_SMS',
      RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
      READ_SMS: 'android.permission.READ_SMS',
      RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
      RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
      READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
      WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
    };

    this.RESULTS = {
      GRANTED: 'granted',
      DENIED: 'denied',
      NEVER_ASK_AGAIN: 'never_ask_again'
    };
  }

  _createClass(PermissionsAndroid, [{
    key: 'checkPermission',
    value: function checkPermission(permission) {
      console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
      return NativeModules.PermissionsAndroid.checkPermission(permission);
    }
  }, {
    key: 'check',
    value: function check(permission) {
      return NativeModules.PermissionsAndroid.checkPermission(permission);
    }
  }, {
    key: 'requestPermission',
    value: function requestPermission(permission, rationale) {
      var response;
      return regeneratorRuntime.async(function requestPermission$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
              _context.next = 3;
              return regeneratorRuntime.awrap(this.request(permission, rationale));

            case 3:
              response = _context.sent;
              return _context.abrupt('return', response === this.RESULTS.GRANTED);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'request',
    value: function request(permission, rationale) {
      var shouldShowRationale;
      return regeneratorRuntime.async(function request$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!rationale) {
                _context2.next = 6;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

            case 3:
              shouldShowRationale = _context2.sent;

              if (!shouldShowRationale) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt('return', new Promise(function (resolve, reject) {
                NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                  return reject(new Error('Error showing rationale'));
                }, function () {
                  return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                });
              }));

            case 6:
              return _context2.abrupt('return', NativeModules.PermissionsAndroid.requestPermission(permission));

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'requestMultiple',
    value: function requestMultiple(permissions) {
      return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
    }
  }]);

  return PermissionsAndroid;
}();

PermissionsAndroid = new PermissionsAndroid();

module.exports = PermissionsAndroid;
}, 260, null, "PermissionsAndroid");
__d(/* HeapCapture */function(global, require, module, exports) {
'use strict';

var HeapCapture = {
  captureHeap: function captureHeap(path) {
    var error = null;
    try {
      global.nativeCaptureHeap(path);
      console.log('HeapCapture.captureHeap succeeded: ' + path);
    } catch (e) {
      console.log('HeapCapture.captureHeap error: ' + e.toString());
      error = e.toString();
    }
    require(184            ).JSCHeapCapture.captureComplete(path, error); // 184 = NativeModules
  }
};

module.exports = HeapCapture;
}, 261, null, "HeapCapture");
__d(/* SamplingProfiler */function(global, require, module, exports) {
'use strict';

var SamplingProfiler = {
  poke: function poke(token) {
    var error = null;
    var result = null;
    try {
      result = global.pokeSamplingProfiler();
      if (result === null) {
        console.log('The JSC Sampling Profiler has started');
      } else {
        console.log('The JSC Sampling Profiler has stopped');
      }
    } catch (e) {
      console.log('Error occured when restarting Sampling Profiler: ' + e.toString());
      error = e.toString();
    }

    var _require = require(184            ), // 184 = NativeModules
        JSCSamplingProfiler = _require.JSCSamplingProfiler;

    JSCSamplingProfiler.operationComplete(token, result, error);
  }
};

module.exports = SamplingProfiler;
}, 262, null, "SamplingProfiler");
__d(/* RCTLog */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var levelsMap = {
  log: 'log',
  info: 'info',
  warn: 'warn',
  error: 'error',
  fatal: 'error'
};

var RCTLog = function () {
  function RCTLog() {
    _classCallCheck(this, RCTLog);
  }

  _createClass(RCTLog, null, [{
    key: 'logIfNoNativeHook',
    value: function logIfNoNativeHook() {
      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, arguments);
      }

      return true;
    }
  }, {
    key: 'logToConsole',
    value: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap));

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_console = console)[logFn].apply(_console, args);

      return true;
    }
  }]);

  return RCTLog;
}();

module.exports = RCTLog;
}, 263, null, "RCTLog");
__d(/* RCTNativeAppEventEmitter */function(global, require, module, exports) {
'use strict';

var RCTDeviceEventEmitter = require(202                    ); // 202 = RCTDeviceEventEmitter

var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
module.exports = RCTNativeAppEventEmitter;
}, 264, null, "RCTNativeAppEventEmitter");
__d(/* PerformanceLogger */function(global, require, module, exports) {
'use strict';

var Systrace = require(188       ); // 188 = Systrace

var infoLog = require(266      ); // 266 = infoLog
var performanceNow = global.nativePerformanceNow || require(193                      ); // 193 = fbjs/lib/performanceNow

var timespans = {};
var extras = {};
var cookies = {};

var PRINT_TO_CONSOLE = false;

var PerformanceLogger = {
  addTimespan: function addTimespan(key, lengthInMs, description) {
    if (timespans[key]) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      totalTime: lengthInMs
    };
  },
  startTimespan: function startTimespan(key, description) {
    if (timespans[key]) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      startTime: performanceNow()
    };
    cookies[key] = Systrace.beginAsyncEvent(key);
    if (__DEV__ && PRINT_TO_CONSOLE) {
      infoLog('PerformanceLogger.js', 'start: ' + key);
    }
  },
  stopTimespan: function stopTimespan(key) {
    var timespan = timespans[key];
    if (!timespan || !timespan.startTime) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
      }
      return;
    }
    if (timespan.endTime) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
      }
      return;
    }

    timespan.endTime = performanceNow();
    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
    if (__DEV__ && PRINT_TO_CONSOLE) {
      infoLog('PerformanceLogger.js', 'end: ' + key);
    }

    Systrace.endAsyncEvent(key, cookies[key]);
    delete cookies[key];
  },
  clear: function clear() {
    timespans = {};
    extras = {};
  },
  clearCompleted: function clearCompleted() {
    for (var _key in timespans) {
      if (timespans[_key].totalTime) {
        delete timespans[_key];
      }
    }
    extras = {};
  },
  clearExceptTimespans: function clearExceptTimespans(keys) {
    timespans = Object.keys(timespans).reduce(function (previous, key) {
      if (keys.indexOf(key) !== -1) {
        previous[key] = timespans[key];
      }
      return previous;
    }, {});
    extras = {};
  },
  currentTimestamp: function currentTimestamp() {
    return performanceNow();
  },
  getTimespans: function getTimespans() {
    return timespans;
  },
  hasTimespan: function hasTimespan(key) {
    return !!timespans[key];
  },
  logTimespans: function logTimespans() {
    for (var _key2 in timespans) {
      if (timespans[_key2].totalTime) {
        infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
      }
    }
  },
  addTimespans: function addTimespans(newTimespans, labels) {
    for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
      var label = labels[ii / 2];
      PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
    }
  },
  setExtra: function setExtra(key, value) {
    if (extras[key]) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to set an extra that already exists ', { key: key, currentValue: extras[key], attemptedValue: value });
      }
      return;
    }
    extras[key] = value;
  },
  getExtras: function getExtras() {
    return extras;
  }
};

module.exports = PerformanceLogger;
}, 265, null, "PerformanceLogger");
__d(/* infoLog */function(global, require, module, exports) {
'use strict';

function infoLog() {
  var _console;

  return (_console = console).log.apply(_console, arguments);
}

module.exports = infoLog;
}, 266, null, "infoLog");
__d(/* HMRClient */function(global, require, module, exports) {
'use strict';

var Platform = require(192       ); // 192 = Platform
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var HMRClient = {
  enable: function enable(platform, bundleEntry, host, port) {
    invariant(platform, 'Missing required parameter `platform`');
    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
    invariant(host, 'Missing required paramenter `host`');

    var WebSocket = require(247        ); // 247 = WebSocket

    var wsHostPort = port !== null && port !== '' ? host + ':' + port : host;

    var wsUrl = 'ws://' + wsHostPort + '/hot?' + ('platform=' + platform + '&') + ('bundleEntry=' + bundleEntry.replace('.bundle', '.js'));

    var activeWS = new WebSocket(wsUrl);
    activeWS.onerror = function (e) {
      var error = 'Hot loading isn\'t working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network';

      if (Platform.OS === 'ios') {
        error += '\n- Ensure that the Packager server URL is correctly set in AppDelegate';
      } else {
        error += '\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run \'adb devices\' to see a list of connected devices\n- If you\'re on a physical device connected to the same machine, run \'adb reverse tcp:8081 tcp:8081\' to forward requests from your device\n- If your device is on the same Wi-Fi network, set \'Debug server host & port for device\' in \'Dev settings\' to your machine\'s IP address and the port of the local dev server - e.g. 10.0.1.1:8081';
      }

      error += '\n\nURL: ' + host + ':' + port + '\n\nError: ' + e.message;

      throw new Error(error);
    };
    activeWS.onmessage = function (_ref) {
      var data = _ref.data;

      var HMRLoadingView = require(268             ); // 268 = HMRLoadingView

      data = JSON.parse(data);

      switch (data.type) {
        case 'update-start':
          {
            HMRLoadingView.showMessage('Hot Loading...');
            break;
          }
        case 'update':
          {
            var _data$body = data.body,
                modules = _data$body.modules,
                sourceMappingURLs = _data$body.sourceMappingURLs,
                sourceURLs = _data$body.sourceURLs,
                inverseDependencies = _data$body.inverseDependencies;


            if (Platform.OS === 'ios') {
              var RCTRedBox = require(184            ).RedBox; // 184 = NativeModules
              RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
            } else {
              var RCTExceptionsManager = require(184            ).ExceptionsManager; // 184 = NativeModules
              RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
            }

            modules.forEach(function (_ref2, i) {
              var id = _ref2.id,
                  code = _ref2.code;

              code = code + '\n\n' + sourceMappingURLs[i];

              var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;

              code = ['__accept(', id + ',', 'function(global,require,module,exports){', '' + code, '\n},', '' + JSON.stringify(inverseDependencies), ');'].join('');

              injectFunction(code, sourceURLs[i]);
            });

            HMRLoadingView.hide();
            break;
          }
        case 'update-done':
          {
            HMRLoadingView.hide();
            break;
          }
        case 'error':
          {
            HMRLoadingView.hide();
            throw new Error(data.body.type + ' ' + data.body.description);
          }
        default:
          {
            throw new Error('Unexpected message: ' + data);
          }
      }
    };
  }
};

module.exports = HMRClient;
}, 267, null, "HMRClient");
__d(/* HMRLoadingView */function(global, require, module, exports) {

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ToastAndroid = require(269           ); // 269 = ToastAndroid

var TOAST_SHORT_DELAY = 2000;

var HMRLoadingView = function () {
  function HMRLoadingView() {
    _classCallCheck(this, HMRLoadingView);
  }

  _createClass(HMRLoadingView, null, [{
    key: 'showMessage',
    value: function showMessage(message) {
      if (HMRLoadingView._showing) {
        return;
      }
      ToastAndroid.show(message, ToastAndroid.SHORT);
      HMRLoadingView._showing = true;
      setTimeout(function () {
        HMRLoadingView._showing = false;
      }, TOAST_SHORT_DELAY);
    }
  }, {
    key: 'hide',
    value: function hide() {}
  }]);

  return HMRLoadingView;
}();

module.exports = HMRLoadingView;
}, 268, null, "HMRLoadingView");
__d(/* ToastAndroid */function(global, require, module, exports) {

'use strict';

var RCTToastAndroid = require(184            ).ToastAndroid; // 184 = NativeModules

var ToastAndroid = {
  SHORT: RCTToastAndroid.SHORT,
  LONG: RCTToastAndroid.LONG,

  TOP: RCTToastAndroid.TOP,
  BOTTOM: RCTToastAndroid.BOTTOM,
  CENTER: RCTToastAndroid.CENTER,

  show: function show(message, duration) {
    RCTToastAndroid.show(message, duration);
  },

  showWithGravity: function showWithGravity(message, duration, gravity) {
    RCTToastAndroid.showWithGravity(message, duration, gravity);
  }
};

module.exports = ToastAndroid;
}, 269, null, "ToastAndroid");
__d(/* setupDevtools */function(global, require, module, exports) {
'use strict';

if (__DEV__) {
  var AppState = require(271       ); // 271 = AppState
  var WebSocket = require(247        ); // 247 = WebSocket

  var _require = require(184            ), // 184 = NativeModules
      PlatformConstants = _require.PlatformConstants;

  var _require2 = require(272                  ), // 272 = react-devtools-core
      connectToDevTools = _require2.connectToDevTools;

  if (WebSocket.isAvailable) {
    connectToDevTools({
      isAppActive: function isAppActive() {
        return AppState.currentState !== 'background';
      },

      host: PlatformConstants && PlatformConstants.ServerHost ? PlatformConstants.ServerHost.split(':')[0] : 'localhost',

      port: window.__REACT_DEVTOOLS_PORT__,
      resolveRNStyle: require(273           ) // 273 = flattenStyle
    });
  }
}
}, 270, null, "setupDevtools");
__d(/* AppState */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MissingNativeEventEmitterShim = require(241                            ); // 241 = MissingNativeEventEmitterShim
var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var NativeModules = require(184            ); // 184 = NativeModules
var RCTAppState = NativeModules.AppState;

var logError = require(259       ); // 259 = logError
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var AppState = function (_NativeEventEmitter) {
  _inherits(AppState, _NativeEventEmitter);

  function AppState() {
    _classCallCheck(this, AppState);

    var _this = _possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

    _this.isAvailable = true;


    _this.isAvailable = true;
    _this._eventHandlers = {
      change: new Map(),
      memoryWarning: new Map()
    };

    _this.currentState = RCTAppState.initialAppState || 'active';

    _this.addListener('appStateDidChange', function (appStateData) {
      _this.currentState = appStateData.app_state;
    });

    RCTAppState.getCurrentAppState(function (appStateData) {
      _this.currentState = appStateData.app_state;
    }, logError);
    return _this;
  }

  _createClass(AppState, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);
      if (type === 'change') {
        this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
          handler(appStateData.app_state);
        }));
      } else if (type === 'memoryWarning') {
        this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
      }
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);
      if (!this._eventHandlers[type].has(handler)) {
        return;
      }
      this._eventHandlers[type].get(handler).remove();
      this._eventHandlers[type].delete(handler);
    }
  }]);

  return AppState;
}(NativeEventEmitter);

if (__DEV__ && !RCTAppState) {
  var MissingNativeAppStateShim = function (_MissingNativeEventEm) {
    _inherits(MissingNativeAppStateShim, _MissingNativeEventEm);

    function MissingNativeAppStateShim() {
      _classCallCheck(this, MissingNativeAppStateShim);

      return _possibleConstructorReturn(this, (MissingNativeAppStateShim.__proto__ || Object.getPrototypeOf(MissingNativeAppStateShim)).call(this, 'RCTAppState', 'AppState'));
    }

    _createClass(MissingNativeAppStateShim, [{
      key: 'addEventListener',
      value: function addEventListener() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'currentState',
      get: function get() {
        this.throwMissingNativeModule();
      }
    }]);

    return MissingNativeAppStateShim;
  }(MissingNativeEventEmitterShim);

  AppState = new MissingNativeAppStateShim();
} else {
  AppState = new AppState();
}

module.exports = AppState;
}, 271, null, "AppState");
__d(/* react-devtools-core/build/backend.js */function(global, require, module, exports) {var _extends2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

!function (root, factory) {
    "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports.ReactDevToolsBackend = factory() : root.ReactDevToolsBackend = factory();
}(this, function () {
    return function (modules) {
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: !1
            };
            return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = !0, module.exports;
        }
        var installedModules = {};
        return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
    }([function (module, exports, __webpack_require__) {
        "use strict";

        function connectToDevTools(options) {
            function scheduleRetry() {
                setTimeout(function () {
                    return connectToDevTools(options);
                }, 2e3);
            }
            function handleClose() {
                hasClosed || (hasClosed = !0, scheduleRetry(), closeListeners.forEach(function (fn) {
                    return fn();
                }));
            }
            function handleMessage(evt) {
                var data;
                if (0 !== evt.data.indexOf("eval:")) {
                    try {
                        data = JSON.parse(evt.data);
                    } catch (e) {
                        return void console.error("failed to parse json: " + evt.data);
                    }
                    messageListeners.forEach(function (fn) {
                        try {
                            fn(data);
                        } catch (e) {
                            throw console.log(data), e;
                        }
                    });
                }
            }
            var _ref = options || {},
                _ref$host = _ref.host,
                host = void 0 === _ref$host ? "localhost" : _ref$host,
                _ref$port = _ref.port,
                port = void 0 === _ref$port ? 8097 : _ref$port,
                _ref$resolveRNStyle = _ref.resolveRNStyle,
                resolveRNStyle = void 0 === _ref$resolveRNStyle ? null : _ref$resolveRNStyle,
                _ref$isAppActive = _ref.isAppActive,
                isAppActive = void 0 === _ref$isAppActive ? function () {
                return !0;
            } : _ref$isAppActive;
            if (!isAppActive()) return void scheduleRetry();
            var messageListeners = [],
                closeListeners = [],
                uri = "ws://" + host + ":" + port,
                ws = new window.WebSocket(uri);
            ws.onclose = handleClose, ws.onerror = handleClose, ws.onmessage = handleMessage, ws.onopen = function () {
                var wall = {
                    listen: function listen(fn) {
                        messageListeners.push(fn);
                    },
                    onClose: function onClose(fn) {
                        closeListeners.push(fn);
                    },
                    send: function send(data) {
                        ws.send(JSON.stringify(data));
                    }
                };
                setupBackend(wall, resolveRNStyle);
            };
            var hasClosed = !1;
        }
        function setupBackend(wall, resolveRNStyle) {
            wall.onClose(function () {
                agent && agent.emit("shutdown"), window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit("shutdown"), bridge = null, agent = null, console.log("closing devtools");
            });
            var bridge = new Bridge(wall),
                agent = new Agent(window, {
                rnStyle: !!resolveRNStyle,
                rnStyleMeasure: !!resolveRNStyle
            });
            agent.addBridge(bridge), resolveRNStyle && setupRNStyle(bridge, agent, resolveRNStyle), setupRelay(bridge, agent, window.__REACT_DEVTOOLS_GLOBAL_HOOK__);
            var _connectTimeout = setTimeout(function () {
                console.warn("react-devtools agent got no connection");
            }, 2e4);
            agent.once("connected", function () {
                agent && (inject(window.__REACT_DEVTOOLS_GLOBAL_HOOK__, agent), clearTimeout(_connectTimeout));
            });
        }
        var Agent = __webpack_require__(1),
            Bridge = __webpack_require__(6),
            installGlobalHook = __webpack_require__(31),
            installRelayHook = __webpack_require__(32),
            inject = __webpack_require__(33),
            setupRNStyle = __webpack_require__(45),
            setupRelay = __webpack_require__(47);
        installGlobalHook(window), installRelayHook(window), window.document && window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on("react-devtools", function (agent) {
            var setupHighlighter = __webpack_require__(48);
            setupHighlighter(agent);
        }), module.exports = {
            connectToDevTools: connectToDevTools
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !call || "object" != typeof call && "function" != typeof call ? self : call;
        }
        function _inherits(subClass, superClass) {
            if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        },
            _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            _require = __webpack_require__(2),
            EventEmitter = _require.EventEmitter,
            assign = __webpack_require__(3),
            guid = __webpack_require__(4),
            getIn = __webpack_require__(5),
            Agent = function (_EventEmitter) {
            function Agent(global, capabilities) {
                _classCallCheck(this, Agent);
                var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));
                _this.global = global, _this.internalInstancesById = new Map(), _this.idsByInternalInstances = new WeakMap(), _this.renderers = new Map(), _this.elementData = new Map(), _this.roots = new Set(), _this.reactInternals = {};
                var lastSelected;
                _this.on("selected", function (id) {
                    var data = _this.elementData.get(id);
                    data && data.publicInstance && _this.global.$r === lastSelected && (_this.global.$r = data.publicInstance, lastSelected = data.publicInstance);
                }), _this._prevSelected = null, _this._scrollUpdate = !1;
                var isReactDOM = window.document && "function" == typeof window.document.createElement;
                return _this.capabilities = assign({
                    scroll: isReactDOM && "function" == typeof window.document.body.scrollIntoView,
                    dom: isReactDOM,
                    editTextContent: !1
                }, capabilities), isReactDOM && (_this._updateScroll = _this._updateScroll.bind(_this), window.addEventListener("scroll", _this._onScroll.bind(_this), !0), window.addEventListener("click", _this._onClick.bind(_this), !0), window.addEventListener("mouseover", _this._onMouseOver.bind(_this), !0), window.addEventListener("resize", _this._onResize.bind(_this), !0)), _this;
            }
            return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                key: "sub",
                value: function value(ev, fn) {
                    var _this2 = this;
                    return this.on(ev, fn), function () {
                        _this2.removeListener(ev, fn);
                    };
                }
            }, {
                key: "setReactInternals",
                value: function value(renderer, reactInternals) {
                    this.reactInternals[renderer] = reactInternals;
                }
            }, {
                key: "addBridge",
                value: function value(bridge) {
                    var _this3 = this;
                    bridge.on("requestCapabilities", function () {
                        bridge.send("capabilities", _this3.capabilities), _this3.emit("connected");
                    }), bridge.on("setState", this._setState.bind(this)), bridge.on("setProps", this._setProps.bind(this)), bridge.on("setContext", this._setContext.bind(this)), bridge.on("makeGlobal", this._makeGlobal.bind(this)), bridge.on("highlight", function (id) {
                        return _this3.highlight(id);
                    }), bridge.on("highlightMany", function (id) {
                        return _this3.highlightMany(id);
                    }), bridge.on("hideHighlight", function () {
                        return _this3.emit("hideHighlight");
                    }), bridge.on("startInspecting", function () {
                        return _this3.emit("startInspecting");
                    }), bridge.on("stopInspecting", function () {
                        return _this3.emit("stopInspecting");
                    }), bridge.on("selected", function (id) {
                        return _this3.emit("selected", id);
                    }), bridge.on("setInspectEnabled", function (enabled) {
                        _this3._inspectEnabled = enabled, _this3.emit("stopInspecting");
                    }), bridge.on("shutdown", function () {
                        return _this3.emit("shutdown");
                    }), bridge.on("changeTextContent", function (_ref) {
                        var id = _ref.id,
                            text = _ref.text,
                            node = _this3.getNodeForID(id);
                        node && (node.textContent = text);
                    }), bridge.on("putSelectedNode", function (id) {
                        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node = _this3.getNodeForID(id);
                    }), bridge.on("putSelectedInstance", function (id) {
                        var node = _this3.elementData.get(id);
                        node ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = node.type : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = null, node && node.publicInstance ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = node.publicInstance : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = null;
                    }), bridge.on("checkSelection", function () {
                        var newSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;
                        if (newSelected !== _this3._prevSelected) {
                            _this3._prevSelected = newSelected;
                            var sentSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node;
                            newSelected !== sentSelected && _this3.selectFromDOMNode(newSelected, !0);
                        }
                    }), bridge.on("scrollToNode", function (id) {
                        return _this3.scrollToNode(id);
                    }), bridge.on("traceupdatesstatechange", function (value) {
                        return _this3.emit("traceupdatesstatechange", value);
                    }), bridge.on("colorizerchange", function (value) {
                        return _this3.emit("colorizerchange", value);
                    }), this.on("root", function (id) {
                        return bridge.send("root", id);
                    }), this.on("mount", function (data) {
                        return bridge.send("mount", data);
                    }), this.on("update", function (data) {
                        return bridge.send("update", data);
                    }), this.on("unmount", function (id) {
                        bridge.send("unmount", id), bridge.forget(id);
                    }), this.on("setSelection", function (data) {
                        return bridge.send("select", data);
                    }), this.on("setInspectEnabled", function (data) {
                        return bridge.send("setInspectEnabled", data);
                    });
                }
            }, {
                key: "scrollToNode",
                value: function value(id) {
                    var node = this.getNodeForID(id);
                    if (!node) return void console.warn("unable to get the node for scrolling");
                    var domElement = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
                    return domElement ? ("function" == typeof domElement.scrollIntoViewIfNeeded ? domElement.scrollIntoViewIfNeeded() : "function" == typeof domElement.scrollIntoView && domElement.scrollIntoView(), void this.highlight(id)) : void console.warn("unable to get the domElement for scrolling");
                }
            }, {
                key: "highlight",
                value: function value(id) {
                    var data = this.elementData.get(id),
                        node = this.getNodeForID(id);
                    data && node && this.emit("highlight", {
                        node: node,
                        name: data.name,
                        props: data.props
                    });
                }
            }, {
                key: "highlightMany",
                value: function value(ids) {
                    var _this4 = this,
                        nodes = [];
                    ids.forEach(function (id) {
                        var node = _this4.getNodeForID(id);
                        node && nodes.push(node);
                    }), nodes.length && this.emit("highlightMany", nodes);
                }
            }, {
                key: "getNodeForID",
                value: function value(id) {
                    var component = this.internalInstancesById.get(id);
                    if (!component) return null;
                    var renderer = this.renderers.get(id);
                    return renderer && this.reactInternals[renderer].getNativeFromReactElement ? this.reactInternals[renderer].getNativeFromReactElement(component) : null;
                }
            }, {
                key: "selectFromDOMNode",
                value: function value(node, quiet) {
                    var offsetFromLeaf = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                        id = this.getIDForNode(node);
                    id && this.emit("setSelection", {
                        id: id,
                        quiet: quiet,
                        offsetFromLeaf: offsetFromLeaf
                    });
                }
            }, {
                key: "selectFromReactInstance",
                value: function value(instance, quiet) {
                    var id = this.getId(instance);
                    return id ? void this.emit("setSelection", {
                        id: id,
                        quiet: quiet
                    }) : void console.log("no instance id", instance);
                }
            }, {
                key: "getIDForNode",
                value: function value(node) {
                    if (!this.reactInternals) return null;
                    var component;
                    for (var renderer in this.reactInternals) {
                        try {
                            component = this.reactInternals[renderer].getReactElementFromNative(node);
                        } catch (e) {}
                        if (component) return this.getId(component);
                    }
                    return null;
                }
            }, {
                key: "_setProps",
                value: function value(_ref2) {
                    var id = _ref2.id,
                        path = _ref2.path,
                        value = _ref2.value,
                        data = this.elementData.get(id);
                    data && data.updater && data.updater.setInProps ? data.updater.setInProps(path, value) : console.warn("trying to set props on a component that doesn't support it");
                }
            }, {
                key: "_setState",
                value: function value(_ref3) {
                    var id = _ref3.id,
                        path = _ref3.path,
                        value = _ref3.value,
                        data = this.elementData.get(id);
                    data && data.updater && data.updater.setInState ? data.updater.setInState(path, value) : console.warn("trying to set state on a component that doesn't support it");
                }
            }, {
                key: "_setContext",
                value: function value(_ref4) {
                    var id = _ref4.id,
                        path = _ref4.path,
                        value = _ref4.value,
                        data = this.elementData.get(id);
                    data && data.updater && data.updater.setInContext ? data.updater.setInContext(path, value) : console.warn("trying to set context on a component that doesn't support it");
                }
            }, {
                key: "_makeGlobal",
                value: function value(_ref5) {
                    var id = _ref5.id,
                        path = _ref5.path,
                        data = this.elementData.get(id);
                    if (data) {
                        var value;
                        value = "instance" === path ? data.publicInstance : getIn(data, path), this.global.$tmp = value, console.log("$tmp =", value);
                    }
                }
            }, {
                key: "getId",
                value: function value(internalInstance) {
                    return "object" === ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) && internalInstance ? (this.idsByInternalInstances.has(internalInstance) || (this.idsByInternalInstances.set(internalInstance, guid()), this.internalInstancesById.set(this.idsByInternalInstances.get(internalInstance), internalInstance)), this.idsByInternalInstances.get(internalInstance)) : internalInstance;
                }
            }, {
                key: "addRoot",
                value: function value(renderer, internalInstance) {
                    var id = this.getId(internalInstance);
                    this.roots.add(id), this.emit("root", id);
                }
            }, {
                key: "onMounted",
                value: function value(renderer, component, data) {
                    var _this5 = this,
                        id = this.getId(component);
                    this.renderers.set(id, renderer), this.elementData.set(id, data);
                    var send = assign({}, data);
                    send.children && send.children.map && (send.children = send.children.map(function (c) {
                        return _this5.getId(c);
                    })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("mount", send);
                }
            }, {
                key: "onUpdated",
                value: function value(component, data) {
                    var _this6 = this,
                        id = this.getId(component);
                    this.elementData.set(id, data);
                    var send = assign({}, data);
                    send.children && send.children.map && (send.children = send.children.map(function (c) {
                        return _this6.getId(c);
                    })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("update", send);
                }
            }, {
                key: "onUnmounted",
                value: function value(component) {
                    var id = this.getId(component);
                    this.elementData["delete"](id), this.roots["delete"](id), this.renderers["delete"](id), this.emit("unmount", id), this.idsByInternalInstances["delete"](component);
                }
            }, {
                key: "_onScroll",
                value: function value() {
                    this._scrollUpdate || (this._scrollUpdate = !0, window.requestAnimationFrame(this._updateScroll));
                }
            }, {
                key: "_updateScroll",
                value: function value() {
                    this.emit("refreshMultiOverlay"), this.emit("stopInspecting"), this._scrollUpdate = !1;
                }
            }, {
                key: "_onClick",
                value: function value(event) {
                    if (this._inspectEnabled) {
                        var id = this.getIDForNode(event.target);
                        id && (event.stopPropagation(), event.preventDefault(), this.emit("setSelection", {
                            id: id
                        }), this.emit("setInspectEnabled", !1));
                    }
                }
            }, {
                key: "_onMouseOver",
                value: function value(event) {
                    if (this._inspectEnabled) {
                        var id = this.getIDForNode(event.target);
                        if (!id) return;
                        this.highlight(id);
                    }
                }
            }, {
                key: "_onResize",
                value: function value(event) {
                    this.emit("stopInspecting");
                }
            }]), Agent;
        }(EventEmitter);
        module.exports = Agent;
    }, function (module, exports) {
        function EventEmitter() {
            this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
        }
        function isFunction(arg) {
            return "function" == typeof arg;
        }
        function isNumber(arg) {
            return "number" == typeof arg;
        }
        function isObject(arg) {
            return "object" == typeof arg && null !== arg;
        }
        function isUndefined(arg) {
            return void 0 === arg;
        }
        module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function (n) {
            if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
            return this._maxListeners = n, this;
        }, EventEmitter.prototype.emit = function (type) {
            var er, handler, len, args, i, listeners;
            if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                if (er = arguments[1], er instanceof Error) throw er;
                var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                throw err.context = er, err;
            }
            if (handler = this._events[type], isUndefined(handler)) return !1;
            if (isFunction(handler)) switch (arguments.length) {
                case 1:
                    handler.call(this);
                    break;

                case 2:
                    handler.call(this, arguments[1]);
                    break;

                case 3:
                    handler.call(this, arguments[1], arguments[2]);
                    break;

                default:
                    args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
            } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) {
                listeners[i].apply(this, args);
            }return !0;
        }, EventEmitter.prototype.addListener = function (type, listener) {
            var m;
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace())), this;
        }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function (type, listener) {
            function g() {
                this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
            }
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            var fired = !1;
            return g.listener = listener, this.on(type, g), this;
        }, EventEmitter.prototype.removeListener = function (type, listener) {
            var list, position, length, i;
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            if (!this._events || !this._events[type]) return this;
            if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);else if (isObject(list)) {
                for (i = length; i-- > 0;) {
                    if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                        position = i;
                        break;
                    }
                }if (position < 0) return this;
                1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener);
            }
            return this;
        }, EventEmitter.prototype.removeAllListeners = function (type) {
            var key, listeners;
            if (!this._events) return this;
            if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;
            if (0 === arguments.length) {
                for (key in this._events) {
                    "removeListener" !== key && this.removeAllListeners(key);
                }return this.removeAllListeners("removeListener"), this._events = {}, this;
            }
            if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners);else if (listeners) for (; listeners.length;) {
                this.removeListener(type, listeners[listeners.length - 1]);
            }return delete this._events[type], this;
        }, EventEmitter.prototype.listeners = function (type) {
            var ret;
            return ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : [];
        }, EventEmitter.prototype.listenerCount = function (type) {
            if (this._events) {
                var evlistener = this._events[type];
                if (isFunction(evlistener)) return 1;
                if (evlistener) return evlistener.length;
            }
            return 0;
        }, EventEmitter.listenerCount = function (emitter, type) {
            return emitter.listenerCount(type);
        };
    }, function (module, exports) {
        "use strict";

        function toObject(val) {
            if (null === val || void 0 === val) throw new TypeError("Object.assign cannot be called with null or undefined");
            return Object(val);
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            propIsEnumerable = Object.prototype.propertyIsEnumerable;
        module.exports = Object.assign || function (target, source) {
            for (var from, symbols, to = toObject(target), s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) {
                    hasOwnProperty.call(from, key) && (to[key] = from[key]);
                }if (Object.getOwnPropertySymbols) {
                    symbols = Object.getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
                    }
                }
            }
            return to;
        };
    }, function (module, exports) {
        "use strict";

        function guid() {
            return "g" + Math.random().toString(16).substr(2);
        }
        module.exports = guid;
    }, function (module, exports) {
        "use strict";

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                }return arr2;
            }
            return Array.from(arr);
        }
        function getIn(base, path) {
            return path.reduce(function (obj, attr) {
                if (obj) {
                    if (obj.hasOwnProperty(attr)) return obj[attr];
                    if ("function" == typeof obj[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return [].concat(_toConsumableArray(obj))[attr];
                }
                return null;
            }, base);
        }
        module.exports = getIn;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                }return arr2;
            }
            return Array.from(arr);
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function getWindowFunction(name, polyfill) {
            return String(window[name]).indexOf("[native code]") === -1 ? polyfill : window[name];
        }
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                }
            }
            return target;
        },
            _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            consts = __webpack_require__(7),
            hydrate = __webpack_require__(26),
            dehydrate = __webpack_require__(27),
            getIn = __webpack_require__(5),
            performanceNow = __webpack_require__(28),
            lastRunTimeMS = 5,
            cancelIdleCallback = getWindowFunction("cancelIdleCallback", clearTimeout),
            requestIdleCallback = getWindowFunction("requestIdleCallback", function (cb, options) {
            var delayMS = 3e3 * lastRunTimeMS;
            return delayMS > 500 && (delayMS = 500), setTimeout(function () {
                var startTime = performanceNow();
                cb({
                    didTimeout: !1,
                    timeRemaining: function timeRemaining() {
                        return 1 / 0;
                    }
                });
                var endTime = performanceNow();
                lastRunTimeMS = (endTime - startTime) / 1e3;
            }, delayMS);
        }),
            Bridge = function () {
            function Bridge(wall) {
                _classCallCheck(this, Bridge), this._cbs = new Map(), this._inspectables = new Map(), this._cid = 0, this._listeners = {}, this._buffer = [], this._flushHandle = null, this._callers = {}, this._paused = !1, this._wall = wall, wall.listen(this._handleMessage.bind(this));
            }
            return _createClass(Bridge, [{
                key: "inspect",
                value: function value(id, path, cb) {
                    var _cid = this._cid++;
                    this._cbs.set(_cid, function (data, cleaned, proto, protoclean) {
                        cleaned.length && hydrate(data, cleaned), proto && protoclean.length && hydrate(proto, protoclean), proto && (data[consts.proto] = proto), cb(data);
                    }), this._wall.send({
                        type: "inspect",
                        callback: _cid,
                        path: path,
                        id: id
                    });
                }
            }, {
                key: "call",
                value: function value(name, args, cb) {
                    var _cid = this._cid++;
                    this._cbs.set(_cid, cb), this._wall.send({
                        type: "call",
                        callback: _cid,
                        args: args,
                        name: name
                    });
                }
            }, {
                key: "onCall",
                value: function value(name, handler) {
                    if (this._callers[name]) throw new Error("only one call handler per call name allowed");
                    this._callers[name] = handler;
                }
            }, {
                key: "pause",
                value: function value() {
                    this._wall.send({
                        type: "pause"
                    });
                }
            }, {
                key: "resume",
                value: function value() {
                    this._wall.send({
                        type: "resume"
                    });
                }
            }, {
                key: "setInspectable",
                value: function value(id, data) {
                    var prev = this._inspectables.get(id);
                    return prev ? void this._inspectables.set(id, _extends({}, prev, data)) : void this._inspectables.set(id, data);
                }
            }, {
                key: "send",
                value: function value(evt, data) {
                    this._buffer.push({
                        evt: evt,
                        data: data
                    }), this.scheduleFlush();
                }
            }, {
                key: "scheduleFlush",
                value: function value() {
                    if (!this._flushHandle && this._buffer.length) {
                        var timeout = this._paused ? 5e3 : 500;
                        this._flushHandle = requestIdleCallback(this.flushBufferWhileIdle.bind(this), {
                            timeout: timeout
                        });
                    }
                }
            }, {
                key: "cancelFlush",
                value: function value() {
                    this._flushHandle && (cancelIdleCallback(this._flushHandle), this._flushHandle = null);
                }
            }, {
                key: "flushBufferWhileIdle",
                value: function value(deadline) {
                    this._flushHandle = null;
                    for (var chunkCount = this._paused ? 20 : 10, chunkSize = Math.round(this._buffer.length / chunkCount), minChunkSize = this._paused ? 50 : 100; this._buffer.length && (deadline.timeRemaining() > 0 || deadline.didTimeout);) {
                        var take = Math.min(this._buffer.length, Math.max(minChunkSize, chunkSize)),
                            currentBuffer = this._buffer.splice(0, take);
                        this.flushBufferSlice(currentBuffer);
                    }
                    this._buffer.length && this.scheduleFlush();
                }
            }, {
                key: "flushBufferSlice",
                value: function value(bufferSlice) {
                    var _this = this,
                        events = bufferSlice.map(function (_ref) {
                        var evt = _ref.evt,
                            data = _ref.data,
                            cleaned = [],
                            san = dehydrate(data, cleaned);
                        return cleaned.length && _this.setInspectable(data.id, data), {
                            type: "event",
                            evt: evt,
                            data: san,
                            cleaned: cleaned
                        };
                    });
                    this._wall.send({
                        type: "many-events",
                        events: events
                    });
                }
            }, {
                key: "forget",
                value: function value(id) {
                    this._inspectables["delete"](id);
                }
            }, {
                key: "on",
                value: function value(evt, fn) {
                    this._listeners[evt] ? this._listeners[evt].push(fn) : this._listeners[evt] = [fn];
                }
            }, {
                key: "off",
                value: function value(evt, fn) {
                    if (this._listeners[evt]) {
                        var ix = this._listeners[evt].indexOf(fn);
                        ix !== -1 && this._listeners[evt].splice(ix, 1);
                    }
                }
            }, {
                key: "once",
                value: function value(evt, fn) {
                    var self = this,
                        listener = function listener() {
                        fn.apply(this, arguments), self.off(evt, listener);
                    };
                    this.on(evt, listener);
                }
            }, {
                key: "_handleMessage",
                value: function value(payload) {
                    var _this2 = this;
                    if ("resume" === payload.type) return this._paused = !1, void this.scheduleFlush();
                    if ("pause" === payload.type) return this._paused = !0, void this.cancelFlush();
                    if ("callback" === payload.type) {
                        var callback = this._cbs.get(payload.id);
                        return void (callback && (callback.apply(void 0, _toConsumableArray(payload.args)), this._cbs["delete"](payload.id)));
                    }
                    if ("call" === payload.type) return void this._handleCall(payload.name, payload.args, payload.callback);
                    if ("inspect" === payload.type) return void this._inspectResponse(payload.id, payload.path, payload.callback);
                    if ("event" === payload.type) {
                        payload.cleaned && hydrate(payload.data, payload.cleaned);
                        var fns = this._listeners[payload.evt],
                            data = payload.data;
                        fns && fns.forEach(function (fn) {
                            return fn(data);
                        });
                    }
                    "many-events" === payload.type && payload.events.forEach(function (event) {
                        event.cleaned && hydrate(event.data, event.cleaned);
                        var handlers = _this2._listeners[event.evt];
                        handlers && handlers.forEach(function (fn) {
                            return fn(event.data);
                        });
                    });
                }
            }, {
                key: "_handleCall",
                value: function value(name, args, callback) {
                    if (!this._callers[name]) return void console.warn('unknown call: "' + name + '"');
                    args = Array.isArray(args) ? args : [args];
                    var result;
                    try {
                        result = this._callers[name].apply(null, args);
                    } catch (e) {
                        return void console.error("Failed to call", e);
                    }
                    this._wall.send({
                        type: "callback",
                        id: callback,
                        args: [result]
                    });
                }
            }, {
                key: "_inspectResponse",
                value: function value(id, path, callback) {
                    var inspectable = this._inspectables.get(id),
                        result = {},
                        cleaned = [],
                        proto = null,
                        protoclean = [];
                    if (inspectable) {
                        var val = getIn(inspectable, path),
                            protod = !1,
                            isFn = "function" == typeof val;
                        if (val && "function" == typeof val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
                            var iterVal = Object.create({}),
                                count = 0,
                                _iteratorNormalCompletion = !0,
                                _didIteratorError = !1,
                                _iteratorError = void 0;
                            try {
                                for (var _step, _iterator = val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                                    var entry = _step.value;
                                    if (count > 100) break;
                                    iterVal[count] = entry, count++;
                                }
                            } catch (err) {
                                _didIteratorError = !0, _iteratorError = err;
                            } finally {
                                try {
                                    !_iteratorNormalCompletion && _iterator["return"] && _iterator["return"]();
                                } finally {
                                    if (_didIteratorError) throw _iteratorError;
                                }
                            }
                            val = iterVal;
                        }
                        if (Object.getOwnPropertyNames(val).forEach(function (name) {
                            "__proto__" === name && (protod = !0), (!isFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (result[name] = dehydrate(val[name], cleaned, [name]));
                        }), !protod && val.__proto__ && "Object" !== val.constructor.name) {
                            var newProto = {},
                                pIsFn = "function" == typeof val.__proto__;
                            Object.getOwnPropertyNames(val.__proto__).forEach(function (name) {
                                (!pIsFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (newProto[name] = dehydrate(val.__proto__[name], protoclean, [name]));
                            }), proto = newProto;
                        }
                    }
                    this._wall.send({
                        type: "callback",
                        id: callback,
                        args: [result, cleaned, proto, protoclean]
                    });
                }
            }]), Bridge;
        }();
        module.exports = Bridge;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var _Symbol = __webpack_require__(8);
        module.exports = {
            name: _Symbol("name"),
            type: _Symbol("type"),
            inspected: _Symbol("inspected"),
            meta: _Symbol("meta"),
            proto: _Symbol("proto")
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(9)() ? Symbol : __webpack_require__(10);
    }, function (module, exports) {
        "use strict";

        module.exports = function () {
            var symbol;
            if ("function" != typeof Symbol) return !1;
            symbol = Symbol("test symbol");
            try {
                String(symbol);
            } catch (e) {
                return !1;
            }
            return "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "object" == typeof (typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable") && "object" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") && "object" == typeof (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") && "object" == typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") && "object" == typeof (typeof Symbol === "function" ? Symbol.unscopables : "@@unscopables");
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var NativeSymbol,
            SymbolPolyfill,
            _HiddenSymbol,
            d = __webpack_require__(11),
            validateSymbol = __webpack_require__(24),
            create = Object.create,
            defineProperties = Object.defineProperties,
            defineProperty = Object.defineProperty,
            objPrototype = Object.prototype,
            globalSymbols = create(null);
        "function" == typeof Symbol && (NativeSymbol = Symbol);
        var generateName = function () {
            var created = create(null);
            return function (desc) {
                for (var name, ie11BugWorkaround, postfix = 0; created[desc + (postfix || "")];) {
                    ++postfix;
                }return desc += postfix || "", created[desc] = !0, name = "@@" + desc, defineProperty(objPrototype, name, d.gs(null, function (value) {
                    ie11BugWorkaround || (ie11BugWorkaround = !0, defineProperty(this, name, d(value)), ie11BugWorkaround = !1);
                })), name;
            };
        }();
        _HiddenSymbol = function HiddenSymbol(description) {
            if (this instanceof _HiddenSymbol) throw new TypeError("TypeError: Symbol is not a constructor");
            return SymbolPolyfill(description);
        }, module.exports = SymbolPolyfill = function Symbol(description) {
            var symbol;
            if (this instanceof Symbol) throw new TypeError("TypeError: Symbol is not a constructor");
            return symbol = create(_HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(symbol, {
                __description__: d("", description),
                __name__: d("", generateName(description))
            });
        }, defineProperties(SymbolPolyfill, {
            "for": d(function (key) {
                return globalSymbols[key] ? globalSymbols[key] : globalSymbols[key] = SymbolPolyfill(String(key));
            }),
            keyFor: d(function (s) {
                var key;
                validateSymbol(s);
                for (key in globalSymbols) {
                    if (globalSymbols[key] === s) return key;
                }
            }),
            hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
            isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
            iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
            match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
            replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
            search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
            species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
            split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
            toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
            toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
            unscopables: d("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
        }), defineProperties(_HiddenSymbol.prototype, {
            constructor: d(SymbolPolyfill),
            toString: d("", function () {
                return this.__name__;
            })
        }), defineProperties(SymbolPolyfill.prototype, {
            toString: d(function () {
                return "Symbol (" + validateSymbol(this).__description__ + ")";
            }),
            valueOf: d(function () {
                return validateSymbol(this);
            })
        }), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
            return validateSymbol(this);
        })), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol")), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var d,
            assign = __webpack_require__(12),
            normalizeOpts = __webpack_require__(19),
            isCallable = __webpack_require__(20),
            contains = __webpack_require__(21);
        d = module.exports = function (dscr, value) {
            var c, e, w, options, desc;
            return arguments.length < 2 || "string" != typeof dscr ? (options = value, value = dscr, dscr = null) : options = arguments[2], null == dscr ? (c = w = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e"), w = contains.call(dscr, "w")), desc = {
                value: value,
                configurable: c,
                enumerable: e,
                writable: w
            }, options ? assign(normalizeOpts(options), desc) : desc;
        }, d.gs = function (dscr, get, set) {
            var c, e, options, desc;
            return "string" != typeof dscr ? (options = set, set = get, get = dscr, dscr = null) : options = arguments[3], null == get ? get = void 0 : isCallable(get) ? null == set ? set = void 0 : isCallable(set) || (options = set, set = void 0) : (options = get, get = set = void 0), null == dscr ? (c = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e")), desc = {
                get: get,
                set: set,
                configurable: c,
                enumerable: e
            }, options ? assign(normalizeOpts(options), desc) : desc;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(13)() ? Object.assign : __webpack_require__(14);
    }, function (module, exports) {
        "use strict";

        module.exports = function () {
            var obj,
                assign = Object.assign;
            return "function" == typeof assign && (obj = {
                foo: "raz"
            }, assign(obj, {
                bar: "dwa"
            }, {
                trzy: "trzy"
            }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var keys = __webpack_require__(15),
            value = __webpack_require__(18),
            max = Math.max;
        module.exports = function (dest, src) {
            var error,
                i,
                assign,
                l = max(arguments.length, 2);
            for (dest = Object(value(dest)), assign = function assign(key) {
                try {
                    dest[key] = src[key];
                } catch (e) {
                    error || (error = e);
                }
            }, i = 1; i < l; ++i) {
                src = arguments[i], keys(src).forEach(assign);
            }if (void 0 !== error) throw error;
            return dest;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(16)() ? Object.keys : __webpack_require__(17);
    }, function (module, exports) {
        "use strict";

        module.exports = function () {
            try {
                return Object.keys("primitive"), !0;
            } catch (e) {
                return !1;
            }
        };
    }, function (module, exports) {
        "use strict";

        var keys = Object.keys;
        module.exports = function (object) {
            return keys(null == object ? object : Object(object));
        };
    }, function (module, exports) {
        "use strict";

        module.exports = function (value) {
            if (null == value) throw new TypeError("Cannot use null or undefined");
            return value;
        };
    }, function (module, exports) {
        "use strict";

        var forEach = Array.prototype.forEach,
            create = Object.create,
            process = function process(src, obj) {
            var key;
            for (key in src) {
                obj[key] = src[key];
            }
        };
        module.exports = function (options) {
            var result = create(null);
            return forEach.call(arguments, function (options) {
                null != options && process(Object(options), result);
            }), result;
        };
    }, function (module, exports) {
        "use strict";

        module.exports = function (obj) {
            return "function" == typeof obj;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(22)() ? String.prototype.contains : __webpack_require__(23);
    }, function (module, exports) {
        "use strict";

        var str = "razdwatrzy";
        module.exports = function () {
            return "function" == typeof str.contains && str.contains("dwa") === !0 && str.contains("foo") === !1;
        };
    }, function (module, exports) {
        "use strict";

        var indexOf = String.prototype.indexOf;
        module.exports = function (searchString) {
            return indexOf.call(this, searchString, arguments[1]) > -1;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var isSymbol = __webpack_require__(25);
        module.exports = function (value) {
            if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
            return value;
        };
    }, function (module, exports) {
        "use strict";

        module.exports = function (x) {
            return x && ("symbol" == typeof x || "Symbol" === x["@@toStringTag"]) || !1;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function hydrate(data, cleaned) {
            cleaned.forEach(function (path) {
                var last = path.pop(),
                    obj = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, data);
                if (obj && obj[last]) {
                    var replace = {};
                    replace[consts.name] = obj[last].name, replace[consts.type] = obj[last].type, replace[consts.meta] = obj[last].meta, replace[consts.inspected] = !1, obj[last] = replace;
                }
            });
        }
        var consts = __webpack_require__(7);
        module.exports = hydrate;
    }, function (module, exports) {
        "use strict";

        function getPropType(data) {
            if (!data) return null;
            var type = "undefined" == typeof data ? "undefined" : _typeof(data);
            if ("object" === type) {
                if (data._reactFragment) return "react_fragment";
                if (Array.isArray(data)) return "array";
                if (ArrayBuffer.isView(data)) return data instanceof DataView ? "data_view" : "typed_array";
                if (data instanceof ArrayBuffer) return "array_buffer";
                if ("function" == typeof data[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return "iterator";
                if ("[object Date]" === Object.prototype.toString.call(data)) return "date";
            }
            return type;
        }
        function createDehydrated(type, data, cleaned, path) {
            var meta = {};
            return "array" !== type && "typed_array" !== type || (meta.length = data.length), "iterator" !== type && "typed_array" !== type || (meta.readOnly = !0), cleaned.push(path), {
                type: type,
                meta: meta,
                name: data.constructor && "Object" !== data.constructor.name ? data.constructor.name : ""
            };
        }
        function dehydrate(data, cleaned) {
            var path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                level = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                type = getPropType(data);
            switch (type) {
                case "function":
                    return cleaned.push(path), {
                        name: data.name,
                        type: "function"
                    };

                case "string":
                    return data.length <= 500 ? data : data.slice(0, 500) + "...";

                case "symbol":
                    return cleaned.push(path), {
                        type: "symbol",
                        name: data.toString()
                    };

                case "react_fragment":
                    return "A React Fragment";

                case "array_buffer":
                case "data_view":
                    return cleaned.push(path), {
                        type: type,
                        name: "data_view" === type ? "DataView" : "ArrayBuffer",
                        meta: {
                            length: data.byteLength,
                            uninspectable: !0
                        }
                    };

                case "array":
                    return level > 2 ? createDehydrated(type, data, cleaned, path) : data.map(function (item, i) {
                        return dehydrate(item, cleaned, path.concat([i]), level + 1);
                    });

                case "typed_array":
                case "iterator":
                    return createDehydrated(type, data, cleaned, path);

                case "date":
                    return cleaned.push(path), {
                        name: data.toString(),
                        type: "date",
                        meta: {
                            uninspectable: !0
                        }
                    };

                case "object":
                    if (level > 2 || data.constructor && "function" == typeof data.constructor && "Object" !== data.constructor.name) return createDehydrated(type, data, cleaned, path);
                    var res = {};
                    for (var name in data) {
                        res[name] = dehydrate(data[name], cleaned, path.concat([name]), level + 1);
                    }return res;

                default:
                    return data;
            }
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        };
        module.exports = dehydrate;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var performanceNow,
            performance = __webpack_require__(29);
        performanceNow = performance.now ? function () {
            return performance.now();
        } : function () {
            return Date.now();
        }, module.exports = performanceNow;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var performance,
            ExecutionEnvironment = __webpack_require__(30);
        ExecutionEnvironment.canUseDOM && (performance = window.performance || window.msPerformance || window.webkitPerformance), module.exports = performance || {};
    }, function (module, exports) {
        "use strict";

        var canUseDOM = !("undefined" == typeof window || !window.document || !window.document.createElement),
            ExecutionEnvironment = {
            canUseDOM: canUseDOM,
            canUseWorkers: "undefined" != typeof Worker,
            canUseEventListeners: canUseDOM && !(!window.addEventListener && !window.attachEvent),
            canUseViewport: canUseDOM && !!window.screen,
            isInWorker: !canUseDOM
        };
        module.exports = ExecutionEnvironment;
    }, function (module, exports) {
        "use strict";

        function installGlobalHook(window) {
            function detectReactBuildType(renderer) {
                try {
                    if ("string" == typeof renderer.version) return renderer.bundleType > 0 ? "development" : "production";
                    var toString = Function.prototype.toString;
                    if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                        var renderRootCode = toString.call(renderer.Mount._renderNewRootComponent);
                        return 0 !== renderRootCode.indexOf("function") ? "production" : renderRootCode.indexOf("storedMeasure") !== -1 ? "development" : renderRootCode.indexOf("should be a pure function") !== -1 ? renderRootCode.indexOf("NODE_ENV") !== -1 ? "development" : renderRootCode.indexOf("development") !== -1 ? "development" : renderRootCode.indexOf("true") !== -1 ? "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : renderRootCode.indexOf("._registerComponent") !== -1 ? "outdated" : "production";
                    }
                } catch (err) {}
                return "production";
            }
            if (!window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                var hasDetectedBadDCE = !1,
                    hook = {
                    _renderers: {},
                    helpers: {},
                    checkDCE: function checkDCE(fn) {
                        try {
                            var toString = Function.prototype.toString,
                                code = toString.call(fn);
                            code.indexOf("^_^") > -1 && (hasDetectedBadDCE = !0, setTimeout(function () {
                                throw new Error("React is running in production mode, but dead code elimination has not been applied. Read how to correctly configure React for production: https://fburl.com/react-perf-use-the-production-build");
                            }));
                        } catch (err) {}
                    },
                    inject: function inject(renderer) {
                        var id = Math.random().toString(16).slice(2);
                        hook._renderers[id] = renderer;
                        var reactBuildType = hasDetectedBadDCE ? "deadcode" : detectReactBuildType(renderer);
                        return hook.emit("renderer", {
                            id: id,
                            renderer: renderer,
                            reactBuildType: reactBuildType
                        }), id;
                    },
                    _listeners: {},
                    sub: function sub(evt, fn) {
                        return hook.on(evt, fn), function () {
                            return hook.off(evt, fn);
                        };
                    },
                    on: function on(evt, fn) {
                        hook._listeners[evt] || (hook._listeners[evt] = []), hook._listeners[evt].push(fn);
                    },
                    off: function off(evt, fn) {
                        if (hook._listeners[evt]) {
                            var ix = hook._listeners[evt].indexOf(fn);
                            ix !== -1 && hook._listeners[evt].splice(ix, 1), hook._listeners[evt].length || (hook._listeners[evt] = null);
                        }
                    },
                    emit: function emit(evt, data) {
                        hook._listeners[evt] && hook._listeners[evt].map(function (fn) {
                            return fn(data);
                        });
                    },
                    supportsFiber: !0,
                    _fiberRoots: {},
                    getFiberRoots: function getFiberRoots(rendererID) {
                        var roots = hook._fiberRoots;
                        return roots[rendererID] || (roots[rendererID] = new Set()), roots[rendererID];
                    },
                    onCommitFiberUnmount: function onCommitFiberUnmount(rendererID, fiber) {
                        hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberUnmount(fiber);
                    },
                    onCommitFiberRoot: function onCommitFiberRoot(rendererID, root) {
                        var mountedRoots = hook.getFiberRoots(rendererID),
                            current = root.current,
                            isKnownRoot = mountedRoots.has(root),
                            isUnmounting = null == current.memoizedState || null == current.memoizedState.element;
                        isKnownRoot || isUnmounting ? isKnownRoot && isUnmounting && mountedRoots["delete"](root) : mountedRoots.add(root), hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberRoot(root);
                    }
                };
                Object.defineProperty(window, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
                    value: hook
                });
            }
        }
        module.exports = installGlobalHook;
    }, function (module, exports) {
        "use strict";

        function installRelayHook(window) {
            function decorate(obj, attr, fn) {
                var old = obj[attr];
                obj[attr] = function () {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                };
            }
            function emit(name, data) {
                _eventQueue.push({
                    name: name,
                    data: data
                }), _listener && _listener(name, data);
            }
            function setRequestListener(listener) {
                if (_listener) throw new Error("Relay Devtools: Called only call setRequestListener once.");
                return _listener = listener, _eventQueue.forEach(function (_ref) {
                    var name = _ref.name,
                        data = _ref.data;
                    listener(name, data);
                }), function () {
                    _listener = null;
                };
            }
            function recordRequest(type, start, request, requestNumber) {
                var id = Math.random().toString(16).substr(2);
                request.then(function (response) {
                    emit("relay:success", {
                        id: id,
                        end: performanceNow(),
                        response: response.response
                    });
                }, function (error) {
                    emit("relay:failure", {
                        id: id,
                        end: performanceNow(),
                        error: error
                    });
                });
                for (var textChunks = [], text = request.getQueryString(); text.length > 0;) {
                    textChunks.push(text.substr(0, TEXT_CHUNK_LENGTH)), text = text.substr(TEXT_CHUNK_LENGTH);
                }return {
                    id: id,
                    name: request.getDebugName(),
                    requestNumber: requestNumber,
                    start: start,
                    text: textChunks,
                    type: type,
                    variables: request.getVariables()
                };
            }
            function instrumentRelayRequests(relayInternals) {
                var NetworkLayer = relayInternals.NetworkLayer;
                decorate(NetworkLayer, "sendMutation", function (mutation) {
                    requestNumber++, emit("relay:pending", [recordRequest("mutation", performanceNow(), mutation, requestNumber)]);
                }), decorate(NetworkLayer, "sendQueries", function (queries) {
                    requestNumber++;
                    var start = performanceNow();
                    emit("relay:pending", queries.map(function (query) {
                        return recordRequest("query", start, query, requestNumber);
                    }));
                });
                var instrumented = {};
                for (var key in relayInternals) {
                    relayInternals.hasOwnProperty(key) && (instrumented[key] = relayInternals[key]);
                }return instrumented.setRequestListener = setRequestListener, instrumented;
            }
            var performanceNow,
                performance = window.performance;
            performanceNow = performance && "function" == typeof performance.now ? function () {
                return performance.now();
            } : function () {
                return Date.now();
            };
            var TEXT_CHUNK_LENGTH = 500,
                hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook) {
                var _eventQueue = [],
                    _listener = null,
                    requestNumber = 0,
                    _relayInternals = null;
                Object.defineProperty(hook, "_relayInternals", {
                    configurable: !0,
                    set: function set(relayInternals) {
                        _relayInternals = instrumentRelayRequests(relayInternals);
                    },
                    get: function get() {
                        return _relayInternals;
                    }
                });
            }
        }
        module.exports = installRelayHook;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var setupBackend = __webpack_require__(34);
        module.exports = function (hook, agent) {
            var subs = [hook.sub("renderer-attached", function (_ref) {
                var id = _ref.id,
                    helpers = (_ref.renderer, _ref.helpers);
                agent.setReactInternals(id, helpers), helpers.walkTree(agent.onMounted.bind(agent, id), agent.addRoot.bind(agent, id));
            }), hook.sub("root", function (_ref2) {
                var renderer = _ref2.renderer,
                    internalInstance = _ref2.internalInstance;
                return agent.addRoot(renderer, internalInstance);
            }), hook.sub("mount", function (_ref3) {
                var renderer = _ref3.renderer,
                    internalInstance = _ref3.internalInstance,
                    data = _ref3.data;
                return agent.onMounted(renderer, internalInstance, data);
            }), hook.sub("update", function (_ref4) {
                var internalInstance = (_ref4.renderer, _ref4.internalInstance),
                    data = _ref4.data;
                return agent.onUpdated(internalInstance, data);
            }), hook.sub("unmount", function (_ref5) {
                var internalInstance = (_ref5.renderer, _ref5.internalInstance);
                return agent.onUnmounted(internalInstance);
            })],
                success = setupBackend(hook);
            success && (hook.emit("react-devtools", agent), hook.reactDevtoolsAgent = agent, agent.on("shutdown", function () {
                subs.forEach(function (fn) {
                    return fn();
                }), hook.reactDevtoolsAgent = null;
            }));
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var attachRenderer = __webpack_require__(35);
        module.exports = function (hook) {
            var oldReact = window.React && window.React.__internals;
            oldReact && 0 === Object.keys(hook._renderers).length && hook.inject(oldReact);
            for (var rid in hook._renderers) {
                hook.helpers[rid] = attachRenderer(hook, rid, hook._renderers[rid]), hook.emit("renderer-attached", {
                    id: rid,
                    renderer: hook._renderers[rid],
                    helpers: hook.helpers[rid]
                });
            }hook.on("renderer", function (_ref) {
                var id = _ref.id,
                    renderer = _ref.renderer;
                hook.helpers[id] = attachRenderer(hook, id, renderer), hook.emit("renderer-attached", {
                    id: id,
                    renderer: renderer,
                    helpers: hook.helpers[id]
                });
            });
            var shutdown = function shutdown() {
                for (var id in hook.helpers) {
                    hook.helpers[id].cleanup();
                }hook.off("shutdown", shutdown);
            };
            return hook.on("shutdown", shutdown), !0;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function attachRenderer(hook, rid, renderer) {
            var rootNodeIDMap = new Map(),
                extras = {},
                isPre013 = !renderer.Reconciler;
            if ("function" == typeof renderer.findFiberByHostInstance) return attachRendererFiber(hook, rid, renderer);
            renderer.Mount.findNodeHandle && renderer.Mount.nativeTagToRootNodeID ? (extras.getNativeFromReactElement = function (component) {
                return renderer.Mount.findNodeHandle(component);
            }, extras.getReactElementFromNative = function (nativeTag) {
                var id = renderer.Mount.nativeTagToRootNodeID(nativeTag);
                return rootNodeIDMap.get(id);
            }) : renderer.ComponentTree ? (extras.getNativeFromReactElement = function (component) {
                return renderer.ComponentTree.getNodeFromInstance(component);
            }, extras.getReactElementFromNative = function (node) {
                return renderer.ComponentTree.getClosestInstanceFromNode(node);
            }) : renderer.Mount.getID && renderer.Mount.getNode ? (extras.getNativeFromReactElement = function (component) {
                try {
                    return renderer.Mount.getNode(component._rootNodeID);
                } catch (e) {
                    return;
                }
            }, extras.getReactElementFromNative = function (node) {
                for (var id = renderer.Mount.getID(node); node && node.parentNode && !id;) {
                    node = node.parentNode, id = renderer.Mount.getID(node);
                }return rootNodeIDMap.get(id);
            }) : console.warn("Unknown react version (does not have getID), probably an unshimmed React Native");
            var oldMethods, oldRenderComponent, oldRenderRoot;
            return renderer.Mount._renderNewRootComponent ? oldRenderRoot = decorateResult(renderer.Mount, "_renderNewRootComponent", function (internalInstance) {
                hook.emit("root", {
                    renderer: rid,
                    internalInstance: internalInstance
                });
            }) : renderer.Mount.renderComponent && (oldRenderComponent = decorateResult(renderer.Mount, "renderComponent", function (internalInstance) {
                hook.emit("root", {
                    renderer: rid,
                    internalInstance: internalInstance._reactInternalInstance
                });
            })), renderer.Component ? (console.error("You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013"), oldMethods = decorateMany(renderer.Component.Mixin, {
                mountComponent: function mountComponent() {
                    var _this = this;
                    rootNodeIDMap.set(this._rootNodeID, this), setTimeout(function () {
                        hook.emit("mount", {
                            internalInstance: _this,
                            data: getData012(_this),
                            renderer: rid
                        });
                    }, 0);
                },
                updateComponent: function updateComponent() {
                    var _this2 = this;
                    setTimeout(function () {
                        hook.emit("update", {
                            internalInstance: _this2,
                            data: getData012(_this2),
                            renderer: rid
                        });
                    }, 0);
                },
                unmountComponent: function unmountComponent() {
                    hook.emit("unmount", {
                        internalInstance: this,
                        renderer: rid
                    }), rootNodeIDMap["delete"](this._rootNodeID, this);
                }
            })) : renderer.Reconciler && (oldMethods = decorateMany(renderer.Reconciler, {
                mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
                    var data = getData(internalInstance);
                    rootNodeIDMap.set(internalInstance._rootNodeID, internalInstance), hook.emit("mount", {
                        internalInstance: internalInstance,
                        data: data,
                        renderer: rid
                    });
                },
                performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, nextChild, transaction, context) {
                    hook.emit("update", {
                        internalInstance: internalInstance,
                        data: getData(internalInstance),
                        renderer: rid
                    });
                },
                receiveComponent: function receiveComponent(internalInstance, nextChild, transaction, context) {
                    hook.emit("update", {
                        internalInstance: internalInstance,
                        data: getData(internalInstance),
                        renderer: rid
                    });
                },
                unmountComponent: function unmountComponent(internalInstance) {
                    hook.emit("unmount", {
                        internalInstance: internalInstance,
                        renderer: rid
                    }), rootNodeIDMap["delete"](internalInstance._rootNodeID, internalInstance);
                }
            })), extras.walkTree = function (visit, visitRoot) {
                var onMount = function onMount(component, data) {
                    rootNodeIDMap.set(component._rootNodeID, component), visit(component, data);
                };
                walkRoots(renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID, onMount, visitRoot, isPre013);
            }, extras.cleanup = function () {
                oldMethods && (renderer.Component ? restoreMany(renderer.Component.Mixin, oldMethods) : restoreMany(renderer.Reconciler, oldMethods)), oldRenderRoot && (renderer.Mount._renderNewRootComponent = oldRenderRoot), oldRenderComponent && (renderer.Mount.renderComponent = oldRenderComponent), oldMethods = null, oldRenderRoot = null, oldRenderComponent = null;
            }, extras;
        }
        function walkRoots(roots, onMount, onRoot, isPre013) {
            for (var name in roots) {
                walkNode(roots[name], onMount, isPre013), onRoot(roots[name]);
            }
        }
        function walkNode(internalInstance, onMount, isPre013) {
            var data = isPre013 ? getData012(internalInstance) : getData(internalInstance);
            data.children && Array.isArray(data.children) && data.children.forEach(function (child) {
                return walkNode(child, onMount, isPre013);
            }), onMount(internalInstance, data);
        }
        function decorateResult(obj, attr, fn) {
            var old = obj[attr];
            return obj[attr] = function (instance) {
                var res = old.apply(this, arguments);
                return fn(res), res;
            }, old;
        }
        function decorate(obj, attr, fn) {
            var old = obj[attr];
            return obj[attr] = function (instance) {
                var res = old.apply(this, arguments);
                return fn.apply(this, arguments), res;
            }, old;
        }
        function decorateMany(source, fns) {
            var olds = {};
            for (var name in fns) {
                olds[name] = decorate(source, name, fns[name]);
            }return olds;
        }
        function restoreMany(source, olds) {
            for (var name in olds) {
                source[name] = olds[name];
            }
        }
        var getData = __webpack_require__(36),
            getData012 = __webpack_require__(41),
            attachRendererFiber = __webpack_require__(42);
        module.exports = attachRenderer;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function getData(internalInstance) {
            var children = null,
                props = null,
                state = null,
                context = null,
                updater = null,
                name = null,
                type = null,
                key = null,
                ref = null,
                source = null,
                text = null,
                publicInstance = null,
                nodeType = "Native";
            if ("object" !== ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance))) nodeType = "Text", text = internalInstance + "";else if (null === internalInstance._currentElement || internalInstance._currentElement === !1) nodeType = "Empty";else if (internalInstance._renderedComponent) nodeType = "NativeWrapper", children = [internalInstance._renderedComponent], props = internalInstance._instance.props, state = internalInstance._instance.state, context = internalInstance._instance.context, context && 0 === Object.keys(context).length && (context = null);else if (internalInstance._renderedChildren) children = childrenList(internalInstance._renderedChildren);else if (internalInstance._currentElement && internalInstance._currentElement.props) {
                var unfilteredChildren = internalInstance._currentElement.props.children,
                    filteredChildren = [];
                traverseAllChildrenImpl(unfilteredChildren, "", function (_traverseContext, child) {
                    var childType = "undefined" == typeof child ? "undefined" : _typeof(child);
                    "string" !== childType && "number" !== childType || filteredChildren.push(child);
                }), children = filteredChildren.length <= 1 ? filteredChildren.length ? String(filteredChildren[0]) : void 0 : filteredChildren;
            }
            if (!props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), null != internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), source = internalInstance._currentElement._source, ref = internalInstance._currentElement.ref, "string" == typeof type ? (name = type, null != internalInstance._nativeNode && (publicInstance = internalInstance._nativeNode), null != internalInstance._hostNode && (publicInstance = internalInstance._hostNode)) : "function" == typeof type ? (nodeType = "Composite", name = getDisplayName(type), internalInstance._renderedComponent && (internalInstance._currentElement.props === internalInstance._renderedComponent._currentElement || internalInstance._currentElement.type.isReactTopLevelWrapper) && (nodeType = "Wrapper"), null === name && (name = "No display name")) : "string" == typeof internalInstance._stringText ? (nodeType = "Text", text = internalInstance._stringText) : name = getDisplayName(type)), internalInstance._instance) {
                var inst = internalInstance._instance;
                updater = {
                    setState: inst.setState && inst.setState.bind(inst),
                    forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                    setInProps: inst.forceUpdate && setInProps.bind(null, internalInstance),
                    setInState: inst.forceUpdate && setInState.bind(null, inst),
                    setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                }, "function" == typeof type && (publicInstance = inst), inst._renderedChildren && (children = childrenList(inst._renderedChildren));
            }
            return "function" == typeof internalInstance.setNativeProps && (updater = {
                setNativeProps: function setNativeProps(nativeProps) {
                    internalInstance.setNativeProps(nativeProps);
                }
            }), {
                nodeType: nodeType,
                type: type,
                key: key,
                ref: ref,
                source: source,
                name: name,
                props: props,
                state: state,
                context: context,
                children: children,
                text: text,
                updater: updater,
                publicInstance: publicInstance
            };
        }
        function setInProps(internalInst, path, value) {
            var element = internalInst._currentElement;
            internalInst._currentElement = _extends({}, element, {
                props: copyWithSet(element.props, path, value)
            }), internalInst._instance.forceUpdate();
        }
        function setInState(inst, path, value) {
            setIn(inst.state, path, value), inst.forceUpdate();
        }
        function setInContext(inst, path, value) {
            setIn(inst.context, path, value), inst.forceUpdate();
        }
        function setIn(obj, path, value) {
            var last = path.pop(),
                parent = path.reduce(function (obj_, attr) {
                return obj_ ? obj_[attr] : null;
            }, obj);
            parent && (parent[last] = value);
        }
        function childrenList(children) {
            var res = [];
            for (var name in children) {
                res.push(children[name]);
            }return res;
        }
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                }
            }
            return target;
        },
            _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        },
            copyWithSet = __webpack_require__(37),
            getDisplayName = __webpack_require__(38),
            traverseAllChildrenImpl = __webpack_require__(39);
        module.exports = getData;
    }, function (module, exports) {
        "use strict";

        function copyWithSetImpl(obj, path, idx, value) {
            if (idx >= path.length) return value;
            var key = path[idx],
                updated = Array.isArray(obj) ? obj.slice() : _extends({}, obj);
            return updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value), updated;
        }
        function copyWithSet(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
        }
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                }
            }
            return target;
        };
        module.exports = copyWithSet;
    }, function (module, exports) {
        "use strict";

        function getDisplayName(type) {
            if (cachedDisplayNames.has(type)) return cachedDisplayNames.get(type);
            var displayName = void 0;
            "string" == typeof type.displayName && (displayName = type.displayName), displayName || (displayName = type.name || "Unknown");
            var match = displayName.match(FB_MODULE_RE);
            if (match) {
                var componentName = match[1],
                    moduleName = match[2];
                componentName && moduleName && (moduleName === componentName || moduleName.startsWith(componentName + ".")) && (displayName = componentName);
            }
            return cachedDisplayNames.set(type, displayName), displayName;
        }
        var FB_MODULE_RE = /^(.*) \[from (.*)\]$/,
            cachedDisplayNames = new WeakMap();
        module.exports = getDisplayName;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function escape(key) {
            var escapeRegex = /[=:]/g,
                escaperLookup = {
                "=": "=0",
                ":": "=2"
            },
                escapedString = ("" + key).replace(escapeRegex, function (match) {
                return escaperLookup[match];
            });
            return "$" + escapedString;
        }
        function getComponentKey(component, index) {
            return "object" === ("undefined" == typeof component ? "undefined" : _typeof(component)) && null !== component && null != component.key ? escape(component.key) : index.toString(36);
        }
        function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
            var type = "undefined" == typeof children ? "undefined" : _typeof(children);
            if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
            var child,
                nextName,
                subtreeCount = 0,
                nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
                child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
            } else {
                var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
                if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                    child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
                } else if ("object" === type) {
                    var addendum = " If you meant to render a collection of children, use an array instead.",
                        childrenString = "" + children;
                    invariant(!1, "The React Devtools cannot render an object as a child. (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
                }
            }
            return subtreeCount;
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        },
            invariant = __webpack_require__(40),
            SEPARATOR = ".",
            SUBSEPARATOR = ":",
            FAUX_ITERATOR_SYMBOL = "@@iterator",
            ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
            REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol["for"] && Symbol["for"]("react.element") || 60103;
        module.exports = traverseAllChildrenImpl;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function invariant(condition, format, a, b, c, d, e, f) {
            if (!condition) {
                var error;
                if (void 0 === format) error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
                    var args = [a, b, c, d, e, f],
                        argIndex = 0;
                    error = new Error(format.replace(/%s/g, function () {
                        return args[argIndex++];
                    })), error.name = "Invariant Violation";
                }
                throw error.framesToPop = 1, error;
            }
        }
        module.exports = invariant;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function getData012(internalInstance) {
            var children = null,
                props = internalInstance.props,
                state = internalInstance.state,
                context = internalInstance.context,
                updater = null,
                name = null,
                type = null,
                key = null,
                ref = null,
                text = null,
                publicInstance = null,
                nodeType = "Native";
            return internalInstance._renderedComponent ? (nodeType = "Wrapper", children = [internalInstance._renderedComponent], context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? (name = internalInstance.constructor.displayName, children = childrenList(internalInstance._renderedChildren)) : "string" == typeof props.children && (name = internalInstance.constructor.displayName, children = props.children, nodeType = "Native"), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), ref = internalInstance._currentElement.ref, "string" == typeof type ? name = type : (nodeType = "Composite", name = type.displayName, name || (name = "No display name"))), name || (name = internalInstance.constructor.displayName || "No display name", nodeType = "Composite"), "string" == typeof props && (nodeType = "Text", text = props, props = null, name = null), internalInstance.forceUpdate && (updater = {
                setState: internalInstance.setState.bind(internalInstance),
                forceUpdate: internalInstance.forceUpdate.bind(internalInstance),
                setInProps: internalInstance.forceUpdate && setInProps.bind(null, internalInstance),
                setInState: internalInstance.forceUpdate && setInState.bind(null, internalInstance),
                setInContext: internalInstance.forceUpdate && setInContext.bind(null, internalInstance)
            }, publicInstance = internalInstance), {
                nodeType: nodeType,
                type: type,
                key: key,
                ref: ref,
                source: null,
                name: name,
                props: props,
                state: state,
                context: context,
                children: children,
                text: text,
                updater: updater,
                publicInstance: publicInstance
            };
        }
        function setInProps(inst, path, value) {
            inst.props = copyWithSet(inst.props, path, value), inst.forceUpdate();
        }
        function setInState(inst, path, value) {
            setIn(inst.state, path, value), inst.forceUpdate();
        }
        function setInContext(inst, path, value) {
            setIn(inst.context, path, value), inst.forceUpdate();
        }
        function setIn(obj, path, value) {
            var last = path.pop(),
                parent = path.reduce(function (obj_, attr) {
                return obj_ ? obj_[attr] : null;
            }, obj);
            parent && (parent[last] = value);
        }
        function childrenList(children) {
            var res = [];
            for (var name in children) {
                res.push(children[name]);
            }return res;
        }
        var copyWithSet = __webpack_require__(37);
        module.exports = getData012;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function attachRendererFiber(hook, rid, renderer) {
            function getOpaqueNode(fiber) {
                if (opaqueNodes.has(fiber)) return fiber;
                var alternate = fiber.alternate;
                return null != alternate && opaqueNodes.has(alternate) ? alternate : (opaqueNodes.add(fiber), fiber);
            }
            function hasDataChanged(prevFiber, nextFiber) {
                if (prevFiber.tag === ClassComponent) {
                    if ((nextFiber.effectTag & PerformedWork) !== PerformedWork) return !1;
                    if (prevFiber.stateNode.context !== nextFiber.stateNode.context) return !0;
                    if (null != nextFiber.updateQueue && nextFiber.updateQueue.hasForceUpdate) return !0;
                }
                return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref || prevFiber._debugSource !== nextFiber._debugSource;
            }
            function flushPendingEvents() {
                var events = pendingEvents;
                pendingEvents = [];
                for (var i = 0; i < events.length; i++) {
                    var event = events[i];
                    hook.emit(event.type, event);
                }
            }
            function enqueueMount(fiber) {
                pendingEvents.push({
                    internalInstance: getOpaqueNode(fiber),
                    data: getDataFiber(fiber, getOpaqueNode),
                    renderer: rid,
                    type: "mount"
                });
                var isRoot = fiber.tag === HostRoot;
                isRoot && pendingEvents.push({
                    internalInstance: getOpaqueNode(fiber),
                    renderer: rid,
                    type: "root"
                });
            }
            function enqueueUpdateIfNecessary(fiber, hasChildOrderChanged) {
                (hasChildOrderChanged || hasDataChanged(fiber.alternate, fiber)) && pendingEvents.push({
                    internalInstance: getOpaqueNode(fiber),
                    data: getDataFiber(fiber, getOpaqueNode),
                    renderer: rid,
                    type: "update"
                });
            }
            function enqueueUnmount(fiber) {
                var isRoot = fiber.tag === HostRoot,
                    opaqueNode = getOpaqueNode(fiber),
                    event = {
                    internalInstance: opaqueNode,
                    renderer: rid,
                    type: "unmount"
                };
                isRoot ? pendingEvents.push(event) : pendingEvents.unshift(event), opaqueNodes["delete"](opaqueNode);
            }
            function mountFiber(fiber) {
                var node = fiber;
                outer: for (;;) {
                    if (node.child) node.child["return"] = node, node = node.child;else {
                        if (enqueueMount(node), node == fiber) return;
                        if (!node.sibling) {
                            for (; node["return"];) {
                                if (node = node["return"], enqueueMount(node), node == fiber) return;
                                if (node.sibling) {
                                    node.sibling["return"] = node["return"], node = node.sibling;
                                    continue outer;
                                }
                            }
                            return;
                        }
                        node.sibling["return"] = node["return"], node = node.sibling;
                    }
                }
            }
            function updateFiber(nextFiber, prevFiber) {
                var hasChildOrderChanged = !1;
                if (nextFiber.child !== prevFiber.child) {
                    for (var nextChild = nextFiber.child, prevChildAtSameIndex = prevFiber.child; nextChild;) {
                        if (nextChild.alternate) {
                            var prevChild = nextChild.alternate;
                            updateFiber(nextChild, prevChild), hasChildOrderChanged || prevChild === prevChildAtSameIndex || (hasChildOrderChanged = !0);
                        } else mountFiber(nextChild), hasChildOrderChanged || (hasChildOrderChanged = !0);
                        nextChild = nextChild.sibling, hasChildOrderChanged || null == prevChildAtSameIndex || (prevChildAtSameIndex = prevChildAtSameIndex.sibling);
                    }
                    hasChildOrderChanged || null == prevChildAtSameIndex || (hasChildOrderChanged = !0);
                }
                enqueueUpdateIfNecessary(nextFiber, hasChildOrderChanged);
            }
            function walkTree() {
                hook.getFiberRoots(rid).forEach(function (root) {
                    mountFiber(root.current);
                }), flushPendingEvents();
            }
            function cleanup() {}
            function handleCommitFiberUnmount(fiber) {
                enqueueUnmount(fiber);
            }
            function handleCommitFiberRoot(root) {
                var current = root.current,
                    alternate = current.alternate;
                if (alternate) {
                    var wasMounted = null != alternate.memoizedState && null != alternate.memoizedState.element,
                        isMounted = null != current.memoizedState && null != current.memoizedState.element;
                    !wasMounted && isMounted ? mountFiber(current) : wasMounted && isMounted ? updateFiber(current, alternate) : wasMounted && !isMounted && enqueueUnmount(current);
                } else mountFiber(current);
                flushPendingEvents();
            }
            function getNativeFromReactElement(fiber) {
                try {
                    var opaqueNode = fiber,
                        hostInstance = renderer.findHostInstanceByFiber(opaqueNode);
                    return hostInstance;
                } catch (err) {
                    return null;
                }
            }
            function getReactElementFromNative(hostInstance) {
                var fiber = renderer.findFiberByHostInstance(hostInstance);
                if (null != fiber) {
                    var opaqueNode = getOpaqueNode(fiber);
                    return opaqueNode;
                }
                return null;
            }
            var opaqueNodes = new Set(),
                pendingEvents = [];
            return {
                getNativeFromReactElement: getNativeFromReactElement,
                getReactElementFromNative: getReactElementFromNative,
                handleCommitFiberRoot: handleCommitFiberRoot,
                handleCommitFiberUnmount: handleCommitFiberUnmount,
                cleanup: cleanup,
                walkTree: walkTree
            };
        }
        var getDataFiber = __webpack_require__(43),
            _require = __webpack_require__(44),
            ClassComponent = _require.ClassComponent,
            HostRoot = _require.HostRoot,
            PerformedWork = 1;
        module.exports = attachRendererFiber;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function getDataFiber(fiber, getOpaqueNode) {
            var type = fiber.type,
                key = fiber.key,
                ref = fiber.ref,
                source = fiber._debugSource,
                publicInstance = null,
                props = null,
                state = null,
                children = null,
                context = null,
                updater = null,
                nodeType = null,
                name = null,
                text = null;
            switch (fiber.tag) {
                case FunctionalComponent:
                case ClassComponent:
                    nodeType = "Composite", name = getDisplayName(fiber.type), publicInstance = fiber.stateNode, props = fiber.memoizedProps, state = fiber.memoizedState, null != publicInstance && (context = publicInstance.context, context && 0 === Object.keys(context).length && (context = null));
                    var inst = publicInstance;
                    inst && (updater = {
                        setState: inst.setState && inst.setState.bind(inst),
                        forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                        setInProps: inst.forceUpdate && setInProps.bind(null, fiber),
                        setInState: inst.forceUpdate && setInState.bind(null, inst),
                        setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                    }), children = [];
                    break;

                case HostRoot:
                    nodeType = "Wrapper", children = [];
                    break;

                case HostPortal:
                    nodeType = "Portal", name = "ReactPortal", props = {
                        target: fiber.stateNode.containerInfo
                    }, children = [];
                    break;

                case HostComponent:
                    nodeType = "Native", name = fiber.type, name = name.replace("topsecret-", ""), publicInstance = fiber.stateNode, props = fiber.memoizedProps, children = "string" == typeof props.children || "number" == typeof props.children ? props.children.toString() : [], "function" == typeof fiber.stateNode.setNativeProps && (updater = {
                        setNativeProps: function setNativeProps(nativeProps) {
                            fiber.stateNode.setNativeProps(nativeProps);
                        }
                    });
                    break;

                case HostText:
                    nodeType = "Text", text = fiber.memoizedProps;
                    break;

                case Fragment:
                    nodeType = "Wrapper", children = [];
                    break;

                default:
                    nodeType = "Native", props = fiber.memoizedProps, name = "TODO_NOT_IMPLEMENTED_YET", children = [];
            }
            if (Array.isArray(children)) for (var child = fiber.child; child;) {
                children.push(getOpaqueNode(child)), child = child.sibling;
            }return {
                nodeType: nodeType,
                type: type,
                key: key,
                ref: ref,
                source: source,
                name: name,
                props: props,
                state: state,
                context: context,
                children: children,
                text: text,
                updater: updater,
                publicInstance: publicInstance
            };
        }
        function setInProps(fiber, path, value) {
            var inst = fiber.stateNode;
            fiber.pendingProps = copyWithSet(inst.props, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), fiber.stateNode.forceUpdate();
        }
        function setInState(inst, path, value) {
            setIn(inst.state, path, value), inst.forceUpdate();
        }
        function setInContext(inst, path, value) {
            setIn(inst.context, path, value), inst.forceUpdate();
        }
        function setIn(obj, path, value) {
            var last = path.pop(),
                parent = path.reduce(function (obj_, attr) {
                return obj_ ? obj_[attr] : null;
            }, obj);
            parent && (parent[last] = value);
        }
        var copyWithSet = __webpack_require__(37),
            getDisplayName = __webpack_require__(38),
            _require = __webpack_require__(44),
            FunctionalComponent = _require.FunctionalComponent,
            ClassComponent = _require.ClassComponent,
            HostRoot = _require.HostRoot,
            HostPortal = _require.HostPortal,
            HostComponent = _require.HostComponent,
            HostText = _require.HostText,
            Fragment = _require.Fragment;
        module.exports = getDataFiber;
    }, function (module, exports) {
        "use strict";

        module.exports = {
            IndeterminateComponent: 0,
            FunctionalComponent: 1,
            ClassComponent: 2,
            HostRoot: 3,
            HostPortal: 4,
            HostComponent: 5,
            HostText: 6,
            CoroutineComponent: 7,
            CoroutineHandlerPhase: 8,
            YieldComponent: 9,
            Fragment: 10
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _defineProperty(obj, key, value) {
            return key in obj ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : obj[key] = value, obj;
        }
        function measureStyle(agent, bridge, resolveRNStyle, id) {
            var node = agent.elementData.get(id);
            if (!node || !node.props) return void bridge.send("rn-style:measure", {});
            var style = resolveRNStyle(node.props.style);
            styleOverridesByHostComponentId[id] && (style = _extends2({}, style, styleOverridesByHostComponentId[id]));
            var instance = node.publicInstance;
            return instance && instance.measure ? void instance.measure(function (x, y, width, height, left, top) {
                if ("number" != typeof x) return void bridge.send("rn-style:measure", {
                    style: style
                });
                var margin = style && resolveBoxStyle("margin", style) || blank,
                    padding = style && resolveBoxStyle("padding", style) || blank;
                bridge.send("rn-style:measure", {
                    style: style,
                    measuredLayout: {
                        x: x,
                        y: y,
                        width: width,
                        height: height,
                        left: left,
                        top: top,
                        margin: margin,
                        padding: padding
                    }
                });
            }) : void bridge.send("rn-style:measure", {
                style: style
            });
        }
        function shallowClone(obj) {
            var nobj = {};
            for (var n in obj) {
                nobj[n] = obj[n];
            }return nobj;
        }
        function renameStyle(agent, id, oldName, newName, val) {
            var _ref3,
                data = agent.elementData.get(id),
                newStyle = newName ? (_ref3 = {}, _defineProperty(_ref3, oldName, void 0), _defineProperty(_ref3, newName, val), _ref3) : _defineProperty({}, oldName, void 0);
            if (data && data.updater && data.updater.setInProps) {
                var customStyle,
                    style = data && data.props && data.props.style;
                if (Array.isArray(style)) {
                    var lastLength = style.length - 1;
                    "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : (customStyle = shallowClone(style[lastLength]), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style", lastLength], customStyle));
                } else "object" === ("undefined" == typeof style ? "undefined" : _typeof(style)) ? (customStyle = shallowClone(style), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style"], customStyle)) : (style = [style, newStyle], data.updater.setInProps(["style"], style));
            } else {
                if (!(data && data.updater && data.updater.setNativeProps)) return;
                styleOverridesByHostComponentId[id] ? _extends2(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                    style: newStyle
                });
            }
            agent.emit("hideHighlight");
        }
        function setStyle(agent, id, attr, val) {
            var data = agent.elementData.get(id),
                newStyle = _defineProperty({}, attr, val);
            if (data && data.updater && data.updater.setInProps) {
                var style = data.props && data.props.style;
                if (Array.isArray(style)) {
                    var lastLength = style.length - 1;
                    "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : data.updater.setInProps(["style", lastLength, attr], val);
                } else style = [style, newStyle], data.updater.setInProps(["style"], style);
            } else {
                if (!(data && data.updater && data.updater.setNativeProps)) return;
                styleOverridesByHostComponentId[id] ? _extends2(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                    style: newStyle
                });
            }
            agent.emit("hideHighlight");
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        },
            resolveBoxStyle = __webpack_require__(46),
            styleOverridesByHostComponentId = {};
        module.exports = function (bridge, agent, resolveRNStyle) {
            bridge.onCall("rn-style:get", function (id) {
                var node = agent.elementData.get(id);
                return node && node.props ? resolveRNStyle(node.props.style) : null;
            }), bridge.on("rn-style:measure", function (id) {
                measureStyle(agent, bridge, resolveRNStyle, id);
            }), bridge.on("rn-style:rename", function (_ref) {
                var id = _ref.id,
                    oldName = _ref.oldName,
                    newName = _ref.newName,
                    val = _ref.val;
                renameStyle(agent, id, oldName, newName, val), setTimeout(function () {
                    return measureStyle(agent, bridge, resolveRNStyle, id);
                });
            }), bridge.on("rn-style:set", function (_ref2) {
                var id = _ref2.id,
                    attr = _ref2.attr,
                    val = _ref2.val;
                setStyle(agent, id, attr, val), setTimeout(function () {
                    return measureStyle(agent, bridge, resolveRNStyle, id);
                });
            });
        };
        var blank = {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
        };
    }, function (module, exports) {
        "use strict";

        function resolveBoxStyle(prefix, style) {
            var res = {},
                subs = ["top", "left", "bottom", "right"],
                set = !1;
            return subs.forEach(function (sub) {
                res[sub] = style[prefix] || 0;
            }), style[prefix] && (set = !0), style[prefix + "Vertical"] && (res.top = res.bottom = style[prefix + "Vertical"], set = !0), style[prefix + "Horizontal"] && (res.left = res.right = style[prefix + "Horizontal"], set = !0), subs.forEach(function (sub) {
                var val = style[prefix + capFirst(sub)];
                val && (res[sub] = val, set = !0);
            }), set ? res : null;
        }
        function capFirst(text) {
            return text[0].toUpperCase() + text.slice(1);
        }
        module.exports = resolveBoxStyle;
    }, function (module, exports) {
        "use strict";

        function decorate(obj, attr, fn) {
            var old = obj[attr];
            return obj[attr] = function () {
                var res = old.apply(this, arguments);
                return fn.apply(this, arguments), res;
            }, function () {
                obj[attr] = old;
            };
        }
        var subscriptionEnabled = !1;
        module.exports = function (bridge, agent, hook) {
            function sendStoreData() {
                subscriptionEnabled && bridge.send("relay:store", {
                    id: "relay:store",
                    nodes: DefaultStoreData.getNodeData()
                });
            }
            var shouldEnable = !!hook._relayInternals;
            if (bridge.onCall("relay:check", function () {
                return shouldEnable;
            }), shouldEnable) {
                var _hook$_relayInternals = hook._relayInternals,
                    DefaultStoreData = _hook$_relayInternals.DefaultStoreData,
                    setRequestListener = _hook$_relayInternals.setRequestListener;
                bridge.onCall("relay:store:enable", function () {
                    subscriptionEnabled = !0, sendStoreData();
                }), bridge.onCall("relay:store:disable", function () {
                    subscriptionEnabled = !1;
                }), sendStoreData(), decorate(DefaultStoreData, "handleUpdatePayload", sendStoreData), decorate(DefaultStoreData, "handleQueryPayload", sendStoreData);
                var removeListener = setRequestListener(function (event, data) {
                    bridge.send(event, data);
                });
                hook.on("shutdown", removeListener);
            }
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var Highlighter = __webpack_require__(49);
        module.exports = function (agent) {
            var hl = new Highlighter(window, function (node) {
                agent.selectFromDOMNode(node);
            });
            agent.on("highlight", function (data) {
                return hl.highlight(data.node, data.name);
            }), agent.on("highlightMany", function (nodes) {
                return hl.highlightMany(nodes);
            }), agent.on("hideHighlight", function () {
                return hl.hideHighlight();
            }), agent.on("refreshMultiOverlay", function () {
                return hl.refreshMultiOverlay();
            }), agent.on("startInspecting", function () {
                return hl.startInspecting();
            }), agent.on("stopInspecting", function () {
                return hl.stopInspecting();
            }), agent.on("shutdown", function () {
                hl.remove();
            });
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function captureSubscription(obj, evt, cb) {
            return obj.addEventListener(evt, cb, !0), function () {
                return obj.removeEventListener(evt, cb, !0);
            };
        }
        function makeMagnifier() {
            var button = window.document.createElement("button");
            return button.innerHTML = "&#128269;", button.style.backgroundColor = "transparent", button.style.border = "none", button.style.outline = "none", button.style.cursor = "pointer", button.style.position = "fixed", button.style.bottom = "10px", button.style.right = "10px", button.style.fontSize = "30px", button.style.zIndex = 1e7, button;
        }
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            Overlay = __webpack_require__(50),
            MultiOverlay = __webpack_require__(52),
            Highlighter = function () {
            function Highlighter(win, onSelect) {
                _classCallCheck(this, Highlighter), this._win = win, this._onSelect = onSelect, this._overlay = null, this._multiOverlay = null, this._subs = [];
            }
            return _createClass(Highlighter, [{
                key: "startInspecting",
                value: function value() {
                    this._inspecting = !0, this._subs = [captureSubscription(this._win, "mouseover", this.onHover.bind(this)), captureSubscription(this._win, "mousedown", this.onMouseDown.bind(this)), captureSubscription(this._win, "click", this.onClick.bind(this))];
                }
            }, {
                key: "stopInspecting",
                value: function value() {
                    this._subs.forEach(function (unsub) {
                        return unsub();
                    }), this.hideHighlight();
                }
            }, {
                key: "remove",
                value: function value() {
                    this.stopInspecting(), this._button && this._button.parentNode && this._button.parentNode.removeChild(this._button);
                }
            }, {
                key: "highlight",
                value: function value(node, name) {
                    this.removeMultiOverlay(), node.nodeType !== Node.COMMENT_NODE && (this._overlay || (this._overlay = new Overlay(this._win)), this._overlay.inspect(node, name));
                }
            }, {
                key: "highlightMany",
                value: function value(nodes) {
                    this.removeOverlay(), this._multiOverlay || (this._multiOverlay = new MultiOverlay(this._win)), this._multiOverlay.highlightMany(nodes);
                }
            }, {
                key: "hideHighlight",
                value: function value() {
                    this._inspecting = !1, this.removeOverlay(), this.removeMultiOverlay();
                }
            }, {
                key: "refreshMultiOverlay",
                value: function value() {
                    this._multiOverlay && this._multiOverlay.refresh();
                }
            }, {
                key: "removeOverlay",
                value: function value() {
                    this._overlay && (this._overlay.remove(), this._overlay = null);
                }
            }, {
                key: "removeMultiOverlay",
                value: function value() {
                    this._multiOverlay && (this._multiOverlay.remove(), this._multiOverlay = null);
                }
            }, {
                key: "onMouseDown",
                value: function value(evt) {
                    this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this._onSelect(evt.target));
                }
            }, {
                key: "onClick",
                value: function value(evt) {
                    this._inspecting && (this._subs.forEach(function (unsub) {
                        return unsub();
                    }), evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.hideHighlight());
                }
            }, {
                key: "onHover",
                value: function value(evt) {
                    this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.highlight(evt.target));
                }
            }, {
                key: "injectButton",
                value: function value() {
                    this._button = makeMagnifier(), this._button.onclick = this.startInspecting.bind(this), this._win.document.body.appendChild(this._button);
                }
            }]), Highlighter;
        }();
        module.exports = Highlighter;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function findTipPos(dims, win) {
            var top,
                tipHeight = 20,
                margin = 5;
            return top = dims.top + dims.height + tipHeight <= win.innerHeight ? dims.top + dims.height < 0 ? margin : dims.top + dims.height + margin : dims.top - tipHeight <= win.innerHeight ? dims.top - tipHeight - margin < margin ? margin : dims.top - tipHeight - margin : win.innerHeight - tipHeight - margin, top += "px", dims.left < 0 ? {
                top: top,
                left: margin
            } : dims.left + 200 > win.innerWidth ? {
                top: top,
                right: margin
            } : {
                top: top,
                left: dims.left + margin + "px"
            };
        }
        function getElementDimensions(domElement) {
            var calculatedStyle = window.getComputedStyle(domElement);
            return {
                borderLeft: +calculatedStyle.borderLeftWidth.match(/[0-9]*/)[0],
                borderRight: +calculatedStyle.borderRightWidth.match(/[0-9]*/)[0],
                borderTop: +calculatedStyle.borderTopWidth.match(/[0-9]*/)[0],
                borderBottom: +calculatedStyle.borderBottomWidth.match(/[0-9]*/)[0],
                marginLeft: +calculatedStyle.marginLeft.match(/[0-9]*/)[0],
                marginRight: +calculatedStyle.marginRight.match(/[0-9]*/)[0],
                marginTop: +calculatedStyle.marginTop.match(/[0-9]*/)[0],
                marginBottom: +calculatedStyle.marginBottom.match(/[0-9]*/)[0],
                paddingLeft: +calculatedStyle.paddingLeft.match(/[0-9]*/)[0],
                paddingRight: +calculatedStyle.paddingRight.match(/[0-9]*/)[0],
                paddingTop: +calculatedStyle.paddingTop.match(/[0-9]*/)[0],
                paddingBottom: +calculatedStyle.paddingBottom.match(/[0-9]*/)[0]
            };
        }
        function getOwnerWindow(node) {
            return node.ownerDocument ? node.ownerDocument.defaultView : null;
        }
        function getOwnerIframe(node) {
            var nodeWindow = getOwnerWindow(node);
            return nodeWindow ? nodeWindow.frameElement : null;
        }
        function getBoundingClientRectWithBorderOffset(node) {
            var dimensions = getElementDimensions(node);
            return mergeRectOffsets([node.getBoundingClientRect(), {
                top: dimensions.borderTop,
                left: dimensions.borderLeft,
                bottom: dimensions.borderBottom,
                right: dimensions.borderRight,
                width: 0,
                height: 0
            }]);
        }
        function mergeRectOffsets(rects) {
            return rects.reduce(function (previousRect, rect) {
                return null == previousRect ? rect : {
                    top: previousRect.top + rect.top,
                    left: previousRect.left + rect.left,
                    width: previousRect.width,
                    height: previousRect.height,
                    bottom: previousRect.bottom + rect.bottom,
                    right: previousRect.right + rect.right
                };
            });
        }
        function getNestedBoundingClientRect(node, boundaryWindow) {
            var ownerIframe = getOwnerIframe(node);
            if (ownerIframe && ownerIframe !== boundaryWindow) {
                for (var rects = [node.getBoundingClientRect()], currentIframe = ownerIframe, onlyOneMore = !1; currentIframe;) {
                    var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                    if (rects.push(rect), currentIframe = getOwnerIframe(currentIframe), onlyOneMore) break;
                    currentIframe && getOwnerWindow(currentIframe) === boundaryWindow && (onlyOneMore = !0);
                }
                return mergeRectOffsets(rects);
            }
            return node.getBoundingClientRect();
        }
        function boxWrap(dims, what, node) {
            assign(node.style, {
                borderTopWidth: dims[what + "Top"] + "px",
                borderLeftWidth: dims[what + "Left"] + "px",
                borderRightWidth: dims[what + "Right"] + "px",
                borderBottomWidth: dims[what + "Bottom"] + "px",
                borderStyle: "solid"
            });
        }
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            assign = __webpack_require__(3),
            _require = __webpack_require__(51),
            monospace = _require.monospace,
            Overlay = function () {
            function Overlay(window) {
                _classCallCheck(this, Overlay);
                var doc = window.document;
                this.win = window, this.container = doc.createElement("div"), this.node = doc.createElement("div"), this.border = doc.createElement("div"), this.padding = doc.createElement("div"), this.content = doc.createElement("div"), this.border.style.borderColor = overlayStyles.border, this.padding.style.borderColor = overlayStyles.padding, this.content.style.backgroundColor = overlayStyles.background, assign(this.node.style, {
                    borderColor: overlayStyles.margin,
                    pointerEvents: "none",
                    position: "fixed"
                }), this.tip = doc.createElement("div"), assign(this.tip.style, {
                    backgroundColor: "#333740",
                    borderRadius: "2px",
                    fontFamily: monospace.family,
                    fontWeight: "bold",
                    padding: "3px 5px",
                    position: "fixed",
                    fontSize: monospace.sizes.normal
                }), this.nameSpan = doc.createElement("span"), this.tip.appendChild(this.nameSpan), assign(this.nameSpan.style, {
                    color: "#ee78e6",
                    borderRight: "1px solid #aaaaaa",
                    paddingRight: "0.5rem",
                    marginRight: "0.5rem"
                }), this.dimSpan = doc.createElement("span"), this.tip.appendChild(this.dimSpan), assign(this.dimSpan.style, {
                    color: "#d7d7d7"
                }), this.container.style.zIndex = 1e7, this.node.style.zIndex = 1e7, this.tip.style.zIndex = 1e7, this.container.appendChild(this.node), this.container.appendChild(this.tip), this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), doc.body.appendChild(this.container);
            }
            return _createClass(Overlay, [{
                key: "remove",
                value: function value() {
                    this.container.parentNode && this.container.parentNode.removeChild(this.container);
                }
            }, {
                key: "inspect",
                value: function value(node, name) {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        var box = getNestedBoundingClientRect(node, this.win),
                            dims = getElementDimensions(node);
                        boxWrap(dims, "margin", this.node), boxWrap(dims, "border", this.border), boxWrap(dims, "padding", this.padding), assign(this.content.style, {
                            height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                            width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                        }), assign(this.node.style, {
                            top: box.top - dims.marginTop + "px",
                            left: box.left - dims.marginLeft + "px"
                        }), this.nameSpan.textContent = name || node.nodeName.toLowerCase(), this.dimSpan.textContent = box.width + "px × " + box.height + "px";
                        var tipPos = findTipPos({
                            top: box.top - dims.marginTop,
                            left: box.left - dims.marginLeft,
                            height: box.height + dims.marginTop + dims.marginBottom,
                            width: box.width + dims.marginLeft + dims.marginRight
                        }, this.win);
                        assign(this.tip.style, tipPos);
                    }
                }
            }]), Overlay;
        }(),
            overlayStyles = {
            background: "rgba(120, 170, 210, 0.7)",
            padding: "rgba(77, 200, 0, 0.3)",
            margin: "rgba(255, 155, 0, 0.3)",
            border: "rgba(255, 200, 50, 0.3)"
        };
        module.exports = Overlay;
    }, function (module, exports) {
        "use strict";

        module.exports = {
            monospace: {
                family: "Menlo, Consolas, monospace",
                sizes: {
                    normal: 11,
                    large: 14
                }
            },
            sansSerif: {
                family: '"Helvetica Neue", "Lucida Grande", -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, sans-serif',
                sizes: {
                    small: 10,
                    normal: 12,
                    large: 14
                }
            }
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            assign = __webpack_require__(3),
            MultiOverlay = function () {
            function MultiOverlay(window) {
                _classCallCheck(this, MultiOverlay), this.win = window;
                var doc = window.document;
                this.container = doc.createElement("div"), doc.body.appendChild(this.container), this._currentNodes = null;
            }
            return _createClass(MultiOverlay, [{
                key: "highlightMany",
                value: function value(nodes) {
                    var _this = this;
                    this._currentNodes = nodes, this.container.innerHTML = "", nodes.forEach(function (node) {
                        var div = _this.win.document.createElement("div");
                        if ("function" == typeof node.getBoundingClientRect) {
                            var box = node.getBoundingClientRect();
                            box.bottom < 0 || box.top > window.innerHeight || (assign(div.style, {
                                top: box.top + "px",
                                left: box.left + "px",
                                width: box.width + "px",
                                height: box.height + "px",
                                border: "2px dotted rgba(200, 100, 100, .8)",
                                boxSizing: "border-box",
                                backgroundColor: "rgba(200, 100, 100, .2)",
                                position: "fixed",
                                zIndex: 1e7,
                                pointerEvents: "none"
                            }), _this.container.appendChild(div));
                        }
                    });
                }
            }, {
                key: "refresh",
                value: function value() {
                    this._currentNodes && this.highlightMany(this._currentNodes);
                }
            }, {
                key: "remove",
                value: function value() {
                    this.container.parentNode && (this.container.parentNode.removeChild(this.container), this._currentNodes = null);
                }
            }]), MultiOverlay;
        }();
        module.exports = MultiOverlay;
    }]);
});
}, 272, null, "react-devtools-core/build/backend.js");
__d(/* flattenStyle */function(global, require, module, exports) {
'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var ReactNativePropRegistry;

function getStyle(style) {
  if (ReactNativePropRegistry === undefined) {
    ReactNativePropRegistry = require(274                      ); // 274 = ReactNativePropRegistry
  }
  if (typeof style === 'number') {
    return ReactNativePropRegistry.getByID(style);
  }
  return style;
}

function flattenStyle(style) {
  if (!style) {
    return undefined;
  }
  invariant(style !== true, 'style may be false but not true');

  if (!Array.isArray(style)) {
    return getStyle(style);
  }

  var result = {};
  for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
    var computedStyle = flattenStyle(style[i]);
    if (computedStyle) {
      for (var key in computedStyle) {
        result[key] = computedStyle[key];
      }
    }
  }
  return result;
}

module.exports = flattenStyle;
}, 273, null, "flattenStyle");
__d(/* ReactNativePropRegistry */function(global, require, module, exports) {

'use strict';

var _require = require(211          ), // 211 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
}, 274, null, "ReactNativePropRegistry");
__d(/* JSInspector */function(global, require, module, exports) {
'use strict';

var JSInspector = {
  registerAgent: function registerAgent(type) {
    if (global.__registerInspectorAgent) {
      global.__registerInspectorAgent(type);
    }
  },
  getTimestamp: function getTimestamp() {
    return global.__inspectorTimestamp();
  }
};

module.exports = JSInspector;
}, 275, null, "JSInspector");
__d(/* NetworkAgent */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InspectorAgent = require(277             ); // 277 = InspectorAgent
var JSInspector = require(275          ); // 275 = JSInspector
var Map = require(221  ); // 221 = Map
var XMLHttpRequest = require(235             ); // 235 = XMLHttpRequest

var Interceptor = function () {
  function Interceptor(agent) {
    _classCallCheck(this, Interceptor);

    this._agent = agent;
    this._requests = new Map();
  }

  _createClass(Interceptor, [{
    key: 'getData',
    value: function getData(requestId) {
      return this._requests.get(requestId);
    }
  }, {
    key: 'requestSent',
    value: function requestSent(id, url, method, headers) {
      var requestId = String(id);
      this._requests.set(requestId, '');

      var request = {
        url: url,
        method: method,
        headers: headers,
        initialPriority: 'Medium'
      };
      var event = {
        requestId: requestId,
        documentURL: '',
        frameId: '1',
        loaderId: '1',
        request: request,
        timestamp: JSInspector.getTimestamp(),
        initiator: {
          type: 'other'
        },
        type: 'Other'
      };
      this._agent.sendEvent('requestWillBeSent', event);
    }
  }, {
    key: 'responseReceived',
    value: function responseReceived(id, url, status, headers) {
      var requestId = String(id);
      var response = {
        url: url,
        status: status,
        statusText: String(status),
        headers: headers,

        requestHeaders: {},
        mimeType: this._getMimeType(headers),
        connectionReused: false,
        connectionId: -1,
        encodedDataLength: 0,
        securityState: 'unknown'
      };

      var event = {
        requestId: requestId,
        frameId: '1',
        loaderId: '1',
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        response: response
      };
      this._agent.sendEvent('responseReceived', event);
    }
  }, {
    key: 'dataReceived',
    value: function dataReceived(id, data) {
      var requestId = String(id);
      var existingData = this._requests.get(requestId) || '';
      this._requests.set(requestId, existingData.concat(data));
      var event = {
        requestId: requestId,
        timestamp: JSInspector.getTimestamp(),
        dataLength: data.length,
        encodedDataLength: data.length
      };
      this._agent.sendEvent('dataReceived', event);
    }
  }, {
    key: 'loadingFinished',
    value: function loadingFinished(id, encodedDataLength) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        encodedDataLength: encodedDataLength
      };
      this._agent.sendEvent('loadingFinished', event);
    }
  }, {
    key: 'loadingFailed',
    value: function loadingFailed(id, error) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        errorText: error
      };
      this._agent.sendEvent('loadingFailed', event);
    }
  }, {
    key: '_getMimeType',
    value: function _getMimeType(headers) {
      var contentType = headers['Content-Type'] || '';
      return contentType.split(';')[0];
    }
  }]);

  return Interceptor;
}();

var NetworkAgent = function (_InspectorAgent) {
  _inherits(NetworkAgent, _InspectorAgent);

  function NetworkAgent() {
    _classCallCheck(this, NetworkAgent);

    return _possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
  }

  _createClass(NetworkAgent, [{
    key: 'enable',
    value: function enable(_ref) {
      var maxResourceBufferSize = _ref.maxResourceBufferSize,
          maxTotalBufferSize = _ref.maxTotalBufferSize;

      this._interceptor = new Interceptor(this);
      XMLHttpRequest.setInterceptor(this._interceptor);
    }
  }, {
    key: 'disable',
    value: function disable() {
      XMLHttpRequest.setInterceptor(null);
      this._interceptor = null;
    }
  }, {
    key: 'getResponseBody',
    value: function getResponseBody(_ref2) {
      var requestId = _ref2.requestId;

      return { body: this.interceptor().getData(requestId), base64Encoded: false };
    }
  }, {
    key: 'interceptor',
    value: function interceptor() {
      if (this._interceptor) {
        return this._interceptor;
      } else {
        throw Error('_interceptor can not be null');
      }
    }
  }]);

  return NetworkAgent;
}(InspectorAgent);

NetworkAgent.DOMAIN = 'Network';


module.exports = NetworkAgent;
}, 276, null, "NetworkAgent");
__d(/* InspectorAgent */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InspectorAgent = function () {
  function InspectorAgent(eventSender) {
    _classCallCheck(this, InspectorAgent);

    this._eventSender = eventSender;
  }

  _createClass(InspectorAgent, [{
    key: 'sendEvent',
    value: function sendEvent(name, params) {
      this._eventSender(name, params);
    }
  }]);

  return InspectorAgent;
}();

module.exports = InspectorAgent;
}, 277, null, "InspectorAgent");
__d(/* RCTEventEmitter */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(185            ); // 185 = BatchedBridge

var RCTEventEmitter = {
  register: function register(eventEmitter) {
    BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
  }
};

module.exports = RCTEventEmitter;
}, 278, null, "RCTEventEmitter");
__d(/* UIManager */function(global, require, module, exports) {
'use strict';

var NativeModules = require(184            ); // 184 = NativeModules
var Platform = require(192       ); // 192 = Platform

var defineLazyObjectProperty = require(201                       ); // 201 = defineLazyObjectProperty
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var UIManager = NativeModules.UIManager;


invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');

UIManager.__takeSnapshot = UIManager.takeSnapshot;
UIManager.takeSnapshot = function () {
  invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');
};

if (Platform.OS === 'ios') {
  Object.keys(UIManager).forEach(function (viewName) {
    var viewConfig = UIManager[viewName];
    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  });
} else if (Platform.OS === 'android' && UIManager.AndroidLazyViewManagersEnabled) {
  UIManager.ViewManagerNames.forEach(function (viewManagerName) {
    defineLazyObjectProperty(UIManager, viewManagerName, {
      get: function get() {
        return NativeModules[viewManagerName.replace(/^(RCT|RK)/, '')];
      }
    });
  });
}

module.exports = UIManager;
}, 279, null, "UIManager");
__d(/* fbjs/lib/emptyObject.js */function(global, require, module, exports) {

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}, 280, null, "fbjs/lib/emptyObject.js");
__d(/* fbjs/lib/shallowEqual.js */function(global, require, module, exports) {

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
}, 281, null, "fbjs/lib/shallowEqual.js");
__d(/* deepDiffer */function(global, require, module, exports) {
'use strict';

var deepDiffer = function deepDiffer(one, two) {
  if (one === two) {
    return false;
  }
  if (typeof one === 'function' && typeof two === 'function') {
    return false;
  }
  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }
  if (typeof two !== 'object' || two === null) {
    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {
    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii])) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key])) {
        return true;
      }
    }
    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }
  return false;
};

module.exports = deepDiffer;
}, 282, null, "deepDiffer");
__d(/* TextInputState */function(global, require, module, exports) {
'use strict';

var Platform = require(192       ); // 192 = Platform
var UIManager = require(279        ); // 279 = UIManager

var TextInputState = {
  _currentlyFocusedID: null,

  currentlyFocusedField: function currentlyFocusedField() {
    return this._currentlyFocusedID;
  },

  focusTextInput: function focusTextInput(textFieldID) {
    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = textFieldID;
      if (Platform.OS === 'ios') {
        UIManager.focus(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
      }
    }
  },

  blurTextInput: function blurTextInput(textFieldID) {
    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = null;
      if (Platform.OS === 'ios') {
        UIManager.blur(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
      }
    }
  }
};

module.exports = TextInputState;
}, 283, null, "TextInputState");
__d(/* ReactNativeStack-dev */function(global, require, module, exports) {
"use strict";

var _extends2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

require(219             ); // 219 = InitializeCore

var warning = require(199               ), // 199 = fbjs/lib/warning
    RCTEventEmitter = require(278              ), // 278 = RCTEventEmitter
    emptyFunction = require(200                     ), // 200 = fbjs/lib/emptyFunction
    UIManager = require(279        ), // 279 = UIManager
    React = require(13     ), // 13 = react
    ExecutionEnvironment = require(195                            ), // 195 = fbjs/lib/ExecutionEnvironment
    performanceNow = require(193                      ), // 193 = fbjs/lib/performanceNow
    emptyObject = require(280                   ), // 280 = fbjs/lib/emptyObject
    checkPropTypes = require(23                         ), // 23 = prop-types/checkPropTypes
    shallowEqual = require(281                    ), // 281 = fbjs/lib/shallowEqual
    deepDiffer = require(282         ), // 282 = deepDiffer
    flattenStyle = require(273           ), // 273 = flattenStyle
    TextInputState = require(283             ), // 283 = TextInputState
    deepFreezeAndThrowOnMutationInDev = require(189                                ), // 189 = deepFreezeAndThrowOnMutationInDev
    instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree,
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName, "onDoubleClick" === registrationName && (EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName);
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: {},
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry,
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
};

if ("undefined" != typeof window && "function" == typeof window.dispatchEvent && "undefined" != typeof document && "function" == typeof document.createEvent) {
    var fakeNode = document.createElement("react"),
        depth = 0;
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        depth++;
        var thisDepth = depth,
            funcArgs = Array.prototype.slice.call(arguments, 3),
            boundFunc = function boundFunc() {
            func.apply(context, funcArgs);
        },
            fakeEventError = null,
            onFakeEventError = function onFakeEventError(event) {
            depth === thisDepth && (fakeEventError = event.error);
        },
            evtType = "react-" + (name || "invokeguardedcallback") + "-" + depth;
        window.addEventListener("error", onFakeEventError), fakeNode.addEventListener(evtType, boundFunc, !1);
        var evt = document.createEvent("Event");
        return evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), fakeNode.removeEventListener(evtType, boundFunc, !1), window.removeEventListener("error", onFakeEventError), depth--, fakeEventError;
    };
}

var _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected, warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

var validateEventDispatches;

validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances,
        listenersIsArr = Array.isArray(dispatchListeners),
        listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0,
        instancesIsArr = Array.isArray(dispatchInstances),
        instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
};

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    validateEventDispatches(event);
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection
},
    EventPluginUtils_1 = EventPluginUtils;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    warning(inst, "Dispatching inst must not be null");
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    didWarnForAddedNewProperty = !1,
    isProxySupported = "function" == typeof Proxy,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    delete this.nativeEvent, delete this.preventDefault, delete this.stopPropagation, this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            delete this[propName];
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

_extends2(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null)), Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction)), Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    _extends2(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = _extends2({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, isProxySupported && (SyntheticEvent = new Proxy(SyntheticEvent, {
    construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
    },
    apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
            set: function set(target, prop, value) {
                return "isPersistent" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information."), didWarnForAddedNewProperty = !0), target[prop] = value, !0;
            }
        });
    }
})), PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent;

function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = "function" == typeof getVal;
    return {
        configurable: !0,
        set: set,
        get: get
    };
    function set(val) {
        return warn(isFunction ? "setting the method" : "setting the property", "This is effectively a no-op"), val;
    }
    function get() {
        return warn(isFunction ? "accessing the method" : "accessing the property", isFunction ? "This is a no-op function" : "This is set to null"), getVal;
    }
    function warn(action, result) {
        warning(!1, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
    }
}

var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? warning(!1, "A view is reporting that a touch occurred on tag zero.") : rootNodeID = target), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) {
            for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];
                if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = i;
                    break;
                }
            }
            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
            warning(null != activeRecord && activeRecord.touchActive, "Cannot find single active touch.");
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
},
    ReactInvalidSetStateWarningHook = {},
    processingChildContext = !1,
    warnInvalidSetState = function warnInvalidSetState() {
    warning(!processingChildContext, "setState(...): Cannot call setState() inside getChildContext()");
};

ReactInvalidSetStateWarningHook = {
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        processingChildContext = !0;
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        processingChildContext = !1;
    },
    onSetState: function onSetState() {
        warnInvalidSetState();
    }
};

var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook,
    ReactHostOperationHistoryHook = null,
    history = [];

ReactHostOperationHistoryHook = {
    onHostOperation: function onHostOperation(operation) {
        history.push(operation);
    },
    clearHistory: function clearHistory() {
        ReactHostOperationHistoryHook._preventClearing || (history = []);
    },
    getHistory: function getHistory() {
        return history;
    }
};

var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook,
    ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
};

_extends2(ReactGlobalSharedState, {
    ReactComponentTreeHook: ReactInternals.ReactComponentTreeHook,
    ReactDebugCurrentFrame: ReactInternals.ReactDebugCurrentFrame
});

var ReactGlobalSharedState_1 = ReactGlobalSharedState,
    ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook,
    ReactDebugTool$1 = null,
    hooks = [],
    didHookThrowForEvent = {},
    callHook = function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
    try {
        fn.call(context, arg1, arg2, arg3, arg4, arg5);
    } catch (e) {
        warning(didHookThrowForEvent[event], "Exception thrown by hook while handling %s: %s", event, e + "\n" + e.stack), didHookThrowForEvent[event] = !0;
    }
},
    emitEvent = function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
    for (var i = 0; i < hooks.length; i++) {
        var hook = hooks[i],
            fn = hook[event];
        fn && callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
},
    _isProfiling = !1,
    flushHistory = [],
    lifeCycleTimerStack = [],
    currentFlushNesting = 0,
    currentFlushMeasurements = [],
    currentFlushStartTime = 0,
    currentTimerDebugID = null,
    currentTimerStartTime = 0,
    currentTimerNestedFlushDuration = 0,
    currentTimerType = null,
    lifeCycleTimerHasWarned = !1,
    clearHistory = function clearHistory() {
    ReactComponentTreeHook.purgeUnmountedComponents(), ReactHostOperationHistoryHook_1.clearHistory();
},
    getTreeSnapshot = function getTreeSnapshot(registeredIDs) {
    return registeredIDs.reduce(function (tree, id) {
        var ownerID = ReactComponentTreeHook.getOwnerID(id),
            parentID = ReactComponentTreeHook.getParentID(id);
        return tree[id] = {
            displayName: ReactComponentTreeHook.getDisplayName(id),
            text: ReactComponentTreeHook.getText(id),
            updateCount: ReactComponentTreeHook.getUpdateCount(id),
            childIDs: ReactComponentTreeHook.getChildIDs(id),
            ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
            parentID: parentID
        }, tree;
    }, {});
},
    resetMeasurements = function resetMeasurements() {
    var previousStartTime = currentFlushStartTime,
        previousMeasurements = currentFlushMeasurements,
        previousOperations = ReactHostOperationHistoryHook_1.getHistory();
    if (0 === currentFlushNesting) return currentFlushStartTime = 0, currentFlushMeasurements = [], void clearHistory();
    if (previousMeasurements.length || previousOperations.length) {
        var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
        flushHistory.push({
            duration: performanceNow() - previousStartTime,
            measurements: previousMeasurements || [],
            operations: previousOperations || [],
            treeSnapshot: getTreeSnapshot(registeredIDs)
        });
    }
    clearHistory(), currentFlushStartTime = performanceNow(), currentFlushMeasurements = [];
},
    checkDebugID = function checkDebugID(debugID) {
    arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning(!1, "ReactDebugTool: debugID may not be empty.");
},
    beginLifeCycleTimer = function beginLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning(!1, "There is an internal error in the React performance measurement code." + "\n\nDid not expect %s timer to start while %s timer is still in " + "progress for %s instance.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), currentTimerStartTime = performanceNow(), currentTimerNestedFlushDuration = 0, currentTimerDebugID = debugID, currentTimerType = timerType);
},
    endLifeCycleTimer = function endLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning(!1, "There is an internal error in the React performance measurement code. " + "We did not expect %s timer to stop while %s timer is still in " + "progress for %s instance. Please report this as a bug in React.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), _isProfiling && currentFlushMeasurements.push({
        timerType: timerType,
        instanceID: debugID,
        duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    }), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null);
},
    pauseCurrentLifeCycleTimer = function pauseCurrentLifeCycleTimer() {
    var currentTimer = {
        startTime: currentTimerStartTime,
        nestedFlushStartTime: performanceNow(),
        debugID: currentTimerDebugID,
        timerType: currentTimerType
    };
    lifeCycleTimerStack.push(currentTimer), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null;
},
    resumeCurrentLifeCycleTimer = function resumeCurrentLifeCycleTimer() {
    var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
        startTime = _lifeCycleTimerStack$.startTime,
        nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
        debugID = _lifeCycleTimerStack$.debugID,
        timerType = _lifeCycleTimerStack$.timerType,
        nestedFlushDuration = performanceNow() - nestedFlushStartTime;
    currentTimerStartTime = startTime, currentTimerNestedFlushDuration += nestedFlushDuration, currentTimerDebugID = debugID, currentTimerType = timerType;
},
    lastMarkTimeStamp = 0,
    canUsePerformanceMeasure = "undefined" != typeof performance && "function" == typeof performance.mark && "function" == typeof performance.clearMarks && "function" == typeof performance.measure && "function" == typeof performance.clearMeasures,
    shouldMark = function shouldMark(debugID) {
    if (!_isProfiling || !canUsePerformanceMeasure) return !1;
    var element = ReactComponentTreeHook.getElement(debugID);
    return null != element && "object" == typeof element && !("string" == typeof element.type);
},
    markBegin = function markBegin(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType;
        lastMarkTimeStamp = performanceNow(), performance.mark(markName);
    }
},
    markEnd = function markEnd(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType,
            displayName = ReactComponentTreeHook.getDisplayName(debugID) || "Unknown";
        if (performanceNow() - lastMarkTimeStamp > .1) {
            var measurementName = displayName + " [" + markType + "]";
            performance.measure(measurementName, markName);
        }
        performance.clearMarks(markName), measurementName && performance.clearMeasures(measurementName);
    }
};

ReactDebugTool$1 = {
    addHook: function addHook(hook) {
        hooks.push(hook);
    },
    removeHook: function removeHook(hook) {
        for (var i = 0; i < hooks.length; i++) {
            hooks[i] === hook && (hooks.splice(i, 1), i--);
        }
    },
    isProfiling: function isProfiling() {
        return _isProfiling;
    },
    beginProfiling: function beginProfiling() {
        _isProfiling || (_isProfiling = !0, flushHistory.length = 0, resetMeasurements(), ReactDebugTool$1.addHook(ReactHostOperationHistoryHook_1));
    },
    endProfiling: function endProfiling() {
        _isProfiling && (_isProfiling = !1, resetMeasurements(), ReactDebugTool$1.removeHook(ReactHostOperationHistoryHook_1));
    },
    getFlushHistory: function getFlushHistory() {
        return flushHistory;
    },
    onBeginFlush: function onBeginFlush() {
        currentFlushNesting++, resetMeasurements(), pauseCurrentLifeCycleTimer(), emitEvent("onBeginFlush");
    },
    onEndFlush: function onEndFlush() {
        resetMeasurements(), currentFlushNesting--, resumeCurrentLifeCycleTimer(), emitEvent("onEndFlush");
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), emitEvent("onBeginLifeCycleTimer", debugID, timerType), markBegin(debugID, timerType), beginLifeCycleTimer(debugID, timerType);
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), endLifeCycleTimer(debugID, timerType), markEnd(debugID, timerType), emitEvent("onEndLifeCycleTimer", debugID, timerType);
    },
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        emitEvent("onBeginProcessingChildContext");
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        emitEvent("onEndProcessingChildContext");
    },
    onHostOperation: function onHostOperation(operation) {
        checkDebugID(operation.instanceID), emitEvent("onHostOperation", operation);
    },
    onSetState: function onSetState() {
        emitEvent("onSetState");
    },
    onSetChildren: function onSetChildren(debugID, childDebugIDs) {
        checkDebugID(debugID), childDebugIDs.forEach(checkDebugID), emitEvent("onSetChildren", debugID, childDebugIDs);
    },
    onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
        checkDebugID(debugID), checkDebugID(parentDebugID, !0), emitEvent("onBeforeMountComponent", debugID, element, parentDebugID), markBegin(debugID, "mount");
    },
    onMountComponent: function onMountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "mount"), emitEvent("onMountComponent", debugID);
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
        checkDebugID(debugID), emitEvent("onBeforeUpdateComponent", debugID, element), markBegin(debugID, "update");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "update"), emitEvent("onUpdateComponent", debugID);
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
        checkDebugID(debugID), emitEvent("onBeforeUnmountComponent", debugID), markBegin(debugID, "unmount");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "unmount"), emitEvent("onUnmountComponent", debugID);
    },
    onTestEvent: function onTestEvent() {
        emitEvent("onTestEvent");
    }
}, ReactDebugTool$1.addHook(ReactInvalidSetStateWarningHook_1), ReactDebugTool$1.addHook(ReactComponentTreeHook);

var url = ExecutionEnvironment.canUseDOM && window.location.href || "";

/[?&]react_perf\b/.test(url) && ReactDebugTool$1.beginProfiling();

var ReactDebugTool_1 = ReactDebugTool$1,
    debugTool = null,
    ReactDebugTool = ReactDebugTool_1;

debugTool = ReactDebugTool;

var ReactInstrumentation = {
    debugTool: debugTool
};

function ReactNativeContainerInfo(tag) {
    return {
        _tag: tag
    };
}

var ReactNativeContainerInfo_1 = ReactNativeContainerInfo,
    ClassComponent = ReactTypeOfWork.ClassComponent;

function isValidOwner(object) {
    return !(!object || "function" != typeof object.attachRef || "function" != typeof object.detachRef);
}

var ReactOwner = {
    addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = component.getPublicInstance();
        } else invariant(isValidOwner(owner), "addComponentAsRefTo(...): Only a ReactOwner can have refs. You might " + "be adding a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner)."), owner.attachRef(ref, component);
    },
    removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            inst && inst.refs[ref] === component.getPublicInstance() && delete inst.refs[ref];
        } else {
            invariant(isValidOwner(owner), "removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might " + "be removing a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner).");
            var ownerPublicInstance = owner.getPublicInstance();
            ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance() && owner.detachRef(ref);
        }
    }
},
    ReactOwner_1 = ReactOwner,
    ReactCompositeComponentTypes$1 = {
    ImpureClass: 0,
    PureClass: 1,
    StatelessFunctional: 2
},
    ReactRef = {},
    ReactCompositeComponentTypes = ReactCompositeComponentTypes$1,
    _require$1 = ReactGlobalSharedState_1,
    ReactComponentTreeHook$1 = _require$1.ReactComponentTreeHook,
    warning$2 = warning,
    warnedAboutStatelessRefs = {};

function attachRef(ref, component, owner) {
    if (component._compositeType === ReactCompositeComponentTypes.StatelessFunctional) {
        var info = "",
            ownerName = void 0;
        owner && ("function" == typeof owner.getName && (ownerName = owner.getName()), ownerName && (info += "\n\nCheck the render method of `" + ownerName + "`."));
        var warningKey = ownerName || component._debugID,
            element = component._currentElement;
        element && element._source && (warningKey = element._source.fileName + ":" + element._source.lineNumber), warnedAboutStatelessRefs[warningKey] || (warnedAboutStatelessRefs[warningKey] = !0, warning$2(!1, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactComponentTreeHook$1.getStackAddendumByID(component._debugID)));
    }
    "function" == typeof ref ? ref(component.getPublicInstance()) : ReactOwner_1.addComponentAsRefTo(component, ref, owner);
}

function detachRef(ref, component, owner) {
    "function" == typeof ref ? ref(null) : ReactOwner_1.removeComponentAsRefFrom(component, ref, owner);
}

ReactRef.attachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && attachRef(ref, instance, element._owner);
    }
}, ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
    var prevRef = null,
        prevOwner = null;
    null !== prevElement && "object" == typeof prevElement && (prevRef = prevElement.ref, prevOwner = prevElement._owner);
    var nextRef = null,
        nextOwner = null;
    return null !== nextElement && "object" == typeof nextElement && (nextRef = nextElement.ref, nextOwner = nextElement._owner), prevRef !== nextRef || "string" == typeof nextRef && nextOwner !== prevOwner;
}, ReactRef.detachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && detachRef(ref, instance, element._owner);
    }
};

var ReactRef_1 = ReactRef;

function attachRefs() {
    ReactRef_1.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
    mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
        var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
        return internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID), markup;
    },
    getHostNode: function getHostNode(internalInstance) {
        return internalInstance.getHostNode();
    },
    unmountComponent: function unmountComponent(internalInstance, safely, skipLifecycle) {
        0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID), ReactRef_1.detachRefs(internalInstance, internalInstance._currentElement), internalInstance.unmountComponent(safely, skipLifecycle), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
    },
    receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
        var prevElement = internalInstance._currentElement;
        if (nextElement !== prevElement || context !== internalInstance._context) {
            0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
            var refsChanged = ReactRef_1.shouldUpdateRefs(prevElement, nextElement);
            refsChanged && ReactRef_1.detachRefs(internalInstance, prevElement), internalInstance.receiveComponent(nextElement, transaction, context), refsChanged && internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
        }
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
        if (internalInstance._updateBatchNumber !== updateBatchNumber) return void warning(null == internalInstance._updateBatchNumber || internalInstance._updateBatchNumber === updateBatchNumber + 1, "performUpdateIfNecessary: Unexpected batch number (current %s, " + "pending %s)", updateBatchNumber, internalInstance._updateBatchNumber);
        0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement), internalInstance.performUpdateIfNecessary(transaction), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
    }
},
    ReactReconciler_1 = ReactReconciler,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    OBSERVED_ERROR = {},
    TransactionImpl = {
    reinitializeTransaction: function reinitializeTransaction() {
        this.transactionWrappers = this.getTransactionWrappers(), this.wrapperInitData ? this.wrapperInitData.length = 0 : this.wrapperInitData = [], this._isInTransaction = !1;
    },
    _isInTransaction: !1,
    getTransactionWrappers: null,
    isInTransaction: function isInTransaction() {
        return !!this._isInTransaction;
    },
    perform: function perform(method, scope, a, b, c, d, e, f) {
        invariant(!this.isInTransaction(), "Transaction.perform(...): Cannot initialize a transaction when there " + "is already an outstanding transaction.");
        var errorThrown, ret;
        try {
            this._isInTransaction = !0, errorThrown = !0, this.initializeAll(0), ret = method.call(scope, a, b, c, d, e, f), errorThrown = !1;
        } finally {
            try {
                if (errorThrown) try {
                    this.closeAll(0);
                } catch (err) {} else this.closeAll(0);
            } finally {
                this._isInTransaction = !1;
            }
        }
        return ret;
    },
    initializeAll: function initializeAll(startIndex) {
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var wrapper = transactionWrappers[i];
            try {
                this.wrapperInitData[i] = OBSERVED_ERROR, this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
            } finally {
                if (this.wrapperInitData[i] === OBSERVED_ERROR) try {
                    this.initializeAll(i + 1);
                } catch (err) {}
            }
        }
    },
    closeAll: function closeAll(startIndex) {
        invariant(this.isInTransaction(), "Transaction.closeAll(): Cannot close transaction when none are open.");
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var errorThrown,
                wrapper = transactionWrappers[i],
                initData = this.wrapperInitData[i];
            try {
                errorThrown = !0, initData !== OBSERVED_ERROR && wrapper.close && wrapper.close.call(this, initData), errorThrown = !1;
            } finally {
                if (errorThrown) try {
                    this.closeAll(i + 1);
                } catch (e) {}
            }
        }
        this.wrapperInitData.length = 0;
    }
},
    Transaction = TransactionImpl,
    dirtyComponents = [],
    updateBatchNumber = 0,
    batchingStrategy = null;

function ensureInjected() {
    invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy, "ReactUpdates: must inject a reconcile transaction class and batching " + "strategy");
}

var NESTED_UPDATES = {
    initialize: function initialize() {
        this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function close() {
        this.dirtyComponentsLength !== dirtyComponents.length ? (dirtyComponents.splice(0, this.dirtyComponentsLength), flushBatchedUpdates()) : dirtyComponents.length = 0;
    }
},
    TRANSACTION_WRAPPERS = [NESTED_UPDATES];

function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction(), this.dirtyComponentsLength = null, this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(!0);
}

_extends2(ReactUpdatesFlushTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS;
    },
    destructor: function destructor() {
        this.dirtyComponentsLength = null, ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction), this.reconcileTransaction = null;
    },
    perform: function perform(method, scope, a) {
        return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
}), PooledClass_1.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates$1(callback, a, b, c, d, e) {
    return ensureInjected(), batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    invariant(len === dirtyComponents.length, "Expected flush transaction's stored dirty-components length (%s) to " + "match dirty-components array length (%s).", len, dirtyComponents.length), dirtyComponents.sort(mountOrderComparator), updateBatchNumber++;
    for (var i = 0; i < len; i++) {
        var component = dirtyComponents[i];
        ReactReconciler_1.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
    }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
    for (; dirtyComponents.length;) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction), ReactUpdatesFlushTransaction.release(transaction);
    }
};

function enqueueUpdate$1(component) {
    if (ensureInjected(), !batchingStrategy.isBatchingUpdates) return void batchingStrategy.batchedUpdates(enqueueUpdate$1, component);
    dirtyComponents.push(component), null == component._updateBatchNumber && (component._updateBatchNumber = updateBatchNumber + 1);
}

var ReactUpdatesInjection = {
    injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
        invariant(ReconcileTransaction, "ReactUpdates: must provide a reconcile transaction class"), ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },
    injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
        invariant(_batchingStrategy, "ReactUpdates: must provide a batching strategy"), invariant("function" == typeof _batchingStrategy.batchedUpdates, "ReactUpdates: must provide a batchedUpdates() function"), invariant("boolean" == typeof _batchingStrategy.isBatchingUpdates, "ReactUpdates: must provide an isBatchingUpdates boolean attribute"), batchingStrategy = _batchingStrategy;
    },
    getBatchingStrategy: function getBatchingStrategy() {
        return batchingStrategy;
    }
},
    ReactUpdates = {
    ReactReconcileTransaction: null,
    batchedUpdates: batchedUpdates$1,
    enqueueUpdate: enqueueUpdate$1,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection
},
    ReactUpdates_1 = ReactUpdates,
    ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner,
    warning$3 = warning,
    warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
    warning$3(null === callback || "function" == typeof callback, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, "" + callback);
};

function enqueueUpdate(internalInstance) {
    ReactUpdates_1.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap_1.get(publicInstance);
    if (!internalInstance) {
        var ctor = publicInstance.constructor;
        return warning$3(!1, "Can only update a mounted or mounting component. This usually means " + "you called setState, replaceState, or forceUpdate on an unmounted " + "component. This is a no-op.\n\nPlease check the code for the " + "%s component.", ctor && (ctor.displayName || ctor.name) || "ReactClass"), null;
    }
    return warning$3(null == ReactCurrentOwner.current, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`."), internalInstance;
}

var ReactUpdateQueue = {
    isMounted: function isMounted(publicInstance) {
        var owner = ReactCurrentOwner.current;
        null !== owner && (warning$3(owner._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", owner.getName() || "A component"), owner._warnedAboutRefsInRender = !0);
        var internalInstance = ReactInstanceMap_1.get(publicInstance);
        return !!internalInstance && !!internalInstance._renderedComponent;
    },
    enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
        internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback], enqueueUpdate(internalInstance);
    },
    enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (callback = void 0 === callback ? null : callback, null !== callback && (warnOnInvalidCallback(callback, callerName), internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), internalInstance._pendingForceUpdate = !0, enqueueUpdate(internalInstance));
    },
    enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (internalInstance._pendingStateQueue = [completeState], internalInstance._pendingReplaceState = !0, callback = void 0 === callback ? null : callback, null !== callback && (warnOnInvalidCallback(callback, callerName), internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance));
    },
    enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        ReactInstrumentation.debugTool.onSetState(), warning$3(null != partialState, "setState(...): You passed an undefined or null state object; " + "instead, use forceUpdate().");
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        if (internalInstance) {
            (internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = [])).push(partialState), callback = void 0 === callback ? null : callback, null !== callback && (warnOnInvalidCallback(callback, callerName), internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance);
        }
    },
    enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
        internalInstance._pendingElement = nextElement, internalInstance._context = nextContext, enqueueUpdate(internalInstance);
    }
},
    ReactUpdateQueue_1 = ReactUpdateQueue,
    injected = !1,
    ReactComponentEnvironment = {
    replaceNodeWithMarkup: null,
    processChildrenUpdates: null,
    injection: {
        injectEnvironment: function injectEnvironment(environment) {
            invariant(!injected, "ReactCompositeComponent: injectEnvironment() can only be called once."), ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup, ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates, injected = !0;
        }
    }
},
    ReactComponentEnvironment_1 = ReactComponentEnvironment,
    ReactNodeTypes = {
    HOST: 0,
    COMPOSITE: 1,
    EMPTY: 2,
    getType: function getType(node) {
        return null === node || !1 === node ? ReactNodeTypes.EMPTY : React.isValidElement(node) ? "function" == typeof node.type ? ReactNodeTypes.COMPOSITE : ReactNodeTypes.HOST : void invariant(!1, "Unexpected node: %s", node);
    }
},
    ReactNodeTypes_1 = ReactNodeTypes;

function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = null === prevElement || !1 === prevElement,
        nextEmpty = null === nextElement || !1 === nextElement;
    if (prevEmpty || nextEmpty) return prevEmpty === nextEmpty;
    var prevType = typeof prevElement,
        nextType = typeof nextElement;
    return "string" === prevType || "number" === prevType ? "string" === nextType || "number" === nextType : "object" === nextType && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
}

var shouldUpdateReactComponent_1 = shouldUpdateReactComponent,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner,
    _require2 = ReactGlobalSharedState_1,
    ReactDebugCurrentFrame = _require2.ReactDebugCurrentFrame,
    warningAboutMissingGetChildContext = {};

function StatelessComponent(Component) {}

StatelessComponent.prototype.render = function () {
    return (0, ReactInstanceMap_1.get(this)._currentElement.type)(this.props, this.context, this.updater);
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
    return !(!Component.prototype || !Component.prototype.isPureReactComponent);
}

function measureLifeCyclePerf(fn, debugID, timerType) {
    if (0 === debugID) return fn();
    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
    try {
        return fn();
    } finally {
        ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
    }
}

var nextMountID = 1,
    ReactCompositeComponent = {
    construct: function construct(element) {
        this._currentElement = element, this._rootNodeID = 0, this._compositeType = null, this._instance = null, this._hostParent = null, this._hostContainerInfo = null, this._updateBatchNumber = null, this._pendingElement = null, this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._renderedNodeType = null, this._renderedComponent = null, this._context = null, this._mountOrder = 0, this._topLevelWrapper = null, this._pendingCallbacks = null, this._calledComponentWillUnmount = !1, this._warnedAboutRefsInRender = !1;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        var _this = this;
        this._context = context, this._mountOrder = nextMountID++, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        var renderedElement,
            publicProps = this._currentElement.props,
            publicContext = this._processContext(context),
            Component = this._currentElement.type,
            updateQueue = transaction.getUpdateQueue(),
            doConstruct = shouldConstruct(Component),
            inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
        doConstruct || null != inst && null != inst.render ? isPureComponent(Component) ? this._compositeType = ReactCompositeComponentTypes$1.PureClass : this._compositeType = ReactCompositeComponentTypes$1.ImpureClass : (renderedElement = inst, warning(!Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", Component.displayName || Component.name || "Component"), invariant(null === inst || !1 === inst || React.isValidElement(inst), "%s(...): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", Component.displayName || Component.name || "Component"), inst = new StatelessComponent(Component), this._compositeType = ReactCompositeComponentTypes$1.StatelessFunctional), null == inst.render && warning(!1, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", Component.displayName || Component.name || "Component");
        var propsMutated = inst.props !== publicProps,
            componentName = Component.displayName || Component.name || "Component";
        warning(void 0 === inst.props || !propsMutated, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", componentName, componentName), inst.props = publicProps, inst.context = publicContext, inst.refs = emptyObject, inst.updater = updateQueue, this._instance = inst, ReactInstanceMap_1.set(inst, this), warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", this.getName() || "a component"), warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", this.getName() || "a component"), warning(!inst.propTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", this.getName() || "a component"), warning(!inst.contextTypes, "contextTypes was defined as an instance property on %s. Use a " + "static property to define contextTypes instead.", this.getName() || "a component"), warning("function" != typeof inst.componentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", this.getName() || "A component"), warning("function" != typeof inst.componentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", this.getName() || "A component"), warning("function" != typeof inst.componentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", this.getName() || "A component"), isPureComponent(Component) && void 0 !== inst.shouldComponentUpdate && warning(!1, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", this.getName() || "A pure component"), warning(!inst.defaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", this.getName() || "a component", this.getName() || "a component");
        var initialState = inst.state;
        void 0 === initialState && (inst.state = initialState = null), invariant("object" == typeof initialState && !Array.isArray(initialState), "%s.state: must be set to an object or null", this.getName() || "ReactCompositeComponent"), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, inst.componentWillMount && (measureLifeCyclePerf(function () {
            return inst.componentWillMount();
        }, this._debugID, "componentWillMount"), this._pendingStateQueue && (inst.state = this._processPendingState(inst.props, inst.context)));
        var markup;
        markup = inst.unstable_handleError ? this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) : this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context), inst.componentDidMount && transaction.getReactMountReady().enqueue(function () {
            measureLifeCyclePerf(function () {
                return inst.componentDidMount();
            }, _this._debugID, "componentDidMount");
        });
        var callbacks = this._pendingCallbacks;
        if (callbacks) {
            this._pendingCallbacks = null;
            for (var i = 0; i < callbacks.length; i++) {
                transaction.getReactMountReady().enqueue(callbacks[i], inst);
            }
        }
        return markup;
    },
    _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
        ReactCurrentOwner$1.current = this;
        try {
            return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
        } finally {
            ReactCurrentOwner$1.current = null;
        }
    },
    _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
        var Component = this._currentElement.type;
        return doConstruct ? measureLifeCyclePerf(function () {
            return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, "ctor") : measureLifeCyclePerf(function () {
            return Component(publicProps, publicContext, updateQueue);
        }, this._debugID, "render");
    },
    performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        var markup,
            checkpoint = transaction.checkpoint();
        try {
            markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._renderedComponent.unmountComponent(!0, !0), transaction.rollback(checkpoint), markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        }
        return markup;
    },
    performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        void 0 === renderedElement && (renderedElement = this._renderValidatedComponent());
        var nodeType = ReactNodeTypes_1.getType(renderedElement);
        this._renderedNodeType = nodeType;
        var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
        this._renderedComponent = child;
        var debugID = 0;
        debugID = this._debugID;
        var markup = ReactReconciler_1.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
        if (0 !== debugID) {
            var childDebugIDs = 0 !== child._debugID ? [child._debugID] : [];
            ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
        return markup;
    },
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        if (this._renderedComponent) {
            var inst = this._instance;
            if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) if (inst._calledComponentWillUnmount = !0, safely) {
                if (!skipLifecycle) {
                    var name = this.getName() + ".componentWillUnmount()";
                    ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(name, inst.componentWillUnmount, inst);
                }
            } else measureLifeCyclePerf(function () {
                return inst.componentWillUnmount();
            }, this._debugID, "componentWillUnmount");
            this._renderedComponent && (ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedNodeType = null, this._renderedComponent = null, this._instance = null), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._pendingCallbacks = null, this._pendingElement = null, this._context = null, this._rootNodeID = 0, this._topLevelWrapper = null, ReactInstanceMap_1.remove(inst);
        }
    },
    _maskContext: function _maskContext(context) {
        var Component = this._currentElement.type,
            contextTypes = Component.contextTypes;
        if (!contextTypes) return emptyObject;
        var maskedContext = {};
        for (var contextName in contextTypes) {
            maskedContext[contextName] = context[contextName];
        }return maskedContext;
    },
    _processContext: function _processContext(context) {
        var maskedContext = this._maskContext(context),
            Component = this._currentElement.type;
        return Component.contextTypes && this._checkContextTypes(Component.contextTypes, maskedContext, "context"), maskedContext;
    },
    _processChildContext: function _processChildContext(currentContext) {
        var childContext,
            Component = this._currentElement.type,
            inst = this._instance;
        if ("function" == typeof inst.getChildContext) {
            ReactInstrumentation.debugTool.onBeginProcessingChildContext();
            try {
                childContext = inst.getChildContext();
            } finally {
                ReactInstrumentation.debugTool.onEndProcessingChildContext();
            }
            invariant("object" == typeof Component.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", this.getName() || "ReactCompositeComponent"), this._checkContextTypes(Component.childContextTypes, childContext, "child context");
            for (var name in childContext) {
                invariant(name in Component.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || "ReactCompositeComponent", name);
            }return _extends2({}, currentContext, childContext);
        }
        var componentName = this.getName();
        return warningAboutMissingGetChildContext[componentName] || (warningAboutMissingGetChildContext[componentName] = !0, warning(!Component.childContextTypes, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName)), currentContext;
    },
    _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
        ReactDebugCurrentFrame.current = this._debugID, checkPropTypes(typeSpecs, values, location, this.getName(), ReactDebugCurrentFrame.getStackAddendum), ReactDebugCurrentFrame.current = null;
    },
    receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
        var prevElement = this._currentElement,
            prevContext = this._context;
        this._pendingElement = null, this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
        if (null != this._pendingElement) ReactReconciler_1.receiveComponent(this, this._pendingElement, transaction, this._context);else if (null !== this._pendingStateQueue || this._pendingForceUpdate) this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);else {
            var callbacks = this._pendingCallbacks;
            if (this._pendingCallbacks = null, callbacks) for (var j = 0; j < callbacks.length; j++) {
                transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
            }this._updateBatchNumber = null;
        }
    },
    updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
        var inst = this._instance;
        invariant(null != inst, "Attempted to update component `%s` that has already been unmounted " + "(or failed to mount).", this.getName() || "ReactCompositeComponent");
        var nextContext,
            willReceive = !1;
        this._context === nextUnmaskedContext ? nextContext = inst.context : (nextContext = this._processContext(nextUnmaskedContext), willReceive = !0);
        var prevProps = prevParentElement.props,
            nextProps = nextParentElement.props;
        if (prevParentElement !== nextParentElement && (willReceive = !0), willReceive && inst.componentWillReceiveProps) {
            var beforeState = inst.state;
            measureLifeCyclePerf(function () {
                return inst.componentWillReceiveProps(nextProps, nextContext);
            }, this._debugID, "componentWillReceiveProps");
            var afterState = inst.state;
            beforeState !== afterState && (inst.state = beforeState, inst.updater.enqueueReplaceState(inst, afterState), warning(!1, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", this.getName() || "ReactCompositeComponent"));
        }
        var callbacks = this._pendingCallbacks;
        this._pendingCallbacks = null;
        var nextState = this._processPendingState(nextProps, nextContext),
            shouldUpdate = !0;
        if (!this._pendingForceUpdate) {
            var prevState = inst.state;
            shouldUpdate = willReceive || nextState !== prevState, inst.shouldComponentUpdate ? shouldUpdate = measureLifeCyclePerf(function () {
                return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
            }, this._debugID, "shouldComponentUpdate") : this._compositeType === ReactCompositeComponentTypes$1.PureClass && (shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState));
        }
        if (warning(void 0 !== shouldUpdate, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", this.getName() || "ReactCompositeComponent"), this._updateBatchNumber = null, shouldUpdate ? (this._pendingForceUpdate = !1, this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext)) : (this._currentElement = nextParentElement, this._context = nextUnmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext), callbacks) for (var j = 0; j < callbacks.length; j++) {
            transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
        }
    },
    _processPendingState: function _processPendingState(props, context) {
        var inst = this._instance,
            queue = this._pendingStateQueue,
            replace = this._pendingReplaceState;
        if (this._pendingReplaceState = !1, this._pendingStateQueue = null, !queue) return inst.state;
        if (replace && 1 === queue.length) return queue[0];
        for (var nextState = replace ? queue[0] : inst.state, dontMutate = !0, i = replace ? 1 : 0; i < queue.length; i++) {
            var partial = queue[i],
                partialState = "function" == typeof partial ? partial.call(inst, nextState, props, context) : partial;
            partialState && (dontMutate ? (dontMutate = !1, nextState = _extends2({}, nextState, partialState)) : _extends2(nextState, partialState));
        }
        return nextState;
    },
    _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
        var prevProps,
            prevState,
            _this2 = this,
            inst = this._instance,
            hasComponentDidUpdate = !!inst.componentDidUpdate;
        hasComponentDidUpdate && (prevProps = inst.props, prevState = inst.state), inst.componentWillUpdate && measureLifeCyclePerf(function () {
            return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, "componentWillUpdate"), this._currentElement = nextElement, this._context = unmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext, inst.unstable_handleError ? this._updateRenderedComponentWithErrorHandling(transaction, unmaskedContext) : this._updateRenderedComponent(transaction, unmaskedContext), hasComponentDidUpdate && transaction.getReactMountReady().enqueue(function () {
            measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState), _this2._debugID, "componentDidUpdate");
        });
    },
    _updateRenderedComponentWithErrorHandling: function _updateRenderedComponentWithErrorHandling(transaction, context) {
        var checkpoint = transaction.checkpoint();
        try {
            this._updateRenderedComponent(transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._updateRenderedComponentWithNextElement(transaction, context, null, !0), this._updateRenderedComponent(transaction, context);
        }
    },
    _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
        var nextRenderedElement = this._renderValidatedComponent();
        this._updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, !1);
    },
    _updateRenderedComponentWithNextElement: function _updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, safely) {
        var prevComponentInstance = this._renderedComponent,
            prevRenderedElement = prevComponentInstance._currentElement,
            debugID = 0;
        if (debugID = this._debugID, shouldUpdateReactComponent_1(prevRenderedElement, nextRenderedElement)) ReactReconciler_1.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));else {
            var oldHostNode = ReactReconciler_1.getHostNode(prevComponentInstance),
                nodeType = ReactNodeTypes_1.getType(nextRenderedElement);
            this._renderedNodeType = nodeType;
            var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
            this._renderedComponent = child;
            var nextMarkup = ReactReconciler_1.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
            if (ReactReconciler_1.unmountComponent(prevComponentInstance, safely, !1), 0 !== debugID) {
                var childDebugIDs = 0 !== child._debugID ? [child._debugID] : [];
                ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
            }
            this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
        }
    },
    _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
        ReactComponentEnvironment_1.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
    },
    _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
        var renderedElement,
            inst = this._instance;
        return renderedElement = measureLifeCyclePerf(function () {
            return inst.render();
        }, this._debugID, "render"), void 0 === renderedElement && inst.render._isMockFunction && (renderedElement = null), renderedElement;
    },
    _renderValidatedComponent: function _renderValidatedComponent() {
        var renderedElement;
        if (0 && this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional) renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();else {
            ReactCurrentOwner$1.current = this;
            try {
                renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
            } finally {
                ReactCurrentOwner$1.current = null;
            }
        }
        return invariant(null === renderedElement || !1 === renderedElement || React.isValidElement(renderedElement), "%s.render(): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", this.getName() || "ReactCompositeComponent"), renderedElement;
    },
    attachRef: function attachRef(ref, component) {
        var inst = this.getPublicInstance();
        invariant(null != inst, "Stateless function components cannot have refs.");
        var publicComponentInstance = component.getPublicInstance();
        (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = publicComponentInstance;
    },
    detachRef: function detachRef(ref) {
        delete this.getPublicInstance().refs[ref];
    },
    getName: function getName() {
        var type = this._currentElement.type,
            constructor = this._instance && this._instance.constructor;
        return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },
    getPublicInstance: function getPublicInstance() {
        var inst = this._instance;
        return this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional ? null : inst;
    },
    _instantiateReactComponent: null
},
    ReactCompositeComponent_1 = ReactCompositeComponent,
    emptyComponentFactory,
    ReactEmptyComponentInjection = {
    injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
        emptyComponentFactory = factory;
    }
},
    ReactEmptyComponent = {
    create: function create(instantiate) {
        return emptyComponentFactory(instantiate);
    }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

var ReactEmptyComponent_1 = ReactEmptyComponent,
    genericComponentClass = null,
    textComponentClass = null,
    ReactHostComponentInjection = {
    injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
        genericComponentClass = componentClass;
    },
    injectTextComponentClass: function injectTextComponentClass(componentClass) {
        textComponentClass = componentClass;
    }
};

function createInternalComponent(element) {
    return invariant(genericComponentClass, "There is no registered component for the tag %s", element.type), new genericComponentClass(element);
}

function createInstanceForText(text) {
    return new textComponentClass(text);
}

function isTextComponent(component) {
    return component instanceof textComponentClass;
}

var ReactHostComponent = {
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactHostComponentInjection
},
    ReactHostComponent_1 = ReactHostComponent,
    nextDebugID = 1,
    ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
    this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
    if (owner) {
        var name = owner.getName();
        if (name) return "\n\nCheck the render method of `" + name + "`.";
    }
    return "";
}

function isInternalComponentType(type) {
    return "function" == typeof type && void 0 !== type.prototype && "function" == typeof type.prototype.mountComponent && "function" == typeof type.prototype.receiveComponent;
}

function instantiateReactComponent(node, shouldHaveDebugID) {
    var instance;
    if (null === node || !1 === node) instance = ReactEmptyComponent_1.create(instantiateReactComponent);else if ("object" == typeof node) {
        var element = node,
            type = element.type;
        if ("function" != typeof type && "string" != typeof type) {
            var info = "";
            (void 0 === type || "object" == typeof type && null !== type && 0 === Object.keys(type).length) && (info += " You likely forgot to export your component from the file " + "it's defined in."), info += getDeclarationErrorAddendum(element._owner), invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
        }
        "string" == typeof element.type ? instance = ReactHostComponent_1.createInternalComponent(element) : isInternalComponentType(element.type) ? (instance = new element.type(element), instance.getHostNode || (instance.getHostNode = instance.getNativeNode)) : instance = new ReactCompositeComponentWrapper(element);
    } else "string" == typeof node || "number" == typeof node ? instance = ReactHostComponent_1.createInstanceForText(node) : invariant(!1, "Encountered invalid React node of type %s", typeof node);
    return warning("function" == typeof instance.mountComponent && "function" == typeof instance.receiveComponent && "function" == typeof instance.getHostNode && "function" == typeof instance.unmountComponent, "Only React Components can be mounted."), instance._mountIndex = 0, instance._mountImage = null, instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0, Object.preventExtensions && Object.preventExtensions(instance), instance;
}

_extends2(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent_1, {
    _instantiateReactComponent: instantiateReactComponent
});

var instantiateReactComponent_1 = instantiateReactComponent,
    DevOnlyStubShim = null,
    ReactNativeFeatureFlags = require(212                      ), // 212 = ReactNativeFeatureFlags
    ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner,
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return DevOnlyStubShim.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    var owner = ReactCurrentOwner$2.current;
    if (null !== owner && (warning(owner._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", owner.getName() || "A component"), owner._warnedAboutRefsInRender = !0), null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    TopLevelWrapper = function TopLevelWrapper() {};

TopLevelWrapper.prototype.isReactComponent = {}, TopLevelWrapper.displayName = "TopLevelWrapper", TopLevelWrapper.prototype.render = function () {
    return this.props.child;
}, TopLevelWrapper.isReactTopLevelWrapper = !0;

function mountComponentIntoNode(componentInstance, containerTag, transaction) {
    var markup = ReactReconciler_1.mountComponent(componentInstance, transaction, null, ReactNativeContainerInfo_1(containerTag), emptyObject, 0);
    componentInstance._renderedComponent._topLevelWrapper = componentInstance, ReactNativeMount._mountImageIntoNode(markup, containerTag);
}

function batchedMountComponentIntoNode(componentInstance, containerTag) {
    var transaction = ReactUpdates_1.ReactReconcileTransaction.getPooled();
    transaction.perform(mountComponentIntoNode, null, componentInstance, containerTag, transaction), ReactUpdates_1.ReactReconcileTransaction.release(transaction);
}

var ReactNativeMount = {
    _instancesByContainerID: {},
    findNodeHandle: findNodeHandle_1,
    renderComponent: function renderComponent(nextElement, containerTag, callback) {
        var nextWrappedElement = React.createElement(TopLevelWrapper, {
            child: nextElement
        }),
            topRootNodeID = containerTag,
            prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];
        if (prevComponent) {
            var prevWrappedElement = prevComponent._currentElement,
                prevElement = prevWrappedElement.props.child;
            if (shouldUpdateReactComponent_1(prevElement, nextElement)) return ReactUpdateQueue_1.enqueueElementInternal(prevComponent, nextWrappedElement, emptyObject), callback && ReactUpdateQueue_1.enqueueCallbackInternal(prevComponent, callback), prevComponent;
            ReactNativeMount.unmountComponentAtNode(containerTag);
        }
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), null;
        ReactNativeTagHandles_1.assertRootTag(containerTag);
        var instance = instantiateReactComponent_1(nextWrappedElement, !1);
        if (ReactNativeMount._instancesByContainerID[containerTag] = instance, callback) {
            var nonNullCallback = callback;
            instance._pendingCallbacks = [function () {
                nonNullCallback.call(instance._renderedComponent.getPublicInstance());
            }];
        }
        return ReactUpdates_1.batchedUpdates(batchedMountComponentIntoNode, instance, containerTag), instance._renderedComponent.getPublicInstance();
    },
    _mountImageIntoNode: function _mountImageIntoNode(mountImage, containerID) {
        var childTag = mountImage;
        UIManager.setChildren(containerID, [childTag]);
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeMount.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), !1;
        var instance = ReactNativeMount._instancesByContainerID[containerTag];
        return !!instance && (ReactInstrumentation.debugTool.onBeginFlush(), ReactNativeMount.unmountComponentFromNode(instance, containerTag), delete ReactNativeMount._instancesByContainerID[containerTag], ReactInstrumentation.debugTool.onEndFlush(), !0);
    },
    unmountComponentFromNode: function unmountComponentFromNode(instance, containerID) {
        ReactReconciler_1.unmountComponent(instance), UIManager.removeSubviewsFromContainerWithID(containerID);
    }
},
    ReactNativeMount_1 = ReactNativeMount,
    RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function close() {
        ReactDefaultBatchingStrategy.isBatchingUpdates = !1;
    }
},
    FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates_1.flushBatchedUpdates.bind(ReactUpdates_1)
},
    TRANSACTION_WRAPPERS$1 = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
}

_extends2(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$1;
    }
});

var transaction = new ReactDefaultBatchingStrategyTransaction(),
    ReactDefaultBatchingStrategy = {
    isBatchingUpdates: !1,
    batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
        var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
        return ReactDefaultBatchingStrategy.isBatchingUpdates = !0, alreadyBatchingUpdates ? callback(a, b, c, d, e) : transaction.perform(callback, null, a, b, c, d, e);
    }
},
    ReactDefaultBatchingStrategy_1 = ReactDefaultBatchingStrategy,
    dangerouslyProcessChildrenUpdates = function dangerouslyProcessChildrenUpdates(inst, childrenUpdates) {
    if (childrenUpdates.length) {
        for (var moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices, containerTag = ReactNativeComponentTree_1.getNodeFromInstance(inst), i = 0; i < childrenUpdates.length; i++) {
            var update = childrenUpdates[i];
            if ("MOVE_EXISTING" === update.type) (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex), (moveToIndices || (moveToIndices = [])).push(update.toIndex);else if ("REMOVE_NODE" === update.type) (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);else if ("INSERT_MARKUP" === update.type) {
                var mountImage = update.content,
                    tag = mountImage;
                (addAtIndices || (addAtIndices = [])).push(update.toIndex), (addChildTags || (addChildTags = [])).push(tag);
            }
        }
        UIManager.manageChildren(containerTag, moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices);
    }
},
    ReactNativeDOMIDOperations = {
    dangerouslyProcessChildrenUpdates: dangerouslyProcessChildrenUpdates,
    dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, mountImage) {
        var oldTag = id;
        UIManager.replaceExistingNonRootView(oldTag, mountImage);
    }
},
    ReactNativeDOMIDOperations_1 = ReactNativeDOMIDOperations;

function validateCallback(callback) {
    invariant(!callback || "function" == typeof callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", callback);
}

var validateCallback_1 = validateCallback;

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var CallbackQueue = function () {
    function CallbackQueue() {
        _classCallCheck(this, CallbackQueue), this._callbacks = null, this._contexts = null;
    }
    return CallbackQueue.prototype.enqueue = function (callback, context) {
        this._callbacks = this._callbacks || [], this._callbacks.push(callback), this._contexts = this._contexts || [], this._contexts.push(context);
    }, CallbackQueue.prototype.notifyAll = function () {
        var callbacks = this._callbacks,
            contexts = this._contexts;
        if (callbacks && contexts) {
            invariant(callbacks.length === contexts.length, "Mismatched list of contexts in callback queue"), this._callbacks = null, this._contexts = null;
            for (var i = 0; i < callbacks.length; i++) {
                validateCallback_1(callbacks[i]), callbacks[i].call(contexts[i]);
            }callbacks.length = 0, contexts.length = 0;
        }
    }, CallbackQueue.prototype.checkpoint = function () {
        return this._callbacks ? this._callbacks.length : 0;
    }, CallbackQueue.prototype.rollback = function (len) {
        this._callbacks && this._contexts && (this._callbacks.length = len, this._contexts.length = len);
    }, CallbackQueue.prototype.reset = function () {
        this._callbacks = null, this._contexts = null;
    }, CallbackQueue.prototype.destructor = function () {
        this.reset();
    }, CallbackQueue;
}(),
    CallbackQueue_1 = PooledClass_1.addPoolingTo(CallbackQueue),
    ON_DOM_READY_QUEUEING = {
    initialize: function initialize() {
        this.reactMountReady.reset();
    },
    close: function close() {
        this.reactMountReady.notifyAll();
    }
},
    TRANSACTION_WRAPPERS$2 = [ON_DOM_READY_QUEUEING];

TRANSACTION_WRAPPERS$2.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
});

function ReactNativeReconcileTransaction() {
    this.reinitializeTransaction(), this.reactMountReady = CallbackQueue_1.getPooled();
}

var Mixin = {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$2;
    },
    getReactMountReady: function getReactMountReady() {
        return this.reactMountReady;
    },
    getUpdateQueue: function getUpdateQueue() {
        return ReactUpdateQueue_1;
    },
    checkpoint: function checkpoint() {
        return this.reactMountReady.checkpoint();
    },
    rollback: function rollback(checkpoint) {
        this.reactMountReady.rollback(checkpoint);
    },
    destructor: function destructor() {
        CallbackQueue_1.release(this.reactMountReady), this.reactMountReady = null;
    }
};

_extends2(ReactNativeReconcileTransaction.prototype, Transaction, ReactNativeReconcileTransaction, Mixin), PooledClass_1.addPoolingTo(ReactNativeReconcileTransaction);

var ReactNativeReconcileTransaction_1 = ReactNativeReconcileTransaction,
    ReactNativeComponentEnvironment = {
    processChildrenUpdates: ReactNativeDOMIDOperations_1.dangerouslyProcessChildrenUpdates,
    replaceNodeWithMarkup: ReactNativeDOMIDOperations_1.dangerouslyReplaceNodeWithMarkupByID,
    clearNode: function clearNode() {},
    ReactReconcileTransaction: ReactNativeReconcileTransaction_1
},
    ReactNativeComponentEnvironment_1 = ReactNativeComponentEnvironment,
    ReactNativeTextComponent = function ReactNativeTextComponent(text) {
    this._currentElement = text, this._stringText = "" + text, this._hostParent = null, this._rootNodeID = 0;
};

_extends2(ReactNativeTextComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        invariant(context.isInAParentText, 'RawText "%s" must be wrapped in an explicit <Text> component.', this._stringText), this._hostParent = hostParent;
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag;
        var nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, "RCTRawText", nativeTopRootTag, {
            text: this._stringText
        }), ReactNativeComponentTree_1.precacheNode(this, tag), tag;
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    receiveComponent: function receiveComponent(nextText, transaction, context) {
        if (nextText !== this._currentElement) {
            this._currentElement = nextText;
            var nextStringText = "" + nextText;
            nextStringText !== this._stringText && (this._stringText = nextStringText, UIManager.updateView(this._rootNodeID, "RCTRawText", {
                text: this._stringText
            }));
        }
    },
    unmountComponent: function unmountComponent() {
        ReactNativeComponentTree_1.uncacheNode(this), this._currentElement = null, this._stringText = null, this._rootNodeID = 0;
    }
});

var ReactNativeTextComponent_1 = ReactNativeTextComponent,
    ReactSimpleEmptyComponent = function ReactSimpleEmptyComponent(placeholderElement, instantiate) {
    this._currentElement = null, this._renderedComponent = instantiate(placeholderElement);
};

_extends2(ReactSimpleEmptyComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        return ReactReconciler_1.mountComponent(this._renderedComponent, transaction, hostParent, hostContainerInfo, context, parentDebugID);
    },
    receiveComponent: function receiveComponent() {},
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedComponent = null;
    }
});

var ReactSimpleEmptyComponent_1 = ReactSimpleEmptyComponent;

function inject$1() {
    ReactGenericBatching_1.injection.injectStackBatchedUpdates(ReactUpdates_1.batchedUpdates), ReactUpdates_1.injection.injectReconcileTransaction(ReactNativeComponentEnvironment_1.ReactReconcileTransaction), ReactUpdates_1.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy_1), ReactComponentEnvironment_1.injection.injectEnvironment(ReactNativeComponentEnvironment_1);
    var EmptyComponent = function EmptyComponent(instantiate) {
        var View = require(285   ); // 285 = View
        return new ReactSimpleEmptyComponent_1(React.createElement(View, {
            collapsable: !0,
            style: {
                position: "absolute"
            }
        }), instantiate);
    };
    ReactEmptyComponent_1.injection.injectEmptyComponentFactory(EmptyComponent), ReactHostComponent_1.injection.injectTextComponentClass(ReactNativeTextComponent_1), ReactHostComponent_1.injection.injectGenericComponentClass(function (tag) {
        var info = "";
        "string" == typeof tag && /^[a-z]/.test(tag) && (info += " Each component name should start with an uppercase letter."), invariant(!1, "Expected a component class, got %s.%s", tag, info);
    });
}

var ReactNativeStackInjection = {
    inject: inject$1
};

function getComponentName(instanceOrFiber) {
    if ("function" == typeof instanceOrFiber.getName) {
        return instanceOrFiber.getName();
    }
    if ("number" == typeof instanceOrFiber.tag) {
        var fiber = instanceOrFiber,
            type = fiber.type;
        if ("string" == typeof type) return type;
        if ("function" == typeof type) return type.displayName || type.name;
    }
    return null;
}

var getComponentName_1 = getComponentName,
    getInspectorDataForViewTag = void 0,
    traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
    instance && (hierarchy.unshift(instance), traverseOwnerTreeUp(hierarchy, instance._currentElement._owner));
},
    getOwnerHierarchy = function getOwnerHierarchy(instance) {
    var hierarchy = [];
    return traverseOwnerTreeUp(hierarchy, instance), hierarchy;
},
    lastNotNativeInstance = function lastNotNativeInstance(hierarchy) {
    for (var i = hierarchy.length - 1; i > 1; i--) {
        var instance = hierarchy[i];
        if (!instance.viewConfig) return instance;
    }
    return hierarchy[0];
},
    getHostProps = function getHostProps(component) {
    var instance = component._instance;
    return instance ? instance.props || emptyObject : emptyObject;
},
    createHierarchy = function createHierarchy(componentHierarchy) {
    return componentHierarchy.map(function (component) {
        return {
            name: getComponentName_1(component),
            getInspectorData: function getInspectorData() {
                return {
                    measure: function measure(callback) {
                        return UIManager.measure(component.getHostNode(), callback);
                    },
                    props: getHostProps(component),
                    source: component._currentElement && component._currentElement._source
                };
            }
        };
    });
};

getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
    var component = ReactNativeComponentTree_1.getClosestInstanceFromNode(viewTag);
    if (!component) return {
        hierarchy: [],
        props: emptyObject,
        selection: null,
        source: null
    };
    var componentHierarchy = getOwnerHierarchy(component),
        instance = lastNotNativeInstance(componentHierarchy),
        hierarchy = createHierarchy(componentHierarchy),
        props = getHostProps(instance),
        source = instance._currentElement && instance._currentElement._source;
    return {
        hierarchy: hierarchy,
        props: props,
        selection: componentHierarchy.indexOf(instance),
        source: source
    };
};

var ReactNativeStackInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    findNumericNodeHandleStack = function findNumericNodeHandleStack(componentOrHandle) {
    var nodeHandle = findNodeHandle_1(componentOrHandle);
    return null == nodeHandle || "number" == typeof nodeHandle ? nodeHandle : nodeHandle.getHostNode();
};

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck$2(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return Object.freeze(object), objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$1(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(React.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    throwOnStylesProp$1 = NativeMethodsMixinUtils.throwOnStylesProp,
    warnForStyleProps$1 = NativeMethodsMixinUtils.warnForStyleProps,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig;
        warnForStyleProps$1(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID;
        warnForStyleProps$1(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_DEV = NativeMethodsMixin;

invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, "Do not override existing functions."), NativeMethodsMixin_DEV.componentWillMount = function () {
    throwOnStylesProp$1(this, this.props);
}, NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
    throwOnStylesProp$1(this, newProps);
};

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath;

function escape(key) {
    var escaperLookup = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + ("" + key).replace(/[=:]/g, function (match) {
        return escaperLookup[match];
    });
}

var unescapeInDev = emptyFunction;

unescapeInDev = function unescapeInDev(key) {
    var unescapeRegex = /(=0|=2)/g,
        unescaperLookup = {
        "=0": "=",
        "=2": ":"
    };
    return ("" + ("." === key[0] && "$" === key[1] ? key.substring(2) : key.substring(1))).replace(unescapeRegex, function (match) {
        return unescaperLookup[match];
    });
};

var KeyEscapeUtils = {
    escape: escape,
    unescapeInDev: unescapeInDev
},
    KeyEscapeUtils_1 = KeyEscapeUtils,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103,
    getCurrentStackAddendum = ReactGlobalSharedState_1.ReactComponentTreeHook.getCurrentStackAddendum,
    SEPARATOR = ".",
    SUBSEPARATOR = ":",
    didWarnAboutMaps = !1;

function getComponentKey(component, index) {
    return component && "object" == typeof component && null != component.key ? KeyEscapeUtils_1.escape(component.key) : index.toString(36);
}

function traverseStackChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
    if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
    var child,
        nextName,
        subtreeCount = 0,
        nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
    if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
        child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
    } else {
        var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
        if ("function" == typeof iteratorFn) {
            iteratorFn === children.entries && (warning(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentStackAddendum()), didWarnAboutMaps = !0);
            for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
            }
        } else if ("object" === type) {
            var addendum = "";
            addendum = " If you meant to render a collection of children, use an array " + "instead." + getCurrentStackAddendum();
            var childrenString = "" + children;
            invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
        }
    }
    return subtreeCount;
}

function traverseStackChildren(children, callback, traverseContext) {
    return null == children ? 0 : traverseStackChildrenImpl(children, "", callback, traverseContext);
}

var traverseStackChildren_1 = traverseStackChildren,
    ReactComponentTreeHook$2;

"undefined" != typeof process && process.env && "development" == "test" && (ReactComponentTreeHook$2 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function instantiateChild(childInstances, child, name, selfDebugID) {
    var keyUnique = void 0 === childInstances[name];
    ReactComponentTreeHook$2 || (ReactComponentTreeHook$2 = ReactGlobalSharedState_1.ReactComponentTreeHook), keyUnique || warning(!1, "flattenChildren(...):" + "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$2.getStackAddendumByID(selfDebugID)), null != child && keyUnique && (childInstances[name] = instantiateReactComponent_1(child, !0));
}

var ReactChildReconciler = {
    instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) {
        if (null == nestedChildNodes) return null;
        var childInstances = {};
        return traverseStackChildren_1(nestedChildNodes, function (childInsts, child, name) {
            return instantiateChild(childInsts, child, name, selfDebugID);
        }, childInstances), childInstances;
    },
    updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) {
        if (nextChildren || prevChildren) {
            var name, prevChild;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    prevChild = prevChildren && prevChildren[name];
                    var prevElement = prevChild && prevChild._currentElement,
                        nextElement = nextChildren[name];
                    if (null != prevChild && shouldUpdateReactComponent_1(prevElement, nextElement)) ReactReconciler_1.receiveComponent(prevChild, nextElement, transaction, context), nextChildren[name] = prevChild;else {
                        var nextChildInstance = instantiateReactComponent_1(nextElement, !0);
                        nextChildren[name] = nextChildInstance;
                        var nextChildMountImage = ReactReconciler_1.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
                        mountImages.push(nextChildMountImage), prevChild && (removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
                    }
                }
            }for (name in prevChildren) {
                !prevChildren.hasOwnProperty(name) || nextChildren && nextChildren.hasOwnProperty(name) || (prevChild = prevChildren[name], removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
            }
        }
    },
    unmountChildren: function unmountChildren(renderedChildren, safely, skipLifecycle) {
        for (var name in renderedChildren) {
            if (renderedChildren.hasOwnProperty(name)) {
                var renderedChild = renderedChildren[name];
                ReactReconciler_1.unmountComponent(renderedChild, safely, skipLifecycle);
            }
        }
    }
},
    ReactChildReconciler_1 = ReactChildReconciler,
    ReactComponentTreeHook$3;

"undefined" != typeof process && process.env && "development" == "test" && (ReactComponentTreeHook$3 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
    if (traverseContext && "object" == typeof traverseContext) {
        var result = traverseContext,
            keyUnique = void 0 === result[name];
        ReactComponentTreeHook$3 || (ReactComponentTreeHook$3 = ReactGlobalSharedState_1.ReactComponentTreeHook), keyUnique || warning(!1, "flattenChildren(...): Encountered two children with the same key, " + "`%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$3.getStackAddendumByID(selfDebugID)), keyUnique && null != child && (result[name] = child);
    }
}

function flattenStackChildren(children, selfDebugID) {
    if (null == children) return children;
    var result = {};
    return traverseStackChildren_1(children, function (traverseContext, child, name) {
        return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result), result;
}

var flattenStackChildren_1 = flattenStackChildren,
    ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner;

function makeInsertMarkup(markup, afterNode, toIndex) {
    return {
        type: "INSERT_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeMove(child, afterNode, toIndex) {
    return {
        type: "MOVE_EXISTING",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: ReactReconciler_1.getHostNode(child),
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeRemove(child, node) {
    return {
        type: "REMOVE_NODE",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: node,
        toIndex: null,
        afterNode: null
    };
}

function makeSetMarkup(markup) {
    return {
        type: "SET_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function makeTextContent(textContent) {
    return {
        type: "TEXT_CONTENT",
        content: textContent,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function enqueue(queue, update) {
    return update && (queue = queue || [], queue.push(update)), queue;
}

function processQueue(inst, updateQueue) {
    ReactComponentEnvironment_1.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction,
    getDebugID = function getDebugID(inst) {
    if (!inst._debugID) {
        var internal;
        (internal = ReactInstanceMap_1.get(inst)) && (inst = internal);
    }
    return inst._debugID;
};

setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
    var debugID = getDebugID(this);
    0 !== debugID && ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
    }) : []);
};

var ReactMultiChild = {
    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) try {
            return ReactCurrentOwner$3.current = this._currentElement._owner, ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
        } finally {
            ReactCurrentOwner$3.current = null;
        }
        return ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context);
    },
    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
        var nextChildren,
            selfDebugID = 0;
        if (selfDebugID = getDebugID(this), this._currentElement) {
            try {
                ReactCurrentOwner$3.current = this._currentElement._owner, nextChildren = flattenStackChildren_1(nextNestedChildrenElements, selfDebugID);
            } finally {
                ReactCurrentOwner$3.current = null;
            }
            return ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID), nextChildren;
        }
        return nextChildren = flattenStackChildren_1(nextNestedChildrenElements, selfDebugID), ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID), nextChildren;
    },
    mountChildren: function mountChildren(nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;
        var mountImages = [],
            index = 0;
        for (var name in children) {
            if (children.hasOwnProperty(name)) {
                var child = children[name],
                    selfDebugID = 0;
                selfDebugID = getDebugID(this);
                var mountImage = ReactReconciler_1.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
                child._mountIndex = index++, mountImages.push(mountImage);
            }
        }return setChildrenForInstrumentation.call(this, children), mountImages;
    },
    updateTextContent: function updateTextContent(nextContent) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeTextContent(nextContent)]);
    },
    updateMarkup: function updateMarkup(nextMarkup) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeSetMarkup(nextMarkup)]);
    },
    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
    },
    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren,
            removedNodes = {},
            mountImages = [],
            nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
        if (nextChildren || prevChildren) {
            var name,
                updates = null,
                nextIndex = 0,
                lastIndex = 0,
                nextMountIndex = 0,
                lastPlacedNode = null;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    var prevChild = prevChildren && prevChildren[name],
                        nextChild = nextChildren[name];
                    prevChild === nextChild ? (updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex)), lastIndex = Math.max(prevChild._mountIndex, lastIndex), prevChild._mountIndex = nextIndex) : (prevChild && (lastIndex = Math.max(prevChild._mountIndex, lastIndex)), updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context)), nextMountIndex++), nextIndex++, lastPlacedNode = ReactReconciler_1.getHostNode(nextChild);
                }
            }for (name in removedNodes) {
                removedNodes.hasOwnProperty(name) && (updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name])));
            }updates && processQueue(this, updates), this._renderedChildren = nextChildren, setChildrenForInstrumentation.call(this, nextChildren);
        }
    },
    unmountChildren: function unmountChildren(safely, skipLifecycle) {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(renderedChildren, safely, skipLifecycle), this._renderedChildren = null;
    },
    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
        if (child._mountIndex < lastIndex) return makeMove(child, afterNode, toIndex);
    },
    createChild: function createChild(child, afterNode, mountImage) {
        return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },
    removeChild: function removeChild(child, node) {
        return makeRemove(child, node);
    },
    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
        return child._mountIndex = index, this.createChild(child, afterNode, mountImage);
    },
    _unmountChild: function _unmountChild(child, node) {
        var update = this.removeChild(child, node);
        return child._mountIndex = null, update;
    }
},
    ReactMultiChild_1 = ReactMultiChild,
    ReactNativeBaseComponent = function ReactNativeBaseComponent(viewConfig) {
    this.viewConfig = viewConfig;
};

ReactNativeBaseComponent.Mixin = {
    getPublicInstance: function getPublicInstance() {
        return this;
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactNativeComponentTree_1.uncacheNode(this), this.unmountChildren(safely, skipLifecycle), this._rootNodeID = 0;
    },
    initializeChildren: function initializeChildren(children, containerTag, transaction, context) {
        var mountImages = this.mountChildren(children, transaction, context);
        if (mountImages.length) {
            for (var createdTags = [], i = 0, l = mountImages.length; i < l; i++) {
                var mountImage = mountImages[i],
                    childTag = mountImage;
                createdTags[i] = childTag;
            }
            UIManager.setChildren(containerTag, createdTags);
        }
    },
    receiveComponent: function receiveComponent(nextElement, transaction, context) {
        var prevElement = this._currentElement;
        this._currentElement = nextElement;
        for (var key in this.viewConfig.validAttributes) {
            nextElement.props.hasOwnProperty(key) && deepFreezeAndThrowOnMutationInDev(nextElement.props[key]);
        }var updatePayload = ReactNativeAttributePayload_1.diff(prevElement.props, nextElement.props, this.viewConfig.validAttributes);
        updatePayload && UIManager.updateView(this._rootNodeID, this.viewConfig.uiViewClassName, updatePayload), this.updateChildren(nextElement.props.children, transaction, context);
    },
    getName: function getName() {
        return this.constructor.displayName || this.constructor.name || "Unknown";
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        for (var key in this.viewConfig.validAttributes) {
            this._currentElement.props.hasOwnProperty(key) && deepFreezeAndThrowOnMutationInDev(this._currentElement.props[key]);
        }var updatePayload = ReactNativeAttributePayload_1.create(this._currentElement.props, this.viewConfig.validAttributes),
            nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, this.viewConfig.uiViewClassName, nativeTopRootTag, updatePayload), ReactNativeComponentTree_1.precacheNode(this, tag), this.initializeChildren(this._currentElement.props.children, tag, transaction, context), tag;
    }
}, _extends2(ReactNativeBaseComponent.prototype, ReactMultiChild_1, ReactNativeBaseComponent.Mixin, NativeMethodsMixin_1);

var ReactNativeBaseComponent_1 = ReactNativeBaseComponent,
    createReactNativeComponentClassStack = function createReactNativeComponentClassStack(viewConfig) {
    var Constructor = function Constructor(element) {
        this._currentElement = element, this._topLevelWrapper = null, this._hostParent = null, this._hostContainerInfo = null, this._rootNodeID = 0, this._renderedChildren = null;
    };
    return Constructor.displayName = viewConfig.uiViewClassName, Constructor.viewConfig = viewConfig, Constructor.propTypes = viewConfig.propTypes, Constructor.prototype = new ReactNativeBaseComponent_1(viewConfig), Constructor.prototype.constructor = Constructor, Constructor;
},
    createReactNativeComponentClassStack_1 = createReactNativeComponentClassStack,
    ReactNativeFeatureFlags$3 = require(212                      ), // 212 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? DevOnlyStubShim : createReactNativeComponentClassStack_1,
    ReactNativeFeatureFlags$4 = require(212                      ), // 212 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot,
    lowPriorityWarning = function lowPriorityWarning() {},
    printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }var argIndex = 0,
        message = "Warning: " + format.replace(/%s/g, function () {
        return args[argIndex++];
    });
    "undefined" != typeof console && console.warn(message);
    try {
        throw new Error(message);
    } catch (x) {}
};

lowPriorityWarning = function lowPriorityWarning(condition, format) {
    if (void 0 === format) throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
    if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
        }printWarning.apply(void 0, [format].concat(args));
    }
};

var lowPriorityWarning_1 = lowPriorityWarning,
    _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
};

function roundFloat(val) {
    var base = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
        n = Math.pow(10, base);
    return Math.floor(val * n) / n;
}

function consoleTable(table) {
    console.table(table);
}

function getLastMeasurements() {
    return ReactDebugTool_1.getFlushHistory();
}

function getExclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
        var displayName = treeSnapshot[instanceID].displayName,
            key = displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            counts: {},
            durations: {},
            totalDuration: 0
        }), stats.durations[timerType] || (stats.durations[timerType] = 0), stats.counts[timerType] || (stats.counts[timerType] = 0), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID,
                timerType = measurement.timerType;
            updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
                stats.totalDuration += duration, stats.durations[timerType] += duration, stats.counts[timerType]++;
            });
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$2({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.totalDuration - a.totalDuration;
    });
}

function getInclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc.displayName,
            ownerID = _treeSnapshot$instanc.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    var isCompositeByID = {};
    return flushHistory.forEach(function (flush) {
        flush.measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (isCompositeByID[instanceID] = !0);
        });
    }), flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                    stats.renderCount++;
                });
                for (var nextParentID = instanceID; nextParentID;) {
                    isCompositeByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                        stats.inclusiveRenderDuration += duration;
                    }), nextParentID = treeSnapshot[nextParentID].parentID;
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$2({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getWasted() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc2.displayName,
            ownerID = _treeSnapshot$instanc2.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot,
            operations = flush.operations,
            isDefinitelyNotWastedByID = {};
        operations.forEach(function (operation) {
            for (var instanceID = operation.instanceID, nextParentID = instanceID; nextParentID;) {
                isDefinitelyNotWastedByID[nextParentID] = !0, nextParentID = treeSnapshot[nextParentID].parentID;
            }
        });
        var renderedCompositeIDs = {};
        measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (renderedCompositeIDs[instanceID] = !0);
        }), measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                var updateCount = treeSnapshot[instanceID].updateCount;
                if (!isDefinitelyNotWastedByID[instanceID] && 0 !== updateCount) {
                    updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                        stats.renderCount++;
                    });
                    for (var nextParentID = instanceID; nextParentID;) {
                        renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                            stats.inclusiveRenderDuration += duration;
                        }), nextParentID = treeSnapshot[nextParentID].parentID;
                    }
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$2({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getOperations() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        stats = [];
    return flushHistory.forEach(function (flush, flushIndex) {
        var operations = flush.operations,
            treeSnapshot = flush.treeSnapshot;
        operations.forEach(function (operation) {
            var instanceID = operation.instanceID,
                type = operation.type,
                payload = operation.payload,
                _treeSnapshot$instanc3 = treeSnapshot[instanceID],
                displayName = _treeSnapshot$instanc3.displayName,
                ownerID = _treeSnapshot$instanc3.ownerID,
                owner = treeSnapshot[ownerID],
                key = (owner ? owner.displayName + " > " : "") + displayName;
            stats.push({
                flushIndex: flushIndex,
                instanceID: instanceID,
                key: key,
                type: type,
                ownerID: ownerID,
                payload: payload
            });
        });
    }), stats;
}

function printExclusive(flushHistory) {
    consoleTable(getExclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            totalDuration = item.totalDuration,
            renderCount = item.counts.render || 0,
            renderDuration = item.durations.render || 0;
        return {
            Component: key,
            "Total time (ms)": roundFloat(totalDuration),
            "Instance count": instanceCount,
            "Total render time (ms)": roundFloat(renderDuration),
            "Average render time (ms)": renderCount ? roundFloat(renderDuration / renderCount) : void 0,
            "Render count": renderCount,
            "Total lifecycle time (ms)": roundFloat(totalDuration - renderDuration)
        };
    }));
}

function printInclusive(flushHistory) {
    consoleTable(getInclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive render time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printWasted(flushHistory) {
    consoleTable(getWasted(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive wasted time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printOperations(flushHistory) {
    consoleTable(getOperations(flushHistory).map(function (stat) {
        return {
            "Owner > Node": stat.key,
            Operation: stat.type,
            Payload: "object" == typeof stat.payload ? JSON.stringify(stat.payload) : stat.payload,
            "Flush index": stat.flushIndex,
            "Owner Component ID": stat.ownerID,
            "DOM Component ID": stat.instanceID
        };
    }));
}

var warnedAboutPrintDOM = !1;

function printDOM(measurements) {
    return lowPriorityWarning_1(warnedAboutPrintDOM, "`ReactPerf.printDOM(...)` is deprecated. Use " + "`ReactPerf.printOperations(...)` instead."), warnedAboutPrintDOM = !0, printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = !1;

function getMeasurementsSummaryMap(measurements) {
    return lowPriorityWarning_1(warnedAboutGetMeasurementsSummaryMap, "`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use " + "`ReactPerf.getWasted(...)` instead."), warnedAboutGetMeasurementsSummaryMap = !0, getWasted(measurements);
}

function start() {
    ReactDebugTool_1.beginProfiling();
}

function stop() {
    ReactDebugTool_1.endProfiling();
}

function isRunning() {
    return ReactDebugTool_1.isProfiling();
}

var ReactPerfAnalysis = {
    getLastMeasurements: getLastMeasurements,
    getExclusive: getExclusive,
    getInclusive: getInclusive,
    getWasted: getWasted,
    getOperations: getOperations,
    printExclusive: printExclusive,
    printInclusive: printInclusive,
    printWasted: printWasted,
    printOperations: printOperations,
    start: start,
    stop: stop,
    isRunning: isRunning,
    printDOM: printDOM,
    getMeasurementsSummaryMap: getMeasurementsSummaryMap
},
    ReactPerf = ReactPerfAnalysis;

ReactNativeInjection.inject(), ReactNativeStackInjection.inject();

var render = function render(element, mountInto, callback) {
    return ReactNativeMount_1.renderComponent(element, mountInto, callback);
},
    ReactNativeStack = {
    NativeComponent: ReactNativeComponent_1,
    hasReactNativeInitialized: !1,
    findNodeHandle: findNumericNodeHandleStack,
    render: render,
    unmountComponentAtNode: ReactNativeMount_1.unmountComponentAtNode,
    unstable_batchedUpdates: ReactUpdates_1.batchedUpdates,
    unmountComponentAtNodeAndRemoveContainer: ReactNativeMount_1.unmountComponentAtNodeAndRemoveContainer,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

_extends2(ReactNativeStack.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    ReactDebugTool: ReactDebugTool_1,
    ReactPerf: ReactPerf
}), "undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject && __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
        getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
            return ReactNativeComponentTree_1.getClosestInstanceFromNode(node);
        },
        getNodeFromInstance: function getNodeFromInstance(inst) {
            for (; inst._renderedComponent;) {
                inst = inst._renderedComponent;
            }return inst ? ReactNativeComponentTree_1.getNodeFromInstance(inst) : null;
        }
    },
    Mount: ReactNativeMount_1,
    Reconciler: ReactReconciler_1,
    getInspectorDataForViewTag: ReactNativeStackInspector.getInspectorDataForViewTag
});

var ReactNativeStackEntry = ReactNativeStack;

module.exports = ReactNativeStackEntry;
}, 284, null, "ReactNativeStack-dev");
__d(/* View */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\View\\View.js';
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var Platform = require(192       ); // 192 = Platform
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var ReactNativeStyleAttributes = require(287                         ); // 287 = ReactNativeStyleAttributes
var ReactNativeViewAttributes = require(301                        ); // 301 = ReactNativeViewAttributes
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var View = createReactClass({
  displayName: 'View',

  mixins: [NativeMethodsMixin],

  propTypes: ViewPropTypes,

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  contextTypes: {
    isInAParentText: PropTypes.bool
  },

  render: function render() {
    invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');

    return React.createElement(RCTView, _extends({}, this.props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      }
    }));
  }
});

var RCTView = requireNativeComponent('RCTView', View, {
  nativeOnly: {
    nativeBackgroundAndroid: true,
    nativeForegroundAndroid: true
  }
});

if (__DEV__) {
  var UIManager = require(279        ); // 279 = UIManager
  var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};
  for (var prop in viewConfig.nativeProps) {
    var viewAny = View;
    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
      throw new Error('View is missing propType for native prop `' + prop + '`');
    }
  }
}

var ViewToExport = RCTView;
if (__DEV__) {
  ViewToExport = View;
}

module.exports = ViewToExport;
}, 285, null, "View");
__d(/* React */function(global, require, module, exports) {

'use strict';

module.exports = require(13     ); // 13 = react
}, 286, null, "React");
__d(/* ReactNativeStyleAttributes */function(global, require, module, exports) {

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ImageStylePropTypes = require(288                  ); // 288 = ImageStylePropTypes
var TextStylePropTypes = require(295                 ); // 295 = TextStylePropTypes
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var keyMirror = require(290                 ); // 290 = fbjs/lib/keyMirror
var processColor = require(297           ); // 297 = processColor
var processTransform = require(298               ); // 298 = processTransform
var sizesDiffer = require(300          ); // 300 = sizesDiffer

var ReactNativeStyleAttributes = _extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

ReactNativeStyleAttributes.transform = { process: processTransform };
ReactNativeStyleAttributes.shadowOffset = { diff: sizesDiffer };

var colorAttributes = { process: processColor };
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;

module.exports = ReactNativeStyleAttributes;
}, 287, null, "ReactNativeStyleAttributes");
__d(/* ImageStylePropTypes */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var ImageResizeMode = require(289              ); // 289 = ImageResizeMode
var LayoutPropTypes = require(291              ); // 291 = LayoutPropTypes
var ReactPropTypes = require(20          ); // 20 = prop-types
var ShadowPropTypesIOS = require(292                 ); // 292 = ShadowPropTypesIOS
var TransformPropTypes = require(293                 ); // 293 = TransformPropTypes

var ImageStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderWidth: ReactPropTypes.number,
  borderRadius: ReactPropTypes.number,
  overflow: ReactPropTypes.oneOf(['visible', 'hidden']),

  tintColor: ColorPropType,
  opacity: ReactPropTypes.number,

  overlayColor: ReactPropTypes.string,

  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number
});

module.exports = ImageStylePropTypes;
}, 288, null, "ImageStylePropTypes");
__d(/* ImageResizeMode */function(global, require, module, exports) {
'use strict';

var keyMirror = require(290                 ); // 290 = fbjs/lib/keyMirror

var ImageResizeMode = keyMirror({
  contain: null,

  cover: null,

  stretch: null,

  center: null,

  repeat: null
});

module.exports = ImageResizeMode;
}, 289, null, "ImageResizeMode");
__d(/* fbjs/lib/keyMirror.js */function(global, require, module, exports) {

'use strict';

var invariant = require(182          ); // 182 = ./invariant

var keyMirror = function keyMirror(obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}, 290, null, "fbjs/lib/keyMirror.js");
__d(/* LayoutPropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(20          ); // 20 = prop-types

var LayoutPropTypes = {
  display: ReactPropTypes.oneOf(['none', 'flex']),

  width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  borderWidth: ReactPropTypes.number,

  borderTopWidth: ReactPropTypes.number,

  borderRightWidth: ReactPropTypes.number,

  borderBottomWidth: ReactPropTypes.number,

  borderLeftWidth: ReactPropTypes.number,

  position: ReactPropTypes.oneOf(['absolute', 'relative']),

  flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),

  flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),

  justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),

  alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),

  overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),

  flex: ReactPropTypes.number,
  flexGrow: ReactPropTypes.number,
  flexShrink: ReactPropTypes.number,
  flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  aspectRatio: ReactPropTypes.number,

  zIndex: ReactPropTypes.number,

  direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
};

module.exports = LayoutPropTypes;
}, 291, null, "LayoutPropTypes");
__d(/* ShadowPropTypesIOS */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(208            ); // 208 = ColorPropType
var ReactPropTypes = require(20          ); // 20 = prop-types

var ShadowPropTypesIOS = {
  shadowColor: ColorPropType,

  shadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),

  shadowOpacity: ReactPropTypes.number,

  shadowRadius: ReactPropTypes.number
};

module.exports = ShadowPropTypesIOS;
}, 292, null, "ShadowPropTypesIOS");
__d(/* TransformPropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(20          ); // 20 = prop-types

var deprecatedPropType = require(294                 ); // 294 = deprecatedPropType

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var TransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({ perspective: ReactPropTypes.number }), ReactPropTypes.shape({ rotate: ReactPropTypes.string }), ReactPropTypes.shape({ rotateX: ReactPropTypes.string }), ReactPropTypes.shape({ rotateY: ReactPropTypes.string }), ReactPropTypes.shape({ rotateZ: ReactPropTypes.string }), ReactPropTypes.shape({ scale: ReactPropTypes.number }), ReactPropTypes.shape({ scaleX: ReactPropTypes.number }), ReactPropTypes.shape({ scaleY: ReactPropTypes.number }), ReactPropTypes.shape({ translateX: ReactPropTypes.number }), ReactPropTypes.shape({ translateY: ReactPropTypes.number }), ReactPropTypes.shape({ skewX: ReactPropTypes.string }), ReactPropTypes.shape({ skewY: ReactPropTypes.string })])),

  transformMatrix: TransformMatrixPropType,

  decomposedMatrix: DecomposedMatrixPropType,

  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};

module.exports = TransformPropTypes;
}, 293, null, "TransformPropTypes");
__d(/* deprecatedPropType */function(global, require, module, exports) {
'use strict';

var UIManager = require(279        ); // 279 = UIManager

function deprecatedPropType(propType, explanation) {
  return function validate(props, propName, componentName) {
    if (!UIManager[componentName] && props[propName] !== undefined) {
      console.warn('`' + propName + '` supplied to `' + componentName + '` has been deprecated. ' + explanation);
    }

    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return propType.apply(undefined, [props, propName, componentName].concat(rest));
  };
}

module.exports = deprecatedPropType;
}, 294, null, "deprecatedPropType");
__d(/* TextStylePropTypes */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var ReactPropTypes = require(20          ); // 20 = prop-types
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var TextStylePropTypes = _extends({}, ViewStylePropTypes, {

  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),

  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),

  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({ width: ReactPropTypes.number, height: ReactPropTypes.number }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,

  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,

  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),

  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),

  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),

  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),

  textDecorationColor: ColorPropType,

  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
}, 295, null, "TextStylePropTypes");
__d(/* ViewStylePropTypes */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var LayoutPropTypes = require(291              ); // 291 = LayoutPropTypes
var ReactPropTypes = require(20          ); // 20 = prop-types
var ShadowPropTypesIOS = require(292                 ); // 292 = ShadowPropTypesIOS
var TransformPropTypes = require(293                 ); // 293 = TransformPropTypes

var ViewStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderTopColor: ColorPropType,
  borderRightColor: ColorPropType,
  borderBottomColor: ColorPropType,
  borderLeftColor: ColorPropType,
  borderRadius: ReactPropTypes.number,
  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number,
  borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
  borderWidth: ReactPropTypes.number,
  borderTopWidth: ReactPropTypes.number,
  borderRightWidth: ReactPropTypes.number,
  borderBottomWidth: ReactPropTypes.number,
  borderLeftWidth: ReactPropTypes.number,
  opacity: ReactPropTypes.number,

  elevation: ReactPropTypes.number
});

module.exports = ViewStylePropTypes;
}, 296, null, "ViewStylePropTypes");
__d(/* processColor */function(global, require, module, exports) {
'use strict';

var Platform = require(192       ); // 192 = Platform

var normalizeColor = require(209             ); // 209 = normalizeColor

function processColor(color) {
  if (color === undefined || color === null) {
    return color;
  }

  var int32Color = normalizeColor(color);
  if (int32Color === null || int32Color === undefined) {
    return undefined;
  }

  int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

  if (Platform.OS === 'android') {
    int32Color = int32Color | 0x0;
  }
  return int32Color;
}

module.exports = processColor;
}, 297, null, "processColor");
__d(/* processTransform */function(global, require, module, exports) {
'use strict';

var MatrixMath = require(299         ); // 299 = MatrixMath
var Platform = require(192       ); // 192 = Platform

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var stringifySafe = require(190            ); // 190 = stringifySafe

function processTransform(transform) {
  if (__DEV__) {
    _validateTransforms(transform);
  }

  if (Platform.OS === 'android' || Platform.OS === 'ios') {
    return transform;
  }

  var result = MatrixMath.createIdentityMatrix();

  transform.forEach(function (transformation) {
    var key = Object.keys(transformation)[0];
    var value = transformation[key];

    switch (key) {
      case 'matrix':
        MatrixMath.multiplyInto(result, result, value);
        break;
      case 'perspective':
        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);
        break;
      case 'rotateX':
        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);
        break;
      case 'rotateY':
        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);
        break;
      case 'rotate':
      case 'rotateZ':
        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);
        break;
      case 'scale':
        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);
        break;
      case 'scaleX':
        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);
        break;
      case 'scaleY':
        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);
        break;
      case 'translate':
        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);
        break;
      case 'translateX':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);
        break;
      case 'translateY':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);
        break;
      case 'skewX':
        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);
        break;
      case 'skewY':
        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);
        break;
      default:
        throw new Error('Invalid transform name: ' + key);
    }
  });

  return result;
}

function _multiplyTransform(result, matrixMathFunction, args) {
  var matrixToApply = MatrixMath.createIdentityMatrix();
  var argsWithIdentity = [matrixToApply].concat(args);
  matrixMathFunction.apply(this, argsWithIdentity);
  MatrixMath.multiplyInto(result, result, matrixToApply);
}

function _convertToRadians(value) {
  var floatValue = parseFloat(value);
  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
}

function _validateTransforms(transform) {
  transform.forEach(function (transformation) {
    var keys = Object.keys(transformation);
    invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
    var key = keys[0];
    var value = transformation[key];
    _validateTransform(key, value, transformation);
  });
}

function _validateTransform(key, value, transformation) {
  invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');

  var multivalueTransforms = ['matrix', 'translate'];
  if (multivalueTransforms.indexOf(key) !== -1) {
    invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
  }
  switch (key) {
    case 'matrix':
      invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'translate':
      invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'rotateX':
    case 'rotateY':
    case 'rotateZ':
    case 'rotate':
    case 'skewX':
    case 'skewY':
      invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
      invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
      break;
    case 'perspective':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
      break;
    case 'translateX':
    case 'translateY':
    case 'scale':
    case 'scaleX':
    case 'scaleY':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      break;
    default:
      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
  }
}

module.exports = processTransform;
}, 298, null, "processTransform");
__d(/* MatrixMath */function(global, require, module, exports) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var MatrixMath = {
  createIdentityMatrix: function createIdentityMatrix() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  },

  createCopy: function createCopy(m) {
    return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
  },

  createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
    var a = 2 / (right - left);
    var b = 2 / (top - bottom);
    var c = -2 / (far - near);

    var tx = -(right + left) / (right - left);
    var ty = -(top + bottom) / (top - bottom);
    var tz = -(far + near) / (far - near);

    return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
  },

  createFrustum: function createFrustum(left, right, bottom, top, near, far) {
    var r_width = 1 / (right - left);
    var r_height = 1 / (top - bottom);
    var r_depth = 1 / (near - far);
    var x = 2 * (near * r_width);
    var y = 2 * (near * r_height);
    var A = (right + left) * r_width;
    var B = (top + bottom) * r_height;
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
  },

  createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
    var h = 1 / Math.tan(fovInRadians / 2);
    var r_depth = 1 / (near - far);
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
  },

  createTranslate2d: function createTranslate2d(x, y) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseTranslate2dCommand(mat, x, y);
    return mat;
  },

  reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
  },

  reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
    matrixCommand[14] = z;
  },

  createScale: function createScale(factor) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseScaleCommand(mat, factor);
    return mat;
  },

  reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
    matrixCommand[5] = factor;
  },

  reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
    matrixCommand[0] = x;
    matrixCommand[5] = y;
    matrixCommand[10] = z;
  },

  reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
    matrixCommand[11] = -1 / p;
  },

  reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
  },
  reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
    matrixCommand[5] = factor;
  },
  reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
    matrixCommand[10] = factor;
  },


  reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
    matrixCommand[5] = Math.cos(radians);
    matrixCommand[6] = Math.sin(radians);
    matrixCommand[9] = -Math.sin(radians);
    matrixCommand[10] = Math.cos(radians);
  },

  reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
    matrixCommand[0] = Math.cos(amount);
    matrixCommand[2] = -Math.sin(amount);
    matrixCommand[8] = Math.sin(amount);
    matrixCommand[10] = Math.cos(amount);
  },

  reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
    matrixCommand[0] = Math.cos(radians);
    matrixCommand[1] = Math.sin(radians);
    matrixCommand[4] = -Math.sin(radians);
    matrixCommand[5] = Math.cos(radians);
  },

  createRotateZ: function createRotateZ(radians) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseRotateZCommand(mat, radians);
    return mat;
  },

  reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
    matrixCommand[4] = Math.tan(radians);
  },

  reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
    matrixCommand[1] = Math.tan(radians);
  },

  multiplyInto: function multiplyInto(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];

    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  },

  determinant: function determinant(matrix) {
    var _matrix = _slicedToArray(matrix, 16),
        m00 = _matrix[0],
        m01 = _matrix[1],
        m02 = _matrix[2],
        m03 = _matrix[3],
        m10 = _matrix[4],
        m11 = _matrix[5],
        m12 = _matrix[6],
        m13 = _matrix[7],
        m20 = _matrix[8],
        m21 = _matrix[9],
        m22 = _matrix[10],
        m23 = _matrix[11],
        m30 = _matrix[12],
        m31 = _matrix[13],
        m32 = _matrix[14],
        m33 = _matrix[15];

    return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
  },
  inverse: function inverse(matrix) {
    var det = MatrixMath.determinant(matrix);
    if (!det) {
      return matrix;
    }

    var _matrix2 = _slicedToArray(matrix, 16),
        m00 = _matrix2[0],
        m01 = _matrix2[1],
        m02 = _matrix2[2],
        m03 = _matrix2[3],
        m10 = _matrix2[4],
        m11 = _matrix2[5],
        m12 = _matrix2[6],
        m13 = _matrix2[7],
        m20 = _matrix2[8],
        m21 = _matrix2[9],
        m22 = _matrix2[10],
        m23 = _matrix2[11],
        m30 = _matrix2[12],
        m31 = _matrix2[13],
        m32 = _matrix2[14],
        m33 = _matrix2[15];

    return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
  },
  transpose: function transpose(m) {
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
  },
  multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
    var _v = _slicedToArray(v, 4),
        vx = _v[0],
        vy = _v[1],
        vz = _v[2],
        vw = _v[3];

    return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
  },
  v3Length: function v3Length(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
  },
  v3Normalize: function v3Normalize(vector, v3Length) {
    var im = 1 / (v3Length || MatrixMath.v3Length(vector));
    return [vector[0] * im, vector[1] * im, vector[2] * im];
  },
  v3Dot: function v3Dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  },
  v3Combine: function v3Combine(a, b, aScale, bScale) {
    return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
  },
  v3Cross: function v3Cross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  },
  quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
    var _q = _slicedToArray(q, 4),
        qx = _q[0],
        qy = _q[1],
        qz = _q[2],
        qw = _q[3];

    var qw2 = qw * qw;
    var qx2 = qx * qx;
    var qy2 = qy * qy;
    var qz2 = qz * qz;
    var test = qx * qy + qz * qw;
    var unit = qw2 + qx2 + qy2 + qz2;
    var conv = 180 / Math.PI;

    if (test > 0.49999 * unit) {
      return [0, 2 * Math.atan2(qx, qw) * conv, 90];
    }
    if (test < -0.49999 * unit) {
      return [0, -2 * Math.atan2(qx, qw) * conv, -90];
    }

    return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
  },
  roundTo3Places: function roundTo3Places(n) {
    var arr = n.toString().split('e');
    return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
  },
  decomposeMatrix: function decomposeMatrix(transformMatrix) {

    invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);

    var perspective = [];
    var quaternion = [];
    var scale = [];
    var skew = [];
    var translation = [];

    if (!transformMatrix[15]) {
      return;
    }
    var matrix = [];
    var perspectiveMatrix = [];
    for (var i = 0; i < 4; i++) {
      matrix.push([]);
      for (var j = 0; j < 4; j++) {
        var value = transformMatrix[i * 4 + j] / transformMatrix[15];
        matrix[i].push(value);
        perspectiveMatrix.push(j === 3 ? 0 : value);
      }
    }
    perspectiveMatrix[15] = 1;

    if (!MatrixMath.determinant(perspectiveMatrix)) {
      return;
    }

    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
      var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];

      var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
      var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
      var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
    } else {
      perspective[0] = perspective[1] = perspective[2] = 0;
      perspective[3] = 1;
    }

    for (var i = 0; i < 3; i++) {
      translation[i] = matrix[3][i];
    }

    var row = [];
    for (i = 0; i < 3; i++) {
      row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
    }

    scale[0] = MatrixMath.v3Length(row[0]);
    row[0] = MatrixMath.v3Normalize(row[0], scale[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    scale[1] = MatrixMath.v3Length(row[1]);
    row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
    skew[0] /= scale[1];

    skew[1] = MatrixMath.v3Dot(row[0], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
    skew[2] = MatrixMath.v3Dot(row[1], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);

    scale[2] = MatrixMath.v3Length(row[2]);
    row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
    skew[1] /= scale[2];
    skew[2] /= scale[2];

    var pdum3 = MatrixMath.v3Cross(row[1], row[2]);
    if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
      for (i = 0; i < 3; i++) {
        scale[i] *= -1;
        row[i][0] *= -1;
        row[i][1] *= -1;
        row[i][2] *= -1;
      }
    }

    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

    if (row[2][1] > row[1][2]) {
      quaternion[0] = -quaternion[0];
    }
    if (row[0][2] > row[2][0]) {
      quaternion[1] = -quaternion[1];
    }
    if (row[1][0] > row[0][1]) {
      quaternion[2] = -quaternion[2];
    }

    var rotationDegrees;
    if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
      rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
    } else {
      rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
    }

    return {
      rotationDegrees: rotationDegrees,
      perspective: perspective,
      quaternion: quaternion,
      scale: scale,
      skew: skew,
      translation: translation,

      rotate: rotationDegrees[2],
      rotateX: rotationDegrees[0],
      rotateY: rotationDegrees[1],
      scaleX: scale[0],
      scaleY: scale[1],
      translateX: translation[0],
      translateY: translation[1]
    };
  }
};

module.exports = MatrixMath;
}, 299, null, "MatrixMath");
__d(/* sizesDiffer */function(global, require, module, exports) {
'use strict';

var dummySize = { width: undefined, height: undefined };

var sizesDiffer = function sizesDiffer(one, two) {
  one = one || dummySize;
  two = two || dummySize;
  return one !== two && (one.width !== two.width || one.height !== two.height);
};

module.exports = sizesDiffer;
}, 300, null, "sizesDiffer");
__d(/* ReactNativeViewAttributes */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ReactNativeStyleAttributes = require(287                         ); // 287 = ReactNativeStyleAttributes

var ReactNativeViewAttributes = {};

ReactNativeViewAttributes.UIView = {
  pointerEvents: true,
  accessible: true,
  accessibilityLabel: true,
  accessibilityComponentType: true,
  accessibilityLiveRegion: true,
  accessibilityTraits: true,
  importantForAccessibility: true,
  nativeID: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  collapsable: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes
};

ReactNativeViewAttributes.RCTView = _extends({}, ReactNativeViewAttributes.UIView, {
  removeClippedSubviews: true
});

module.exports = ReactNativeViewAttributes;
}, 301, null, "ReactNativeViewAttributes");
__d(/* ViewPropTypes */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var EdgeInsetsPropType = require(303                 ); // 303 = EdgeInsetsPropType
var PlatformViewPropTypes = require(308                    ); // 308 = PlatformViewPropTypes
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheetPropType = require(309                 ); // 309 = StyleSheetPropType
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var _require = require(310                ), // 310 = ViewAccessibility
    AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
    AccessibilityTraits = _require.AccessibilityTraits;

var stylePropType = StyleSheetPropType(ViewStylePropTypes);

module.exports = _extends({}, PlatformViewPropTypes, {
  accessible: PropTypes.bool,

  accessibilityLabel: PropTypes.node,

  accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),

  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),

  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),

  accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),

  accessibilityViewIsModal: PropTypes.bool,

  onAccessibilityTap: PropTypes.func,

  onMagicTap: PropTypes.func,

  testID: PropTypes.string,

  nativeID: PropTypes.string,

  onResponderGrant: PropTypes.func,

  onResponderMove: PropTypes.func,

  onResponderReject: PropTypes.func,

  onResponderRelease: PropTypes.func,

  onResponderTerminate: PropTypes.func,

  onResponderTerminationRequest: PropTypes.func,

  onStartShouldSetResponder: PropTypes.func,

  onStartShouldSetResponderCapture: PropTypes.func,

  onMoveShouldSetResponder: PropTypes.func,

  onMoveShouldSetResponderCapture: PropTypes.func,

  hitSlop: EdgeInsetsPropType,

  onLayout: PropTypes.func,

  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,

  removeClippedSubviews: PropTypes.bool,

  renderToHardwareTextureAndroid: PropTypes.bool,

  shouldRasterizeIOS: PropTypes.bool,

  collapsable: PropTypes.bool,

  needsOffscreenAlphaCompositing: PropTypes.bool
});
}, 302, null, "ViewPropTypes");
__d(/* EdgeInsetsPropType */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types

var createStrictShapeTypeChecker = require(304                           ); // 304 = createStrictShapeTypeChecker

var EdgeInsetsPropType = createStrictShapeTypeChecker({
  top: PropTypes.number,
  left: PropTypes.number,
  bottom: PropTypes.number,
  right: PropTypes.number
});

module.exports = EdgeInsetsPropType;
}, 303, null, "EdgeInsetsPropType");
__d(/* createStrictShapeTypeChecker */function(global, require, module, exports) {
'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var merge = require(305    ); // 305 = merge

function createStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, 'Required object `' + propName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      invariant(false, 'Invalid ' + locationName + ' `' + propName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }

    var allKeys = merge(props[propName], shapeTypes);

    for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    for (var key in allKeys) {
      var checker = shapeTypes[key];
      if (!checker) {
        invariant(false, 'Invalid props.' + propName + ' key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
      rest[_key2 - 4] = arguments[_key2];
    }

    return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = createStrictShapeTypeChecker;
}, 304, null, "createStrictShapeTypeChecker");
__d(/* merge */function(global, require, module, exports) {

"use strict";

var mergeInto = require(306        ); // 306 = mergeInto

var merge = function merge(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;
}, 305, null, "merge");
__d(/* mergeInto */function(global, require, module, exports) {

"use strict";

var mergeHelpers = require(307           ); // 307 = mergeHelpers

var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

function mergeInto(one, two) {
  checkMergeIntoObjectArg(one);
  if (two != null) {
    checkMergeObjectArg(two);
    for (var key in two) {
      if (!two.hasOwnProperty(key)) {
        continue;
      }
      one[key] = two[key];
    }
  }
}

module.exports = mergeInto;
}, 306, null, "mergeInto");
__d(/* mergeHelpers */function(global, require, module, exports) {

'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var MAX_MERGE_DEPTH = 36;

var isTerminal = function isTerminal(o) {
  return typeof o !== 'object' || o instanceof Date || o === null;
};

var mergeHelpers = {

  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

  isTerminal: isTerminal,

  normalizeMergeArg: function normalizeMergeArg(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },

  checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
    invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
  },

  checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },

  checkMergeObjectArg: function checkMergeObjectArg(arg) {
    invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
  },

  checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
    invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
  },

  checkMergeLevel: function checkMergeLevel(level) {
    invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
  },

  checkArrayStrategy: function checkArrayStrategy(strategy) {
    invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
  },

  ArrayStrategies: {
    Clobber: 'Clobber',
    Concat: 'Concat',
    IndexByIndex: 'IndexByIndex'
  }

};

module.exports = mergeHelpers;
}, 307, null, "mergeHelpers");
__d(/* PlatformViewPropTypes */function(global, require, module, exports) {

module.export = {};
}, 308, null, "PlatformViewPropTypes");
__d(/* StyleSheetPropType */function(global, require, module, exports) {
'use strict';

var createStrictShapeTypeChecker = require(304                           ); // 304 = createStrictShapeTypeChecker
var flattenStyle = require(273           ); // 273 = flattenStyle

function StyleSheetPropType(shape) {
  var shapePropType = createStrictShapeTypeChecker(shape);
  return function (props, propName, componentName, location) {
    var newProps = props;
    if (props[propName]) {
      newProps = {};
      newProps[propName] = flattenStyle(props[propName]);
    }

    for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
      rest[_key - 4] = arguments[_key];
    }

    return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
  };
}

module.exports = StyleSheetPropType;
}, 309, null, "StyleSheetPropType");
__d(/* ViewAccessibility */function(global, require, module, exports) {
'use strict';

module.exports = {
  AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
  AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
};
}, 310, null, "ViewAccessibility");
__d(/* create-react-class/index.js */function(global, require, module, exports) {

'use strict';

var React = require(13     ); // 13 = react
var factory = require(25         ); // 25 = ./factory

if (typeof React === 'undefined') {
  throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
}

var ReactNoopUpdateQueue = new React.Component().updater;

module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
}, 311, null, "create-react-class/index.js");
__d(/* requireNativeComponent */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ReactNativeStyleAttributes = require(287                         ); // 287 = ReactNativeStyleAttributes
var UIManager = require(279        ); // 279 = UIManager
var UnimplementedView = require(313                ); // 313 = UnimplementedView

var createReactNativeComponentClass = require(319                              ); // 319 = createReactNativeComponentClass
var insetsDiffer = require(320           ); // 320 = insetsDiffer
var matricesDiffer = require(321             ); // 321 = matricesDiffer
var pointsDiffer = require(322           ); // 322 = pointsDiffer
var processColor = require(297           ); // 297 = processColor
var resolveAssetSource = require(323                 ); // 323 = resolveAssetSource
var sizesDiffer = require(300          ); // 300 = sizesDiffer
var verifyPropTypes = require(327              ); // 327 = verifyPropTypes
var warning = require(199               ); // 199 = fbjs/lib/warning

function requireNativeComponent(viewName, componentInterface, extraConfig) {
  var viewConfig = UIManager[viewName];
  if (!viewConfig || !viewConfig.NativeProps) {
    warning(false, 'Native component for "%s" does not exist', viewName);
    return UnimplementedView;
  }

  viewConfig.uiViewClassName = viewName;
  viewConfig.validAttributes = {};

  if (componentInterface) {
    viewConfig.propTypes = typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
  } else {
    viewConfig.propTypes = null;
  }

  var baseModuleName = viewConfig.baseModuleName;
  var nativeProps = _extends({}, viewConfig.NativeProps);
  while (baseModuleName) {
    var baseModule = UIManager[baseModuleName];
    if (!baseModule) {
      warning(false, 'Base module "%s" does not exist', baseModuleName);
      baseModuleName = null;
    } else {
      nativeProps = _extends({}, nativeProps, baseModule.NativeProps);
      baseModuleName = baseModule.baseModuleName;
    }
  }

  for (var key in nativeProps) {
    var useAttribute = false;
    var attribute = {};

    var differ = TypeToDifferMap[nativeProps[key]];
    if (differ) {
      attribute.diff = differ;
      useAttribute = true;
    }

    var processor = TypeToProcessorMap[nativeProps[key]];
    if (processor) {
      attribute.process = processor;
      useAttribute = true;
    }

    viewConfig.validAttributes[key] = useAttribute ? attribute : true;
  }

  viewConfig.validAttributes.style = ReactNativeStyleAttributes;

  if (__DEV__) {
    componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
  }

  return createReactNativeComponentClass(viewConfig);
}

var TypeToDifferMap = {
  CATransform3D: matricesDiffer,
  CGPoint: pointsDiffer,
  CGSize: sizesDiffer,
  UIEdgeInsets: insetsDiffer
};

function processColorArray(colors) {
  return colors && colors.map(processColor);
}

var TypeToProcessorMap = {
  CGColor: processColor,
  CGColorArray: processColorArray,
  UIColor: processColor,
  UIColorArray: processColorArray,
  CGImage: resolveAssetSource,
  UIImage: resolveAssetSource,
  RCTImageSource: resolveAssetSource,

  Color: processColor,
  ColorArray: processColorArray
};

module.exports = requireNativeComponent;
}, 312, null, "requireNativeComponent");
__d(/* UnimplementedView */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\UnimplementedViews\\UnimplementedView.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  UnimplementedView: {
    displayName: 'UnimplementedView'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet

var UnimplementedView = _wrapComponent('UnimplementedView')(function (_React$Component) {
  _inherits(UnimplementedView, _React$Component);

  function UnimplementedView() {
    _classCallCheck(this, UnimplementedView);

    return _possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
  }

  _createClass(UnimplementedView, [{
    key: 'setNativeProps',
    value: function setNativeProps() {}
  }, {
    key: 'render',
    value: function render() {
      var View = require(285   ); // 285 = View
      return React.createElement(
        View,
        { style: [styles.unimplementedView, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 33
          }
        },
        this.props.children
      );
    }
  }]);

  return UnimplementedView;
}(React.Component));

var styles = StyleSheet.create({
  unimplementedView: __DEV__ ? {
    alignSelf: 'flex-start',
    borderColor: 'red',
    borderWidth: 1
  } : {}
});

module.exports = UnimplementedView;
}, 313, null, "UnimplementedView");
__d(/* StyleSheet */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var PixelRatio = require(315         ); // 315 = PixelRatio
var ReactNativePropRegistry = require(274                      ); // 274 = ReactNativePropRegistry
var ReactNativeStyleAttributes = require(287                         ); // 287 = ReactNativeStyleAttributes
var StyleSheetValidation = require(318                   ); // 318 = StyleSheetValidation

var flatten = require(273           ); // 273 = flattenStyle

var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
  hairlineWidth = 1 / PixelRatio.get();
}

var absoluteFillObject = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
module.exports = {
  hairlineWidth: hairlineWidth,

  absoluteFill: absoluteFill,

  absoluteFillObject: absoluteFillObject,

  flatten: flatten,

  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
    var value = void 0;

    if (typeof ReactNativeStyleAttributes[property] === 'string') {
      value = {};
    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
      value = ReactNativeStyleAttributes[property];
    } else {
      console.error(property + ' is not a valid style attribute');
      return;
    }

    if (__DEV__ && typeof value.process === 'function') {
      console.warn('Overwriting ' + property + ' style attribute preprocessor');
    }

    ReactNativeStyleAttributes[property] = _extends({}, value, { process: process });
  },
  create: function create(obj) {
    var result = {};
    for (var key in obj) {
      StyleSheetValidation.validateStyle(key, obj);
      result[key] = ReactNativePropRegistry.register(obj[key]);
    }
    return result;
  }
};
}, 314, null, "StyleSheet");
__d(/* PixelRatio */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dimensions = require(316         ); // 316 = Dimensions

var PixelRatio = function () {
  function PixelRatio() {
    _classCallCheck(this, PixelRatio);
  }

  _createClass(PixelRatio, null, [{
    key: 'get',
    value: function get() {
      return Dimensions.get('window').scale;
    }
  }, {
    key: 'getFontScale',
    value: function getFontScale() {
      return Dimensions.get('window').fontScale || PixelRatio.get();
    }
  }, {
    key: 'getPixelSizeForLayoutSize',
    value: function getPixelSizeForLayoutSize(layoutSize) {
      return Math.round(layoutSize * PixelRatio.get());
    }
  }, {
    key: 'roundToNearestPixel',
    value: function roundToNearestPixel(layoutSize) {
      var ratio = PixelRatio.get();
      return Math.round(layoutSize * ratio) / ratio;
    }
  }, {
    key: 'startDetecting',
    value: function startDetecting() {}
  }]);

  return PixelRatio;
}();

module.exports = PixelRatio;
}, 315, null, "PixelRatio");
__d(/* Dimensions */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DeviceInfo = require(317         ); // 317 = DeviceInfo
var EventEmitter = require(203           ); // 203 = EventEmitter
var Platform = require(192       ); // 192 = Platform
var RCTDeviceEventEmitter = require(202                    ); // 202 = RCTDeviceEventEmitter

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var eventEmitter = new EventEmitter();
var dimensionsInitialized = false;
var dimensions = {};

var Dimensions = function () {
  function Dimensions() {
    _classCallCheck(this, Dimensions);
  }

  _createClass(Dimensions, null, [{
    key: 'set',
    value: function set(dims) {
      if (dims && dims.windowPhysicalPixels) {
        dims = JSON.parse(JSON.stringify(dims));

        var windowPhysicalPixels = dims.windowPhysicalPixels;
        dims.window = {
          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
          scale: windowPhysicalPixels.scale,
          fontScale: windowPhysicalPixels.fontScale
        };
        if (Platform.OS === 'android') {
          var screenPhysicalPixels = dims.screenPhysicalPixels;
          dims.screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };

          delete dims.screenPhysicalPixels;
        } else {
          dims.screen = dims.window;
        }

        delete dims.windowPhysicalPixels;
      }

      _extends(dimensions, dims);
      if (dimensionsInitialized) {
        eventEmitter.emit('change', {
          window: dimensions.window,
          screen: dimensions.screen
        });
      } else {
        dimensionsInitialized = true;
      }
    }
  }, {
    key: 'get',
    value: function get(dim) {
      invariant(dimensions[dim], 'No dimension set for key ' + dim);
      return dimensions[dim];
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant('change' === type, 'Trying to subscribe to unknown event: "%s"', type);
      eventEmitter.addListener(type, handler);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant('change' === type, 'Trying to remove listener for unknown event: "%s"', type);
      eventEmitter.removeListener(type, handler);
    }
  }]);

  return Dimensions;
}();

Dimensions.set(DeviceInfo.Dimensions);
RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
  Dimensions.set(update);
});

module.exports = Dimensions;
}, 316, null, "Dimensions");
__d(/* DeviceInfo */function(global, require, module, exports) {
'use strict';

var DeviceInfo = require(184            ).DeviceInfo; // 184 = NativeModules

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');

module.exports = DeviceInfo;
}, 317, null, "DeviceInfo");
__d(/* StyleSheetValidation */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageStylePropTypes = require(288                  ); // 288 = ImageStylePropTypes
var TextStylePropTypes = require(295                 ); // 295 = TextStylePropTypes
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    _classCallCheck(this, StyleSheetValidation);
  }

  _createClass(StyleSheetValidation, null, [{
    key: 'validateStyleProp',
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__) {
        return;
      }
      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }
      var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);
      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: 'validateStyle',
    value: function validateStyle(name, styles) {
      if (!__DEV__) {
        return;
      }
      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: 'addValidStylePropTypes',
    value: function addValidStylePropTypes(stylePropTypes) {
      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);

  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};

StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);

module.exports = StyleSheetValidation;
}, 318, null, "StyleSheetValidation");
__d(/* createReactNativeComponentClass */function(global, require, module, exports) {

'use strict';

var _require = require(211          ), // 211 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
}, 319, null, "createReactNativeComponentClass");
__d(/* insetsDiffer */function(global, require, module, exports) {
'use strict';

var dummyInsets = {
  top: undefined,
  left: undefined,
  right: undefined,
  bottom: undefined
};

var insetsDiffer = function insetsDiffer(one, two) {
  one = one || dummyInsets;
  two = two || dummyInsets;
  return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
};

module.exports = insetsDiffer;
}, 320, null, "insetsDiffer");
__d(/* matricesDiffer */function(global, require, module, exports) {
'use strict';

var matricesDiffer = function matricesDiffer(one, two) {
  if (one === two) {
    return false;
  }
  return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
};

module.exports = matricesDiffer;
}, 321, null, "matricesDiffer");
__d(/* pointsDiffer */function(global, require, module, exports) {
'use strict';

var dummyPoint = { x: undefined, y: undefined };

var pointsDiffer = function pointsDiffer(one, two) {
  one = one || dummyPoint;
  two = two || dummyPoint;
  return one !== two && (one.x !== two.x || one.y !== two.y);
};

module.exports = pointsDiffer;
}, 322, null, "pointsDiffer");
__d(/* resolveAssetSource */function(global, require, module, exports) {
'use strict';

var AssetRegistry = require(324            ); // 324 = AssetRegistry
var AssetSourceResolver = require(325                  ); // 325 = AssetSourceResolver
var NativeModules = require(184            ); // 184 = NativeModules

var _customSourceTransformer = void 0,
    _serverURL = void 0,
    _bundleSourcePath = void 0;

function getDevServerURL() {
  if (_serverURL === undefined) {
    var scriptURL = NativeModules.SourceCode.scriptURL;
    var match = scriptURL && scriptURL.match(/^https?:\/\/.*?\//);
    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }
  return _serverURL;
}

function getBundleSourcePath() {
  if (_bundleSourcePath === undefined) {
    var scriptURL = NativeModules.SourceCode.scriptURL;
    if (!scriptURL) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('assets://')) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('file://')) {
      _bundleSourcePath = scriptURL.substring(7, scriptURL.lastIndexOf('/') + 1);
    } else {
      _bundleSourcePath = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
    }
  }

  return _bundleSourcePath;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);
  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getBundleSourcePath(), asset);
  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }
  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
}, 323, null, "resolveAssetSource");
__d(/* AssetRegistry */function(global, require, module, exports) {
'use strict';

var assets = [];

function registerAsset(asset) {
  return assets.push(asset);
}

function getAssetByID(assetId) {
  return assets[assetId - 1];
}

module.exports = { registerAsset: registerAsset, getAssetByID: getAssetByID };
}, 324, null, "AssetRegistry");
__d(/* AssetSourceResolver */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PixelRatio = require(315         ); // 315 = PixelRatio
var Platform = require(192       ); // 192 = Platform

var assetPathUtils = require(326                                    ); // 326 = ../../local-cli/bundle/assetPathUtils
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

function getScaledAssetPath(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = assetPathUtils.getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}

function getAssetPathInDrawableFolder(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = assetPathUtils.getAndroidDrawableFolderName(asset, scale);
  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}

var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, bundlePath, asset) {
    _classCallCheck(this, AssetSourceResolver);

    this.serverUrl = serverUrl;
    this.bundlePath = bundlePath;
    this.asset = asset;
  }

  _createClass(AssetSourceResolver, [{
    key: 'isLoadedFromServer',
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: 'isLoadedFromFileSystem',
    value: function isLoadedFromFileSystem() {
      return !!this.bundlePath;
    }
  }, {
    key: 'defaultAsset',
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }

      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetPathInBundle();
      }
    }
  }, {
    key: 'assetServerURL',
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: 'scaledAssetPath',
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: 'scaledAssetPathInBundle',
    value: function scaledAssetPathInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource(path + getScaledAssetPath(this.asset));
    }
  }, {
    key: 'resourceIdentifierWithoutScale',
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: 'drawableFolderInBundle',
    value: function drawableFolderInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource('file://' + path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: 'fromSource',
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }], [{
    key: 'pickScale',
    value: function pickScale(scales, deviceScale) {
      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }

      return scales[scales.length - 1] || 1;
    }
  }]);

  return AssetSourceResolver;
}();

module.exports = AssetSourceResolver;
}, 325, null, "AssetSourceResolver");
__d(/* react-native/local-cli/bundle/assetPathUtils.js */function(global, require, module, exports) {

'use strict';

function getAndroidAssetSuffix(scale) {
  switch (scale) {
    case 0.75:
      return 'ldpi';
    case 1:
      return 'mdpi';
    case 1.5:
      return 'hdpi';
    case 2:
      return 'xhdpi';
    case 3:
      return 'xxhdpi';
    case 4:
      return 'xxxhdpi';
  }
  throw new Error('no such scale');
}

function getAndroidDrawableFolderName(asset, scale) {
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
  }
  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}

function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }
  return basePath;
}

module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidDrawableFolderName: getAndroidDrawableFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
}, 326, null, "react-native/local-cli/bundle/assetPathUtils.js");
__d(/* verifyPropTypes */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(287                         ); // 287 = ReactNativeStyleAttributes

function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
  if (!viewConfig) {
    return;
  }
  var componentName = componentInterface.displayName || componentInterface.name || 'unknown';

  var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

  if (!propTypes) {
    throw new Error('`' + componentName + '` has no propTypes defined`');
  }

  var nativeProps = viewConfig.NativeProps;
  for (var prop in nativeProps) {
    if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
      var message;
      if (propTypes.hasOwnProperty(prop)) {
        message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
      } else {
        message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
      }
      message += '\nIf you haven\'t changed this prop yourself, this usually means that ' + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
      throw new Error(message);
    }
  }
}

module.exports = verifyPropTypes;
}, 327, null, "verifyPropTypes");
__d(/* ReactNativeFiber-prod */function(global, require, module, exports) {
"use strict";

var _extends2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var invariant = require(182                 ), // 182 = fbjs/lib/invariant
    warning = require(199               ), // 199 = fbjs/lib/warning
    ExceptionsManager = require(214                ); // 214 = ExceptionsManager

require(219             ); // 219 = InitializeCore

var RCTEventEmitter = require(278              ), // 278 = RCTEventEmitter
    emptyFunction = require(200                     ), // 200 = fbjs/lib/emptyFunction
    UIManager = require(279        ); // 279 = UIManager

require(23                         ); // 23 = prop-types/checkPropTypes

var emptyObject = require(280                   ), // 280 = fbjs/lib/emptyObject
    react = require(13     ), // 13 = react
    shallowEqual = require(281                    ), // 281 = fbjs/lib/shallowEqual
    deepDiffer = require(282         ), // 282 = deepDiffer
    flattenStyle = require(273           ), // 273 = flattenStyle
    TextInputState = require(283             ); // 283 = TextInputState

require(189                                ); // 189 = deepFreezeAndThrowOnMutationInDev

var defaultShowDialog = function defaultShowDialog(capturedError) {
    return !0;
},
    showDialog = defaultShowDialog;

function logCapturedError(capturedError) {
    if (!1 !== showDialog(capturedError)) {
        var _error = capturedError.error;
        console.error("React caught an error thrown by one of your components.\n\n" + _error.stack);
    }
}

var injection = {
    injectDialog: function injectDialog(fn) {
        invariant(showDialog === defaultShowDialog, "The custom dialog was already injected."), invariant("function" == typeof fn, "Injected showDialog() must be a function."), showDialog = fn;
    }
},
    logCapturedError_1 = logCapturedError,
    ReactFiberErrorLogger = {
    injection: injection,
    logCapturedError: logCapturedError_1
},
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
},
    _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection$1 = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected;
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection$1
},
    EventPluginUtils_1 = EventPluginUtils,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching;

function ReactNativeFiberErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error,
        errorToHandle = void 0;
    if (error instanceof Error) {
        var message = error.message,
            name = error.name,
            summary = message ? name + ": " + message : name;
        errorToHandle = error;
        try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
        } catch (e) {}
    } else errorToHandle = "string" == typeof error ? new Error(error + "\n\nThis error is located at:" + componentStack) : new Error("Unspecified error at:" + componentStack);
    return ExceptionsManager.handleException(errorToHandle, !1), !1;
}

var showDialog$1 = ReactNativeFiberErrorDialog,
    ReactNativeFiberErrorDialog_1 = {
    showDialog: showDialog$1
},
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: null,
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

_extends2(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            this[propName] = null;
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    _extends2(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = _extends2({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent,
    _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin,
    instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt || (rootNodeID = target)), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (var i = 0; i < touchBank.length; i++) {
            var touchTrackToCheck = touchBank[i];
            if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                touchHistory.indexOfSingleActiveTouch = i;
                break;
            }
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
},
    REACT_PORTAL_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") || 60106,
    createPortal = function createPortal(children, containerInfo, implementation) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
},
    isPortal = function isPortal(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_PORTAL_TYPE;
},
    REACT_PORTAL_TYPE_1 = REACT_PORTAL_TYPE,
    ReactPortal = {
    createPortal: createPortal,
    isPortal: isPortal,
    REACT_PORTAL_TYPE: REACT_PORTAL_TYPE_1
},
    commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {},
    ReactFeatureFlags = {
    disableNewFiberFeatures: !1,
    enableAsyncSubtreeAPI: !1
},
    ReactFeatureFlags_1 = ReactFeatureFlags,
    ReactTypeOfSideEffect = {
    NoEffect: 0,
    PerformedWork: 1,
    Placement: 2,
    Update: 4,
    PlacementAndUpdate: 6,
    Deletion: 8,
    ContentReset: 16,
    Callback: 32,
    Err: 64,
    Ref: 128
},
    ReactPriorityLevel = {
    NoWork: 0,
    SynchronousPriority: 1,
    TaskPriority: 2,
    HighPriority: 3,
    LowPriority: 4,
    OffscreenPriority: 5
},
    CallbackEffect = ReactTypeOfSideEffect.Callback,
    NoWork = ReactPriorityLevel.NoWork,
    SynchronousPriority = ReactPriorityLevel.SynchronousPriority,
    TaskPriority = ReactPriorityLevel.TaskPriority,
    ClassComponent = ReactTypeOfWork.ClassComponent,
    HostRoot = ReactTypeOfWork.HostRoot;

function comparePriority(a, b) {
    return a !== TaskPriority && a !== SynchronousPriority || b !== TaskPriority && b !== SynchronousPriority ? a === NoWork && b !== NoWork ? -255 : a !== NoWork && b === NoWork ? 255 : a - b : 0;
}

function createUpdateQueue() {
    return {
        first: null,
        last: null,
        hasForceUpdate: !1,
        callbackList: null
    };
}

function cloneUpdate(update) {
    return {
        priorityLevel: update.priorityLevel,
        partialState: update.partialState,
        callback: update.callback,
        isReplace: update.isReplace,
        isForced: update.isForced,
        isTopLevelUnmount: update.isTopLevelUnmount,
        next: null
    };
}

function insertUpdateIntoQueue(queue, update, insertAfter, insertBefore) {
    null !== insertAfter ? insertAfter.next = update : (update.next = queue.first, queue.first = update), null !== insertBefore ? update.next = insertBefore : queue.last = update;
}

function findInsertionPosition(queue, update) {
    var priorityLevel = update.priorityLevel,
        insertAfter = null,
        insertBefore = null;
    if (null !== queue.last && comparePriority(queue.last.priorityLevel, priorityLevel) <= 0) insertAfter = queue.last;else for (insertBefore = queue.first; null !== insertBefore && comparePriority(insertBefore.priorityLevel, priorityLevel) <= 0;) {
        insertAfter = insertBefore, insertBefore = insertBefore.next;
    }return insertAfter;
}

function ensureUpdateQueues(fiber) {
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue());
    var queue2 = void 0;
    return null !== alternateFiber ? null === (queue2 = alternateFiber.updateQueue) && (queue2 = alternateFiber.updateQueue = createUpdateQueue()) : queue2 = null, [queue1, queue2 !== queue1 ? queue2 : null];
}

function insertUpdate(fiber, update) {
    var _ensureUpdateQueues = ensureUpdateQueues(fiber),
        queue1 = _ensureUpdateQueues[0],
        queue2 = _ensureUpdateQueues[1],
        insertAfter1 = findInsertionPosition(queue1, update),
        insertBefore1 = null !== insertAfter1 ? insertAfter1.next : queue1.first;
    if (null === queue2) return insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), null;
    var insertAfter2 = findInsertionPosition(queue2, update),
        insertBefore2 = null !== insertAfter2 ? insertAfter2.next : queue2.first;
    if (insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), insertBefore1 === insertBefore2 && null !== insertBefore1 || insertAfter1 === insertAfter2 && null !== insertAfter1) return null === insertAfter2 && (queue2.first = update), null === insertBefore2 && (queue2.last = null), null;
    var update2 = cloneUpdate(update);
    return insertUpdateIntoQueue(queue2, update2, insertAfter2, insertBefore2), update2;
}

function addUpdate(fiber, partialState, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addUpdate_1 = addUpdate;

function addReplaceUpdate(fiber, state, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: state,
        callback: callback,
        isReplace: !0,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addReplaceUpdate_1 = addReplaceUpdate;

function addForceUpdate(fiber, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: null,
        callback: callback,
        isReplace: !1,
        isForced: !0,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addForceUpdate_1 = addForceUpdate;

function getUpdatePriority(fiber) {
    var updateQueue = fiber.updateQueue;
    return null === updateQueue ? NoWork : fiber.tag !== ClassComponent && fiber.tag !== HostRoot ? NoWork : null !== updateQueue.first ? updateQueue.first.priorityLevel : NoWork;
}

var getUpdatePriority_1 = getUpdatePriority;

function addTopLevelUpdate$1(fiber, partialState, callback, priorityLevel) {
    var isTopLevelUnmount = null === partialState.element,
        update = {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: isTopLevelUnmount,
        next: null
    },
        update2 = insertUpdate(fiber, update);
    if (isTopLevelUnmount) {
        var _ensureUpdateQueues2 = ensureUpdateQueues(fiber),
            queue1 = _ensureUpdateQueues2[0],
            queue2 = _ensureUpdateQueues2[1];
        null !== queue1 && null !== update.next && (update.next = null, queue1.last = update), null !== queue2 && null !== update2 && null !== update2.next && (update2.next = null, queue2.last = update);
    }
}

var addTopLevelUpdate_1 = addTopLevelUpdate$1;

function getStateFromUpdate(update, instance, prevState, props) {
    var partialState = update.partialState;
    if ("function" == typeof partialState) {
        return partialState.call(instance, prevState, props);
    }
    return partialState;
}

function beginUpdateQueue(current, workInProgress, queue, instance, prevState, props, priorityLevel) {
    if (null !== current && current.updateQueue === queue) {
        var currentQueue = queue;
        queue = workInProgress.updateQueue = {
            first: currentQueue.first,
            last: currentQueue.last,
            callbackList: null,
            hasForceUpdate: !1
        };
    }
    for (var callbackList = queue.callbackList, hasForceUpdate = queue.hasForceUpdate, state = prevState, dontMutatePrevState = !0, update = queue.first; null !== update && comparePriority(update.priorityLevel, priorityLevel) <= 0;) {
        queue.first = update.next, null === queue.first && (queue.last = null);
        var _partialState = void 0;
        update.isReplace ? (state = getStateFromUpdate(update, instance, state, props), dontMutatePrevState = !0) : (_partialState = getStateFromUpdate(update, instance, state, props)) && (state = dontMutatePrevState ? _extends2({}, state, _partialState) : _extends2(state, _partialState), dontMutatePrevState = !1), update.isForced && (hasForceUpdate = !0), null === update.callback || update.isTopLevelUnmount && null !== update.next || (callbackList = null !== callbackList ? callbackList : [], callbackList.push(update.callback), workInProgress.effectTag |= CallbackEffect), update = update.next;
    }
    return queue.callbackList = callbackList, queue.hasForceUpdate = hasForceUpdate, null !== queue.first || null !== callbackList || hasForceUpdate || (workInProgress.updateQueue = null), state;
}

var beginUpdateQueue_1 = beginUpdateQueue;

function commitCallbacks(finishedWork, queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) {
        queue.callbackList = null;
        for (var i = 0; i < callbackList.length; i++) {
            var _callback = callbackList[i];
            invariant("function" == typeof _callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback), _callback.call(context);
        }
    }
}

var commitCallbacks_1 = commitCallbacks,
    ReactFiberUpdateQueue = {
    addUpdate: addUpdate_1,
    addReplaceUpdate: addReplaceUpdate_1,
    addForceUpdate: addForceUpdate_1,
    getUpdatePriority: getUpdatePriority_1,
    addTopLevelUpdate: addTopLevelUpdate_1,
    beginUpdateQueue: beginUpdateQueue_1,
    commitCallbacks: commitCallbacks_1
};

function getComponentName$1(instanceOrFiber) {
    if ("function" == typeof instanceOrFiber.getName) {
        return instanceOrFiber.getName();
    }
    if ("number" == typeof instanceOrFiber.tag) {
        var fiber = instanceOrFiber,
            type = fiber.type;
        if ("string" == typeof type) return type;
        if ("function" == typeof type) return type.displayName || type.name;
    }
    return null;
}

var getComponentName_1 = getComponentName$1,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    ReactInternals = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
},
    ReactGlobalSharedState_1 = ReactGlobalSharedState,
    HostRoot$2 = ReactTypeOfWork.HostRoot,
    HostComponent$2 = ReactTypeOfWork.HostComponent,
    HostText = ReactTypeOfWork.HostText,
    NoEffect = ReactTypeOfSideEffect.NoEffect,
    Placement = ReactTypeOfSideEffect.Placement,
    MOUNTING = 1,
    MOUNTED = 2,
    UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
        node = node.return;
    } else {
        if ((node.effectTag & Placement) !== NoEffect) return MOUNTING;
        for (; node.return;) {
            if (node = node.return, (node.effectTag & Placement) !== NoEffect) return MOUNTING;
        }
    }
    return node.tag === HostRoot$2 ? MOUNTED : UNMOUNTED;
}

var isFiberMounted$1 = function isFiberMounted$1(fiber) {
    return isFiberMountedImpl(fiber) === MOUNTED;
},
    isMounted = function isMounted(component) {
    var fiber = ReactInstanceMap_1.get(component);
    return !!fiber && isFiberMountedImpl(fiber) === MOUNTED;
};

function assertIsMounted(fiber) {
    invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
}

function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        var state = isFiberMountedImpl(fiber);
        return invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component."), state === MOUNTING ? null : fiber;
    }
    for (var a = fiber, b = alternate; !0;) {
        var parentA = a.return,
            parentB = parentA ? parentA.alternate : null;
        if (!parentA || !parentB) break;
        if (parentA.child === parentB.child) {
            for (var child = parentA.child; child;) {
                if (child === a) return assertIsMounted(parentA), fiber;
                if (child === b) return assertIsMounted(parentA), alternate;
                child = child.sibling;
            }
            invariant(!1, "Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;else {
            for (var didFindChild = !1, _child = parentA.child; _child;) {
                if (_child === a) {
                    didFindChild = !0, a = parentA, b = parentB;
                    break;
                }
                if (_child === b) {
                    didFindChild = !0, b = parentA, a = parentB;
                    break;
                }
                _child = _child.sibling;
            }
            if (!didFindChild) {
                for (_child = parentB.child; _child;) {
                    if (_child === a) {
                        didFindChild = !0, a = parentB, b = parentA;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = !0, b = parentB, a = parentA;
                        break;
                    }
                    _child = _child.sibling;
                }
                invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "related to the return pointer.");
            }
        }
        invariant(a.alternate === b, "Return fibers should always be each others' alternates.");
    }
    return invariant(a.tag === HostRoot$2, "Unable to find node on an unmounted component."), a.stateNode.current === a ? fiber : alternate;
}

var findCurrentFiberUsingSlowPath_1 = findCurrentFiberUsingSlowPath,
    findCurrentHostFiber$1 = function findCurrentHostFiber$1(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) return null;
    for (var node = currentParent; !0;) {
        if (node.tag === HostComponent$2 || node.tag === HostText) return node;
        if (node.child) node.child.return = node, node = node.child;else {
            if (node === currentParent) return null;
            for (; !node.sibling;) {
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    return null;
},
    ReactFiberTreeReflection = {
    isFiberMounted: isFiberMounted$1,
    isMounted: isMounted,
    findCurrentFiberUsingSlowPath: findCurrentFiberUsingSlowPath_1,
    findCurrentHostFiber: findCurrentHostFiber$1
},
    valueStack = [],
    index = -1,
    createCursor$1 = function createCursor$1(defaultValue) {
    return {
        current: defaultValue
    };
},
    isEmpty = function isEmpty() {
    return -1 === index;
},
    pop$1 = function pop$1(cursor, fiber) {
    index < 0 || (cursor.current = valueStack[index], valueStack[index] = null, index--);
},
    push$1 = function push$1(cursor, value, fiber) {
    index++, valueStack[index] = cursor.current, cursor.current = value;
},
    reset = function reset() {
    for (; index > -1;) {
        valueStack[index] = null, index--;
    }
},
    ReactFiberStack = {
    createCursor: createCursor$1,
    isEmpty: isEmpty,
    pop: pop$1,
    push: push$1,
    reset: reset
},
    _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    isFiberMounted = ReactFiberTreeReflection.isFiberMounted,
    ClassComponent$1 = ReactTypeOfWork.ClassComponent,
    HostRoot$1 = ReactTypeOfWork.HostRoot,
    createCursor = ReactFiberStack.createCursor,
    pop = ReactFiberStack.pop,
    push = ReactFiberStack.push,
    contextStackCursor = createCursor(emptyObject),
    didPerformWorkStackCursor = createCursor(!1),
    previousContext = emptyObject;

function getUnmaskedContext(workInProgress) {
    return isContextProvider$1(workInProgress) ? previousContext : contextStackCursor.current;
}

var getUnmaskedContext_1 = getUnmaskedContext;

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

var cacheContext_1 = cacheContext,
    getMaskedContext = function getMaskedContext(workInProgress, unmaskedContext) {
    var type = workInProgress.type,
        contextTypes = type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {};
    for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
    }return instance && cacheContext(workInProgress, unmaskedContext, context), context;
},
    hasContextChanged = function hasContextChanged() {
    return didPerformWorkStackCursor.current;
};

function isContextConsumer(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.contextTypes;
}

var isContextConsumer_1 = isContextConsumer;

function isContextProvider$1(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.childContextTypes;
}

var isContextProvider_1 = isContextProvider$1;

function popContextProvider(fiber) {
    isContextProvider$1(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
}

var popContextProvider_1 = popContextProvider,
    pushTopLevelContextObject = function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack"), push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
};

function processChildContext$1(fiber, parentContext, isReconciling) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" != typeof instance.getChildContext) return parentContext;
    var childContext = void 0;
    childContext = instance.getChildContext();
    for (var contextKey in childContext) {
        invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName_1(fiber) || "Unknown", contextKey);
    }return _extends$2({}, parentContext, childContext);
}

var processChildContext_1 = processChildContext$1,
    pushContextProvider = function pushContextProvider(workInProgress) {
    if (!isContextProvider$1(workInProgress)) return !1;
    var instance = workInProgress.stateNode,
        memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress), push(didPerformWorkStackCursor, !1, workInProgress), !0;
},
    invalidateContextProvider = function invalidateContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point.");
    var mergedContext = processChildContext$1(workInProgress, previousContext, !0);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, mergedContext, workInProgress), push(didPerformWorkStackCursor, !0, workInProgress);
},
    resetContext = function resetContext() {
    previousContext = emptyObject, contextStackCursor.current = emptyObject, didPerformWorkStackCursor.current = !1;
},
    findCurrentUnmaskedContext$1 = function findCurrentUnmaskedContext$1(fiber) {
    invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent$1, "Expected subtree parent to be a mounted class component");
    for (var node = fiber; node.tag !== HostRoot$1;) {
        if (isContextProvider$1(node)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
        var parent = node.return;
        invariant(parent, "Found unexpected detached subtree parent"), node = parent;
    }
    return node.stateNode.context;
},
    ReactFiberContext = {
    getUnmaskedContext: getUnmaskedContext_1,
    cacheContext: cacheContext_1,
    getMaskedContext: getMaskedContext,
    hasContextChanged: hasContextChanged,
    isContextConsumer: isContextConsumer_1,
    isContextProvider: isContextProvider_1,
    popContextProvider: popContextProvider_1,
    pushTopLevelContextObject: pushTopLevelContextObject,
    processChildContext: processChildContext_1,
    pushContextProvider: pushContextProvider,
    invalidateContextProvider: invalidateContextProvider,
    resetContext: resetContext,
    findCurrentUnmaskedContext: findCurrentUnmaskedContext$1
},
    ReactTypeOfInternalContext = {
    NoContext: 0,
    AsyncUpdates: 1
},
    IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,
    ClassComponent$3 = ReactTypeOfWork.ClassComponent,
    HostRoot$3 = ReactTypeOfWork.HostRoot,
    HostComponent$3 = ReactTypeOfWork.HostComponent,
    HostText$1 = ReactTypeOfWork.HostText,
    HostPortal = ReactTypeOfWork.HostPortal,
    CoroutineComponent = ReactTypeOfWork.CoroutineComponent,
    YieldComponent = ReactTypeOfWork.YieldComponent,
    Fragment = ReactTypeOfWork.Fragment,
    NoWork$1 = ReactPriorityLevel.NoWork,
    NoContext = ReactTypeOfInternalContext.NoContext,
    NoEffect$1 = ReactTypeOfSideEffect.NoEffect,
    createFiber = function createFiber(tag, key, internalContextTag) {
    return {
        tag: tag,
        key: key,
        type: null,
        stateNode: null,
        return: null,
        child: null,
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: null,
        updateQueue: null,
        memoizedState: null,
        internalContextTag: internalContextTag,
        effectTag: NoEffect$1,
        nextEffect: null,
        firstEffect: null,
        lastEffect: null,
        pendingWorkPriority: NoWork$1,
        alternate: null
    };
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

var createWorkInProgress = function createWorkInProgress(current, renderPriority) {
    var workInProgress = current.alternate;
    return null === workInProgress ? (workInProgress = createFiber(current.tag, current.key, current.internalContextTag), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.effectTag = NoWork$1, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null), workInProgress.pendingWorkPriority = renderPriority, workInProgress.child = current.child, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.sibling = current.sibling, workInProgress.index = current.index, workInProgress.ref = current.ref, workInProgress;
},
    createHostRootFiber$1 = function createHostRootFiber$1() {
    return createFiber(HostRoot$3, null, NoContext);
},
    createFiberFromElement = function createFiberFromElement(element, internalContextTag, priorityLevel) {
    var owner = null,
        fiber = createFiberFromElementType(element.type, element.key, internalContextTag, owner);
    return fiber.pendingProps = element.props, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromFragment = function createFiberFromFragment(elements, internalContextTag, priorityLevel) {
    var fiber = createFiber(Fragment, null, internalContextTag);
    return fiber.pendingProps = elements, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromText = function createFiberFromText(content, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostText$1, null, internalContextTag);
    return fiber.pendingProps = content, fiber.pendingWorkPriority = priorityLevel, fiber;
};

function createFiberFromElementType(type, key, internalContextTag, debugOwner) {
    var fiber = void 0;
    if ("function" == typeof type) fiber = shouldConstruct(type) ? createFiber(ClassComponent$3, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag), fiber.type = type;else if ("string" == typeof type) fiber = createFiber(HostComponent$3, key, internalContextTag), fiber.type = type;else if ("object" == typeof type && null !== type && "number" == typeof type.tag) fiber = type;else {
        var info = "";
        invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
    }
    return fiber;
}

var createFiberFromElementType_1 = createFiberFromElementType,
    createFiberFromHostInstanceForDeletion = function createFiberFromHostInstanceForDeletion() {
    var fiber = createFiber(HostComponent$3, null, NoContext);
    return fiber.type = "DELETED", fiber;
},
    createFiberFromCoroutine = function createFiberFromCoroutine(coroutine, internalContextTag, priorityLevel) {
    var fiber = createFiber(CoroutineComponent, coroutine.key, internalContextTag);
    return fiber.type = coroutine.handler, fiber.pendingProps = coroutine, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromYield = function createFiberFromYield(yieldNode, internalContextTag, priorityLevel) {
    return createFiber(YieldComponent, null, internalContextTag);
},
    createFiberFromPortal = function createFiberFromPortal(portal, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostPortal, portal.key, internalContextTag);
    return fiber.pendingProps = portal.children || [], fiber.pendingWorkPriority = priorityLevel, fiber.stateNode = {
        containerInfo: portal.containerInfo,
        implementation: portal.implementation
    }, fiber;
},
    largerPriority = function largerPriority(p1, p2) {
    return p1 !== NoWork$1 && (p2 === NoWork$1 || p2 > p1) ? p1 : p2;
},
    ReactFiber = {
    createWorkInProgress: createWorkInProgress,
    createHostRootFiber: createHostRootFiber$1,
    createFiberFromElement: createFiberFromElement,
    createFiberFromFragment: createFiberFromFragment,
    createFiberFromText: createFiberFromText,
    createFiberFromElementType: createFiberFromElementType_1,
    createFiberFromHostInstanceForDeletion: createFiberFromHostInstanceForDeletion,
    createFiberFromCoroutine: createFiberFromCoroutine,
    createFiberFromYield: createFiberFromYield,
    createFiberFromPortal: createFiberFromPortal,
    largerPriority: largerPriority
},
    createHostRootFiber = ReactFiber.createHostRootFiber,
    createFiberRoot$1 = function createFiberRoot$1(containerInfo) {
    var uninitializedFiber = createHostRootFiber(),
        root = {
        current: uninitializedFiber,
        containerInfo: containerInfo,
        isScheduled: !1,
        nextScheduledRoot: null,
        context: null,
        pendingContext: null
    };
    return uninitializedFiber.stateNode = root, root;
},
    ReactFiberRoot = {
    createFiberRoot: createFiberRoot$1
},
    IndeterminateComponent$1 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$5 = ReactTypeOfWork.ClassComponent,
    HostComponent$5 = ReactTypeOfWork.HostComponent;

function describeComponentFrame(name, source, ownerName) {
    return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
}

function describeFiber(fiber) {
    switch (fiber.tag) {
        case IndeterminateComponent$1:
        case FunctionalComponent:
        case ClassComponent$5:
        case HostComponent$5:
            var owner = fiber._debugOwner,
                source = fiber._debugSource,
                name = getComponentName_1(fiber),
                ownerName = null;
            return owner && (ownerName = getComponentName_1(owner)), describeComponentFrame(name, source, ownerName);

        default:
            return "";
    }
}

function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
    var info = "",
        node = workInProgress;
    do {
        info += describeFiber(node), node = node.return;
    } while (node);
    return info;
}

var ReactFiberComponentTreeHook = {
    getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1,
    describeComponentFrame: describeComponentFrame
},
    REACT_COROUTINE_TYPE$1,
    REACT_YIELD_TYPE$1;

"function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") ? (REACT_COROUTINE_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.coroutine"), REACT_YIELD_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.yield")) : (REACT_COROUTINE_TYPE$1 = 60104, REACT_YIELD_TYPE$1 = 60105);

var createCoroutine = function createCoroutine(children, handler, props) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_COROUTINE_TYPE$1,
        key: null == key ? null : "" + key,
        children: children,
        handler: handler,
        props: props
    };
},
    createYield = function createYield(value) {
    return {
        $$typeof: REACT_YIELD_TYPE$1,
        value: value
    };
},
    isCoroutine = function isCoroutine(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_COROUTINE_TYPE$1;
},
    isYield = function isYield(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_YIELD_TYPE$1;
},
    REACT_YIELD_TYPE_1 = REACT_YIELD_TYPE$1,
    REACT_COROUTINE_TYPE_1 = REACT_COROUTINE_TYPE$1,
    ReactCoroutine = {
    createCoroutine: createCoroutine,
    createYield: createYield,
    isCoroutine: isCoroutine,
    isYield: isYield,
    REACT_YIELD_TYPE: REACT_YIELD_TYPE_1,
    REACT_COROUTINE_TYPE: REACT_COROUTINE_TYPE_1
},
    REACT_COROUTINE_TYPE = ReactCoroutine.REACT_COROUTINE_TYPE,
    REACT_YIELD_TYPE = ReactCoroutine.REACT_YIELD_TYPE,
    REACT_PORTAL_TYPE$1 = ReactPortal.REACT_PORTAL_TYPE,
    createWorkInProgress$2 = ReactFiber.createWorkInProgress,
    createFiberFromElement$1 = ReactFiber.createFiberFromElement,
    createFiberFromFragment$1 = ReactFiber.createFiberFromFragment,
    createFiberFromText$1 = ReactFiber.createFiberFromText,
    createFiberFromCoroutine$1 = ReactFiber.createFiberFromCoroutine,
    createFiberFromYield$1 = ReactFiber.createFiberFromYield,
    createFiberFromPortal$1 = ReactFiber.createFiberFromPortal,
    isArray = Array.isArray,
    FunctionalComponent$2 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$7 = ReactTypeOfWork.ClassComponent,
    HostText$3 = ReactTypeOfWork.HostText,
    HostPortal$3 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$2 = ReactTypeOfWork.CoroutineComponent,
    YieldComponent$2 = ReactTypeOfWork.YieldComponent,
    Fragment$2 = ReactTypeOfWork.Fragment,
    NoEffect$2 = ReactTypeOfSideEffect.NoEffect,
    Placement$3 = ReactTypeOfSideEffect.Placement,
    Deletion$1 = ReactTypeOfSideEffect.Deletion,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103;

function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || void 0 === maybeIterable) return null;
    var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    return "function" == typeof iteratorFn ? iteratorFn : null;
}

function coerceRef(current, element) {
    var mixedRef = element.ref;
    if (null !== mixedRef && "function" != typeof mixedRef && element._owner) {
        var owner = element._owner,
            inst = void 0;
        if (owner) if ("number" == typeof owner.tag) {
            var ownerFiber = owner;
            invariant(ownerFiber.tag === ClassComponent$7, "Stateless function components cannot have refs."), inst = ownerFiber.stateNode;
        } else inst = owner.getPublicInstance();
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
        var stringRef = "" + mixedRef;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;
        var ref = function ref(value) {
            var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
            null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        return ref._stringRef = stringRef, ref;
    }
    return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) {
        invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
    }
}

function ChildReconciler(shouldClone, shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            if (!shouldClone) {
                if (null === childToDelete.alternate) return;
                childToDelete = childToDelete.alternate;
            }
            var last = returnFiber.lastEffect;
            null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete, childToDelete.nextEffect = null, childToDelete.effectTag = Deletion$1;
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for (var childToDelete = currentFirstChild; null !== childToDelete;) {
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
        }return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
        for (var existingChildren = new Map(), existingChild = currentFirstChild; null !== existingChild;) {
            null !== existingChild.key ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
        }return existingChildren;
    }
    function useFiber(fiber, priority) {
        if (shouldClone) {
            var clone = createWorkInProgress$2(fiber, priority);
            return clone.index = 0, clone.sibling = null, clone;
        }
        return fiber.pendingWorkPriority = priority, fiber.effectTag = NoEffect$2, fiber.index = 0, fiber.sibling = null, fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        if (newFiber.index = newIndex, !shouldTrackSideEffects) return lastPlacedIndex;
        var current = newFiber.alternate;
        if (null !== current) {
            var oldIndex = current.index;
            return oldIndex < lastPlacedIndex ? (newFiber.effectTag = Placement$3, lastPlacedIndex) : oldIndex;
        }
        return newFiber.effectTag = Placement$3, lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        return shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = Placement$3), newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, priority) {
        if (null === current || current.tag !== HostText$3) {
            var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = textContent, existing.return = returnFiber, existing;
    }
    function updateElement(returnFiber, current, element, priority) {
        if (null === current || current.type !== element.type) {
            var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
            return created.ref = coerceRef(current, element), created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.ref = coerceRef(current, element), existing.pendingProps = element.props, existing.return = returnFiber, existing;
    }
    function updateCoroutine(returnFiber, current, coroutine, priority) {
        if (null === current || current.tag !== CoroutineComponent$2) {
            var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
    }
    function updateYield(returnFiber, current, yieldNode, priority) {
        if (null === current || current.tag !== YieldComponent$2) {
            var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
            return created.type = yieldNode.value, created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.type = yieldNode.value, existing.return = returnFiber, existing;
    }
    function updatePortal(returnFiber, current, portal, priority) {
        if (null === current || current.tag !== HostPortal$3 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
    }
    function updateFragment(returnFiber, current, fragment, priority) {
        if (null === current || current.tag !== Fragment$2) {
            var created = createFiberFromFragment$1(fragment, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = fragment, existing.return = returnFiber, existing;
    }
    function createChild(returnFiber, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            var created = createFiberFromText$1("" + newChild, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    var _created = createFiberFromElement$1(newChild, returnFiber.internalContextTag, priority);
                    return _created.ref = coerceRef(null, newChild), _created.return = returnFiber, _created;

                case REACT_COROUTINE_TYPE:
                    var _created2 = createFiberFromCoroutine$1(newChild, returnFiber.internalContextTag, priority);
                    return _created2.return = returnFiber, _created2;

                case REACT_YIELD_TYPE:
                    var _created3 = createFiberFromYield$1(newChild, returnFiber.internalContextTag, priority);
                    return _created3.type = newChild.value, _created3.return = returnFiber, _created3;

                case REACT_PORTAL_TYPE$1:
                    var _created4 = createFiberFromPortal$1(newChild, returnFiber.internalContextTag, priority);
                    return _created4.return = returnFiber, _created4;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created5 = createFiberFromFragment$1(newChild, returnFiber.internalContextTag, priority);
                return _created5.return = returnFiber, _created5;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, priority) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" == typeof newChild || "number" == typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, priority);
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_COROUTINE_TYPE:
                    return newChild.key === key ? updateCoroutine(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_YIELD_TYPE:
                    return null === key ? updateYield(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_PORTAL_TYPE$1:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, priority) : null;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, priority);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            return updateTextNode(returnFiber, existingChildren.get(newIdx) || null, "" + newChild, priority);
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return updateElement(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_COROUTINE_TYPE:
                    return updateCoroutine(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_YIELD_TYPE:
                    return updateYield(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);

                case REACT_PORTAL_TYPE$1:
                    return updatePortal(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                return updateFragment(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, priority) {
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], priority);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], priority);
                _newFiber && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], priority);
            _newFiber2 && (shouldTrackSideEffects && null !== _newFiber2.alternate && existingChildren.delete(null === _newFiber2.key ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, priority) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        invariant("function" == typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
        var newChildren = iteratorFn.call(newChildrenIterable);
        invariant(null != newChildren, "An iterable object provided no iterator.");
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, priority);
            if (null === newFiber) {
                oldFiber || (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, priority);
                null !== _newFiber3 && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, priority);
            null !== _newFiber4 && (shouldTrackSideEffects && null !== _newFiber4.alternate && existingChildren.delete(null === _newFiber4.key ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, priority) {
        if (null !== currentFirstChild && currentFirstChild.tag === HostText$3) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, priority);
            return existing.pendingProps = textContent, existing.return = returnFiber, existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleElement(returnFiber, currentFirstChild, element, priority) {
        for (var key = element.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.type === element.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.ref = coerceRef(child, element), existing.pendingProps = element.props, existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
        return created.ref = coerceRef(currentFirstChild, element), created.return = returnFiber, created;
    }
    function reconcileSingleCoroutine(returnFiber, currentFirstChild, coroutine, priority) {
        for (var key = coroutine.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === CoroutineComponent$2) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleYield(returnFiber, currentFirstChild, yieldNode, priority) {
        var child = currentFirstChild;
        if (null !== child) {
            if (child.tag === YieldComponent$2) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, priority);
                return existing.type = yieldNode.value, existing.return = returnFiber, existing;
            }
            deleteRemainingChildren(returnFiber, child);
        }
        var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
        return created.type = yieldNode.value, created.return = returnFiber, created;
    }
    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, priority) {
        for (var key = portal.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === HostPortal$3 && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, priority) {
        var disableNewFiberFeatures = ReactFeatureFlags_1.disableNewFiberFeatures,
            isObject = "object" == typeof newChild && null !== newChild;
        if (isObject) if (disableNewFiberFeatures) switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        } else switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_COROUTINE_TYPE:
                return placeSingleChild(reconcileSingleCoroutine(returnFiber, currentFirstChild, newChild, priority));

            case REACT_YIELD_TYPE:
                return placeSingleChild(reconcileSingleYield(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        }
        if (disableNewFiberFeatures) switch (returnFiber.tag) {
            case ClassComponent$7:
                var Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s.render(): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", Component.displayName || Component.name || "Component");
                break;

            case FunctionalComponent$2:
                var _Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s(...): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", _Component.displayName || _Component.name || "Component");
        }
        if ("string" == typeof newChild || "number" == typeof newChild) return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, priority));
        if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, priority);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, priority);
        if (isObject && throwOnInvalidObjectType(returnFiber, newChild), !disableNewFiberFeatures && void 0 === newChild) switch (returnFiber.tag) {
            case ClassComponent$7:
            case FunctionalComponent$2:
                var _Component2 = returnFiber.type;
                invariant(!1, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", _Component2.displayName || _Component2.name || "Component");
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
}

var reconcileChildFibers$1 = ChildReconciler(!0, !0),
    reconcileChildFibersInPlace$1 = ChildReconciler(!1, !0),
    mountChildFibersInPlace$1 = ChildReconciler(!1, !1),
    cloneChildFibers$1 = function cloneChildFibers$1(current, workInProgress) {
    if (invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented."), null !== workInProgress.child) {
        var currentChild = workInProgress.child,
            newChild = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
        for (newChild.pendingProps = currentChild.pendingProps, workInProgress.child = newChild, newChild.return = workInProgress; null !== currentChild.sibling;) {
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority), newChild.pendingProps = currentChild.pendingProps, newChild.return = workInProgress;
        }newChild.sibling = null;
    }
},
    ReactChildFiber = {
    reconcileChildFibers: reconcileChildFibers$1,
    reconcileChildFibersInPlace: reconcileChildFibersInPlace$1,
    mountChildFibersInPlace: mountChildFibersInPlace$1,
    cloneChildFibers: cloneChildFibers$1
},
    Update$1 = ReactTypeOfSideEffect.Update,
    AsyncUpdates$1 = ReactTypeOfInternalContext.AsyncUpdates,
    cacheContext$1 = ReactFiberContext.cacheContext,
    getMaskedContext$2 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$2 = ReactFiberContext.getUnmaskedContext,
    isContextConsumer$1 = ReactFiberContext.isContextConsumer,
    addUpdate$1 = ReactFiberUpdateQueue.addUpdate,
    addReplaceUpdate$1 = ReactFiberUpdateQueue.addReplaceUpdate,
    addForceUpdate$1 = ReactFiberUpdateQueue.addForceUpdate,
    beginUpdateQueue$2 = ReactFiberUpdateQueue.beginUpdateQueue,
    _require5$1 = ReactFiberContext,
    hasContextChanged$2 = _require5$1.hasContextChanged,
    isMounted$1 = ReactFiberTreeReflection.isMounted,
    ReactFiberClassComponent = function ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState) {
    var updater = {
        isMounted: isMounted$1,
        enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, addUpdate$1(fiber, partialState, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, addReplaceUpdate$1(fiber, state, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, addForceUpdate$1(fiber, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        }
    };
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
        if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return !0;
        var instance = workInProgress.stateNode,
            type = workInProgress.type;
        if ("function" == typeof instance.shouldComponentUpdate) {
            return instance.shouldComponentUpdate(newProps, newState, newContext);
        }
        return !type.prototype || !type.prototype.isPureReactComponent || !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }
    function resetInputPointers(workInProgress, instance) {
        instance.props = workInProgress.memoizedProps, instance.state = workInProgress.memoizedState;
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = updater, workInProgress.stateNode = instance, ReactInstanceMap_1.set(instance, workInProgress);
    }
    function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext$2(workInProgress),
            needsContext = isContextConsumer$1(workInProgress),
            context = needsContext ? getMaskedContext$2(workInProgress, unmaskedContext) : emptyObject,
            instance = new ctor(props, context);
        return adoptClassInstance(workInProgress, instance), needsContext && cacheContext$1(workInProgress, unmaskedContext, context), instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        instance.componentWillMount(), oldState !== instance.state && updater.enqueueReplaceState(instance, instance.state, null);
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
        var oldState = instance.state;
        instance.componentWillReceiveProps(newProps, newContext), instance.state !== oldState && updater.enqueueReplaceState(instance, instance.state, null);
    }
    function mountClassInstance(workInProgress, priorityLevel) {
        var current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            state = instance.state || null,
            props = workInProgress.pendingProps;
        invariant(props, "There must be pending props for an initial mount. This error is " + "likely caused by a bug in React. Please file an issue.");
        var unmaskedContext = getUnmaskedContext$2(workInProgress);
        if (instance.props = props, instance.state = state, instance.refs = emptyObject, instance.context = getMaskedContext$2(workInProgress, unmaskedContext), ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != workInProgress.type && !0 === workInProgress.type.unstable_asyncUpdates && (workInProgress.internalContextTag |= AsyncUpdates$1), "function" == typeof instance.componentWillMount) {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && (instance.state = beginUpdateQueue$2(current, workInProgress, updateQueue, instance, state, props, priorityLevel));
        }
        "function" == typeof instance.componentDidMount && (workInProgress.effectTag |= Update$1);
    }
    function updateClassInstance(current, workInProgress, priorityLevel) {
        var instance = workInProgress.stateNode;
        resetInputPointers(workInProgress, instance);
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps;
        newProps || (newProps = oldProps, invariant(null != newProps, "There should always be pending or memoized props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext$2(workInProgress),
            newContext = getMaskedContext$2(workInProgress, newUnmaskedContext);
        "function" != typeof instance.componentWillReceiveProps || oldProps === newProps && oldContext === newContext || callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
        var oldState = workInProgress.memoizedState,
            newState = void 0;
        if (newState = null !== workInProgress.updateQueue ? beginUpdateQueue$2(current, workInProgress, workInProgress.updateQueue, instance, oldState, newProps, priorityLevel) : oldState, !(oldProps !== newProps || oldState !== newState || hasContextChanged$2() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), !1;
        var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
        return shouldUpdate ? ("function" == typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, newState, newContext), "function" == typeof instance.componentDidUpdate && (workInProgress.effectTag |= Update$1)) : ("function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, newState)), instance.props = newProps, instance.state = newState, instance.context = newContext, shouldUpdate;
    }
    return {
        adoptClassInstance: adoptClassInstance,
        constructClassInstance: constructClassInstance,
        mountClassInstance: mountClassInstance,
        updateClassInstance: updateClassInstance
    };
},
    mountChildFibersInPlace = ReactChildFiber.mountChildFibersInPlace,
    reconcileChildFibers = ReactChildFiber.reconcileChildFibers,
    reconcileChildFibersInPlace = ReactChildFiber.reconcileChildFibersInPlace,
    cloneChildFibers = ReactChildFiber.cloneChildFibers,
    beginUpdateQueue$1 = ReactFiberUpdateQueue.beginUpdateQueue,
    getMaskedContext$1 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$1 = ReactFiberContext.getUnmaskedContext,
    hasContextChanged$1 = ReactFiberContext.hasContextChanged,
    pushContextProvider$1 = ReactFiberContext.pushContextProvider,
    pushTopLevelContextObject$1 = ReactFiberContext.pushTopLevelContextObject,
    invalidateContextProvider$1 = ReactFiberContext.invalidateContextProvider,
    IndeterminateComponent$2 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$1 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$6 = ReactTypeOfWork.ClassComponent,
    HostRoot$5 = ReactTypeOfWork.HostRoot,
    HostComponent$6 = ReactTypeOfWork.HostComponent,
    HostText$2 = ReactTypeOfWork.HostText,
    HostPortal$2 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$1 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$1 = ReactTypeOfWork.YieldComponent,
    Fragment$1 = ReactTypeOfWork.Fragment,
    NoWork$3 = ReactPriorityLevel.NoWork,
    OffscreenPriority$1 = ReactPriorityLevel.OffscreenPriority,
    PerformedWork$1 = ReactTypeOfSideEffect.PerformedWork,
    Placement$2 = ReactTypeOfSideEffect.Placement,
    ContentReset$1 = ReactTypeOfSideEffect.ContentReset,
    Err$1 = ReactTypeOfSideEffect.Err,
    Ref$1 = ReactTypeOfSideEffect.Ref,
    ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner,
    ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext) {
    var shouldSetTextContent = config.shouldSetTextContent,
        useSyncScheduling = config.useSyncScheduling,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance,
        _ReactFiberClassCompo = ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState),
        adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
        constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
        mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
        updateClassInstance = _ReactFiberClassCompo.updateClassInstance;
    function reconcileChildren(current, workInProgress, nextChildren) {
        reconcileChildrenAtPriority(current, workInProgress, nextChildren, workInProgress.pendingWorkPriority);
    }
    function reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel) {
        null === current ? workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, priorityLevel) : workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
    }
    function updateFragment(current, workInProgress) {
        var nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = workInProgress.memoizedProps);else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren), workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        null === ref || current && current.ref === ref || (workInProgress.effectTag |= Ref$1);
    }
    function updateFunctionalComponent(current, workInProgress) {
        var fn = workInProgress.type,
            nextProps = workInProgress.pendingProps,
            memoizedProps = workInProgress.memoizedProps;
        if (hasContextChanged$1()) null === nextProps && (nextProps = memoizedProps);else {
            if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
            if ("function" == typeof fn.shouldComponentUpdate && !fn.shouldComponentUpdate(memoizedProps, nextProps)) return memoizeProps(workInProgress, nextProps), bailoutOnAlreadyFinishedWork(current, workInProgress);
        }
        var nextChildren,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        return nextChildren = fn(nextProps, context), workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, priorityLevel) {
        var hasContext = pushContextProvider$1(workInProgress),
            shouldUpdate = void 0;
        return null === current ? workInProgress.stateNode ? invariant(!1, "Resuming work not yet implemented.") : (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, priorityLevel), shouldUpdate = !0) : shouldUpdate = updateClassInstance(current, workInProgress, priorityLevel), finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
    }
    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
        if (markRef(current, workInProgress), !shouldUpdate) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var instance = workInProgress.stateNode;
        ReactCurrentOwner$2.current = workInProgress;
        var nextChildren = void 0;
        return nextChildren = instance.render(), workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeState(workInProgress, instance.state), memoizeProps(workInProgress, instance.props), hasContext && invalidateContextProvider$1(workInProgress), workInProgress.child;
    }
    function updateHostRoot(current, workInProgress, priorityLevel) {
        var root = workInProgress.stateNode;
        root.pendingContext ? pushTopLevelContextObject$1(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject$1(workInProgress, root.context, !1), pushHostContainer(workInProgress, root.containerInfo);
        var updateQueue = workInProgress.updateQueue;
        if (null !== updateQueue) {
            var prevState = workInProgress.memoizedState,
                state = beginUpdateQueue$1(current, workInProgress, updateQueue, null, prevState, null, priorityLevel);
            if (prevState === state) return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
            var element = state.element;
            return null !== current && null !== current.child || !enterHydrationState(workInProgress) ? (resetHydrationState(), reconcileChildren(current, workInProgress, element)) : (workInProgress.effectTag |= Placement$2, workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, priorityLevel)), memoizeState(workInProgress, state), workInProgress.child;
        }
        return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    function updateHostComponent(current, workInProgress, renderPriority) {
        pushHostContext(workInProgress), null === current && tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type,
            memoizedProps = workInProgress.memoizedProps,
            nextProps = workInProgress.pendingProps;
        null === nextProps && (nextProps = memoizedProps, invariant(null !== nextProps, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var prevProps = null !== current ? current.memoizedProps : null;
        if (hasContextChanged$1()) ;else if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var nextChildren = nextProps.children;
        return shouldSetTextContent(type, nextProps) ? nextChildren = null : prevProps && shouldSetTextContent(type, prevProps) && (workInProgress.effectTag |= ContentReset$1), markRef(current, workInProgress), renderPriority !== OffscreenPriority$1 && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps) ? (workInProgress.pendingWorkPriority = OffscreenPriority$1, null) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child);
    }
    function updateHostText(current, workInProgress) {
        null === current && tryToClaimNextHydratableInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        return null === nextProps && (nextProps = workInProgress.memoizedProps), memoizeProps(workInProgress, nextProps), null;
    }
    function mountIndeterminateComponent(current, workInProgress, priorityLevel) {
        invariant(null === current, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
        var value,
            fn = workInProgress.type,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        if (value = fn(props, context), workInProgress.effectTag |= PerformedWork$1, "object" == typeof value && null !== value && "function" == typeof value.render) {
            workInProgress.tag = ClassComponent$6;
            var hasContext = pushContextProvider$1(workInProgress);
            return adoptClassInstance(workInProgress, value), mountClassInstance(workInProgress, priorityLevel), finishClassComponent(current, workInProgress, !0, hasContext);
        }
        return workInProgress.tag = FunctionalComponent$1, reconcileChildren(current, workInProgress, value), memoizeProps(workInProgress, props), workInProgress.child;
    }
    function updateCoroutineComponent(current, workInProgress) {
        var nextCoroutine = workInProgress.pendingProps;
        hasContextChanged$1() ? null === nextCoroutine && (nextCoroutine = current && current.memoizedProps, invariant(null !== nextCoroutine, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue.")) : null !== nextCoroutine && workInProgress.memoizedProps !== nextCoroutine || (nextCoroutine = workInProgress.memoizedProps);
        var nextChildren = nextCoroutine.children,
            priorityLevel = workInProgress.pendingWorkPriority;
        return null === current ? workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel), memoizeProps(workInProgress, nextCoroutine), workInProgress.stateNode;
    }
    function updatePortalComponent(current, workInProgress) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var priorityLevel = workInProgress.pendingWorkPriority,
            nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = current && current.memoizedProps, invariant(null != nextChildren, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return null === current ? (workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel), memoizeProps(workInProgress, nextChildren)) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren)), workInProgress.child;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
        return cloneChildFibers(current, workInProgress), workInProgress.child;
    }
    function bailoutOnLowPriority(current, workInProgress) {
        switch (workInProgress.tag) {
            case ClassComponent$6:
                pushContextProvider$1(workInProgress);
                break;

            case HostPortal$2:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        }
        return null;
    }
    function memoizeProps(workInProgress, nextProps) {
        workInProgress.memoizedProps = nextProps;
    }
    function memoizeState(workInProgress, nextState) {
        workInProgress.memoizedState = nextState;
    }
    function beginWork(current, workInProgress, priorityLevel) {
        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        switch (workInProgress.tag) {
            case IndeterminateComponent$2:
                return mountIndeterminateComponent(current, workInProgress, priorityLevel);

            case FunctionalComponent$1:
                return updateFunctionalComponent(current, workInProgress);

            case ClassComponent$6:
                return updateClassComponent(current, workInProgress, priorityLevel);

            case HostRoot$5:
                return updateHostRoot(current, workInProgress, priorityLevel);

            case HostComponent$6:
                return updateHostComponent(current, workInProgress, priorityLevel);

            case HostText$2:
                return updateHostText(current, workInProgress);

            case CoroutineHandlerPhase:
                workInProgress.tag = CoroutineComponent$1;

            case CoroutineComponent$1:
                return updateCoroutineComponent(current, workInProgress);

            case YieldComponent$1:
                return null;

            case HostPortal$2:
                return updatePortalComponent(current, workInProgress);

            case Fragment$1:
                return updateFragment(current, workInProgress);

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function beginFailedWork(current, workInProgress, priorityLevel) {
        if (invariant(workInProgress.tag === ClassComponent$6 || workInProgress.tag === HostRoot$5, "Invalid type of work. This error is likely caused by a bug in React. " + "Please file an issue."), workInProgress.effectTag |= Err$1, null === current ? workInProgress.child = null : workInProgress.child !== current.child && (workInProgress.child = current.child), workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        if (workInProgress.firstEffect = null, workInProgress.lastEffect = null, reconcileChildrenAtPriority(current, workInProgress, null, priorityLevel), workInProgress.tag === ClassComponent$6) {
            var instance = workInProgress.stateNode;
            workInProgress.memoizedProps = instance.props, workInProgress.memoizedState = instance.state;
        }
        return workInProgress.child;
    }
    return {
        beginWork: beginWork,
        beginFailedWork: beginFailedWork
    };
},
    reconcileChildFibers$2 = ReactChildFiber.reconcileChildFibers,
    popContextProvider$2 = ReactFiberContext.popContextProvider,
    IndeterminateComponent$3 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$3 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$8 = ReactTypeOfWork.ClassComponent,
    HostRoot$6 = ReactTypeOfWork.HostRoot,
    HostComponent$7 = ReactTypeOfWork.HostComponent,
    HostText$4 = ReactTypeOfWork.HostText,
    HostPortal$4 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$3 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase$1 = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$3 = ReactTypeOfWork.YieldComponent,
    Fragment$3 = ReactTypeOfWork.Fragment,
    Placement$4 = ReactTypeOfSideEffect.Placement,
    Ref$2 = ReactTypeOfSideEffect.Ref,
    Update$2 = ReactTypeOfSideEffect.Update,
    OffscreenPriority$2 = ReactPriorityLevel.OffscreenPriority,
    ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState;
    function markUpdate(workInProgress) {
        workInProgress.effectTag |= Update$2;
    }
    function markRef(workInProgress) {
        workInProgress.effectTag |= Ref$2;
    }
    function appendAllYields(yields, workInProgress) {
        var node = workInProgress.stateNode;
        for (node && (node.return = workInProgress); null !== node;) {
            if (node.tag === HostComponent$7 || node.tag === HostText$4 || node.tag === HostPortal$4) invariant(!1, "A coroutine cannot have host component children.");else if (node.tag === YieldComponent$3) yields.push(node.type);else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function moveCoroutineToHandlerPhase(current, workInProgress) {
        var coroutine = workInProgress.memoizedProps;
        invariant(coroutine, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue."), workInProgress.tag = CoroutineHandlerPhase$1;
        var yields = [];
        appendAllYields(yields, workInProgress);
        var fn = coroutine.handler,
            props = coroutine.props,
            nextChildren = fn(props, yields),
            currentFirstChild = null !== current ? current.child : null,
            priority = workInProgress.pendingWorkPriority;
        return workInProgress.child = reconcileChildFibers$2(workInProgress, currentFirstChild, nextChildren, priority), workInProgress.child;
    }
    function appendAllChildren(parent, workInProgress) {
        for (var node = workInProgress.child; null !== node;) {
            if (node.tag === HostComponent$7 || node.tag === HostText$4) appendInitialChild(parent, node.stateNode);else if (node.tag === HostPortal$4) ;else if (null !== node.child) {
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node = node.sibling;
        }
    }
    function completeWork(current, workInProgress, renderPriority) {
        var newProps = workInProgress.pendingProps;
        switch (null === newProps ? newProps = workInProgress.memoizedProps : workInProgress.pendingWorkPriority === OffscreenPriority$2 && renderPriority !== OffscreenPriority$2 || (workInProgress.pendingProps = null), workInProgress.tag) {
            case FunctionalComponent$3:
                return null;

            case ClassComponent$8:
                return popContextProvider$2(workInProgress), null;

            case HostRoot$6:
                var fiberRoot = workInProgress.stateNode;
                return fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), null !== current && null !== current.child || (popHydrationState(workInProgress), workInProgress.effectTag &= ~Placement$4), null;

            case HostComponent$7:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer(),
                    type = workInProgress.type;
                if (null !== current && null != workInProgress.stateNode) {
                    var oldProps = current.memoizedProps,
                        instance = workInProgress.stateNode,
                        currentHostContext = getHostContext(),
                        updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                    workInProgress.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress), current.ref !== workInProgress.ref && markRef(workInProgress);
                } else {
                    if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _currentHostContext = getHostContext();
                    if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, rootContainerInstance) && markUpdate(workInProgress);else {
                        var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
                        appendAllChildren(_instance, workInProgress), finalizeInitialChildren(_instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress), workInProgress.stateNode = _instance;
                    }
                    null !== workInProgress.ref && markRef(workInProgress);
                }
                return null;

            case HostText$4:
                var newText = newProps;
                if (current && null != workInProgress.stateNode) {
                    current.memoizedProps !== newText && markUpdate(workInProgress);
                } else {
                    if ("string" != typeof newText) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _rootContainerInstance = getRootHostContainer(),
                        _currentHostContext2 = getHostContext();
                    popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                }
                return null;

            case CoroutineComponent$3:
                return moveCoroutineToHandlerPhase(current, workInProgress);

            case CoroutineHandlerPhase$1:
                return workInProgress.tag = CoroutineComponent$3, null;

            case YieldComponent$3:
            case Fragment$3:
                return null;

            case HostPortal$4:
                return markUpdate(workInProgress), popHostContainer(workInProgress), null;

            case IndeterminateComponent$3:
                invariant(!1, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    return {
        completeWork: completeWork
    };
},
    rendererID = null,
    injectInternals$1 = null,
    onCommitRoot$1 = null,
    onCommitUnmount$1 = null;

if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && __REACT_DEVTOOLS_GLOBAL_HOOK__.supportsFiber) {
    var inject$1 = __REACT_DEVTOOLS_GLOBAL_HOOK__.inject,
        onCommitFiberRoot = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberRoot,
        onCommitFiberUnmount = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberUnmount;
    injectInternals$1 = function injectInternals$1(internals) {
        warning(null == rendererID, "Cannot inject into DevTools twice."), rendererID = inject$1(internals);
    }, onCommitRoot$1 = function onCommitRoot$1(root) {
        if (null != rendererID) try {
            onCommitFiberRoot(rendererID, root);
        } catch (err) {}
    }, onCommitUnmount$1 = function onCommitUnmount$1(fiber) {
        if (null != rendererID) try {
            onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
    };
}

var injectInternals_1 = injectInternals$1,
    onCommitRoot_1 = onCommitRoot$1,
    onCommitUnmount_1 = onCommitUnmount$1,
    ReactFiberDevToolsHook = {
    injectInternals: injectInternals_1,
    onCommitRoot: onCommitRoot_1,
    onCommitUnmount: onCommitUnmount_1
},
    ClassComponent$9 = ReactTypeOfWork.ClassComponent,
    HostRoot$7 = ReactTypeOfWork.HostRoot,
    HostComponent$8 = ReactTypeOfWork.HostComponent,
    HostText$5 = ReactTypeOfWork.HostText,
    HostPortal$5 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$4 = ReactTypeOfWork.CoroutineComponent,
    commitCallbacks$1 = ReactFiberUpdateQueue.commitCallbacks,
    onCommitUnmount = ReactFiberDevToolsHook.onCommitUnmount,
    Placement$5 = ReactTypeOfSideEffect.Placement,
    Update$3 = ReactTypeOfSideEffect.Update,
    Callback$1 = ReactTypeOfSideEffect.Callback,
    ContentReset$2 = ReactTypeOfSideEffect.ContentReset,
    ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError) {
    var commitMount = config.commitMount,
        commitUpdate = config.commitUpdate,
        resetTextContent = config.resetTextContent,
        commitTextUpdate = config.commitTextUpdate,
        appendChild = config.appendChild,
        appendChildToContainer = config.appendChildToContainer,
        insertBefore = config.insertBefore,
        insertInContainerBefore = config.insertInContainerBefore,
        removeChild = config.removeChild,
        removeChildFromContainer = config.removeChildFromContainer,
        getPublicInstance = config.getPublicInstance;
    function safelyCallComponentWillUnmount(current, instance) {
        try {
            instance.componentWillUnmount();
        } catch (unmountError) {
            captureError(current, unmountError);
        }
    }
    function safelyDetachRef(current) {
        var ref = current.ref;
        if (null !== ref) {
            try {
                ref(null);
            } catch (refError) {
                captureError(current, refError);
            }
        }
    }
    function getHostParentFiber(fiber) {
        for (var parent = fiber.return; null !== parent;) {
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        invariant(!1, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent$8 || fiber.tag === HostRoot$7 || fiber.tag === HostPortal$5;
    }
    function getHostSibling(fiber) {
        var node = fiber;
        siblings: for (; !0;) {
            for (; null === node.sibling;) {
                if (null === node.return || isHostParent(node.return)) return null;
                node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent$8 && node.tag !== HostText$5;) {
                if (node.effectTag & Placement$5) continue siblings;
                if (null === node.child || node.tag === HostPortal$5) continue siblings;
                node.child.return = node, node = node.child;
            }
            if (!(node.effectTag & Placement$5)) return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork),
            parent = void 0,
            isContainer = void 0;
        switch (parentFiber.tag) {
            case HostComponent$8:
                parent = parentFiber.stateNode, isContainer = !1;
                break;

            case HostRoot$7:
            case HostPortal$5:
                parent = parentFiber.stateNode.containerInfo, isContainer = !0;
                break;

            default:
                invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
        }
        parentFiber.effectTag & ContentReset$2 && (resetTextContent(parent), parentFiber.effectTag &= ~ContentReset$2);
        for (var before = getHostSibling(finishedWork), node = finishedWork; !0;) {
            if (node.tag === HostComponent$8 || node.tag === HostText$5) before ? isContainer ? insertInContainerBefore(parent, node.stateNode, before) : insertBefore(parent, node.stateNode, before) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (node.tag === HostPortal$5) ;else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitNestedUnmounts(root) {
        for (var node = root; !0;) {
            if (commitUnmount(node), null === node.child || node.tag === HostPortal$5) {
                if (node === root) return;
                for (; null === node.sibling;) {
                    if (null === node.return || node.return === root) return;
                    node = node.return;
                }
                node.sibling.return = node.return, node = node.sibling;
            } else node.child.return = node, node = node.child;
        }
    }
    function unmountHostComponents(current) {
        for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0; !0;) {
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: for (; !0;) {
                    switch (invariant(null !== parent, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue."), parent.tag) {
                        case HostComponent$8:
                            currentParent = parent.stateNode, currentParentIsContainer = !1;
                            break findParent;

                        case HostRoot$7:
                        case HostPortal$5:
                            currentParent = parent.stateNode.containerInfo, currentParentIsContainer = !0;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = !0;
            }
            if (node.tag === HostComponent$8 || node.tag === HostText$5) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (node.tag === HostPortal$5) {
                if (currentParent = node.stateNode.containerInfo, null !== node.child) {
                    node.child.return = node, node = node.child;
                    continue;
                }
            } else if (commitUnmount(node), null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === current) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === current) return;
                node = node.return, node.tag === HostPortal$5 && (currentParentIsValid = !1);
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitDeletion(current) {
        unmountHostComponents(current), current.return = null, current.child = null, current.alternate && (current.alternate.child = null, current.alternate.return = null);
    }
    function commitUnmount(current) {
        switch ("function" == typeof onCommitUnmount && onCommitUnmount(current), current.tag) {
            case ClassComponent$9:
                safelyDetachRef(current);
                var instance = current.stateNode;
                return void ("function" == typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(current, instance));

            case HostComponent$8:
                return void safelyDetachRef(current);

            case CoroutineComponent$4:
                return void commitNestedUnmounts(current.stateNode);

            case HostPortal$5:
                return void unmountHostComponents(current);
        }
    }
    function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                return;

            case HostComponent$8:
                var instance = finishedWork.stateNode;
                if (null != instance) {
                    var newProps = finishedWork.memoizedProps,
                        oldProps = null !== current ? current.memoizedProps : newProps,
                        type = finishedWork.type,
                        updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null, null !== updatePayload && commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
                return;

            case HostText$5:
                invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode,
                    newText = finishedWork.memoizedProps,
                    oldText = null !== current ? current.memoizedProps : newText;
                return void commitTextUpdate(textInstance, oldText, newText);

            case HostRoot$7:
            case HostPortal$5:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update$3) if (null === current) instance.componentDidMount();else {
                    var prevProps = current.memoizedProps,
                        prevState = current.memoizedState;
                    instance.componentDidUpdate(prevProps, prevState);
                }
                return void (finishedWork.effectTag & Callback$1 && null !== finishedWork.updateQueue && commitCallbacks$1(finishedWork, finishedWork.updateQueue, instance));

            case HostRoot$7:
                var updateQueue = finishedWork.updateQueue;
                if (null !== updateQueue) {
                    var _instance = finishedWork.child && finishedWork.child.stateNode;
                    commitCallbacks$1(finishedWork, updateQueue, _instance);
                }
                return;

            case HostComponent$8:
                var _instance2 = finishedWork.stateNode;
                if (null === current && finishedWork.effectTag & Update$3) {
                    var type = finishedWork.type,
                        props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props, finishedWork);
                }
                return;

            case HostText$5:
            case HostPortal$5:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (null !== ref) {
            var instance = finishedWork.stateNode;
            switch (finishedWork.tag) {
                case HostComponent$8:
                    ref(getPublicInstance(instance));
                    break;

                default:
                    ref(instance);
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        null !== currentRef && currentRef(null);
    }
    return {
        commitPlacement: commitPlacement,
        commitDeletion: commitDeletion,
        commitWork: commitWork,
        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
    };
},
    createCursor$2 = ReactFiberStack.createCursor,
    pop$2 = ReactFiberStack.pop,
    push$2 = ReactFiberStack.push,
    NO_CONTEXT = {},
    ReactFiberHostContext = function ReactFiberHostContext(config) {
    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = createCursor$2(NO_CONTEXT),
        contextFiberStackCursor = createCursor$2(NO_CONTEXT),
        rootInstanceStackCursor = createCursor$2(NO_CONTEXT);
    function requiredContext(c) {
        return invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue."), c;
    }
    function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
    }
    function pushHostContainer(fiber, nextRootInstance) {
        push$2(rootInstanceStackCursor, nextRootInstance, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber), pop$2(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        return requiredContext(contextStackCursor.current);
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current),
            nextContext = getChildHostContext(context, fiber.type, rootInstance);
        context !== nextContext && (push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextContext, fiber));
    }
    function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber));
    }
    function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT, rootInstanceStackCursor.current = NO_CONTEXT;
    }
    return {
        getHostContext: getHostContext,
        getRootHostContainer: getRootHostContainer,
        popHostContainer: popHostContainer,
        popHostContext: popHostContext,
        pushHostContainer: pushHostContainer,
        pushHostContext: pushHostContext,
        resetHostContainer: resetHostContainer
    };
},
    HostComponent$9 = ReactTypeOfWork.HostComponent,
    HostText$6 = ReactTypeOfWork.HostText,
    HostRoot$8 = ReactTypeOfWork.HostRoot,
    Deletion$2 = ReactTypeOfSideEffect.Deletion,
    Placement$6 = ReactTypeOfSideEffect.Placement,
    createFiberFromHostInstanceForDeletion$1 = ReactFiber.createFiberFromHostInstanceForDeletion,
    ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
    var shouldSetTextContent = config.shouldSetTextContent,
        canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        didNotHydrateInstance = config.didNotHydrateInstance,
        didNotFindHydratableInstance = config.didNotFindHydratableInstance,
        didNotFindHydratableTextInstance = config.didNotFindHydratableTextInstance;
    if (!(canHydrateInstance && canHydrateTextInstance && getNextHydratableSibling && getFirstHydratableChild && hydrateInstance && hydrateTextInstance && didNotHydrateInstance && didNotFindHydratableInstance && didNotFindHydratableTextInstance)) return {
        enterHydrationState: function enterHydrationState() {
            return !1;
        },
        resetHydrationState: function resetHydrationState() {},
        tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
        prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
            invariant(!1, "React bug.");
        },
        prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
            invariant(!1, "React bug.");
        },
        popHydrationState: function popHydrationState(fiber) {
            return !1;
        }
    };
    var hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChild(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, !0;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        var childToDelete = createFiberFromHostInstanceForDeletion$1();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber, childToDelete.effectTag = Deletion$2, null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement$6;
    }
    function canHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
            case HostComponent$9:
                var type = fiber.type,
                    props = fiber.pendingProps;
                return canHydrateInstance(nextInstance, type, props);

            case HostText$6:
                var text = fiber.pendingProps;
                return canHydrateTextInstance(nextInstance, text);

            default:
                return !1;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
            if (!canHydrate(fiber, nextInstance)) {
                if (!(nextInstance = getNextHydratableSibling(nextInstance)) || !canHydrate(fiber, nextInstance)) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
                deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }
            fiber.stateNode = nextInstance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance) {
        var instance = fiber.stateNode,
            updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, fiber);
        return fiber.updateQueue = updatePayload, null !== updatePayload;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        return hydrateTextInstance(textInstance, fiber.memoizedProps, fiber);
    }
    function popToNextHostParent(fiber) {
        for (var parent = fiber.return; null !== parent && parent.tag !== HostComponent$9 && parent.tag !== HostRoot$8;) {
            parent = parent.return;
        }hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (fiber.tag !== HostComponent$9 || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (var nextInstance = nextHydratableInstance; nextInstance;) {
            deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }return popToNextHostParent(fiber), nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
    }
    function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1;
    }
    return {
        enterHydrationState: enterHydrationState,
        resetHydrationState: resetHydrationState,
        tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
        prepareToHydrateHostInstance: prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
        popHydrationState: popHydrationState
    };
},
    popContextProvider$1 = ReactFiberContext.popContextProvider,
    reset$1 = ReactFiberStack.reset,
    getStackAddendumByWorkInProgressFiber = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber,
    logCapturedError$1 = ReactFiberErrorLogger.logCapturedError,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner,
    createWorkInProgress$1 = ReactFiber.createWorkInProgress,
    largerPriority$1 = ReactFiber.largerPriority,
    onCommitRoot = ReactFiberDevToolsHook.onCommitRoot,
    NoWork$2 = ReactPriorityLevel.NoWork,
    SynchronousPriority$1 = ReactPriorityLevel.SynchronousPriority,
    TaskPriority$1 = ReactPriorityLevel.TaskPriority,
    HighPriority = ReactPriorityLevel.HighPriority,
    LowPriority = ReactPriorityLevel.LowPriority,
    OffscreenPriority = ReactPriorityLevel.OffscreenPriority,
    AsyncUpdates = ReactTypeOfInternalContext.AsyncUpdates,
    PerformedWork = ReactTypeOfSideEffect.PerformedWork,
    Placement$1 = ReactTypeOfSideEffect.Placement,
    Update = ReactTypeOfSideEffect.Update,
    PlacementAndUpdate = ReactTypeOfSideEffect.PlacementAndUpdate,
    Deletion = ReactTypeOfSideEffect.Deletion,
    ContentReset = ReactTypeOfSideEffect.ContentReset,
    Callback = ReactTypeOfSideEffect.Callback,
    Err = ReactTypeOfSideEffect.Err,
    Ref = ReactTypeOfSideEffect.Ref,
    HostRoot$4 = ReactTypeOfWork.HostRoot,
    HostComponent$4 = ReactTypeOfWork.HostComponent,
    HostPortal$1 = ReactTypeOfWork.HostPortal,
    ClassComponent$4 = ReactTypeOfWork.ClassComponent,
    getUpdatePriority$1 = ReactFiberUpdateQueue.getUpdatePriority,
    _require14 = ReactFiberContext,
    resetContext$1 = _require14.resetContext,
    ReactFiberInstrumentation$1,
    timeHeuristicForUnitOfWork = 1,
    ReactFiberScheduler = function ReactFiberScheduler(config) {
    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        resetHostContainer = hostContext.resetHostContainer,
        _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext),
        beginWork = _ReactFiberBeginWork.beginWork,
        beginFailedWork = _ReactFiberBeginWork.beginFailedWork,
        _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
        completeWork = _ReactFiberCompleteWo.completeWork,
        _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
        commitPlacement = _ReactFiberCommitWork.commitPlacement,
        commitDeletion = _ReactFiberCommitWork.commitDeletion,
        commitWork = _ReactFiberCommitWork.commitWork,
        commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
        commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
        commitDetachRef = _ReactFiberCommitWork.commitDetachRef,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        useSyncScheduling = config.useSyncScheduling,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        priorityContext = NoWork$2,
        priorityContextBeforeReconciliation = NoWork$2,
        isPerformingWork = !1,
        deadlineHasExpired = !1,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        nextUnitOfWork = null,
        nextPriorityLevel = NoWork$2,
        nextEffect = null,
        pendingCommit = null,
        nextScheduledRoot = null,
        lastScheduledRoot = null,
        isCallbackScheduled = !1,
        capturedErrors = null,
        failedBoundaries = null,
        commitPhaseBoundaries = null,
        firstUncaughtError = null,
        fatalError = null,
        isCommitting = !1,
        isUnmounting = !1;
    function resetContextStack() {
        reset$1(), resetContext$1(), resetHostContainer();
    }
    function findNextUnitOfWork() {
        for (; null !== nextScheduledRoot && nextScheduledRoot.current.pendingWorkPriority === NoWork$2;) {
            nextScheduledRoot.isScheduled = !1;
            var next = nextScheduledRoot.nextScheduledRoot;
            if (nextScheduledRoot.nextScheduledRoot = null, nextScheduledRoot === lastScheduledRoot) return nextScheduledRoot = null, lastScheduledRoot = null, nextPriorityLevel = NoWork$2, null;
            nextScheduledRoot = next;
        }
        for (var root = nextScheduledRoot, highestPriorityRoot = null, highestPriorityLevel = NoWork$2; null !== root;) {
            root.current.pendingWorkPriority !== NoWork$2 && (highestPriorityLevel === NoWork$2 || highestPriorityLevel > root.current.pendingWorkPriority) && (highestPriorityLevel = root.current.pendingWorkPriority, highestPriorityRoot = root), root = root.nextScheduledRoot;
        }return null !== highestPriorityRoot ? (nextPriorityLevel = highestPriorityLevel, priorityContext = nextPriorityLevel, resetContextStack(), createWorkInProgress$1(highestPriorityRoot.current, highestPriorityLevel)) : (nextPriorityLevel = NoWork$2, null);
    }
    function commitAllHostEffects() {
        for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset && config.resetTextContent(nextEffect.stateNode), effectTag & Ref) {
                var current = nextEffect.alternate;
                null !== current && commitDetachRef(current);
            }
            switch (effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork)) {
                case Placement$1:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    break;

                case PlacementAndUpdate:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;

                case Update:
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;

                case Deletion:
                    isUnmounting = !0, commitDeletion(nextEffect), isUnmounting = !1;
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitAllLifeCycles() {
        for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
                var current = nextEffect.alternate;
                commitLifeCycles(current, nextEffect);
            }
            effectTag & Ref && commitAttachRef(nextEffect), effectTag & Err && commitErrorHandling(nextEffect);
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null, nextEffect = next;
        }
    }
    function commitAllWork(finishedWork) {
        isCommitting = !0, pendingCommit = null;
        var root = finishedWork.stateNode;
        invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue."), ReactCurrentOwner$1.current = null;
        var previousPriorityContext = priorityContext;
        priorityContext = TaskPriority$1;
        var firstEffect = void 0;
        for (finishedWork.effectTag > PerformedWork ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, firstEffect = finishedWork.firstEffect) : firstEffect = finishedWork : firstEffect = finishedWork.firstEffect, prepareForCommit(), nextEffect = firstEffect; null !== nextEffect;) {
            var _error = null;
            try {
                commitAllHostEffects();
            } catch (e) {
                _error = e;
            }
            null !== _error && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        for (resetAfterCommit(), root.current = finishedWork, nextEffect = firstEffect; null !== nextEffect;) {
            var _error2 = null;
            try {
                commitAllLifeCycles();
            } catch (e) {
                _error2 = e;
            }
            null !== _error2 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error2), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        isCommitting = !1, "function" == typeof onCommitRoot && onCommitRoot(finishedWork.stateNode), !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork), commitPhaseBoundaries && (commitPhaseBoundaries.forEach(scheduleErrorRecovery), commitPhaseBoundaries = null), priorityContext = previousPriorityContext;
    }
    function resetWorkPriority(workInProgress, renderPriority) {
        if (!(workInProgress.pendingWorkPriority !== NoWork$2 && workInProgress.pendingWorkPriority > renderPriority)) {
            for (var newPriority = getUpdatePriority$1(workInProgress), child = workInProgress.child; null !== child;) {
                newPriority = largerPriority$1(newPriority, child.pendingWorkPriority), child = child.sibling;
            }workInProgress.pendingWorkPriority = newPriority;
        }
    }
    function completeUnitOfWork(workInProgress) {
        for (; !0;) {
            var current = workInProgress.alternate,
                next = completeWork(current, workInProgress, nextPriorityLevel),
                returnFiber = workInProgress.return,
                siblingFiber = workInProgress.sibling;
            if (resetWorkPriority(workInProgress, nextPriorityLevel), null !== next) return !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), next;
            if (null !== returnFiber) {
                null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect);
                workInProgress.effectTag > PerformedWork && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress);
            }
            if (!1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), null !== siblingFiber) return siblingFiber;
            if (null === returnFiber) return nextPriorityLevel < HighPriority ? commitAllWork(workInProgress) : pendingCommit = workInProgress, null;
            workInProgress = returnFiber;
        }
        return null;
    }
    function performUnitOfWork(workInProgress) {
        var current = workInProgress.alternate,
            next = beginWork(current, workInProgress, nextPriorityLevel);
        return !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, next;
    }
    function performFailedUnitOfWork(workInProgress) {
        var current = workInProgress.alternate,
            next = beginFailedWork(current, workInProgress, nextPriorityLevel);
        return !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, next;
    }
    function clearErrors() {
        for (null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()); null !== capturedErrors && capturedErrors.size && null !== nextUnitOfWork && nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= TaskPriority$1;) {
            null === (nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork());
        }
    }
    function workLoopAsync(minPriorityLevel, deadline) {
        for (; null !== nextUnitOfWork && !deadlineHasExpired;) {
            if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                if (null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && null !== pendingCommit) if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                    if (commitAllWork(pendingCommit), nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel < HighPriority) break;
                } else deadlineHasExpired = !0;
            } else deadlineHasExpired = !0;
        }
    }
    function workLoopSync(minPriorityLevel) {
        for (; null !== nextUnitOfWork && !(null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel > TaskPriority$1));) {}
    }
    function workLoop(minPriorityLevel, deadline) {
        clearErrors(), null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()), nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= minPriorityLevel && (nextPriorityLevel <= TaskPriority$1 ? workLoopSync(minPriorityLevel) : null !== deadline && workLoopAsync(minPriorityLevel, deadline));
    }
    function performDeferredWork(deadline) {
        performWork(OffscreenPriority, deadline);
    }
    function performWork(minPriorityLevel, deadline) {
        invariant(!isPerformingWork, "performWork was called recursively. This error is likely caused " + "by a bug in React. Please file an issue."), isPerformingWork = !0;
        for (var hasRemainingAsyncWork = !1; null === fatalError;) {
            null === pendingCommit || deadlineHasExpired || commitAllWork(pendingCommit), priorityContextBeforeReconciliation = priorityContext;
            var _error3 = null;
            try {
                workLoop(minPriorityLevel, deadline);
            } catch (e) {
                _error3 = e;
            }
            if (priorityContext = priorityContextBeforeReconciliation, null === _error3) {
                switch (nextPriorityLevel) {
                    case SynchronousPriority$1:
                    case TaskPriority$1:
                        if (nextPriorityLevel <= minPriorityLevel) continue;
                        break;

                    case HighPriority:
                    case LowPriority:
                    case OffscreenPriority:
                        if (null === deadline) hasRemainingAsyncWork = !0;else {
                            if (!deadlineHasExpired && nextPriorityLevel <= minPriorityLevel) continue;
                            hasRemainingAsyncWork = !0;
                        }
                        break;

                    case NoWork$2:
                        break;

                    default:
                        invariant(!1, "Switch statement should be exhuastive.");
                }
                break;
            }
            var failedWork = nextUnitOfWork;
            if (null === failedWork) null === fatalError && (fatalError = _error3);else {
                var maybeBoundary = captureError(failedWork, _error3);
                if (null !== maybeBoundary) {
                    var boundary = maybeBoundary;
                    beginFailedWork(boundary.alternate, boundary, nextPriorityLevel), unwindContexts(failedWork, boundary), nextUnitOfWork = completeUnitOfWork(boundary);
                }
            }
        }
        null !== deadline && (isCallbackScheduled = !1), hasRemainingAsyncWork && !isCallbackScheduled && (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
        var errorToThrow = null !== fatalError ? fatalError : firstUncaughtError;
        if (isPerformingWork = !1, deadlineHasExpired = !1, fatalError = null, firstUncaughtError = null, capturedErrors = null, failedBoundaries = null, null !== errorToThrow) throw errorToThrow;
    }
    function captureError(failedWork, error) {
        ReactCurrentOwner$1.current = null, nextUnitOfWork = null;
        var boundary = null,
            errorBoundaryFound = !1,
            willRetry = !1,
            errorBoundaryName = null;
        if (failedWork.tag === HostRoot$4) boundary = failedWork, isFailedBoundary(failedWork) && (fatalError = error);else for (var node = failedWork.return; null !== node && null === boundary;) {
            if (node.tag === ClassComponent$4) {
                var instance = node.stateNode;
                "function" == typeof instance.unstable_handleError && (errorBoundaryFound = !0, errorBoundaryName = getComponentName_1(node), boundary = node, willRetry = !0);
            } else node.tag === HostRoot$4 && (boundary = node);
            if (isFailedBoundary(node)) {
                if (isUnmounting) return null;
                if (null !== commitPhaseBoundaries && (commitPhaseBoundaries.has(node) || null !== node.alternate && commitPhaseBoundaries.has(node.alternate))) return null;
                boundary = null, willRetry = !1;
            }
            node = node.return;
        }
        if (null !== boundary) {
            null === failedBoundaries && (failedBoundaries = new Set()), failedBoundaries.add(boundary);
            var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork),
                _componentName = getComponentName_1(failedWork);
            return null === capturedErrors && (capturedErrors = new Map()), capturedErrors.set(boundary, {
                componentName: _componentName,
                componentStack: _componentStack,
                error: error,
                errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                errorBoundaryFound: errorBoundaryFound,
                errorBoundaryName: errorBoundaryName,
                willRetry: willRetry
            }), isCommitting ? (null === commitPhaseBoundaries && (commitPhaseBoundaries = new Set()), commitPhaseBoundaries.add(boundary)) : scheduleErrorRecovery(boundary), boundary;
        }
        return null === firstUncaughtError && (firstUncaughtError = error), null;
    }
    function hasCapturedError(fiber) {
        return null !== capturedErrors && (capturedErrors.has(fiber) || null !== fiber.alternate && capturedErrors.has(fiber.alternate));
    }
    function isFailedBoundary(fiber) {
        return null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== fiber.alternate && failedBoundaries.has(fiber.alternate));
    }
    function commitErrorHandling(effectfulFiber) {
        var capturedError = void 0;
        null !== capturedErrors && (capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber), null == capturedError && null !== effectfulFiber.alternate && (effectfulFiber = effectfulFiber.alternate, capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber))), invariant(null != capturedError, "No error for given unit of work. This error is likely caused by a " + "bug in React. Please file an issue.");
        var error = capturedError.error;
        try {
            logCapturedError$1(capturedError);
        } catch (e) {
            console.error(e);
        }
        switch (effectfulFiber.tag) {
            case ClassComponent$4:
                var instance = effectfulFiber.stateNode,
                    info = {
                    componentStack: capturedError.componentStack
                };
                return void instance.unstable_handleError(error, info);

            case HostRoot$4:
                return void (null === firstUncaughtError && (firstUncaughtError = error));

            default:
                invariant(!1, "Invalid type of work. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function unwindContexts(from, to) {
        for (var node = from; null !== node && node !== to && node.alternate !== to;) {
            switch (node.tag) {
                case ClassComponent$4:
                    popContextProvider$1(node);
                    break;

                case HostComponent$4:
                    popHostContext(node);
                    break;

                case HostRoot$4:
                case HostPortal$1:
                    popHostContainer(node);
            }
            node = node.return;
        }
    }
    function scheduleRoot(root, priorityLevel) {
        priorityLevel !== NoWork$2 && (root.isScheduled || (root.isScheduled = !0, lastScheduledRoot ? (lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot = root) : (nextScheduledRoot = root, lastScheduledRoot = root)));
    }
    function scheduleUpdate(fiber, priorityLevel) {
        priorityLevel <= nextPriorityLevel && (nextUnitOfWork = null);
        for (var node = fiber, shouldContinue = !0; null !== node && shouldContinue;) {
            if (shouldContinue = !1, (node.pendingWorkPriority === NoWork$2 || node.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.pendingWorkPriority = priorityLevel), null !== node.alternate && (node.alternate.pendingWorkPriority === NoWork$2 || node.alternate.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.alternate.pendingWorkPriority = priorityLevel), null === node.return) {
                if (node.tag !== HostRoot$4) return;
                if (scheduleRoot(node.stateNode, priorityLevel), !isPerformingWork) switch (priorityLevel) {
                    case SynchronousPriority$1:
                        isUnbatchingUpdates ? performWork(SynchronousPriority$1, null) : performWork(TaskPriority$1, null);
                        break;

                    case TaskPriority$1:
                        invariant(isBatchingUpdates, "Task updates can only be scheduled as a nested update or " + "inside batchedUpdates.");
                        break;

                    default:
                        isCallbackScheduled || (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
                }
            }
            node = node.return;
        }
    }
    function getPriorityContext(fiber, forceAsync) {
        var priorityLevel = priorityContext;
        return priorityLevel === NoWork$2 && (priorityLevel = !useSyncScheduling || fiber.internalContextTag & AsyncUpdates || forceAsync ? LowPriority : SynchronousPriority$1), priorityLevel === SynchronousPriority$1 && (isPerformingWork || isBatchingUpdates) ? TaskPriority$1 : priorityLevel;
    }
    function scheduleErrorRecovery(fiber) {
        scheduleUpdate(fiber, TaskPriority$1);
    }
    function performWithPriority(priorityLevel, fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = priorityLevel;
        try {
            fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;
        try {
            return fn(a);
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isPerformingWork || isBatchingUpdates || performWork(TaskPriority$1, null);
        }
    }
    function unbatchedUpdates(fn) {
        var previousIsUnbatchingUpdates = isUnbatchingUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isUnbatchingUpdates = isBatchingUpdates, isBatchingUpdates = !1;
        try {
            return fn();
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isUnbatchingUpdates = previousIsUnbatchingUpdates;
        }
    }
    function syncUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = SynchronousPriority$1;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function deferredUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = LowPriority;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    return {
        scheduleUpdate: scheduleUpdate,
        getPriorityContext: getPriorityContext,
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates
    };
},
    getContextFiber = function getContextFiber(arg) {
    invariant(!1, "Missing injection for fiber getContextForSubtree");
};

function getContextForSubtree(parentComponent) {
    if (!parentComponent) return emptyObject;
    var instance = ReactInstanceMap_1.get(parentComponent);
    return "number" == typeof instance.tag ? getContextFiber(instance) : instance._processChildContext(instance._context);
}

getContextForSubtree._injectFiber = function (fn) {
    getContextFiber = fn;
};

var getContextForSubtree_1 = getContextForSubtree,
    addTopLevelUpdate = ReactFiberUpdateQueue.addTopLevelUpdate,
    findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext,
    isContextProvider = ReactFiberContext.isContextProvider,
    processChildContext = ReactFiberContext.processChildContext,
    createFiberRoot = ReactFiberRoot.createFiberRoot,
    HostComponent$1 = ReactTypeOfWork.HostComponent,
    findCurrentHostFiber = ReactFiberTreeReflection.findCurrentHostFiber;

getContextForSubtree_1._injectFiber(function (fiber) {
    var parentContext = findCurrentUnmaskedContext(fiber);
    return isContextProvider(fiber) ? processChildContext(fiber, parentContext, !1) : parentContext;
});

var ReactFiberReconciler = function ReactFiberReconciler(config) {
    var getPublicInstance = config.getPublicInstance,
        _ReactFiberScheduler = ReactFiberScheduler(config),
        scheduleUpdate = _ReactFiberScheduler.scheduleUpdate,
        getPriorityContext = _ReactFiberScheduler.getPriorityContext,
        performWithPriority = _ReactFiberScheduler.performWithPriority,
        batchedUpdates = _ReactFiberScheduler.batchedUpdates,
        unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
        syncUpdates = _ReactFiberScheduler.syncUpdates,
        deferredUpdates = _ReactFiberScheduler.deferredUpdates;
    function scheduleTopLevelUpdate(current, element, callback) {
        var forceAsync = ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != element && null != element.type && !0 === element.type.unstable_asyncUpdates,
            priorityLevel = getPriorityContext(current, forceAsync),
            nextState = {
            element: element
        };
        callback = void 0 === callback ? null : callback, addTopLevelUpdate(current, nextState, callback, priorityLevel), scheduleUpdate(current, priorityLevel);
    }
    return {
        createContainer: function createContainer(containerInfo) {
            return createFiberRoot(containerInfo);
        },
        updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current,
                context = getContextForSubtree_1(parentComponent);
            null === container.context ? container.context = context : container.pendingContext = context, scheduleTopLevelUpdate(current, element, callback);
        },
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates,
        getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) return null;
            switch (containerFiber.child.tag) {
                case HostComponent$1:
                    return getPublicInstance(containerFiber.child.stateNode);

                default:
                    return containerFiber.child.stateNode;
            }
        },
        findHostInstance: function findHostInstance(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            return null === hostFiber ? null : hostFiber.stateNode;
        }
    };
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps$1(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps$1
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
        _classCallCheck$1(this, ReactNativeFiberHostComponent), this._nativeTag = tag, this._children = [], this.viewConfig = viewConfig;
    }
    return ReactNativeFiberHostComponent.prototype.blur = function () {
        TextInputState.blurTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.focus = function () {
        TextInputState.focusTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.measure = function (callback) {
        UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, this.viewConfig.validAttributes);
        UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
    }, ReactNativeFiberHostComponent;
}(),
    ReactNativeFiberHostComponent_1 = ReactNativeFiberHostComponent,
    viewConfigs = new Map(),
    ReactNativeViewConfigRegistry = {
    register: function register(viewConfig) {
        var name = viewConfig.uiViewClassName;
        return invariant(!viewConfigs.has(name), "Tried to register two views with the same name %s", name), viewConfigs.set(name, viewConfig), name;
    },
    get: function get(name) {
        var config = viewConfigs.get(name);
        return invariant(config, "View config not found for name %s", name), config;
    }
},
    ReactNativeViewConfigRegistry_1 = ReactNativeViewConfigRegistry,
    precacheFiberNode$1 = ReactNativeComponentTree_1.precacheFiberNode,
    uncacheFiberNode$1 = ReactNativeComponentTree_1.uncacheFiberNode,
    updateFiberProps$1 = ReactNativeComponentTree_1.updateFiberProps;

function recursivelyUncacheFiberNode(node) {
    "number" == typeof node ? uncacheFiberNode$1(node) : (uncacheFiberNode$1(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
}

var NativeRenderer = ReactFiberReconciler({
    appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        index >= 0 ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
    },
    appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag;
        UIManager.setChildren(parentInstance, [childTag]);
    },
    appendInitialChild: function appendInitialChild(parentInstance, child) {
        parentInstance._children.push(child);
    },
    commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
            text: newText
        });
    },
    commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
    commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
        var viewConfig = instance.viewConfig;
        updateFiberProps$1(instance._nativeTag, newProps);
        var updatePayload = ReactNativeAttributePayload_1.diff(oldProps, newProps, viewConfig.validAttributes);
        UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag(),
            viewConfig = ReactNativeViewConfigRegistry_1.get(type),
            updatePayload = ReactNativeAttributePayload_1.create(props, viewConfig.validAttributes);
        UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
        var component = new ReactNativeFiberHostComponent_1(tag, viewConfig);
        return precacheFiberNode$1(internalInstanceHandle, tag), updateFiberProps$1(tag, props), component;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        return UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
        }), precacheFiberNode$1(internalInstanceHandle, tag), tag;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
        if (0 === parentInstance._children.length) return !1;
        var nativeTags = parentInstance._children.map(function (child) {
            return "number" == typeof child ? child : child._nativeTag;
        });
        return UIManager.setChildren(parentInstance._nativeTag, nativeTags), !1;
    },
    getRootHostContext: function getRootHostContext() {
        return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
        return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
        return instance;
    },
    insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        if (index >= 0) {
            children.splice(index, 1);
            var beforeChildIndex = children.indexOf(beforeChild);
            children.splice(beforeChildIndex, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
        } else {
            var _beforeChildIndex = children.indexOf(beforeChild);
            children.splice(_beforeChildIndex, 0, child);
            var childTag = "number" == typeof child ? child : child._nativeTag;
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
        }
    },
    insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
        invariant("number" != typeof parentInstance, "Container does not support insertBefore operation");
    },
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        return emptyObject;
    },
    removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children,
            index = children.indexOf(child);
        children.splice(index, 1), UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
    },
    removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child), UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
    },
    resetAfterCommit: function resetAfterCommit() {},
    resetTextContent: function resetTextContent(instance) {},
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
        return !1;
    },
    scheduleDeferredCallback: commonjsGlobal.requestIdleCallback,
    shouldSetTextContent: function shouldSetTextContent(type, props) {
        return !1;
    },
    useSyncScheduling: !0
}),
    ReactNativeFiberRenderer = NativeRenderer,
    getInspectorDataForViewTag = void 0;

getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
};

var ReactNativeFiberInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    ReactVersion = "16.0.0-alpha.13",
    ReactNativeFeatureFlags = require(212                      ), // 212 = ReactNativeFeatureFlags
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return ReactNativeFiberRenderer.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    findNumericNodeHandleFiber = function findNumericNodeHandleFiber(componentOrHandle) {
    var instance = findNodeHandle_1(componentOrHandle);
    return null == instance || "number" == typeof instance ? instance : instance._nativeTag;
},
    DevOnlyStubShim = null;

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$2(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(react.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback$3 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$3(this, onFail), mountSafeCallback$3(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath,
    createReactNativeComponentClassFiber = function createReactNativeComponentClassFiber(viewConfig) {
    return ReactNativeViewConfigRegistry_1.register(viewConfig);
},
    createReactNativeComponentClassFiber_1 = createReactNativeComponentClassFiber,
    ReactNativeFeatureFlags$3 = require(212                      ), // 212 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? createReactNativeComponentClassFiber_1 : DevOnlyStubShim,
    ReactNativeFeatureFlags$4 = require(212                      ), // 212 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot,
    injectInternals = ReactFiberDevToolsHook.injectInternals;

ReactNativeInjection.inject(), ReactGenericBatching_1.injection.injectFiberBatchedUpdates(ReactNativeFiberRenderer.batchedUpdates);

var roots = new Map();

ReactFiberErrorLogger.injection.injectDialog(ReactNativeFiberErrorDialog_1.showDialog);

var ReactNativeFiber = {
    NativeComponent: ReactNativeComponent_1,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
        var root = roots.get(containerTag);
        return root || (root = ReactNativeFiberRenderer.createContainer(containerTag), roots.set(containerTag, root)), ReactNativeFiberRenderer.updateContainer(element, root, null, callback), ReactNativeFiberRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        var root = roots.get(containerTag);
        root && ReactNativeFiberRenderer.updateContainer(null, root, null, function () {
            roots.delete(containerTag);
        });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeFiber.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unstable_createPortal: function unstable_createPortal(children, containerTag) {
        var key = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
        return ReactPortal.createPortal(children, containerTag, null, key);
    },
    unstable_batchedUpdates: ReactGenericBatching_1.batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

"function" == typeof injectInternals && injectInternals({
    findFiberByHostInstance: ReactNativeComponentTree_1.getClosestInstanceFromNode,
    findHostInstanceByFiber: ReactNativeFiberRenderer.findHostInstance,
    getInspectorDataForViewTag: ReactNativeFiberInspector.getInspectorDataForViewTag,
    bundleType: 0,
    version: ReactVersion
});

var ReactNativeFiberEntry = ReactNativeFiber;

module.exports = ReactNativeFiberEntry;
}, 328, null, "ReactNativeFiber-prod");
__d(/* ReactNativeStack-prod */function(global, require, module, exports) {
"use strict";

var _extends2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

require(219             ); // 219 = InitializeCore

var warning = require(199               ), // 199 = fbjs/lib/warning
    RCTEventEmitter = require(278              ), // 278 = RCTEventEmitter
    emptyFunction = require(200                     ), // 200 = fbjs/lib/emptyFunction
    UIManager = require(279        ), // 279 = UIManager
    React = require(13     ), // 13 = react
    emptyObject = require(280                   ); // 280 = fbjs/lib/emptyObject

require(23                         ); // 23 = prop-types/checkPropTypes

var shallowEqual = require(281                    ), // 281 = fbjs/lib/shallowEqual
    deepDiffer = require(282         ), // 282 = deepDiffer
    flattenStyle = require(273           ), // 273 = flattenStyle
    TextInputState = require(283             ); // 283 = TextInputState

require(189                                ); // 189 = deepFreezeAndThrowOnMutationInDev

var instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree,
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: null,
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry,
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
},
    _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected;
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection
},
    EventPluginUtils_1 = EventPluginUtils;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

_extends2(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            this[propName] = null;
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    _extends2(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = _extends2({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent,
    _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt || (rootNodeID = target)), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (var i = 0; i < touchBank.length; i++) {
            var touchTrackToCheck = touchBank[i];
            if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                touchHistory.indexOfSingleActiveTouch = i;
                break;
            }
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
};

function ReactNativeContainerInfo(tag) {
    return {
        _tag: tag
    };
}

var ReactNativeContainerInfo_1 = ReactNativeContainerInfo,
    ClassComponent = ReactTypeOfWork.ClassComponent;

function isValidOwner(object) {
    return !(!object || "function" != typeof object.attachRef || "function" != typeof object.detachRef);
}

var ReactOwner = {
    addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = component.getPublicInstance();
        } else invariant(isValidOwner(owner), "addComponentAsRefTo(...): Only a ReactOwner can have refs. You might " + "be adding a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner)."), owner.attachRef(ref, component);
    },
    removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            inst && inst.refs[ref] === component.getPublicInstance() && delete inst.refs[ref];
        } else {
            invariant(isValidOwner(owner), "removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might " + "be removing a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner).");
            var ownerPublicInstance = owner.getPublicInstance();
            ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance() && owner.detachRef(ref);
        }
    }
},
    ReactOwner_1 = ReactOwner,
    ReactRef = {};

function attachRef(ref, component, owner) {
    "function" == typeof ref ? ref(component.getPublicInstance()) : ReactOwner_1.addComponentAsRefTo(component, ref, owner);
}

function detachRef(ref, component, owner) {
    "function" == typeof ref ? ref(null) : ReactOwner_1.removeComponentAsRefFrom(component, ref, owner);
}

ReactRef.attachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && attachRef(ref, instance, element._owner);
    }
}, ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
    var prevRef = null,
        prevOwner = null;
    null !== prevElement && "object" == typeof prevElement && (prevRef = prevElement.ref, prevOwner = prevElement._owner);
    var nextRef = null,
        nextOwner = null;
    return null !== nextElement && "object" == typeof nextElement && (nextRef = nextElement.ref, nextOwner = nextElement._owner), prevRef !== nextRef || "string" == typeof nextRef && nextOwner !== prevOwner;
}, ReactRef.detachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && detachRef(ref, instance, element._owner);
    }
};

var ReactRef_1 = ReactRef;

function attachRefs() {
    ReactRef_1.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
    mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
        return internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance), markup;
    },
    getHostNode: function getHostNode(internalInstance) {
        return internalInstance.getHostNode();
    },
    unmountComponent: function unmountComponent(internalInstance, safely, skipLifecycle) {
        ReactRef_1.detachRefs(internalInstance, internalInstance._currentElement), internalInstance.unmountComponent(safely, skipLifecycle);
    },
    receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
        var prevElement = internalInstance._currentElement;
        if (nextElement !== prevElement || context !== internalInstance._context) {
            var refsChanged = ReactRef_1.shouldUpdateRefs(prevElement, nextElement);
            refsChanged && ReactRef_1.detachRefs(internalInstance, prevElement), internalInstance.receiveComponent(nextElement, transaction, context), refsChanged && internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
        }
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
        if (internalInstance._updateBatchNumber !== updateBatchNumber) return void warning(null == internalInstance._updateBatchNumber || internalInstance._updateBatchNumber === updateBatchNumber + 1, "performUpdateIfNecessary: Unexpected batch number (current %s, " + "pending %s)", updateBatchNumber, internalInstance._updateBatchNumber);
        internalInstance.performUpdateIfNecessary(transaction);
    }
},
    ReactReconciler_1 = ReactReconciler,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    OBSERVED_ERROR = {},
    TransactionImpl = {
    reinitializeTransaction: function reinitializeTransaction() {
        this.transactionWrappers = this.getTransactionWrappers(), this.wrapperInitData ? this.wrapperInitData.length = 0 : this.wrapperInitData = [], this._isInTransaction = !1;
    },
    _isInTransaction: !1,
    getTransactionWrappers: null,
    isInTransaction: function isInTransaction() {
        return !!this._isInTransaction;
    },
    perform: function perform(method, scope, a, b, c, d, e, f) {
        invariant(!this.isInTransaction(), "Transaction.perform(...): Cannot initialize a transaction when there " + "is already an outstanding transaction.");
        var errorThrown, ret;
        try {
            this._isInTransaction = !0, errorThrown = !0, this.initializeAll(0), ret = method.call(scope, a, b, c, d, e, f), errorThrown = !1;
        } finally {
            try {
                if (errorThrown) try {
                    this.closeAll(0);
                } catch (err) {} else this.closeAll(0);
            } finally {
                this._isInTransaction = !1;
            }
        }
        return ret;
    },
    initializeAll: function initializeAll(startIndex) {
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var wrapper = transactionWrappers[i];
            try {
                this.wrapperInitData[i] = OBSERVED_ERROR, this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
            } finally {
                if (this.wrapperInitData[i] === OBSERVED_ERROR) try {
                    this.initializeAll(i + 1);
                } catch (err) {}
            }
        }
    },
    closeAll: function closeAll(startIndex) {
        invariant(this.isInTransaction(), "Transaction.closeAll(): Cannot close transaction when none are open.");
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var errorThrown,
                wrapper = transactionWrappers[i],
                initData = this.wrapperInitData[i];
            try {
                errorThrown = !0, initData !== OBSERVED_ERROR && wrapper.close && wrapper.close.call(this, initData), errorThrown = !1;
            } finally {
                if (errorThrown) try {
                    this.closeAll(i + 1);
                } catch (e) {}
            }
        }
        this.wrapperInitData.length = 0;
    }
},
    Transaction = TransactionImpl,
    dirtyComponents = [],
    updateBatchNumber = 0,
    batchingStrategy = null;

function ensureInjected() {
    invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy, "ReactUpdates: must inject a reconcile transaction class and batching " + "strategy");
}

var NESTED_UPDATES = {
    initialize: function initialize() {
        this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function close() {
        this.dirtyComponentsLength !== dirtyComponents.length ? (dirtyComponents.splice(0, this.dirtyComponentsLength), flushBatchedUpdates()) : dirtyComponents.length = 0;
    }
},
    TRANSACTION_WRAPPERS = [NESTED_UPDATES];

function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction(), this.dirtyComponentsLength = null, this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(!0);
}

_extends2(ReactUpdatesFlushTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS;
    },
    destructor: function destructor() {
        this.dirtyComponentsLength = null, ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction), this.reconcileTransaction = null;
    },
    perform: function perform(method, scope, a) {
        return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
}), PooledClass_1.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates$1(callback, a, b, c, d, e) {
    return ensureInjected(), batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    invariant(len === dirtyComponents.length, "Expected flush transaction's stored dirty-components length (%s) to " + "match dirty-components array length (%s).", len, dirtyComponents.length), dirtyComponents.sort(mountOrderComparator), updateBatchNumber++;
    for (var i = 0; i < len; i++) {
        var component = dirtyComponents[i];
        ReactReconciler_1.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
    }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
    for (; dirtyComponents.length;) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction), ReactUpdatesFlushTransaction.release(transaction);
    }
};

function enqueueUpdate$1(component) {
    if (ensureInjected(), !batchingStrategy.isBatchingUpdates) return void batchingStrategy.batchedUpdates(enqueueUpdate$1, component);
    dirtyComponents.push(component), null == component._updateBatchNumber && (component._updateBatchNumber = updateBatchNumber + 1);
}

var ReactUpdatesInjection = {
    injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
        invariant(ReconcileTransaction, "ReactUpdates: must provide a reconcile transaction class"), ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },
    injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
        invariant(_batchingStrategy, "ReactUpdates: must provide a batching strategy"), invariant("function" == typeof _batchingStrategy.batchedUpdates, "ReactUpdates: must provide a batchedUpdates() function"), invariant("boolean" == typeof _batchingStrategy.isBatchingUpdates, "ReactUpdates: must provide an isBatchingUpdates boolean attribute"), batchingStrategy = _batchingStrategy;
    },
    getBatchingStrategy: function getBatchingStrategy() {
        return batchingStrategy;
    }
},
    ReactUpdates = {
    ReactReconcileTransaction: null,
    batchedUpdates: batchedUpdates$1,
    enqueueUpdate: enqueueUpdate$1,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection
},
    ReactUpdates_1 = ReactUpdates,
    ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
},
    ReactGlobalSharedState_1 = ReactGlobalSharedState;

function enqueueUpdate(internalInstance) {
    ReactUpdates_1.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap_1.get(publicInstance);
    return internalInstance || null;
}

var ReactUpdateQueue = {
    isMounted: function isMounted(publicInstance) {
        var internalInstance = ReactInstanceMap_1.get(publicInstance);
        return !!internalInstance && !!internalInstance._renderedComponent;
    },
    enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
        internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback], enqueueUpdate(internalInstance);
    },
    enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (callback = void 0 === callback ? null : callback, null !== callback && (internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), internalInstance._pendingForceUpdate = !0, enqueueUpdate(internalInstance));
    },
    enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (internalInstance._pendingStateQueue = [completeState], internalInstance._pendingReplaceState = !0, callback = void 0 === callback ? null : callback, null !== callback && (internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance));
    },
    enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        if (internalInstance) {
            (internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = [])).push(partialState), callback = void 0 === callback ? null : callback, null !== callback && (internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance);
        }
    },
    enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
        internalInstance._pendingElement = nextElement, internalInstance._context = nextContext, enqueueUpdate(internalInstance);
    }
},
    ReactUpdateQueue_1 = ReactUpdateQueue,
    injected = !1,
    ReactComponentEnvironment = {
    replaceNodeWithMarkup: null,
    processChildrenUpdates: null,
    injection: {
        injectEnvironment: function injectEnvironment(environment) {
            invariant(!injected, "ReactCompositeComponent: injectEnvironment() can only be called once."), ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup, ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates, injected = !0;
        }
    }
},
    ReactComponentEnvironment_1 = ReactComponentEnvironment,
    ReactCompositeComponentTypes$1 = {
    ImpureClass: 0,
    PureClass: 1,
    StatelessFunctional: 2
},
    ReactNodeTypes = {
    HOST: 0,
    COMPOSITE: 1,
    EMPTY: 2,
    getType: function getType(node) {
        return null === node || !1 === node ? ReactNodeTypes.EMPTY : React.isValidElement(node) ? "function" == typeof node.type ? ReactNodeTypes.COMPOSITE : ReactNodeTypes.HOST : void invariant(!1, "Unexpected node: %s", node);
    }
},
    ReactNodeTypes_1 = ReactNodeTypes;

function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = null === prevElement || !1 === prevElement,
        nextEmpty = null === nextElement || !1 === nextElement;
    if (prevEmpty || nextEmpty) return prevEmpty === nextEmpty;
    var prevType = typeof prevElement,
        nextType = typeof nextElement;
    return "string" === prevType || "number" === prevType ? "string" === nextType || "number" === nextType : "object" === nextType && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
}

var shouldUpdateReactComponent_1 = shouldUpdateReactComponent,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner;

function StatelessComponent(Component) {}

StatelessComponent.prototype.render = function () {
    return (0, ReactInstanceMap_1.get(this)._currentElement.type)(this.props, this.context, this.updater);
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
    return !(!Component.prototype || !Component.prototype.isPureReactComponent);
}

var nextMountID = 1,
    ReactCompositeComponent = {
    construct: function construct(element) {
        this._currentElement = element, this._rootNodeID = 0, this._compositeType = null, this._instance = null, this._hostParent = null, this._hostContainerInfo = null, this._updateBatchNumber = null, this._pendingElement = null, this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._renderedNodeType = null, this._renderedComponent = null, this._context = null, this._mountOrder = 0, this._topLevelWrapper = null, this._pendingCallbacks = null, this._calledComponentWillUnmount = !1;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        this._context = context, this._mountOrder = nextMountID++, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        var renderedElement,
            publicProps = this._currentElement.props,
            publicContext = this._processContext(context),
            Component = this._currentElement.type,
            updateQueue = transaction.getUpdateQueue(),
            doConstruct = shouldConstruct(Component),
            inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
        doConstruct || null != inst && null != inst.render ? isPureComponent(Component) ? this._compositeType = ReactCompositeComponentTypes$1.PureClass : this._compositeType = ReactCompositeComponentTypes$1.ImpureClass : (renderedElement = inst, invariant(null === inst || !1 === inst || React.isValidElement(inst), "%s(...): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", Component.displayName || Component.name || "Component"), inst = new StatelessComponent(Component), this._compositeType = ReactCompositeComponentTypes$1.StatelessFunctional), inst.props = publicProps, inst.context = publicContext, inst.refs = emptyObject, inst.updater = updateQueue, this._instance = inst, ReactInstanceMap_1.set(inst, this);
        var initialState = inst.state;
        void 0 === initialState && (inst.state = initialState = null), invariant("object" == typeof initialState && !Array.isArray(initialState), "%s.state: must be set to an object or null", this.getName() || "ReactCompositeComponent"), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, inst.componentWillMount && (inst.componentWillMount(), this._pendingStateQueue && (inst.state = this._processPendingState(inst.props, inst.context)));
        var markup;
        markup = inst.unstable_handleError ? this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) : this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context), inst.componentDidMount && transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
        var callbacks = this._pendingCallbacks;
        if (callbacks) {
            this._pendingCallbacks = null;
            for (var i = 0; i < callbacks.length; i++) {
                transaction.getReactMountReady().enqueue(callbacks[i], inst);
            }
        }
        return markup;
    },
    _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    },
    _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
        var Component = this._currentElement.type;
        return doConstruct ? new Component(publicProps, publicContext, updateQueue) : Component(publicProps, publicContext, updateQueue);
    },
    performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        var markup,
            checkpoint = transaction.checkpoint();
        try {
            markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._renderedComponent.unmountComponent(!0, !0), transaction.rollback(checkpoint), markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        }
        return markup;
    },
    performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        void 0 === renderedElement && (renderedElement = this._renderValidatedComponent());
        var nodeType = ReactNodeTypes_1.getType(renderedElement);
        this._renderedNodeType = nodeType;
        var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
        return this._renderedComponent = child, ReactReconciler_1.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), 0);
    },
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        if (this._renderedComponent) {
            var inst = this._instance;
            if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) if (inst._calledComponentWillUnmount = !0, safely) {
                if (!skipLifecycle) {
                    var name = this.getName() + ".componentWillUnmount()";
                    ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(name, inst.componentWillUnmount, inst);
                }
            } else inst.componentWillUnmount();
            this._renderedComponent && (ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedNodeType = null, this._renderedComponent = null, this._instance = null), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._pendingCallbacks = null, this._pendingElement = null, this._context = null, this._rootNodeID = 0, this._topLevelWrapper = null, ReactInstanceMap_1.remove(inst);
        }
    },
    _maskContext: function _maskContext(context) {
        var Component = this._currentElement.type,
            contextTypes = Component.contextTypes;
        if (!contextTypes) return emptyObject;
        var maskedContext = {};
        for (var contextName in contextTypes) {
            maskedContext[contextName] = context[contextName];
        }return maskedContext;
    },
    _processContext: function _processContext(context) {
        return this._maskContext(context);
    },
    _processChildContext: function _processChildContext(currentContext) {
        var childContext,
            Component = this._currentElement.type,
            inst = this._instance;
        if ("function" == typeof inst.getChildContext) {
            childContext = inst.getChildContext(), invariant("object" == typeof Component.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", this.getName() || "ReactCompositeComponent");
            for (var name in childContext) {
                invariant(name in Component.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || "ReactCompositeComponent", name);
            }return _extends2({}, currentContext, childContext);
        }
        return currentContext;
    },
    _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {},
    receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
        var prevElement = this._currentElement,
            prevContext = this._context;
        this._pendingElement = null, this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
        if (null != this._pendingElement) ReactReconciler_1.receiveComponent(this, this._pendingElement, transaction, this._context);else if (null !== this._pendingStateQueue || this._pendingForceUpdate) this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);else {
            var callbacks = this._pendingCallbacks;
            if (this._pendingCallbacks = null, callbacks) for (var j = 0; j < callbacks.length; j++) {
                transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
            }this._updateBatchNumber = null;
        }
    },
    updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
        var inst = this._instance;
        invariant(null != inst, "Attempted to update component `%s` that has already been unmounted " + "(or failed to mount).", this.getName() || "ReactCompositeComponent");
        var nextContext,
            willReceive = !1;
        this._context === nextUnmaskedContext ? nextContext = inst.context : (nextContext = this._processContext(nextUnmaskedContext), willReceive = !0);
        var prevProps = prevParentElement.props,
            nextProps = nextParentElement.props;
        if (prevParentElement !== nextParentElement && (willReceive = !0), willReceive && inst.componentWillReceiveProps) {
            var beforeState = inst.state;
            inst.componentWillReceiveProps(nextProps, nextContext);
            var afterState = inst.state;
            beforeState !== afterState && (inst.state = beforeState, inst.updater.enqueueReplaceState(inst, afterState));
        }
        var callbacks = this._pendingCallbacks;
        this._pendingCallbacks = null;
        var nextState = this._processPendingState(nextProps, nextContext),
            shouldUpdate = !0;
        if (!this._pendingForceUpdate) {
            var prevState = inst.state;
            shouldUpdate = willReceive || nextState !== prevState, inst.shouldComponentUpdate ? shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext) : this._compositeType === ReactCompositeComponentTypes$1.PureClass && (shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState));
        }
        if (this._updateBatchNumber = null, shouldUpdate ? (this._pendingForceUpdate = !1, this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext)) : (this._currentElement = nextParentElement, this._context = nextUnmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext), callbacks) for (var j = 0; j < callbacks.length; j++) {
            transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
        }
    },
    _processPendingState: function _processPendingState(props, context) {
        var inst = this._instance,
            queue = this._pendingStateQueue,
            replace = this._pendingReplaceState;
        if (this._pendingReplaceState = !1, this._pendingStateQueue = null, !queue) return inst.state;
        if (replace && 1 === queue.length) return queue[0];
        for (var nextState = replace ? queue[0] : inst.state, dontMutate = !0, i = replace ? 1 : 0; i < queue.length; i++) {
            var partial = queue[i],
                partialState = "function" == typeof partial ? partial.call(inst, nextState, props, context) : partial;
            partialState && (dontMutate ? (dontMutate = !1, nextState = _extends2({}, nextState, partialState)) : _extends2(nextState, partialState));
        }
        return nextState;
    },
    _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
        var prevProps,
            prevState,
            inst = this._instance,
            hasComponentDidUpdate = !!inst.componentDidUpdate;
        hasComponentDidUpdate && (prevProps = inst.props, prevState = inst.state), inst.componentWillUpdate && inst.componentWillUpdate(nextProps, nextState, nextContext), this._currentElement = nextElement, this._context = unmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext, inst.unstable_handleError ? this._updateRenderedComponentWithErrorHandling(transaction, unmaskedContext) : this._updateRenderedComponent(transaction, unmaskedContext), hasComponentDidUpdate && transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState), inst);
    },
    _updateRenderedComponentWithErrorHandling: function _updateRenderedComponentWithErrorHandling(transaction, context) {
        var checkpoint = transaction.checkpoint();
        try {
            this._updateRenderedComponent(transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._updateRenderedComponentWithNextElement(transaction, context, null, !0), this._updateRenderedComponent(transaction, context);
        }
    },
    _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
        var nextRenderedElement = this._renderValidatedComponent();
        this._updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, !1);
    },
    _updateRenderedComponentWithNextElement: function _updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, safely) {
        var prevComponentInstance = this._renderedComponent,
            prevRenderedElement = prevComponentInstance._currentElement;
        if (shouldUpdateReactComponent_1(prevRenderedElement, nextRenderedElement)) ReactReconciler_1.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));else {
            var oldHostNode = ReactReconciler_1.getHostNode(prevComponentInstance),
                nodeType = ReactNodeTypes_1.getType(nextRenderedElement);
            this._renderedNodeType = nodeType;
            var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
            this._renderedComponent = child;
            var nextMarkup = ReactReconciler_1.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), 0);
            ReactReconciler_1.unmountComponent(prevComponentInstance, safely, !1), this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
        }
    },
    _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
        ReactComponentEnvironment_1.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
    },
    _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
        var inst = this._instance;
        return inst.render();
    },
    _renderValidatedComponent: function _renderValidatedComponent() {
        var renderedElement;
        if (1 && this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional) renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();else {
            ReactCurrentOwner$1.current = this;
            try {
                renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
            } finally {
                ReactCurrentOwner$1.current = null;
            }
        }
        return invariant(null === renderedElement || !1 === renderedElement || React.isValidElement(renderedElement), "%s.render(): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", this.getName() || "ReactCompositeComponent"), renderedElement;
    },
    attachRef: function attachRef(ref, component) {
        var inst = this.getPublicInstance();
        invariant(null != inst, "Stateless function components cannot have refs.");
        var publicComponentInstance = component.getPublicInstance();
        (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = publicComponentInstance;
    },
    detachRef: function detachRef(ref) {
        delete this.getPublicInstance().refs[ref];
    },
    getName: function getName() {
        var type = this._currentElement.type,
            constructor = this._instance && this._instance.constructor;
        return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },
    getPublicInstance: function getPublicInstance() {
        var inst = this._instance;
        return this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional ? null : inst;
    },
    _instantiateReactComponent: null
},
    ReactCompositeComponent_1 = ReactCompositeComponent,
    emptyComponentFactory,
    ReactEmptyComponentInjection = {
    injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
        emptyComponentFactory = factory;
    }
},
    ReactEmptyComponent = {
    create: function create(instantiate) {
        return emptyComponentFactory(instantiate);
    }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

var ReactEmptyComponent_1 = ReactEmptyComponent,
    genericComponentClass = null,
    textComponentClass = null,
    ReactHostComponentInjection = {
    injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
        genericComponentClass = componentClass;
    },
    injectTextComponentClass: function injectTextComponentClass(componentClass) {
        textComponentClass = componentClass;
    }
};

function createInternalComponent(element) {
    return invariant(genericComponentClass, "There is no registered component for the tag %s", element.type), new genericComponentClass(element);
}

function createInstanceForText(text) {
    return new textComponentClass(text);
}

function isTextComponent(component) {
    return component instanceof textComponentClass;
}

var ReactHostComponent = {
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactHostComponentInjection
},
    ReactHostComponent_1 = ReactHostComponent,
    ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
    this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
    if (owner) {
        var name = owner.getName();
        if (name) return "\n\nCheck the render method of `" + name + "`.";
    }
    return "";
}

function isInternalComponentType(type) {
    return "function" == typeof type && void 0 !== type.prototype && "function" == typeof type.prototype.mountComponent && "function" == typeof type.prototype.receiveComponent;
}

function instantiateReactComponent(node, shouldHaveDebugID) {
    var instance;
    if (null === node || !1 === node) instance = ReactEmptyComponent_1.create(instantiateReactComponent);else if ("object" == typeof node) {
        var element = node,
            type = element.type;
        if ("function" != typeof type && "string" != typeof type) {
            var info = "";
            info += getDeclarationErrorAddendum(element._owner), invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
        }
        "string" == typeof element.type ? instance = ReactHostComponent_1.createInternalComponent(element) : isInternalComponentType(element.type) ? (instance = new element.type(element), instance.getHostNode || (instance.getHostNode = instance.getNativeNode)) : instance = new ReactCompositeComponentWrapper(element);
    } else "string" == typeof node || "number" == typeof node ? instance = ReactHostComponent_1.createInstanceForText(node) : invariant(!1, "Encountered invalid React node of type %s", typeof node);
    return instance._mountIndex = 0, instance._mountImage = null, instance;
}

_extends2(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent_1, {
    _instantiateReactComponent: instantiateReactComponent
});

var instantiateReactComponent_1 = instantiateReactComponent,
    DevOnlyStubShim = null,
    ReactNativeFeatureFlags = require(212                      ), // 212 = ReactNativeFeatureFlags
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return DevOnlyStubShim.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    TopLevelWrapper = function TopLevelWrapper() {};

TopLevelWrapper.prototype.isReactComponent = {}, TopLevelWrapper.prototype.render = function () {
    return this.props.child;
}, TopLevelWrapper.isReactTopLevelWrapper = !0;

function mountComponentIntoNode(componentInstance, containerTag, transaction) {
    var markup = ReactReconciler_1.mountComponent(componentInstance, transaction, null, ReactNativeContainerInfo_1(containerTag), emptyObject, 0);
    componentInstance._renderedComponent._topLevelWrapper = componentInstance, ReactNativeMount._mountImageIntoNode(markup, containerTag);
}

function batchedMountComponentIntoNode(componentInstance, containerTag) {
    var transaction = ReactUpdates_1.ReactReconcileTransaction.getPooled();
    transaction.perform(mountComponentIntoNode, null, componentInstance, containerTag, transaction), ReactUpdates_1.ReactReconcileTransaction.release(transaction);
}

var ReactNativeMount = {
    _instancesByContainerID: {},
    findNodeHandle: findNodeHandle_1,
    renderComponent: function renderComponent(nextElement, containerTag, callback) {
        var nextWrappedElement = React.createElement(TopLevelWrapper, {
            child: nextElement
        }),
            topRootNodeID = containerTag,
            prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];
        if (prevComponent) {
            var prevWrappedElement = prevComponent._currentElement,
                prevElement = prevWrappedElement.props.child;
            if (shouldUpdateReactComponent_1(prevElement, nextElement)) return ReactUpdateQueue_1.enqueueElementInternal(prevComponent, nextWrappedElement, emptyObject), callback && ReactUpdateQueue_1.enqueueCallbackInternal(prevComponent, callback), prevComponent;
            ReactNativeMount.unmountComponentAtNode(containerTag);
        }
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), null;
        ReactNativeTagHandles_1.assertRootTag(containerTag);
        var instance = instantiateReactComponent_1(nextWrappedElement, !1);
        if (ReactNativeMount._instancesByContainerID[containerTag] = instance, callback) {
            var nonNullCallback = callback;
            instance._pendingCallbacks = [function () {
                nonNullCallback.call(instance._renderedComponent.getPublicInstance());
            }];
        }
        return ReactUpdates_1.batchedUpdates(batchedMountComponentIntoNode, instance, containerTag), instance._renderedComponent.getPublicInstance();
    },
    _mountImageIntoNode: function _mountImageIntoNode(mountImage, containerID) {
        var childTag = mountImage;
        UIManager.setChildren(containerID, [childTag]);
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeMount.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), !1;
        var instance = ReactNativeMount._instancesByContainerID[containerTag];
        return !!instance && (ReactNativeMount.unmountComponentFromNode(instance, containerTag), delete ReactNativeMount._instancesByContainerID[containerTag], !0);
    },
    unmountComponentFromNode: function unmountComponentFromNode(instance, containerID) {
        ReactReconciler_1.unmountComponent(instance), UIManager.removeSubviewsFromContainerWithID(containerID);
    }
},
    ReactNativeMount_1 = ReactNativeMount,
    RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function close() {
        ReactDefaultBatchingStrategy.isBatchingUpdates = !1;
    }
},
    FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates_1.flushBatchedUpdates.bind(ReactUpdates_1)
},
    TRANSACTION_WRAPPERS$1 = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
}

_extends2(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$1;
    }
});

var transaction = new ReactDefaultBatchingStrategyTransaction(),
    ReactDefaultBatchingStrategy = {
    isBatchingUpdates: !1,
    batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
        var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
        return ReactDefaultBatchingStrategy.isBatchingUpdates = !0, alreadyBatchingUpdates ? callback(a, b, c, d, e) : transaction.perform(callback, null, a, b, c, d, e);
    }
},
    ReactDefaultBatchingStrategy_1 = ReactDefaultBatchingStrategy,
    dangerouslyProcessChildrenUpdates = function dangerouslyProcessChildrenUpdates(inst, childrenUpdates) {
    if (childrenUpdates.length) {
        for (var moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices, containerTag = ReactNativeComponentTree_1.getNodeFromInstance(inst), i = 0; i < childrenUpdates.length; i++) {
            var update = childrenUpdates[i];
            if ("MOVE_EXISTING" === update.type) (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex), (moveToIndices || (moveToIndices = [])).push(update.toIndex);else if ("REMOVE_NODE" === update.type) (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);else if ("INSERT_MARKUP" === update.type) {
                var mountImage = update.content,
                    tag = mountImage;
                (addAtIndices || (addAtIndices = [])).push(update.toIndex), (addChildTags || (addChildTags = [])).push(tag);
            }
        }
        UIManager.manageChildren(containerTag, moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices);
    }
},
    ReactNativeDOMIDOperations = {
    dangerouslyProcessChildrenUpdates: dangerouslyProcessChildrenUpdates,
    dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, mountImage) {
        var oldTag = id;
        UIManager.replaceExistingNonRootView(oldTag, mountImage);
    }
},
    ReactNativeDOMIDOperations_1 = ReactNativeDOMIDOperations;

function validateCallback(callback) {
    invariant(!callback || "function" == typeof callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", callback);
}

var validateCallback_1 = validateCallback;

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var CallbackQueue = function () {
    function CallbackQueue() {
        _classCallCheck(this, CallbackQueue), this._callbacks = null, this._contexts = null;
    }
    return CallbackQueue.prototype.enqueue = function (callback, context) {
        this._callbacks = this._callbacks || [], this._callbacks.push(callback), this._contexts = this._contexts || [], this._contexts.push(context);
    }, CallbackQueue.prototype.notifyAll = function () {
        var callbacks = this._callbacks,
            contexts = this._contexts;
        if (callbacks && contexts) {
            invariant(callbacks.length === contexts.length, "Mismatched list of contexts in callback queue"), this._callbacks = null, this._contexts = null;
            for (var i = 0; i < callbacks.length; i++) {
                validateCallback_1(callbacks[i]), callbacks[i].call(contexts[i]);
            }callbacks.length = 0, contexts.length = 0;
        }
    }, CallbackQueue.prototype.checkpoint = function () {
        return this._callbacks ? this._callbacks.length : 0;
    }, CallbackQueue.prototype.rollback = function (len) {
        this._callbacks && this._contexts && (this._callbacks.length = len, this._contexts.length = len);
    }, CallbackQueue.prototype.reset = function () {
        this._callbacks = null, this._contexts = null;
    }, CallbackQueue.prototype.destructor = function () {
        this.reset();
    }, CallbackQueue;
}(),
    CallbackQueue_1 = PooledClass_1.addPoolingTo(CallbackQueue),
    ON_DOM_READY_QUEUEING = {
    initialize: function initialize() {
        this.reactMountReady.reset();
    },
    close: function close() {
        this.reactMountReady.notifyAll();
    }
},
    TRANSACTION_WRAPPERS$2 = [ON_DOM_READY_QUEUEING];

function ReactNativeReconcileTransaction() {
    this.reinitializeTransaction(), this.reactMountReady = CallbackQueue_1.getPooled();
}

var Mixin = {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$2;
    },
    getReactMountReady: function getReactMountReady() {
        return this.reactMountReady;
    },
    getUpdateQueue: function getUpdateQueue() {
        return ReactUpdateQueue_1;
    },
    checkpoint: function checkpoint() {
        return this.reactMountReady.checkpoint();
    },
    rollback: function rollback(checkpoint) {
        this.reactMountReady.rollback(checkpoint);
    },
    destructor: function destructor() {
        CallbackQueue_1.release(this.reactMountReady), this.reactMountReady = null;
    }
};

_extends2(ReactNativeReconcileTransaction.prototype, Transaction, ReactNativeReconcileTransaction, Mixin), PooledClass_1.addPoolingTo(ReactNativeReconcileTransaction);

var ReactNativeReconcileTransaction_1 = ReactNativeReconcileTransaction,
    ReactNativeComponentEnvironment = {
    processChildrenUpdates: ReactNativeDOMIDOperations_1.dangerouslyProcessChildrenUpdates,
    replaceNodeWithMarkup: ReactNativeDOMIDOperations_1.dangerouslyReplaceNodeWithMarkupByID,
    clearNode: function clearNode() {},
    ReactReconcileTransaction: ReactNativeReconcileTransaction_1
},
    ReactNativeComponentEnvironment_1 = ReactNativeComponentEnvironment,
    ReactNativeTextComponent = function ReactNativeTextComponent(text) {
    this._currentElement = text, this._stringText = "" + text, this._hostParent = null, this._rootNodeID = 0;
};

_extends2(ReactNativeTextComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        invariant(context.isInAParentText, 'RawText "%s" must be wrapped in an explicit <Text> component.', this._stringText), this._hostParent = hostParent;
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag;
        var nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, "RCTRawText", nativeTopRootTag, {
            text: this._stringText
        }), ReactNativeComponentTree_1.precacheNode(this, tag), tag;
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    receiveComponent: function receiveComponent(nextText, transaction, context) {
        if (nextText !== this._currentElement) {
            this._currentElement = nextText;
            var nextStringText = "" + nextText;
            nextStringText !== this._stringText && (this._stringText = nextStringText, UIManager.updateView(this._rootNodeID, "RCTRawText", {
                text: this._stringText
            }));
        }
    },
    unmountComponent: function unmountComponent() {
        ReactNativeComponentTree_1.uncacheNode(this), this._currentElement = null, this._stringText = null, this._rootNodeID = 0;
    }
});

var ReactNativeTextComponent_1 = ReactNativeTextComponent,
    ReactSimpleEmptyComponent = function ReactSimpleEmptyComponent(placeholderElement, instantiate) {
    this._currentElement = null, this._renderedComponent = instantiate(placeholderElement);
};

_extends2(ReactSimpleEmptyComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        return ReactReconciler_1.mountComponent(this._renderedComponent, transaction, hostParent, hostContainerInfo, context, parentDebugID);
    },
    receiveComponent: function receiveComponent() {},
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedComponent = null;
    }
});

var ReactSimpleEmptyComponent_1 = ReactSimpleEmptyComponent;

function inject$1() {
    ReactGenericBatching_1.injection.injectStackBatchedUpdates(ReactUpdates_1.batchedUpdates), ReactUpdates_1.injection.injectReconcileTransaction(ReactNativeComponentEnvironment_1.ReactReconcileTransaction), ReactUpdates_1.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy_1), ReactComponentEnvironment_1.injection.injectEnvironment(ReactNativeComponentEnvironment_1);
    var EmptyComponent = function EmptyComponent(instantiate) {
        var View = require(285   ); // 285 = View
        return new ReactSimpleEmptyComponent_1(React.createElement(View, {
            collapsable: !0,
            style: {
                position: "absolute"
            }
        }), instantiate);
    };
    ReactEmptyComponent_1.injection.injectEmptyComponentFactory(EmptyComponent), ReactHostComponent_1.injection.injectTextComponentClass(ReactNativeTextComponent_1), ReactHostComponent_1.injection.injectGenericComponentClass(function (tag) {
        var info = "";
        "string" == typeof tag && /^[a-z]/.test(tag) && (info += " Each component name should start with an uppercase letter."), invariant(!1, "Expected a component class, got %s.%s", tag, info);
    });
}

var ReactNativeStackInjection = {
    inject: inject$1
},
    getInspectorDataForViewTag = void 0;

getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
};

var ReactNativeStackInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    findNumericNodeHandleStack = function findNumericNodeHandleStack(componentOrHandle) {
    var nodeHandle = findNodeHandle_1(componentOrHandle);
    return null == nodeHandle || "number" == typeof nodeHandle ? nodeHandle : nodeHandle.getHostNode();
};

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck$2(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$1(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(React.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(212                      ), // 212 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath;

function escape(key) {
    var escaperLookup = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + ("" + key).replace(/[=:]/g, function (match) {
        return escaperLookup[match];
    });
}

var unescapeInDev = emptyFunction,
    KeyEscapeUtils = {
    escape: escape,
    unescapeInDev: unescapeInDev
},
    KeyEscapeUtils_1 = KeyEscapeUtils,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103,
    SEPARATOR = ".",
    SUBSEPARATOR = ":";

function getComponentKey(component, index) {
    return component && "object" == typeof component && null != component.key ? KeyEscapeUtils_1.escape(component.key) : index.toString(36);
}

function traverseStackChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
    if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
    var child,
        nextName,
        subtreeCount = 0,
        nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
    if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
        child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
    } else {
        var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
        if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
            child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
        } else if ("object" === type) {
            var addendum = "",
                childrenString = "" + children;
            invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
        }
    }
    return subtreeCount;
}

function traverseStackChildren(children, callback, traverseContext) {
    return null == children ? 0 : traverseStackChildrenImpl(children, "", callback, traverseContext);
}

var traverseStackChildren_1 = traverseStackChildren,
    ReactComponentTreeHook$1;

"undefined" != typeof process && process.env && "production" == "test" && (ReactComponentTreeHook$1 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function instantiateChild(childInstances, child, name, selfDebugID) {
    var keyUnique = void 0 === childInstances[name];
    null != child && keyUnique && (childInstances[name] = instantiateReactComponent_1(child, !0));
}

var ReactChildReconciler = {
    instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) {
        if (null == nestedChildNodes) return null;
        var childInstances = {};
        return traverseStackChildren_1(nestedChildNodes, instantiateChild, childInstances), childInstances;
    },
    updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) {
        if (nextChildren || prevChildren) {
            var name, prevChild;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    prevChild = prevChildren && prevChildren[name];
                    var prevElement = prevChild && prevChild._currentElement,
                        nextElement = nextChildren[name];
                    if (null != prevChild && shouldUpdateReactComponent_1(prevElement, nextElement)) ReactReconciler_1.receiveComponent(prevChild, nextElement, transaction, context), nextChildren[name] = prevChild;else {
                        var nextChildInstance = instantiateReactComponent_1(nextElement, !0);
                        nextChildren[name] = nextChildInstance;
                        var nextChildMountImage = ReactReconciler_1.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
                        mountImages.push(nextChildMountImage), prevChild && (removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
                    }
                }
            }for (name in prevChildren) {
                !prevChildren.hasOwnProperty(name) || nextChildren && nextChildren.hasOwnProperty(name) || (prevChild = prevChildren[name], removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
            }
        }
    },
    unmountChildren: function unmountChildren(renderedChildren, safely, skipLifecycle) {
        for (var name in renderedChildren) {
            if (renderedChildren.hasOwnProperty(name)) {
                var renderedChild = renderedChildren[name];
                ReactReconciler_1.unmountComponent(renderedChild, safely, skipLifecycle);
            }
        }
    }
},
    ReactChildReconciler_1 = ReactChildReconciler,
    ReactComponentTreeHook$2;

"undefined" != typeof process && process.env && "production" == "test" && (ReactComponentTreeHook$2 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
    if (traverseContext && "object" == typeof traverseContext) {
        var result = traverseContext;
        void 0 === result[name] && null != child && (result[name] = child);
    }
}

function flattenStackChildren(children, selfDebugID) {
    if (null == children) return children;
    var result = {};
    return traverseStackChildren_1(children, flattenSingleChildIntoContext, result), result;
}

var flattenStackChildren_1 = flattenStackChildren;

function makeInsertMarkup(markup, afterNode, toIndex) {
    return {
        type: "INSERT_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeMove(child, afterNode, toIndex) {
    return {
        type: "MOVE_EXISTING",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: ReactReconciler_1.getHostNode(child),
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeRemove(child, node) {
    return {
        type: "REMOVE_NODE",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: node,
        toIndex: null,
        afterNode: null
    };
}

function makeSetMarkup(markup) {
    return {
        type: "SET_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function makeTextContent(textContent) {
    return {
        type: "TEXT_CONTENT",
        content: textContent,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function enqueue(queue, update) {
    return update && (queue = queue || [], queue.push(update)), queue;
}

function processQueue(inst, updateQueue) {
    ReactComponentEnvironment_1.processChildrenUpdates(inst, updateQueue);
}

var ReactMultiChild = {
    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
        return ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context);
    },
    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
        var nextChildren,
            selfDebugID = 0;
        return nextChildren = flattenStackChildren_1(nextNestedChildrenElements, selfDebugID), ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID), nextChildren;
    },
    mountChildren: function mountChildren(nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;
        var mountImages = [],
            index = 0;
        for (var name in children) {
            if (children.hasOwnProperty(name)) {
                var child = children[name],
                    selfDebugID = 0,
                    mountImage = ReactReconciler_1.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
                child._mountIndex = index++, mountImages.push(mountImage);
            }
        }return mountImages;
    },
    updateTextContent: function updateTextContent(nextContent) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeTextContent(nextContent)]);
    },
    updateMarkup: function updateMarkup(nextMarkup) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeSetMarkup(nextMarkup)]);
    },
    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
    },
    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren,
            removedNodes = {},
            mountImages = [],
            nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
        if (nextChildren || prevChildren) {
            var name,
                updates = null,
                nextIndex = 0,
                lastIndex = 0,
                nextMountIndex = 0,
                lastPlacedNode = null;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    var prevChild = prevChildren && prevChildren[name],
                        nextChild = nextChildren[name];
                    prevChild === nextChild ? (updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex)), lastIndex = Math.max(prevChild._mountIndex, lastIndex), prevChild._mountIndex = nextIndex) : (prevChild && (lastIndex = Math.max(prevChild._mountIndex, lastIndex)), updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context)), nextMountIndex++), nextIndex++, lastPlacedNode = ReactReconciler_1.getHostNode(nextChild);
                }
            }for (name in removedNodes) {
                removedNodes.hasOwnProperty(name) && (updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name])));
            }updates && processQueue(this, updates), this._renderedChildren = nextChildren;
        }
    },
    unmountChildren: function unmountChildren(safely, skipLifecycle) {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(renderedChildren, safely, skipLifecycle), this._renderedChildren = null;
    },
    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
        if (child._mountIndex < lastIndex) return makeMove(child, afterNode, toIndex);
    },
    createChild: function createChild(child, afterNode, mountImage) {
        return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },
    removeChild: function removeChild(child, node) {
        return makeRemove(child, node);
    },
    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
        return child._mountIndex = index, this.createChild(child, afterNode, mountImage);
    },
    _unmountChild: function _unmountChild(child, node) {
        var update = this.removeChild(child, node);
        return child._mountIndex = null, update;
    }
},
    ReactMultiChild_1 = ReactMultiChild,
    ReactNativeBaseComponent = function ReactNativeBaseComponent(viewConfig) {
    this.viewConfig = viewConfig;
};

ReactNativeBaseComponent.Mixin = {
    getPublicInstance: function getPublicInstance() {
        return this;
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactNativeComponentTree_1.uncacheNode(this), this.unmountChildren(safely, skipLifecycle), this._rootNodeID = 0;
    },
    initializeChildren: function initializeChildren(children, containerTag, transaction, context) {
        var mountImages = this.mountChildren(children, transaction, context);
        if (mountImages.length) {
            for (var createdTags = [], i = 0, l = mountImages.length; i < l; i++) {
                var mountImage = mountImages[i],
                    childTag = mountImage;
                createdTags[i] = childTag;
            }
            UIManager.setChildren(containerTag, createdTags);
        }
    },
    receiveComponent: function receiveComponent(nextElement, transaction, context) {
        var prevElement = this._currentElement;
        this._currentElement = nextElement;
        var updatePayload = ReactNativeAttributePayload_1.diff(prevElement.props, nextElement.props, this.viewConfig.validAttributes);
        updatePayload && UIManager.updateView(this._rootNodeID, this.viewConfig.uiViewClassName, updatePayload), this.updateChildren(nextElement.props.children, transaction, context);
    },
    getName: function getName() {
        return this.constructor.displayName || this.constructor.name || "Unknown";
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        var updatePayload = ReactNativeAttributePayload_1.create(this._currentElement.props, this.viewConfig.validAttributes),
            nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, this.viewConfig.uiViewClassName, nativeTopRootTag, updatePayload), ReactNativeComponentTree_1.precacheNode(this, tag), this.initializeChildren(this._currentElement.props.children, tag, transaction, context), tag;
    }
}, _extends2(ReactNativeBaseComponent.prototype, ReactMultiChild_1, ReactNativeBaseComponent.Mixin, NativeMethodsMixin_1);

var ReactNativeBaseComponent_1 = ReactNativeBaseComponent,
    createReactNativeComponentClassStack = function createReactNativeComponentClassStack(viewConfig) {
    var Constructor = function Constructor(element) {
        this._currentElement = element, this._topLevelWrapper = null, this._hostParent = null, this._hostContainerInfo = null, this._rootNodeID = 0, this._renderedChildren = null;
    };
    return Constructor.displayName = viewConfig.uiViewClassName, Constructor.viewConfig = viewConfig, Constructor.propTypes = viewConfig.propTypes, Constructor.prototype = new ReactNativeBaseComponent_1(viewConfig), Constructor.prototype.constructor = Constructor, Constructor;
},
    createReactNativeComponentClassStack_1 = createReactNativeComponentClassStack,
    ReactNativeFeatureFlags$3 = require(212                      ), // 212 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? DevOnlyStubShim : createReactNativeComponentClassStack_1,
    ReactNativeFeatureFlags$4 = require(212                      ), // 212 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot;

ReactNativeInjection.inject(), ReactNativeStackInjection.inject();

var render = function render(element, mountInto, callback) {
    return ReactNativeMount_1.renderComponent(element, mountInto, callback);
},
    ReactNativeStack = {
    NativeComponent: ReactNativeComponent_1,
    hasReactNativeInitialized: !1,
    findNodeHandle: findNumericNodeHandleStack,
    render: render,
    unmountComponentAtNode: ReactNativeMount_1.unmountComponentAtNode,
    unstable_batchedUpdates: ReactUpdates_1.batchedUpdates,
    unmountComponentAtNodeAndRemoveContainer: ReactNativeMount_1.unmountComponentAtNodeAndRemoveContainer,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

"undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject && __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
        getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
            return ReactNativeComponentTree_1.getClosestInstanceFromNode(node);
        },
        getNodeFromInstance: function getNodeFromInstance(inst) {
            for (; inst._renderedComponent;) {
                inst = inst._renderedComponent;
            }return inst ? ReactNativeComponentTree_1.getNodeFromInstance(inst) : null;
        }
    },
    Mount: ReactNativeMount_1,
    Reconciler: ReactReconciler_1,
    getInspectorDataForViewTag: ReactNativeStackInspector.getInspectorDataForViewTag
});

var ReactNativeStackEntry = ReactNativeStack;

module.exports = ReactNativeStackEntry;
}, 329, null, "ReactNativeStack-prod");
__d(/* ReactNativeART */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\ART\\ReactNativeART.js',
    _class2,
    _temp2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Surface: {
    displayName: 'Surface'
  },
  Group: {
    displayName: 'Group'
  },
  ClippingRectangle: {
    displayName: 'ClippingRectangle'
  },
  Shape: {
    displayName: 'Shape'
  },
  Text: {
    displayName: 'Text'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/ART/ReactNativeART.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var Color = require(331             ); // 331 = art/core/color
var Path = require(332                  ); // 332 = ARTSerializablePath
var Transform = require(335                 ); // 335 = art/core/transform

var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNativeViewAttributes = require(301                        ); // 301 = ReactNativeViewAttributes

var createReactNativeComponentClass = require(319                              ); // 319 = createReactNativeComponentClass
var merge = require(305    ); // 305 = merge
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

function arrayDiffer(a, b) {
  if (a == null || b == null) {
    return true;
  }
  if (a.length !== b.length) {
    return true;
  }
  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return true;
    }
  }
  return false;
}

function fontAndLinesDiffer(a, b) {
  if (a === b) {
    return false;
  }
  if (a.font !== b.font) {
    if (a.font === null) {
      return true;
    }
    if (b.font === null) {
      return true;
    }

    if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
      return true;
    }
  }
  return arrayDiffer(a.lines, b.lines);
}

var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});

var NodeAttributes = {
  transform: { diff: arrayDiffer },
  opacity: true
};

var GroupAttributes = merge(NodeAttributes, {
  clipping: { diff: arrayDiffer }
});

var RenderableAttributes = merge(NodeAttributes, {
  fill: { diff: arrayDiffer },
  stroke: { diff: arrayDiffer },
  strokeWidth: true,
  strokeCap: true,
  strokeJoin: true,
  strokeDash: { diff: arrayDiffer }
});

var ShapeAttributes = merge(RenderableAttributes, {
  d: { diff: arrayDiffer }
});

var TextAttributes = merge(RenderableAttributes, {
  alignment: true,
  frame: { diff: fontAndLinesDiffer },
  path: { diff: arrayDiffer }
});

var NativeSurfaceView = createReactNativeComponentClass({
  validAttributes: SurfaceViewAttributes,
  uiViewClassName: 'ARTSurfaceView'
});

var NativeGroup = createReactNativeComponentClass({
  validAttributes: GroupAttributes,
  uiViewClassName: 'ARTGroup'
});

var NativeShape = createReactNativeComponentClass({
  validAttributes: ShapeAttributes,
  uiViewClassName: 'ARTShape'
});

var NativeText = createReactNativeComponentClass({
  validAttributes: TextAttributes,
  uiViewClassName: 'ARTText'
});

function childrenAsString(children) {
  if (!children) {
    return '';
  }
  if (typeof children === 'string') {
    return children;
  }
  if (children.length) {
    return children.join('\n');
  }
  return '';
}

var Surface = _wrapComponent('Surface')((_temp = _class = function (_React$Component) {
  _inherits(Surface, _React$Component);

  function Surface() {
    _classCallCheck(this, Surface);

    return _possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
  }

  _createClass(Surface, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { isInSurface: true };
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      return React.createElement(
        NativeSurfaceView,
        { style: [props.style, { width: w, height: h }], __source: {
            fileName: _jsxFileName,
            lineNumber: 155
          }
        },
        this.props.children
      );
    }
  }]);

  return Surface;
}(React.Component), _class.childContextTypes = {
  isInSurface: PropTypes.bool
}, _temp));

function extractNumber(value, defaultValue) {
  if (value == null) {
    return defaultValue;
  }
  return +value;
}

var pooledTransform = new Transform();

function extractTransform(props) {
  var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
  var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;

  pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

  if (props.transform != null) {
    pooledTransform.transform(props.transform);
  }

  return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
}

function extractOpacity(props) {
  if (props.visible === false) {
    return 0;
  }
  if (props.opacity == null) {
    return 1;
  }
  return +props.opacity;
}

var Group = _wrapComponent('Group')((_temp2 = _class2 = function (_React$Component2) {
  _inherits(Group, _React$Component2);

  function Group() {
    _classCallCheck(this, Group);

    return _possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
  }

  _createClass(Group, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
      return React.createElement(
        NativeGroup,
        {
          opacity: extractOpacity(props),
          transform: extractTransform(props), __source: {
            fileName: _jsxFileName,
            lineNumber: 227
          }
        },
        this.props.children
      );
    }
  }]);

  return Group;
}(React.Component), _class2.contextTypes = {
  isInSurface: PropTypes.bool.isRequired
}, _temp2));

var ClippingRectangle = _wrapComponent('ClippingRectangle')(function (_React$Component3) {
  _inherits(ClippingRectangle, _React$Component3);

  function ClippingRectangle() {
    _classCallCheck(this, ClippingRectangle);

    return _possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
  }

  _createClass(ClippingRectangle, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var x = extractNumber(props.x, 0);
      var y = extractNumber(props.y, 0);
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      var clipping = [x, y, w, h];

      var propsExcludingXAndY = merge(props);
      delete propsExcludingXAndY.x;
      delete propsExcludingXAndY.y;
      return React.createElement(
        NativeGroup,
        {
          clipping: clipping,
          opacity: extractOpacity(props),
          transform: extractTransform(propsExcludingXAndY), __source: {
            fileName: _jsxFileName,
            lineNumber: 249
          }
        },
        this.props.children
      );
    }
  }]);

  return ClippingRectangle;
}(React.Component));

var SOLID_COLOR = 0;
var LINEAR_GRADIENT = 1;
var RADIAL_GRADIENT = 2;
var PATTERN = 3;

function insertColorIntoArray(color, targetArray, atIndex) {
  var c = new Color(color);
  targetArray[atIndex + 0] = c.red / 255;
  targetArray[atIndex + 1] = c.green / 255;
  targetArray[atIndex + 2] = c.blue / 255;
  targetArray[atIndex + 3] = c.alpha;
}

function insertColorsIntoArray(stops, targetArray, atIndex) {
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
      i++;
    }
  } else {
    for (var offset in stops) {
      insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
      i++;
    }
  }
  return atIndex + i * 4;
}

function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
  var offsetNumber;
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      offsetNumber = i / (stops.length - 1) * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  } else {
    for (var offsetString in stops) {
      offsetNumber = +offsetString * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  }
  return atIndex + i;
}

function insertColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
}

function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
  lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
}

function applyBoundingBoxToBrushData(brushData, props) {
  var type = brushData[0];
  var width = +props.width;
  var height = +props.height;
  if (type === LINEAR_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
  } else if (type === RADIAL_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
    brushData[5] *= width;
    brushData[6] *= height;
  } else if (type === PATTERN) {}
}

function extractBrush(colorOrBrush, props) {
  if (colorOrBrush == null) {
    return null;
  }
  if (colorOrBrush._brush) {
    if (colorOrBrush._bb) {
      applyBoundingBoxToBrushData(colorOrBrush._brush, props);
      colorOrBrush._bb = false;
    }
    return colorOrBrush._brush;
  }
  var c = new Color(colorOrBrush);
  return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractColor(color) {
  if (color == null) {
    return null;
  }
  var c = new Color(color);
  return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractStrokeCap(strokeCap) {
  switch (strokeCap) {
    case 'butt':
      return 0;
    case 'square':
      return 2;
    default:
      return 1;}
}

function extractStrokeJoin(strokeJoin) {
  switch (strokeJoin) {
    case 'miter':
      return 0;
    case 'bevel':
      return 2;
    default:
      return 1;}
}

var Shape = _wrapComponent('Shape')(function (_React$Component4) {
  _inherits(Shape, _React$Component4);

  function Shape() {
    _classCallCheck(this, Shape);

    return _possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
  }

  _createClass(Shape, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var path = props.d || childrenAsString(props.children);
      var d = (path instanceof Path ? path : new Path(path)).toJSON();
      return React.createElement(NativeShape, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        d: d,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 397
        }
      });
    }
  }]);

  return Shape;
}(React.Component));

var cachedFontObjectsFromString = {};

var fontFamilyPrefix = /^[\s"']*/;
var fontFamilySuffix = /[\s"']*$/;

function extractSingleFontFamily(fontFamilyString) {
  return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
}

function parseFontString(font) {
  if (cachedFontObjectsFromString.hasOwnProperty(font)) {
    return cachedFontObjectsFromString[font];
  }
  var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
  var match = regexp.exec(font);
  if (!match) {
    return null;
  }
  var fontFamily = extractSingleFontFamily(match[3]);
  var fontSize = +match[2] || 12;
  var isBold = /bold/.exec(match[1]);
  var isItalic = /italic/.exec(match[1]);
  cachedFontObjectsFromString[font] = {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: isBold ? 'bold' : 'normal',
    fontStyle: isItalic ? 'italic' : 'normal'
  };
  return cachedFontObjectsFromString[font];
}

function extractFont(font) {
  if (font == null) {
    return null;
  }
  if (typeof font === 'string') {
    return parseFontString(font);
  }
  var fontFamily = extractSingleFontFamily(font.fontFamily);
  var fontSize = +font.fontSize || 12;
  var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
  return {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: fontWeight,
    fontStyle: font.fontStyle
  };
}

var newLine = /\n/g;
function extractFontAndLines(font, text) {
  return { font: extractFont(font), lines: text.split(newLine) };
}

function extractAlignment(alignment) {
  switch (alignment) {
    case 'right':
      return 1;
    case 'center':
      return 2;
    default:
      return 0;
  }
}

var Text = _wrapComponent('Text')(function (_React$Component5) {
  _inherits(Text, _React$Component5);

  function Text() {
    _classCallCheck(this, Text);

    return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  _createClass(Text, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var path = props.path;
      var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
      var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
      return React.createElement(NativeText, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        alignment: extractAlignment(props.alignment),
        frame: textFrame,
        path: textPath,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 496
        }
      });
    }
  }]);

  return Text;
}(React.Component));

function LinearGradient(stops, x1, y1, x2, y2) {
  var type = LINEAR_GRADIENT;

  if (arguments.length < 5) {
    var angle = (x1 == null ? 270 : x1) * Math.PI / 180;

    var x = Math.cos(angle);
    var y = -Math.sin(angle);
    var l = (Math.abs(x) + Math.abs(y)) / 2;

    x *= l;y *= l;

    x1 = 0.5 - x;
    x2 = 0.5 + x;
    y1 = 0.5 - y;
    y2 = 0.5 + y;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [type, +x1, +y1, +x2, +y2];
  insertColorStopsIntoArray(stops, brushData, 5);
  this._brush = brushData;
}

function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
  if (ry == null) {
    ry = rx;
  }
  if (cx == null) {
    cx = fx;
  }
  if (cy == null) {
    cy = fy;
  }
  if (fx == null) {
    fx = fy = rx = ry = cx = cy = 0.5;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
  insertDoubleColorStopsIntoArray(stops, brushData, 7);
  this._brush = brushData;
}

function Pattern(url, width, height, left, top) {
  this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
}

var ReactART = {
  LinearGradient: LinearGradient,
  RadialGradient: RadialGradient,
  Pattern: Pattern,
  Transform: Transform,
  Path: Path,
  Surface: Surface,
  Group: Group,
  ClippingRectangle: ClippingRectangle,
  Shape: Shape,
  Text: Text
};

module.exports = ReactART;
}, 330, null, "ReactNativeART");
__d(/* art/core/color.js */function(global, require, module, exports) {var colors = {
	maroon: '#800000', red: '#ff0000', orange: '#ffA500', yellow: '#ffff00', olive: '#808000',
	purple: '#800080', fuchsia: "#ff00ff", white: '#ffffff', lime: '#00ff00', green: '#008000',
	navy: '#000080', blue: '#0000ff', aqua: '#00ffff', teal: '#008080',
	black: '#000000', silver: '#c0c0c0', gray: '#808080'
};

var map = function map(array, fn) {
	var results = [];
	for (var i = 0, l = array.length; i < l; i++) {
		results[i] = fn(array[i], i);
	}return results;
};

var Color = function Color(color, type) {

	if (color.isColor) {

		this.red = color.red;
		this.green = color.green;
		this.blue = color.blue;
		this.alpha = color.alpha;
	} else {

		var namedColor = colors[color];
		if (namedColor) {
			color = namedColor;
			type = 'hex';
		}

		switch (typeof color) {
			case 'string':
				if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';break;
			case 'object':
				type = type || 'rgb';color = color.toString();break;
			case 'number':
				type = 'hex';color = color.toString(16);break;
		}

		color = Color['parse' + type.toUpperCase()](color);
		this.red = color[0];
		this.green = color[1];
		this.blue = color[2];
		this.alpha = color[3];
	}

	this.isColor = true;
};

var limit = function limit(number, min, max) {
	return Math.min(max, Math.max(min, number));
};

var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

Color.parseRGB = function (color) {
	return map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
		return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
	});
};

Color.parseHEX = function (color) {
	if (color.length == 1) color = color + color + color;
	return map(color.match(hexMatch).slice(1), function (bit, i) {
		if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
		return parseInt(bit.length == 1 ? bit + bit : bit, 16);
	});
};

Color.parseHSB = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var a = hsb[3];
	var br = Math.round(hsb[2] / 100 * 255);
	if (hsb[1] == 0) return [br, br, br, a];

	var hue = hsb[0];
	var f = hue % 60;
	var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
	var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
	var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

	switch (Math.floor(hue / 60)) {
		case 0:
			return [br, t, p, a];
		case 1:
			return [q, br, p, a];
		case 2:
			return [p, br, t, a];
		case 3:
			return [p, q, br, a];
		case 4:
			return [t, p, br, a];
		default:
			return [br, p, q, a];
	}
};

Color.parseHSL = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var h = hsb[0] / 60;
	var s = hsb[1] / 100;
	var l = hsb[2] / 100;
	var a = hsb[3];

	var c = (1 - Math.abs(2 * l - 1)) * s;
	var x = c * (1 - Math.abs(h % 2 - 1));
	var m = l - c / 2;

	var p = Math.round((c + m) * 255);
	var q = Math.round((x + m) * 255);
	var t = Math.round(m * 255);

	switch (Math.floor(h)) {
		case 0:
			return [p, q, t, a];
		case 1:
			return [q, p, t, a];
		case 2:
			return [t, p, q, a];
		case 3:
			return [t, q, p, a];
		case 4:
			return [q, t, p, a];
		default:
			return [p, t, q, a];
	}
};

var toString = function toString(type, array) {
	if (array[3] != 1) type += 'a';else array.pop();
	return type + '(' + array.join(', ') + ')';
};

Color.prototype = {

	toHSB: function toHSB(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / max : 0,
		    brightness = max / 255;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];

		return array ? hsb : toString('hsb', hsb);
	},

	toHSL: function toHSL(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
		    lightness = (max + min) / 512;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];

		return array ? hsl : toString('hsl', hsl);
	},

	toHEX: function toHEX(array) {

		var a = this.alpha;
		var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;

		var hex = map([this.red, this.green, this.blue], function (bit) {
			bit = bit.toString(16);
			return bit.length == 1 ? '0' + bit : bit;
		});

		return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
	},

	toRGB: function toRGB(array) {
		var rgb = [this.red, this.green, this.blue, this.alpha];
		return array ? rgb : toString('rgb', rgb);
	}

};

Color.prototype.toString = Color.prototype.toRGB;

Color.hex = function (hex) {
	return new Color(hex, 'hex');
};

if (this.hex == null) this.hex = Color.hex;

Color.hsb = function (h, s, b, a) {
	return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
};

if (this.hsb == null) this.hsb = Color.hsb;

Color.hsl = function (h, s, l, a) {
	return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
};

if (this.hsl == null) this.hsl = Color.hsl;

Color.rgb = function (r, g, b, a) {
	return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
};

if (this.rgb == null) this.rgb = Color.rgb;

Color.detach = function (color) {
	color = new Color(color);
	return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
};

module.exports = Color;
}, 331, null, "art/core/color.js");
__d(/* ARTSerializablePath */function(global, require, module, exports) {
'use strict';

var Class = require(333                ); // 333 = art/core/class.js
var Path = require(334               ); // 334 = art/core/path.js

var MOVE_TO = 0;
var CLOSE = 1;
var LINE_TO = 2;
var CURVE_TO = 3;
var ARC = 4;

var SerializablePath = Class(Path, {

  initialize: function initialize(path) {
    this.reset();
    if (path instanceof SerializablePath) {
      this.path = path.path.slice(0);
    } else if (path) {
      if (path.applyToPath) {
        path.applyToPath(this);
      } else {
        this.push(path);
      }
    }
  },

  onReset: function onReset() {
    this.path = [];
  },

  onMove: function onMove(sx, sy, x, y) {
    this.path.push(MOVE_TO, x, y);
  },

  onLine: function onLine(sx, sy, x, y) {
    this.path.push(LINE_TO, x, y);
  },

  onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
    this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
  },

  _arcToBezier: Path.prototype.onArc,

  onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
    if (rx !== ry || rotation) {
      return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
    }
    this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
  },

  onClose: function onClose() {
    this.path.push(CLOSE);
  },

  toJSON: function toJSON() {
    return this.path;
  }

});

module.exports = SerializablePath;
}, 332, null, "ARTSerializablePath");
__d(/* art/core/class.js */function(global, require, module, exports) {module.exports = function (mixins) {
	var proto = {};
	for (var i = 0, l = arguments.length; i < l; i++) {
		var mixin = arguments[i];
		if (typeof mixin == 'function') mixin = mixin.prototype;
		for (var key in mixin) {
			proto[key] = mixin[key];
		}
	}
	if (!proto.initialize) proto.initialize = function () {};
	proto.constructor = function (a, b, c, d, e, f, g, h) {
		return new proto.initialize(a, b, c, d, e, f, g, h);
	};
	proto.constructor.prototype = proto.initialize.prototype = proto;
	return proto.constructor;
};
}, 333, null, "art/core/class.js");
__d(/* art/core/path.js */function(global, require, module, exports) {var Class = require(333      ); // 333 = ./class

module.exports = Class({

	initialize: function initialize(path) {
		this.reset().push(path);
	},

	push: function push() {
		var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
		if (!p) return this;

		var last,
		    cmd = p[0],
		    i = 1;
		while (cmd) {
			switch (cmd) {
				case 'm':
					this.move(p[i++], p[i++]);break;
				case 'l':
					this.line(p[i++], p[i++]);break;
				case 'c':
					this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 's':
					this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'q':
					this.curve(p[i++], p[i++], p[i++], p[i++]);break;
				case 't':
					this.curve(p[i++], p[i++]);break;
				case 'a':
					this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'h':
					this.line(p[i++], 0);break;
				case 'v':
					this.line(0, p[i++]);break;

				case 'M':
					this.moveTo(p[i++], p[i++]);break;
				case 'L':
					this.lineTo(p[i++], p[i++]);break;
				case 'C':
					this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 'S':
					this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'Q':
					this.curveTo(p[i++], p[i++], p[i++], p[i++]);break;
				case 'T':
					this.curveTo(p[i++], p[i++]);break;
				case 'A':
					this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'H':
					this.lineTo(p[i++], this.penY);break;
				case 'V':
					this.lineTo(this.penX, p[i++]);break;

				case 'Z':case 'z':
					this.close();break;
				default:
					cmd = last;i--;continue;
			}

			last = cmd;
			if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
			cmd = p[i++];
		}
		return this;
	},

	reset: function reset() {
		this.penX = this.penY = 0;
		this.penDownX = this.penDownY = null;
		this._pivotX = this._pivotY = 0;
		this.onReset();
		return this;
	},

	move: function move(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
		return this;
	},
	moveTo: function moveTo(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	line: function line(x, y) {
		return this.lineTo(this.penX + +x, this.penY + +y);
	},
	lineTo: function lineTo(x, y) {
		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
	},
	curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		if (c2x == null) {
			c2x = +c1x;c2y = +c1y;
			c1x = x * 2 - (this._pivotX || 0);c1y = y * 2 - (this._pivotY || 0);
		}
		if (ex == null) {
			this._pivotX = +c1x;this._pivotY = +c1y;
			ex = +c2x;ey = +c2y;
			c2x = (ex + +c1x * 2) / 3;c2y = (ey + +c1y * 2) / 3;
			c1x = (x + +c1x * 2) / 3;c1y = (y + +c1y * 2) / 3;
		} else {
			this._pivotX = +c2x;this._pivotY = +c2y;
		}
		if (this.penDownX == null) {
			this.penDownX = x;this.penDownY = y;
		}
		this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
		return this;
	},

	arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
		return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
	},
	arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
		ry = Math.abs(+ry || +rx || +y - this.penY);
		rx = Math.abs(+rx || +x - this.penX);

		if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);

		var tX = this.penX,
		    tY = this.penY,
		    clockwise = !+counterClockwise,
		    large = !!+outer;

		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad);
		x -= tX;y -= tY;

		var cx = cos * x / 2 + sin * y / 2,
		    cy = -sin * x / 2 + cos * y / 2,
		    rxry = rx * rx * ry * ry,
		    rycx = ry * ry * cx * cx,
		    rxcy = rx * rx * cy * cy,
		    a = rxry - rxcy - rycx;

		if (a < 0) {
			a = Math.sqrt(1 - a / rxry);
			rx *= a;ry *= a;
			cx = x / 2;cy = y / 2;
		} else {
			a = Math.sqrt(a / (rxcy + rycx));
			if (large == clockwise) a = -a;
			var cxd = -a * cy * rx / ry,
			    cyd = a * cx * ry / rx;
			cx = cos * cxd - sin * cyd + x / 2;
			cy = sin * cxd + cos * cyd + y / 2;
		}

		var xx = cos / rx,
		    yx = sin / rx,
		    xy = -sin / ry,
		    yy = cos / ry;

		var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
		    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));

		cx += tX;cy += tY;
		x += tX;y += tY;

		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
		return this;
	},

	counterArc: function counterArc(x, y, rx, ry, outer) {
		return this.arc(x, y, rx, ry, outer, true);
	},
	counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
		return this.arcTo(x, y, rx, ry, outer, true);
	},

	close: function close() {
		if (this.penDownX != null) {
			this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
			this.penDownX = null;
		}
		return this;
	},

	onReset: function onReset() {},

	onMove: function onMove(sx, sy, ex, ey) {},

	onLine: function onLine(sx, sy, ex, ey) {
		this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
	},

	onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
		var gx = ex - sx,
		    gy = ey - sy,
		    g = gx * gx + gy * gy,
		    v1,
		    v2,
		    cx,
		    cy,
		    u;

		cx = c1x - sx;cy = c1y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v1 = cx * cx + cy * cy;

		cx = c2x - sx;cy = c2y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v2 = cx * cx + cy * cy;

		if (v1 < 0.01 && v2 < 0.01) {
			this.onLine(sx, sy, ex, ey);
			return;
		}

		if (isNaN(v1) || isNaN(v2)) {
			throw new Error('Bad input');
		}

		var s1x = (c1x + c2x) * 0.5,
		    s1y = (c1y + c2y) * 0.5,
		    l1x = (c1x + sx) * 0.5,
		    l1y = (c1y + sy) * 0.5,
		    l2x = (l1x + s1x) * 0.5,
		    l2y = (l1y + s1y) * 0.5,
		    r2x = (ex + c2x) * 0.5,
		    r2y = (ey + c2y) * 0.5,
		    r1x = (r2x + s1x) * 0.5,
		    r1y = (r2y + s1y) * 0.5,
		    l2r1x = (l2x + r1x) * 0.5,
		    l2r1y = (l2y + r1y) * 0.5;

		this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
		this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
	},

	onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad),
		    xx = cos * rx,
		    yx = -sin * ry,
		    xy = sin * rx,
		    yy = cos * ry;

		var arc = ea - sa;
		if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;

		var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
		    step = arc / n,
		    k = 4 / 3 * Math.tan(step / 4);

		var x = Math.cos(sa),
		    y = Math.sin(sa);

		for (var i = 0; i < n; i++) {
			var cp1x = x - k * y,
			    cp1y = y + k * x;

			sa += step;
			x = Math.cos(sa);y = Math.sin(sa);

			var cp2x = x + k * y,
			    cp2y = y - k * x;

			this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
		}
	},

	onClose: function onClose(sx, sy, ex, ey) {
		this.onLine(sx, sy, ex, ey);
	}

});
}, 334, null, "art/core/path.js");
__d(/* art/core/transform.js */function(global, require, module, exports) {var Class = require(333      ); // 333 = ./class

function Transform(xx, yx, xy, yy, x, y) {
	if (xx && typeof xx == 'object') {
		yx = xx.yx;yy = xx.yy;y = xx.y;
		xy = xx.xy;x = xx.x;xx = xx.xx;
	}
	this.xx = xx == null ? 1 : xx;
	this.yx = yx || 0;
	this.xy = xy || 0;
	this.yy = yy == null ? 1 : yy;
	this.x = (x == null ? this.x : x) || 0;
	this.y = (y == null ? this.y : y) || 0;
	this._transform();
	return this;
};

module.exports = Class({

	initialize: Transform,

	_transform: function _transform() {},

	xx: 1, yx: 0, x: 0,
	xy: 0, yy: 1, y: 0,

	transform: function transform(xx, yx, xy, yy, x, y) {
		var m = this;
		if (xx && typeof xx == 'object') {
			yx = xx.yx;yy = xx.yy;y = xx.y;
			xy = xx.xy;x = xx.x;xx = xx.xx;
		}
		if (!x) x = 0;
		if (!y) y = 0;
		return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
	},

	transformTo: Transform,

	translate: function translate(x, y) {
		return this.transform(1, 0, 0, 1, x, y);
	},

	move: function move(x, y) {
		this.x += x || 0;
		this.y += y || 0;
		this._transform();
		return this;
	},

	scale: function scale(x, y) {
		if (y == null) y = x;
		return this.transform(x, 0, 0, y, 0, 0);
	},

	rotate: function rotate(deg, x, y) {
		if (x == null || y == null) {
			x = (this.left || 0) + (this.width || 0) / 2;
			y = (this.top || 0) + (this.height || 0) / 2;
		}

		var rad = deg * Math.PI / 180,
		    sin = Math.sin(rad),
		    cos = Math.cos(rad);

		this.transform(1, 0, 0, 1, x, y);
		var m = this;

		return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
	},

	moveTo: function moveTo(x, y) {
		var m = this;
		return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
	},

	rotateTo: function rotateTo(deg, x, y) {
		var m = this;
		var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
		if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
		return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
	},

	scaleTo: function scaleTo(x, y) {
		var m = this;

		var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
		m.xx /= h;m.yx /= h;

		h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
		m.yy /= h;m.xy /= h;

		return this.scale(x, y);
	},

	resizeTo: function resizeTo(width, height) {
		var w = this.width,
		    h = this.height;
		if (!w || !h) return this;
		return this.scaleTo(width / w, height / h);
	},

	inversePoint: function inversePoint(x, y) {
		var a = this.xx,
		    b = this.yx,
		    c = this.xy,
		    d = this.yy,
		    e = this.x,
		    f = this.y;
		var det = b * c - a * d;
		if (det == 0) return null;
		return {
			x: (d * (e - x) + c * (y - f)) / det,
			y: (a * (f - y) + b * (x - e)) / det
		};
	},

	point: function point(x, y) {
		var m = this;
		return {
			x: m.xx * x + m.xy * y + m.x,
			y: m.yx * x + m.yy * y + m.y
		};
	}

});
}, 335, null, "art/core/transform.js");
__d(/* Button */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Button.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Button: {
    displayName: 'Button'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/Button.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ColorPropType = require(208            ); // 208 = ColorPropType
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var TouchableNativeFeedback = require(345                      ); // 345 = TouchableNativeFeedback
var TouchableOpacity = require(349               ); // 349 = TouchableOpacity
var View = require(285   ); // 285 = View

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var Button = _wrapComponent('Button')((_temp = _class = function (_React$Component) {
  _inherits(Button, _React$Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          accessibilityLabel = _props.accessibilityLabel,
          color = _props.color,
          onPress = _props.onPress,
          title = _props.title,
          disabled = _props.disabled,
          testID = _props.testID;

      var buttonStyles = [styles.button];
      var textStyles = [styles.text];
      if (color) {
        if (Platform.OS === 'ios') {
          textStyles.push({ color: color });
        } else {
          buttonStyles.push({ backgroundColor: color });
        }
      }
      var accessibilityTraits = ['button'];
      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
        accessibilityTraits.push('disabled');
      }
      invariant(typeof title === 'string', 'The title prop of a Button must be a string');
      var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
      var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
      return React.createElement(
        Touchable,
        {
          accessibilityComponentType: 'button',
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: accessibilityTraits,
          testID: testID,
          disabled: disabled,
          onPress: onPress, __source: {
            fileName: _jsxFileName,
            lineNumber: 120
          }
        },
        React.createElement(
          View,
          { style: buttonStyles, __source: {
              fileName: _jsxFileName,
              lineNumber: 127
            }
          },
          React.createElement(
            Text,
            { style: textStyles, disabled: disabled, __source: {
                fileName: _jsxFileName,
                lineNumber: 128
              }
            },
            formattedTitle
          )
        )
      );
    }
  }]);

  return Button;
}(React.Component), _class.propTypes = {
  title: PropTypes.string.isRequired,

  accessibilityLabel: PropTypes.string,

  color: ColorPropType,

  disabled: PropTypes.bool,

  onPress: PropTypes.func.isRequired,

  testID: PropTypes.string
}, _temp));

var styles = StyleSheet.create({
  button: Platform.select({
    ios: {},
    android: {
      elevation: 4,

      backgroundColor: '#2196F3',
      borderRadius: 2
    }
  }),
  text: Platform.select({
    ios: {
      color: '#007AFF',
      textAlign: 'center',
      padding: 8,
      fontSize: 18
    },
    android: {
      color: 'white',
      textAlign: 'center',
      padding: 8,
      fontWeight: '500'
    }
  }),
  buttonDisabled: Platform.select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    }
  }),
  textDisabled: Platform.select({
    ios: {
      color: '#cdcdcd'
    },
    android: {
      color: '#a1a1a1'
    }
  })
});

module.exports = Button;
}, 336, null, "Button");
__d(/* Text */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Text\\Text.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var EdgeInsetsPropType = require(303                 ); // 303 = EdgeInsetsPropType
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNativeViewAttributes = require(301                        ); // 301 = ReactNativeViewAttributes
var StyleSheetPropType = require(309                 ); // 309 = StyleSheetPropType
var TextStylePropTypes = require(295                 ); // 295 = TextStylePropTypes
var Touchable = require(338        ); // 338 = Touchable

var createReactClass = require(311                 ); // 311 = create-react-class
var createReactNativeComponentClass = require(319                              ); // 319 = createReactNativeComponentClass
var mergeFast = require(344        ); // 344 = mergeFast
var processColor = require(297           ); // 297 = processColor

var stylePropType = StyleSheetPropType(TextStylePropTypes);

var viewConfig = {
  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true
  }),
  uiViewClassName: 'RCTText'
};

var Text = createReactClass({
  displayName: 'Text',
  propTypes: {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),

    numberOfLines: PropTypes.number,

    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onLayout: PropTypes.func,

    onPress: PropTypes.func,

    onLongPress: PropTypes.func,

    pressRetentionOffset: EdgeInsetsPropType,

    selectable: PropTypes.bool,

    selectionColor: ColorPropType,

    suppressHighlighting: PropTypes.bool,
    style: stylePropType,

    testID: PropTypes.string,

    nativeID: PropTypes.string,

    allowFontScaling: PropTypes.bool,

    accessible: PropTypes.bool,

    adjustsFontSizeToFit: PropTypes.bool,

    minimumFontScale: PropTypes.number,

    disabled: PropTypes.bool
  },
  getDefaultProps: function getDefaultProps() {
    return {
      accessible: true,
      allowFontScaling: true,
      ellipsizeMode: 'tail',
      disabled: false
    };
  },

  getInitialState: function getInitialState() {
    return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
      isHighlighted: false
    });
  },
  mixins: [NativeMethodsMixin],
  viewConfig: viewConfig,
  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: PropTypes.bool
  },
  contextTypes: {
    isInAParentText: PropTypes.bool
  },

  _handlers: null,
  _hasPressHandler: function _hasPressHandler() {
    return !!this.props.onPress || !!this.props.onLongPress;
  },

  touchableHandleActivePressIn: null,
  touchableHandleActivePressOut: null,
  touchableHandlePress: null,
  touchableHandleLongPress: null,
  touchableGetPressRectOffset: null,
  render: function render() {
    var _this = this;

    var newProps = this.props;
    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
      if (!this._handlers) {
        this._handlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();
            var setResponder = shouldSetFromProps || _this._hasPressHandler();
            if (setResponder && !_this.touchableHandleActivePressIn) {
              for (var key in Touchable.Mixin) {
                if (typeof Touchable.Mixin[key] === 'function') {
                  _this[key] = Touchable.Mixin[key].bind(_this);
                }
              }
              _this.touchableHandleActivePressIn = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: true
                });
              };

              _this.touchableHandleActivePressOut = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: false
                });
              };

              _this.touchableHandlePress = function (e) {
                _this.props.onPress && _this.props.onPress(e);
              };

              _this.touchableHandleLongPress = function (e) {
                _this.props.onLongPress && _this.props.onLongPress(e);
              };

              _this.touchableGetPressRectOffset = function () {
                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
              };
            }

            return setResponder;
          },
          onResponderGrant: function (e, dispatchID) {
            this.touchableHandleResponderGrant(e, dispatchID);
            this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
          }.bind(this),
          onResponderMove: function (e) {
            this.touchableHandleResponderMove(e);
            this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
          }.bind(this),
          onResponderRelease: function (e) {
            this.touchableHandleResponderRelease(e);
            this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
          }.bind(this),
          onResponderTerminate: function (e) {
            this.touchableHandleResponderTerminate(e);
            this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
          }.bind(this),
          onResponderTerminationRequest: function () {
            var allowTermination = this.touchableHandleResponderTerminationRequest();
            if (allowTermination && this.props.onResponderTerminationRequest) {
              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
            }
            return allowTermination;
          }.bind(this)
        };
      }
      newProps = _extends({}, this.props, this._handlers, {
        isHighlighted: this.state.isHighlighted
      });
    }
    if (newProps.selectionColor != null) {
      newProps = _extends({}, newProps, {
        selectionColor: processColor(newProps.selectionColor)
      });
    }
    if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
      newProps = _extends({}, newProps, {
        style: [this.props.style, { color: 'magenta' }]
      });
    }
    if (this.context.isInAParentText) {
      return React.createElement(RCTVirtualText, _extends({}, newProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 368
        }
      }));
    } else {
      return React.createElement(RCTText, _extends({}, newProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 370
        }
      }));
    }
  }
});

var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var RCTText = createReactNativeComponentClass(viewConfig);
var RCTVirtualText = RCTText;

if (Platform.OS === 'android') {
  RCTVirtualText = createReactNativeComponentClass({
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true
    }),
    uiViewClassName: 'RCTVirtualText'
  });
}

module.exports = Text;
}, 337, null, "Text");
__d(/* Touchable */function(global, require, module, exports) {

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Touchable\\Touchable.js';
var BoundingDimensions = require(339                 ); // 339 = BoundingDimensions
var Platform = require(192       ); // 192 = Platform
var Position = require(341       ); // 341 = Position
var React = require(286    ); // 286 = React
var ReactNative = require(211          ); // 211 = ReactNative
var TVEventHandler = require(342             ); // 342 = TVEventHandler
var TouchEventUtils = require(343                       ); // 343 = fbjs/lib/TouchEventUtils
var UIManager = require(279        ); // 279 = UIManager
var View = require(285   ); // 285 = View

var keyMirror = require(290                 ); // 290 = fbjs/lib/keyMirror
var normalizeColor = require(209             ); // 209 = normalizeColor

var States = keyMirror({
  NOT_RESPONDER: null,
  RESPONDER_INACTIVE_PRESS_IN: null,
  RESPONDER_INACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_PRESS_IN: null,
  RESPONDER_ACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_LONG_PRESS_IN: null,
  RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
  ERROR: null
});

var IsActive = {
  RESPONDER_ACTIVE_PRESS_OUT: true,
  RESPONDER_ACTIVE_PRESS_IN: true
};

var IsPressingIn = {
  RESPONDER_INACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var IsLongPressingIn = {
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var Signals = keyMirror({
  DELAY: null,
  RESPONDER_GRANT: null,
  RESPONDER_RELEASE: null,
  RESPONDER_TERMINATED: null,
  ENTER_PRESS_RECT: null,
  LEAVE_PRESS_RECT: null,
  LONG_PRESS_DETECTED: null
});

var Transitions = {
  NOT_RESPONDER: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.ERROR,
    RESPONDER_TERMINATED: States.ERROR,
    ENTER_PRESS_RECT: States.ERROR,
    LEAVE_PRESS_RECT: States.ERROR,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_IN: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_OUT: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_LONG_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_LONG_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  error: {
    DELAY: States.NOT_RESPONDER,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.NOT_RESPONDER,
    LEAVE_PRESS_RECT: States.NOT_RESPONDER,
    LONG_PRESS_DETECTED: States.NOT_RESPONDER
  }
};

var HIGHLIGHT_DELAY_MS = 130;

var PRESS_EXPAND_PX = 20;

var LONG_PRESS_THRESHOLD = 500;

var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;

var LONG_PRESS_ALLOWED_MOVEMENT = 10;

var TouchableMixin = {
  componentDidMount: function componentDidMount() {
    if (!Platform.isTVOS) {
      return;
    }

    this._tvEventHandler = new TVEventHandler();
    this._tvEventHandler.enable(this, function (cmp, evt) {
      var myTag = ReactNative.findNodeHandle(cmp);
      evt.dispatchConfig = {};
      if (myTag === evt.tag) {
        if (evt.eventType === 'focus') {
          cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
        } else if (evt.eventType === 'blur') {
          cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
        } else if (evt.eventType === 'select') {
          cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
        }
      }
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._tvEventHandler) {
      this._tvEventHandler.disable();
      delete this._tvEventHandler;
    }
    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
  },

  touchableGetInitialState: function touchableGetInitialState() {
    return {
      touchable: { touchState: undefined, responderID: null }
    };
  },

  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
    return !this.props.rejectResponderTermination;
  },

  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
    return !this.props.disabled;
  },

  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
    return true;
  },

  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
    var dispatchID = e.currentTarget;

    e.persist();

    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    this.pressOutDelayTimeout = null;

    this.state.touchable.touchState = States.NOT_RESPONDER;
    this.state.touchable.responderID = dispatchID;
    this._receiveSignal(Signals.RESPONDER_GRANT, e);
    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
    if (delayMS !== 0) {
      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
    } else {
      this._handleDelay(e);
    }

    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
  },

  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
    this._receiveSignal(Signals.RESPONDER_RELEASE, e);
  },

  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
  },

  touchableHandleResponderMove: function touchableHandleResponderMove(e) {
    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
      return;
    }

    if (!this.state.touchable.positionOnActivate) {
      return;
    }

    var positionOnActivate = this.state.touchable.positionOnActivate;
    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
      left: PRESS_EXPAND_PX,
      right: PRESS_EXPAND_PX,
      top: PRESS_EXPAND_PX,
      bottom: PRESS_EXPAND_PX
    };

    var pressExpandLeft = pressRectOffset.left;
    var pressExpandTop = pressRectOffset.top;
    var pressExpandRight = pressRectOffset.right;
    var pressExpandBottom = pressRectOffset.bottom;

    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

    if (hitSlop) {
      pressExpandLeft += hitSlop.left;
      pressExpandTop += hitSlop.top;
      pressExpandRight += hitSlop.right;
      pressExpandBottom += hitSlop.bottom;
    }

    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;

    if (this.pressInLocation) {
      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
        this._cancelLongPressDelayTimeout();
      }
    }

    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
    if (isTouchWithinActive) {
      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
        this._cancelLongPressDelayTimeout();
      }
    } else {
      this._cancelLongPressDelayTimeout();
      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
    }
  },

  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
    var tag = this.state.touchable.responderID;
    if (tag == null) {
      return;
    }

    UIManager.measure(tag, this._handleQueryLayout);
  },

  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
    if (!l && !t && !w && !h && !globalX && !globalY) {
      return;
    }
    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
  },

  _handleDelay: function _handleDelay(e) {
    this.touchableDelayTimeout = null;
    this._receiveSignal(Signals.DELAY, e);
  },

  _handleLongDelay: function _handleLongDelay(e) {
    this.longPressDelayTimeout = null;
    var curState = this.state.touchable.touchState;
    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
    } else {
      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
    }
  },

  _receiveSignal: function _receiveSignal(signal, e) {
    var responderID = this.state.touchable.responderID;
    var curState = this.state.touchable.touchState;
    var nextState = Transitions[curState] && Transitions[curState][signal];
    if (!responderID && signal === Signals.RESPONDER_RELEASE) {
      return;
    }
    if (!nextState) {
      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
    }
    if (nextState === States.ERROR) {
      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
    }
    if (curState !== nextState) {
      this._performSideEffectsForTransition(curState, nextState, signal, e);
      this.state.touchable.touchState = nextState;
    }
  },

  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.longPressDelayTimeout = null;
  },

  _isHighlight: function _isHighlight(state) {
    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
  },

  _savePressInLocation: function _savePressInLocation(e) {
    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;
    var locationX = touch && touch.locationX;
    var locationY = touch && touch.locationY;
    this.pressInLocation = { pageX: pageX, pageY: pageY, locationX: locationX, locationY: locationY };
  },

  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
    var deltaX = aX - bX;
    var deltaY = aY - bY;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
  },

  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
    var curIsHighlight = this._isHighlight(curState);
    var newIsHighlight = this._isHighlight(nextState);

    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

    if (isFinalSignal) {
      this._cancelLongPressDelayTimeout();
    }

    if (!IsActive[curState] && IsActive[nextState]) {
      this._remeasureMetricsOnActivation();
    }

    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
      this.touchableHandleLongPress && this.touchableHandleLongPress(e);
    }

    if (newIsHighlight && !curIsHighlight) {
      this._startHighlight(e);
    } else if (!newIsHighlight && curIsHighlight) {
      this._endHighlight(e);
    }

    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
      var hasLongPressHandler = !!this.props.onLongPress;
      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());

      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
      if (shouldInvokePress && this.touchableHandlePress) {
        if (!newIsHighlight && !curIsHighlight) {
          this._startHighlight(e);
          this._endHighlight(e);
        }
        this.touchableHandlePress(e);
      }
    }

    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.touchableDelayTimeout = null;
  },

  _startHighlight: function _startHighlight(e) {
    this._savePressInLocation(e);
    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
  },

  _endHighlight: function _endHighlight(e) {
    var _this = this;

    if (this.touchableHandleActivePressOut) {
      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
        this.pressOutDelayTimeout = setTimeout(function () {
          _this.touchableHandleActivePressOut(e);
        }, this.touchableGetPressOutDelayMS());
      } else {
        this.touchableHandleActivePressOut(e);
      }
    }
  }

};

var Touchable = {
  Mixin: TouchableMixin,
  TOUCH_TARGET_DEBUG: false,
  renderDebugView: function renderDebugView(_ref) {
    var color = _ref.color,
        hitSlop = _ref.hitSlop;

    if (!Touchable.TOUCH_TARGET_DEBUG) {
      return null;
    }
    if (!__DEV__) {
      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
    }
    var debugHitSlopStyle = {};
    hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 };
    for (var key in hitSlop) {
      debugHitSlopStyle[key] = -hitSlop[key];
    }
    var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
    return React.createElement(View, {
      pointerEvents: 'none',
      style: _extends({
        position: 'absolute',
        borderColor: hexColor.slice(0, -2) + '55',
        borderWidth: 1,
        borderStyle: 'dashed',
        backgroundColor: hexColor.slice(0, -2) + '0F' }, debugHitSlopStyle),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 793
      }
    });
  }
};

module.exports = Touchable;
}, 338, null, "Touchable");
__d(/* BoundingDimensions */function(global, require, module, exports) {

'use strict';

var PooledClass = require(340          ); // 340 = PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function BoundingDimensions(width, height) {
  this.width = width;
  this.height = height;
}

BoundingDimensions.prototype.destructor = function () {
  this.width = null;
  this.height = null;
};

BoundingDimensions.getPooledFromElement = function (element) {
  return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
};

PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);

module.exports = BoundingDimensions;
}, 339, null, "BoundingDimensions");
__d(/* PooledClass */function(global, require, module, exports) {

'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}, 340, null, "PooledClass");
__d(/* Position */function(global, require, module, exports) {

'use strict';

var PooledClass = require(340          ); // 340 = PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function Position(left, top) {
  this.left = left;
  this.top = top;
}

Position.prototype.destructor = function () {
  this.left = null;
  this.top = null;
};

PooledClass.addPoolingTo(Position, twoArgumentPooler);

module.exports = Position;
}, 341, null, "Position");
__d(/* TVEventHandler */function(global, require, module, exports) {
'use strict';

function TVEventHandler() {}

TVEventHandler.prototype.enable = function (component, callback) {};

TVEventHandler.prototype.disable = function () {};

module.exports = TVEventHandler;
}, 342, null, "TVEventHandler");
__d(/* fbjs/lib/TouchEventUtils.js */function(global, require, module, exports) {"use strict";

var TouchEventUtils = {
  extractSingleTouch: function extractSingleTouch(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;

    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  }
};

module.exports = TouchEventUtils;
}, 343, null, "fbjs/lib/TouchEventUtils.js");
__d(/* mergeFast */function(global, require, module, exports) {
'use strict';

var mergeFast = function mergeFast(one, two) {
  var ret = {};
  for (var keyOne in one) {
    ret[keyOne] = one[keyOne];
  }
  for (var keyTwo in two) {
    ret[keyTwo] = two[keyTwo];
  }
  return ret;
};

module.exports = mergeFast;
}, 344, null, "mergeFast");
__d(/* TouchableNativeFeedback */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(211          ); // 211 = ReactNative
var Touchable = require(338        ); // 338 = Touchable
var TouchableWithoutFeedback = require(346                       ); // 346 = TouchableWithoutFeedback
var UIManager = require(279        ); // 279 = UIManager

var createReactClass = require(311                 ); // 311 = create-react-class
var ensurePositiveDelayProps = require(348                       ); // 348 = ensurePositiveDelayProps
var processColor = require(297           ); // 297 = processColor

var rippleBackgroundPropType = PropTypes.shape({
  type: PropTypes.oneOf(['RippleAndroid']),
  color: PropTypes.number,
  borderless: PropTypes.bool
});

var themeAttributeBackgroundPropType = PropTypes.shape({
  type: PropTypes.oneOf(['ThemeAttrAndroid']),
  attribute: PropTypes.string.isRequired
});

var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableNativeFeedback = createReactClass({
  displayName: 'TouchableNativeFeedback',
  propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
    background: backgroundPropType,

    useForeground: PropTypes.bool
  }),

  statics: {
    SelectableBackground: function SelectableBackground() {
      return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackground' };
    },

    SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
      return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackgroundBorderless' };
    },

    Ripple: function Ripple(color, borderless) {
      return { type: 'RippleAndroid', color: processColor(color), borderless: borderless };
    },

    canUseNativeForeground: function canUseNativeForeground() {
      return Platform.OS === 'android' && Platform.Version >= 23;
    }
  },

  mixins: [Touchable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return {
      background: this.SelectableBackground()
    };
  },

  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
    this._dispatchPressedStateChange(true);
    this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
    this._dispatchPressedStateChange(false);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _handleResponderMove: function _handleResponderMove(e) {
    this.touchableHandleResponderMove(e);
    this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
  },

  _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
    UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
  },

  _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
    UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
  },

  render: function render() {
    var _extends2;

    var child = React.Children.only(this.props.children);
    var children = child.props.children;
    if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
      if (!Array.isArray(children)) {
        children = [children];
      }
      children.push(Touchable.renderDebugView({ color: 'brown', hitSlop: this.props.hitSlop }));
    }
    if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
      console.warn('Requested foreground ripple, but it is not available on this version of Android. ' + 'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' + 'Touchable if the result is false.');
    }
    var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';
    var childProps = _extends({}, child.props, (_extends2 = {}, _defineProperty(_extends2, drawableProp, this.props.background), _defineProperty(_extends2, 'accessible', this.props.accessible !== false), _defineProperty(_extends2, 'accessibilityLabel', this.props.accessibilityLabel), _defineProperty(_extends2, 'accessibilityComponentType', this.props.accessibilityComponentType), _defineProperty(_extends2, 'accessibilityTraits', this.props.accessibilityTraits), _defineProperty(_extends2, 'children', children), _defineProperty(_extends2, 'testID', this.props.testID), _defineProperty(_extends2, 'onLayout', this.props.onLayout), _defineProperty(_extends2, 'hitSlop', this.props.hitSlop), _defineProperty(_extends2, 'onStartShouldSetResponder', this.touchableHandleStartShouldSetResponder), _defineProperty(_extends2, 'onResponderTerminationRequest', this.touchableHandleResponderTerminationRequest), _defineProperty(_extends2, 'onResponderGrant', this.touchableHandleResponderGrant), _defineProperty(_extends2, 'onResponderMove', this._handleResponderMove), _defineProperty(_extends2, 'onResponderRelease', this.touchableHandleResponderRelease), _defineProperty(_extends2, 'onResponderTerminate', this.touchableHandleResponderTerminate), _extends2));

    return React.cloneElement(child, childProps);
  }
});

module.exports = TouchableNativeFeedback;
}, 345, null, "TouchableNativeFeedback");
__d(/* TouchableWithoutFeedback */function(global, require, module, exports) {
'use strict';

var EdgeInsetsPropType = require(303                 ); // 303 = EdgeInsetsPropType
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var TimerMixin = require(347                ); // 347 = react-timer-mixin
var Touchable = require(338        ); // 338 = Touchable

var createReactClass = require(311                 ); // 311 = create-react-class
var ensurePositiveDelayProps = require(348                       ); // 348 = ensurePositiveDelayProps
var warning = require(199               ); // 199 = fbjs/lib/warning

var _require = require(310                ), // 310 = ViewAccessibility
    AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
    AccessibilityTraits = _require.AccessibilityTraits;

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableWithoutFeedback = createReactClass({
  displayName: 'TouchableWithoutFeedback',
  mixins: [TimerMixin, Touchable.Mixin],

  propTypes: {
    accessible: PropTypes.bool,
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),

    disabled: PropTypes.bool,

    onPress: PropTypes.func,

    onPressIn: PropTypes.func,

    onPressOut: PropTypes.func,

    onLayout: PropTypes.func,

    onLongPress: PropTypes.func,

    delayPressIn: PropTypes.number,

    delayPressOut: PropTypes.number,

    delayLongPress: PropTypes.number,

    pressRetentionOffset: EdgeInsetsPropType,

    hitSlop: EdgeInsetsPropType
  },

  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut || 0;
  },

  render: function render() {
    var child = React.Children.only(this.props.children);
    var children = child.props.children;
    warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));
    if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
      children = React.Children.toArray(children);
      children.push(Touchable.renderDebugView({ color: 'red', hitSlop: this.props.hitSlop }));
    }
    var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, { color: 'red' }] : child.props.style;
    return React.cloneElement(child, {
      accessible: this.props.accessible !== false,

      accessibilityLabel: this.props.accessibilityLabel,
      accessibilityComponentType: this.props.accessibilityComponentType,
      accessibilityTraits: this.props.accessibilityTraits,

      nativeID: this.props.nativeID,

      testID: this.props.testID,
      onLayout: this.props.onLayout,
      hitSlop: this.props.hitSlop,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      style: style,
      children: children
    });
  }
});

module.exports = TouchableWithoutFeedback;
}, 346, null, "TouchableWithoutFeedback");
__d(/* react-timer-mixin/TimerMixin.js */function(global, require, module, exports) {
'use strict';

var GLOBAL = typeof window === 'undefined' ? global : window;

var setter = function setter(_setter, _clearer, array) {
  return function (callback, delta) {
    var id = _setter(function () {
      _clearer.call(this, id);
      callback.apply(this, arguments);
    }.bind(this), delta);

    if (!this[array]) {
      this[array] = [id];
    } else {
      this[array].push(id);
    }
    return id;
  };
};

var clearer = function clearer(_clearer, array) {
  return function (id) {
    if (this[array]) {
      var index = this[array].indexOf(id);
      if (index !== -1) {
        this[array].splice(index, 1);
      }
    }
    _clearer(id);
  };
};

var _timeouts = 'TimerMixin_timeouts';
var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);
var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

var _intervals = 'TimerMixin_intervals';
var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);
var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

var _immediates = 'TimerMixin_immediates';
var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);
var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

var _rafs = 'TimerMixin_rafs';
var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);
var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

var TimerMixin = {
  componentWillUnmount: function componentWillUnmount() {
    this[_timeouts] && this[_timeouts].forEach(function (id) {
      GLOBAL.clearTimeout(id);
    });
    this[_timeouts] = null;
    this[_intervals] && this[_intervals].forEach(function (id) {
      GLOBAL.clearInterval(id);
    });
    this[_intervals] = null;
    this[_immediates] && this[_immediates].forEach(function (id) {
      GLOBAL.clearImmediate(id);
    });
    this[_immediates] = null;
    this[_rafs] && this[_rafs].forEach(function (id) {
      GLOBAL.cancelAnimationFrame(id);
    });
    this[_rafs] = null;
  },

  setTimeout: _setTimeout,
  clearTimeout: _clearTimeout,

  setInterval: _setInterval,
  clearInterval: _clearInterval,

  setImmediate: _setImmediate,
  clearImmediate: _clearImmediate,

  requestAnimationFrame: _requestAnimationFrame,
  cancelAnimationFrame: _cancelAnimationFrame
};

module.exports = TimerMixin;
}, 347, null, "react-timer-mixin/TimerMixin.js");
__d(/* ensurePositiveDelayProps */function(global, require, module, exports) {
'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
  invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
};

module.exports = ensurePositiveDelayProps;
}, 348, null, "ensurePositiveDelayProps");
__d(/* TouchableOpacity */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Touchable\\TouchableOpacity.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Animated = require(350       ); // 350 = Animated
var Easing = require(359     ); // 359 = Easing
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var TimerMixin = require(347                ); // 347 = react-timer-mixin
var Touchable = require(338        ); // 338 = Touchable
var TouchableWithoutFeedback = require(346                       ); // 346 = TouchableWithoutFeedback

var createReactClass = require(311                 ); // 311 = create-react-class
var ensurePositiveDelayProps = require(348                       ); // 348 = ensurePositiveDelayProps
var flattenStyle = require(273           ); // 273 = flattenStyle

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableOpacity = createReactClass({
  displayName: 'TouchableOpacity',
  mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],

  propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: PropTypes.number,

    tvParallaxProperties: PropTypes.object
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      activeOpacity: 0.2
    };
  },

  getInitialState: function getInitialState() {
    return _extends({}, this.touchableGetInitialState(), {
      anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
    });
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  setOpacityTo: function setOpacityTo(value, duration) {
    Animated.timing(this.state.anim, {
      toValue: value,
      duration: duration,
      easing: Easing.inOut(Easing.quad),
      useNativeDriver: true
    }).start();
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    if (e.dispatchConfig.registrationName === 'onResponderGrant') {
      this._opacityActive(0);
    } else {
      this._opacityActive(150);
    }
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this._opacityInactive(250);
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _opacityActive: function _opacityActive(duration) {
    this.setOpacityTo(this.props.activeOpacity, duration);
  },

  _opacityInactive: function _opacityInactive(duration) {
    this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
  },

  _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
    var childStyle = flattenStyle(this.props.style) || {};
    return childStyle.opacity == undefined ? 1 : childStyle.opacity;
  },

  render: function render() {
    return React.createElement(
      Animated.View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        style: [this.props.style, { opacity: this.state.anim }],
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate, __source: {
          fileName: _jsxFileName,
          lineNumber: 173
        }
      },
      this.props.children,
      Touchable.renderDebugView({ color: 'cyan', hitSlop: this.props.hitSlop })
    );
  }
});

module.exports = TouchableOpacity;
}, 349, null, "TouchableOpacity");
__d(/* Animated */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var AnimatedImplementation = require(351                     ); // 351 = AnimatedImplementation
var Image = require(361    ); // 361 = Image
var Text = require(337   ); // 337 = Text
var View = require(285   ); // 285 = View

var AnimatedScrollView = void 0;

var Animated = {
  View: AnimatedImplementation.createAnimatedComponent(View),
  Text: AnimatedImplementation.createAnimatedComponent(Text),
  Image: AnimatedImplementation.createAnimatedComponent(Image),
  get ScrollView() {
    if (!AnimatedScrollView) {
      AnimatedScrollView = AnimatedImplementation.createAnimatedComponent(require(363         )); // 363 = ScrollView
    }
    return AnimatedScrollView;
  }
};

_extends(Animated, AnimatedImplementation);

module.exports = Animated;
}, 350, null, "Animated");
__d(/* AnimatedImplementation */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Animated\\src\\AnimatedImplementation.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _components = {
  AnimatedComponent: {
    displayName: 'AnimatedComponent',
    isInFunction: true
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Animated/src/AnimatedImplementation.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var InteractionManager = require(352                 ); // 352 = InteractionManager
var Interpolation = require(354            ); // 354 = Interpolation
var NativeAnimatedHelper = require(355                   ); // 355 = NativeAnimatedHelper
var React = require(286    ); // 286 = React
var ReactNative = require(211          ); // 211 = ReactNative
var Set = require(225  ); // 225 = Set
var SpringConfig = require(356           ); // 356 = SpringConfig
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var flattenStyle = require(273           ); // 273 = flattenStyle
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var requestAnimationFrame = require(357                             ); // 357 = fbjs/lib/requestAnimationFrame

var NativeAnimatedAPI = NativeAnimatedHelper.API;

var warnedMissingNativeAnimated = false;

function shouldUseNativeDriver(config) {
  if (config.useNativeDriver && !NativeAnimatedHelper.isNativeAnimatedAvailable()) {
    if (!warnedMissingNativeAnimated) {
      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
      warnedMissingNativeAnimated = true;
    }
    return false;
  }

  return config.useNativeDriver || false;
}

var Animated = function () {
  function Animated() {
    _classCallCheck(this, Animated);
  }

  _createClass(Animated, [{
    key: '__attach',
    value: function __attach() {}
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this.__nativeTag != null) {
        NativeAnimatedAPI.dropAnimatedNode(this.__nativeTag);
        this.__nativeTag = undefined;
      }
    }
  }, {
    key: '__getValue',
    value: function __getValue() {}
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this.__getValue();
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {}
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {}
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return [];
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        throw new Error('This node cannot be made a "native" animated node');
      }
    }
  }, {
    key: '__getNativeTag',
    value: function __getNativeTag() {
      NativeAnimatedHelper.assertNativeAnimatedModule();
      invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
      if (this.__nativeTag == null) {
        var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
        NativeAnimatedAPI.createAnimatedNode(nativeTag, this.__getNativeConfig());
        this.__nativeTag = nativeTag;
      }
      return this.__nativeTag;
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      throw new Error('This JS animated node type cannot be used as native animated node');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.__getValue();
    }
  }]);

  return Animated;
}();

var Animation = function () {
  function Animation() {
    _classCallCheck(this, Animation);
  }

  _createClass(Animation, [{
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: 'stop',
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedAPI.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: '__debouncedOnEnd',
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: '__startNativeAnimation',
    value: function __startNativeAnimation(animatedValue) {
      animatedValue.__makeNative();
      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedAPI.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);

  return Animation;
}();

var AnimatedWithChildren = function (_Animated) {
  _inherits(AnimatedWithChildren, _Animated);

  function AnimatedWithChildren() {
    _classCallCheck(this, AnimatedWithChildren);

    var _this = _possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

    _this._children = [];
    return _this;
  }

  _createClass(AnimatedWithChildren, [{
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var child = _ref;

          child.__makeNative();
          NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {
      if (this._children.length === 0) {
        this.__attach();
      }
      this._children.push(child);
      if (this.__isNative) {
        child.__makeNative();
        NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
    }
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {
      var index = this._children.indexOf(child);
      if (index === -1) {
        console.warn('Trying to remove a child that doesn\'t exist');
        return;
      }
      if (this.__isNative && child.__isNative) {
        NativeAnimatedAPI.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
      this._children.splice(index, 1);
      if (this._children.length === 0) {
        this.__detach();
      }
    }
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return this._children;
    }
  }]);

  return AnimatedWithChildren;
}(Animated);

function _flush(rootNode) {
  var animatedStyles = new Set();
  function findAnimatedStyles(node) {
    if (typeof node.update === 'function') {
      animatedStyles.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);

  animatedStyles.forEach(function (animatedStyle) {
    return animatedStyle.update();
  });
}

var _easeInOut = void 0;
function easeInOut() {
  if (!_easeInOut) {
    var Easing = require(359     ); // 359 = Easing
    _easeInOut = Easing.inOut(Easing.ease);
  }
  return _easeInOut;
}

var TimingAnimation = function (_Animation) {
  _inherits(TimingAnimation, _Animation);

  function TimingAnimation(config) {
    _classCallCheck(this, TimingAnimation);

    var _this2 = _possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

    _this2._toValue = config.toValue;
    _this2._easing = config.easing !== undefined ? config.easing : easeInOut();
    _this2._duration = config.duration !== undefined ? config.duration : 500;
    _this2._delay = config.delay !== undefined ? config.delay : 0;
    _this2.__iterations = config.iterations !== undefined ? config.iterations : 1;
    _this2.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this2._useNativeDriver = shouldUseNativeDriver(config);
    return _this2;
  }

  _createClass(TimingAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      var frameDuration = 1000.0 / 60.0;
      var frames = [];
      for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
        frames.push(this._easing(dt / this._duration));
      }
      frames.push(this._easing(1));
      return {
        type: 'frames',
        frames: frames,
        toValue: this._toValue,
        iterations: this.__iterations
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      var _this3 = this;

      this.__active = true;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;

      var start = function start() {
        if (_this3._duration === 0 && !_this3._useNativeDriver) {
          _this3._onUpdate(_this3._toValue);
          _this3.__debouncedOnEnd({ finished: true });
        } else {
          _this3._startTime = Date.now();
          if (_this3._useNativeDriver) {
            _this3.__startNativeAnimation(animatedValue);
          } else {
            _this3._animationFrame = requestAnimationFrame(_this3.onUpdate.bind(_this3));
          }
        }
      };
      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();
      if (now >= this._startTime + this._duration) {
        if (this._duration === 0) {
          this._onUpdate(this._toValue);
        } else {
          this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
        }
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      _get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);

  return TimingAnimation;
}(Animation);

var DecayAnimation = function (_Animation2) {
  _inherits(DecayAnimation, _Animation2);

  function DecayAnimation(config) {
    _classCallCheck(this, DecayAnimation);

    var _this4 = _possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

    _this4._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
    _this4._velocity = config.velocity;
    _this4._useNativeDriver = shouldUseNativeDriver(config);
    _this4.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this4.__iterations = config.iterations !== undefined ? config.iterations : 1;
    return _this4;
  }

  _createClass(DecayAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity,
        iterations: this.__iterations
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();
      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();

      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._lastValue = value;
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      _get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);

  return DecayAnimation;
}(Animation);

function withDefault(value, defaultValue) {
  if (value === undefined || value === null) {
    return defaultValue;
  }
  return value;
}

var SpringAnimation = function (_Animation3) {
  _inherits(SpringAnimation, _Animation3);

  function SpringAnimation(config) {
    _classCallCheck(this, SpringAnimation);

    var _this5 = _possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

    _this5._overshootClamping = withDefault(config.overshootClamping, false);
    _this5._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
    _this5._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
    _this5._initialVelocity = config.velocity;
    _this5._lastVelocity = withDefault(config.velocity, 0);
    _this5._toValue = config.toValue;
    _this5._delay = withDefault(config.delay, 0);
    _this5._useNativeDriver = shouldUseNativeDriver(config);
    _this5.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this5.__iterations = config.iterations !== undefined ? config.iterations : 1;

    var springConfig;
    if (config.bounciness !== undefined || config.speed !== undefined) {
      invariant(config.tension === undefined && config.friction === undefined, 'You can only define bounciness/speed or tension/friction but not both');
      springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
    } else {
      springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));
    }
    _this5._tension = springConfig.tension;
    _this5._friction = springConfig.friction;
    return _this5;
  }

  _createClass(SpringAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'spring',
        overshootClamping: this._overshootClamping,
        restDisplacementThreshold: this._restDisplacementThreshold,
        restSpeedThreshold: this._restSpeedThreshold,
        tension: this._tension,
        friction: this._friction,
        initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
        toValue: this._toValue,
        iterations: this.__iterations
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      var _this6 = this;

      this.__active = true;
      this._startPosition = fromValue;
      this._lastPosition = this._startPosition;

      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._lastTime = Date.now();

      if (previousAnimation instanceof SpringAnimation) {
        var internalState = previousAnimation.getInternalState();
        this._lastPosition = internalState.lastPosition;
        this._lastVelocity = internalState.lastVelocity;
        this._lastTime = internalState.lastTime;
      }
      if (this._initialVelocity !== undefined && this._initialVelocity !== null) {
        this._lastVelocity = this._initialVelocity;
      }

      var start = function start() {
        if (_this6._useNativeDriver) {
          _this6.__startNativeAnimation(animatedValue);
        } else {
          _this6.onUpdate();
        }
      };

      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    }
  }, {
    key: 'getInternalState',
    value: function getInternalState() {
      return {
        lastPosition: this._lastPosition,
        lastVelocity: this._lastVelocity,
        lastTime: this._lastTime
      };
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var position = this._lastPosition;
      var velocity = this._lastVelocity;

      var tempPosition = this._lastPosition;
      var tempVelocity = this._lastVelocity;

      var MAX_STEPS = 64;
      var now = Date.now();
      if (now > this._lastTime + MAX_STEPS) {
        now = this._lastTime + MAX_STEPS;
      }

      var TIMESTEP_MSEC = 1;
      var numSteps = Math.floor((now - this._lastTime) / TIMESTEP_MSEC);

      for (var i = 0; i < numSteps; ++i) {
        var step = TIMESTEP_MSEC / 1000;

        var aVelocity = velocity;
        var aAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        var tempPosition = position + aVelocity * step / 2;
        var tempVelocity = velocity + aAcceleration * step / 2;

        var bVelocity = tempVelocity;
        var bAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + bVelocity * step / 2;
        tempVelocity = velocity + bAcceleration * step / 2;

        var cVelocity = tempVelocity;
        var cAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dVelocity = tempVelocity;
        var dAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dxdt = (aVelocity + 2 * (bVelocity + cVelocity) + dVelocity) / 6;
        var dvdt = (aAcceleration + 2 * (bAcceleration + cAcceleration) + dAcceleration) / 6;

        position += dxdt * step;
        velocity += dvdt * step;
      }

      this._lastTime = now;
      this._lastPosition = position;
      this._lastVelocity = velocity;

      this._onUpdate(position);
      if (!this.__active) {
        return;
      }

      var isOvershooting = false;
      if (this._overshootClamping && this._tension !== 0) {
        if (this._startPosition < this._toValue) {
          isOvershooting = position > this._toValue;
        } else {
          isOvershooting = position < this._toValue;
        }
      }
      var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
      var isDisplacement = true;
      if (this._tension !== 0) {
        isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
      }

      if (isOvershooting || isVelocity && isDisplacement) {
        if (this._tension !== 0) {
          this._onUpdate(this._toValue);
        }

        this.__debouncedOnEnd({ finished: true });
        return;
      }
      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    }
  }, {
    key: 'stop',
    value: function stop() {
      _get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);

  return SpringAnimation;
}(Animation);

var _uniqueId = 1;

var AnimatedValue = function (_AnimatedWithChildren) {
  _inherits(AnimatedValue, _AnimatedWithChildren);

  function AnimatedValue(value) {
    _classCallCheck(this, AnimatedValue);

    var _this7 = _possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

    _this7._startingValue = _this7._value = value;
    _this7._offset = 0;
    _this7._animation = null;
    _this7._listeners = {};
    return _this7;
  }

  _createClass(AnimatedValue, [{
    key: '__detach',
    value: function __detach() {
      this.stopAnimation();
      _get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._value + this._offset;
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      _get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__makeNative', this).call(this);

      if (Object.keys(this._listeners).length) {
        this._startListeningToNativeValueUpdates();
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      if (this._animation) {
        this._animation.stop();
        this._animation = null;
      }
      this._updateValue(value, !this.__isNative);
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
      }
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this._offset = offset;
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
      }
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this._value += this._offset;
      this._offset = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'extractOffset',
    value: function extractOffset() {
      this._offset += this._value;
      this._value = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var id = String(_uniqueId++);
      this._listeners[id] = callback;
      if (this.__isNative) {
        this._startListeningToNativeValueUpdates();
      }
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      delete this._listeners[id];
      if (this.__isNative && Object.keys(this._listeners).length === 0) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this._listeners = {};
      if (this.__isNative) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: '_startListeningToNativeValueUpdates',
    value: function _startListeningToNativeValueUpdates() {
      var _this8 = this;

      if (this.__nativeAnimatedValueListener) {
        return;
      }

      NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
      this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
        if (data.tag !== _this8.__getNativeTag()) {
          return;
        }
        _this8._updateValue(data.value, false);
      });
    }
  }, {
    key: '_stopListeningForNativeValueUpdates',
    value: function _stopListeningForNativeValueUpdates() {
      if (!this.__nativeAnimatedValueListener) {
        return;
      }

      this.__nativeAnimatedValueListener.remove();
      this.__nativeAnimatedValueListener = null;
      NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.stopTracking();
      this._animation && this._animation.stop();
      this._animation = null;
      callback && callback(this.__getValue());
    }
  }, {
    key: 'resetAnimation',
    value: function resetAnimation(callback) {
      this.stopAnimation(callback);
      this._value = this._startingValue;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: 'animate',
    value: function animate(animation, callback) {
      var _this9 = this;

      var handle = null;
      if (animation.__isInteraction) {
        handle = InteractionManager.createInteractionHandle();
      }
      var previousAnimation = this._animation;
      this._animation && this._animation.stop();
      this._animation = animation;
      animation.start(this._value, function (value) {
        _this9._updateValue(value, true);
      }, function (result) {
        _this9._animation = null;
        if (handle !== null) {
          InteractionManager.clearInteractionHandle(handle);
        }
        callback && callback(result);
      }, previousAnimation, this);
    }
  }, {
    key: 'stopTracking',
    value: function stopTracking() {
      this._tracking && this._tracking.__detach();
      this._tracking = null;
    }
  }, {
    key: 'track',
    value: function track(tracking) {
      this.stopTracking();
      this._tracking = tracking;
    }
  }, {
    key: '_updateValue',
    value: function _updateValue(value, flush) {
      this._value = value;
      if (flush) {
        _flush(this);
      }
      for (var key in this._listeners) {
        this._listeners[key]({ value: this.__getValue() });
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'value',
        value: this._value,
        offset: this._offset
      };
    }
  }]);

  return AnimatedValue;
}(AnimatedWithChildren);

var AnimatedValueXY = function (_AnimatedWithChildren2) {
  _inherits(AnimatedValueXY, _AnimatedWithChildren2);

  function AnimatedValueXY(valueIn) {
    _classCallCheck(this, AnimatedValueXY);

    var _this10 = _possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

    var value = valueIn || { x: 0, y: 0 };
    if (typeof value.x === 'number' && typeof value.y === 'number') {
      _this10.x = new AnimatedValue(value.x);
      _this10.y = new AnimatedValue(value.y);
    } else {
      invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initalized with an object of numbers or ' + 'AnimatedValues.');
      _this10.x = value.x;
      _this10.y = value.y;
    }
    _this10._listeners = {};
    return _this10;
  }

  _createClass(AnimatedValueXY, [{
    key: 'setValue',
    value: function setValue(value) {
      this.x.setValue(value.x);
      this.y.setValue(value.y);
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this.x.setOffset(offset.x);
      this.y.setOffset(offset.y);
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this.x.flattenOffset();
      this.y.flattenOffset();
    }
  }, {
    key: 'extractOffset',
    value: function extractOffset() {
      this.x.extractOffset();
      this.y.extractOffset();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return {
        x: this.x.__getValue(),
        y: this.y.__getValue()
      };
    }
  }, {
    key: 'resetAnimation',
    value: function resetAnimation(callback) {
      this.x.resetAnimation();
      this.y.resetAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.x.stopAnimation();
      this.y.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var _this11 = this;

      var id = String(_uniqueId++);
      var jointCallback = function jointCallback(_ref2) {
        var number = _ref2.value;

        callback(_this11.__getValue());
      };
      this._listeners[id] = {
        x: this.x.addListener(jointCallback),
        y: this.y.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      this.x.removeListener(this._listeners[id].x);
      this.y.removeListener(this._listeners[id].y);
      delete this._listeners[id];
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this.x.removeAllListeners();
      this.y.removeAllListeners();
      this._listeners = {};
    }
  }, {
    key: 'getLayout',
    value: function getLayout() {
      return {
        left: this.x,
        top: this.y
      };
    }
  }, {
    key: 'getTranslateTransform',
    value: function getTranslateTransform() {
      return [{ translateX: this.x }, { translateY: this.y }];
    }
  }]);

  return AnimatedValueXY;
}(AnimatedWithChildren);

var AnimatedInterpolation = function (_AnimatedWithChildren3) {
  _inherits(AnimatedInterpolation, _AnimatedWithChildren3);

  function AnimatedInterpolation(parent, config) {
    _classCallCheck(this, AnimatedInterpolation);

    var _this12 = _possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

    _this12._parent = parent;
    _this12._config = config;
    _this12._interpolation = Interpolation.create(config);
    return _this12;
  }

  _createClass(AnimatedInterpolation, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._parent.__makeNative();
      _get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var parentValue = this._parent.__getValue();
      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
      return this._interpolation(parentValue);
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      _get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__transformDataType',
    value: function __transformDataType(range) {
      return range.map(function (value) {
        if (typeof value !== 'string') {
          return value;
        }
        if (/deg$/.test(value)) {
          var degrees = parseFloat(value) || 0;
          var radians = degrees * Math.PI / 180.0;
          return radians;
        } else {
          return parseFloat(value) || 0;
        }
      });
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      if (__DEV__) {
        NativeAnimatedHelper.validateInterpolation(this._config);
      }

      return {
        inputRange: this._config.inputRange,

        outputRange: this.__transformDataType(this._config.outputRange),
        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
        type: 'interpolation'
      };
    }
  }]);

  return AnimatedInterpolation;
}(AnimatedWithChildren);

var AnimatedAddition = function (_AnimatedWithChildren4) {
  _inherits(AnimatedAddition, _AnimatedWithChildren4);

  function AnimatedAddition(a, b) {
    _classCallCheck(this, AnimatedAddition);

    var _this13 = _possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

    _this13._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this13._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this13;
  }

  _createClass(AnimatedAddition, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      _get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() + this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      _get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'addition',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);

  return AnimatedAddition;
}(AnimatedWithChildren);

var AnimatedDivision = function (_AnimatedWithChildren5) {
  _inherits(AnimatedDivision, _AnimatedWithChildren5);

  function AnimatedDivision(a, b) {
    _classCallCheck(this, AnimatedDivision);

    var _this14 = _possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

    _this14._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this14._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this14;
  }

  _createClass(AnimatedDivision, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      _get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var a = this._a.__getValue();
      var b = this._b.__getValue();
      if (b === 0) {
        console.error('Detected division by zero in AnimatedDivision');
      }
      return a / b;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      _get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);

  return AnimatedDivision;
}(AnimatedWithChildren);

var AnimatedMultiplication = function (_AnimatedWithChildren6) {
  _inherits(AnimatedMultiplication, _AnimatedWithChildren6);

  function AnimatedMultiplication(a, b) {
    _classCallCheck(this, AnimatedMultiplication);

    var _this15 = _possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

    _this15._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this15._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this15;
  }

  _createClass(AnimatedMultiplication, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      _get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() * this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      _get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'multiplication',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);

  return AnimatedMultiplication;
}(AnimatedWithChildren);

var AnimatedModulo = function (_AnimatedWithChildren7) {
  _inherits(AnimatedModulo, _AnimatedWithChildren7);

  function AnimatedModulo(a, modulus) {
    _classCallCheck(this, AnimatedModulo);

    var _this16 = _possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

    _this16._a = a;
    _this16._modulus = modulus;
    return _this16;
  }

  _createClass(AnimatedModulo, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      _get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      _get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'modulus',
        input: this._a.__getNativeTag(),
        modulus: this._modulus
      };
    }
  }]);

  return AnimatedModulo;
}(AnimatedWithChildren);

var AnimatedDiffClamp = function (_AnimatedWithChildren8) {
  _inherits(AnimatedDiffClamp, _AnimatedWithChildren8);

  function AnimatedDiffClamp(a, min, max) {
    _classCallCheck(this, AnimatedDiffClamp);

    var _this17 = _possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

    _this17._a = a;
    _this17._min = min;
    _this17._max = max;
    _this17._value = _this17._lastValue = _this17._a.__getValue();
    return _this17;
  }

  _createClass(AnimatedDiffClamp, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      _get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var value = this._a.__getValue();
      var diff = value - this._lastValue;
      this._lastValue = value;
      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
      return this._value;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      _get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'diffclamp',
        input: this._a.__getNativeTag(),
        min: this._min,
        max: this._max
      };
    }
  }]);

  return AnimatedDiffClamp;
}(AnimatedWithChildren);

var AnimatedTransform = function (_AnimatedWithChildren9) {
  _inherits(AnimatedTransform, _AnimatedWithChildren9);

  function AnimatedTransform(transforms) {
    _classCallCheck(this, AnimatedTransform);

    var _this18 = _possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

    _this18._transforms = transforms;
    return _this18;
  }

  _createClass(AnimatedTransform, [{
    key: '__makeNative',
    value: function __makeNative() {
      _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__makeNative', this).call(this);
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
      });
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getAnimatedValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__attach',
    value: function __attach() {
      var _this19 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__addChild(_this19);
          }
        }
      });
    }
  }, {
    key: '__detach',
    value: function __detach() {
      var _this20 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__removeChild(_this20);
          }
        }
      });
      _get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var transConfigs = [];

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: value
            });
          }
        }
      });

      NativeAnimatedHelper.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs
      };
    }
  }]);

  return AnimatedTransform;
}(AnimatedWithChildren);

var AnimatedStyle = function (_AnimatedWithChildren10) {
  _inherits(AnimatedStyle, _AnimatedWithChildren10);

  function AnimatedStyle(style) {
    _classCallCheck(this, AnimatedStyle);

    var _this21 = _possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

    style = flattenStyle(style) || {};
    if (style.transform) {
      style = _extends({}, style, {
        transform: new AnimatedTransform(style.transform)
      });
    }
    _this21._style = style;
    return _this21;
  }

  _createClass(AnimatedStyle, [{
    key: '__walkStyleAndGetValues',
    value: function __walkStyleAndGetValues(style) {
      var updatedStyle = {};
      for (var _key in style) {
        var _value = style[_key];
        if (_value instanceof Animated) {
          if (!_value.__isNative) {
            updatedStyle[_key] = _value.__getValue();
          }
        } else if (_value && !Array.isArray(_value) && typeof _value === 'object') {
          updatedStyle[_key] = this.__walkStyleAndGetValues(_value);
        } else {
          updatedStyle[_key] = _value;
        }
      }
      return updatedStyle;
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this.__walkStyleAndGetValues(this._style);
    }
  }, {
    key: '__walkStyleAndGetAnimatedValues',
    value: function __walkStyleAndGetAnimatedValues(style) {
      var updatedStyle = {};
      for (var _key2 in style) {
        var _value2 = style[_key2];
        if (_value2 instanceof Animated) {
          updatedStyle[_key2] = _value2.__getAnimatedValue();
        } else if (_value2 && !Array.isArray(_value2) && typeof _value2 === 'object') {
          updatedStyle[_key2] = this.__walkStyleAndGetAnimatedValues(_value2);
        }
      }
      return updatedStyle;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this.__walkStyleAndGetAnimatedValues(this._style);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
      _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__makeNative', this).call(this);
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__makeNative();
        }
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof Animated) {
          styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
        }
      }
      NativeAnimatedHelper.validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);

  return AnimatedStyle;
}(AnimatedWithChildren);

var AnimatedProps = function (_Animated2) {
  _inherits(AnimatedProps, _Animated2);

  function AnimatedProps(props, callback) {
    _classCallCheck(this, AnimatedProps);

    var _this22 = _possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

    if (props.style) {
      props = _extends({}, props, {
        style: new AnimatedStyle(props.style)
      });
    }
    _this22._props = props;
    _this22._callback = callback;
    _this22.__attach();
    return _this22;
  }

  _createClass(AnimatedProps, [{
    key: '__getValue',
    value: function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          if (!value.__isNative || value instanceof AnimatedStyle) {
            props[key] = value.__getValue();
          }
        } else if (value instanceof AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
      _get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._callback();
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    }
  }, {
    key: 'setNativeView',
    value: function setNativeView(animatedView) {
      if (this._animatedView === animatedView) {
        return;
      }
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    }
  }, {
    key: '__connectAnimatedView',
    value: function __connectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__disconnectAnimatedView',
    value: function __disconnectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof Animated) {
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig
      };
    }
  }]);

  return AnimatedProps;
}(Animated);

function createAnimatedComponent(Component) {
  var AnimatedComponent = _wrapComponent('AnimatedComponent')(function (_React$Component) {
    _inherits(AnimatedComponent, _React$Component);

    function AnimatedComponent(props) {
      _classCallCheck(this, AnimatedComponent);

      var _this23 = _possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

      _this23._eventDetachers = [];

      _this23._setComponentRef = _this23._setComponentRef.bind(_this23);
      return _this23;
    }

    _createClass(AnimatedComponent, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();
        this._detachNativeEvents();
      }
    }, {
      key: 'setNativeProps',
      value: function setNativeProps(props) {
        this._component.setNativeProps(props);
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._attachProps(this.props);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._propsAnimated.setNativeView(this._component);
        this._attachNativeEvents();
      }
    }, {
      key: '_attachNativeEvents',
      value: function _attachNativeEvents() {
        var _this24 = this;

        var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        var _loop = function _loop(_key3) {
          var prop = _this24.props[_key3];
          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__attach(scrollableNode, _key3);
            _this24._eventDetachers.push(function () {
              return prop.__detach(scrollableNode, _key3);
            });
          }
        };

        for (var _key3 in this.props) {
          _loop(_key3);
        }
      }
    }, {
      key: '_detachNativeEvents',
      value: function _detachNativeEvents() {
        this._eventDetachers.forEach(function (remove) {
          return remove();
        });
        this._eventDetachers = [];
      }
    }, {
      key: '_attachProps',
      value: function _attachProps(nextProps) {
        var _this25 = this;

        var oldPropsAnimated = this._propsAnimated;

        var callback = function callback() {
          if (_this25._component.setNativeProps) {
            if (!_this25._propsAnimated.__isNative) {
              _this25._component.setNativeProps(_this25._propsAnimated.__getAnimatedValue());
            } else {
              throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
            }
          } else {
            _this25.forceUpdate();
          }
        };

        this._propsAnimated = new AnimatedProps(nextProps, callback);

        oldPropsAnimated && oldPropsAnimated.__detach();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(newProps) {
        this._attachProps(newProps);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        if (this._component !== this._prevComponent) {
          this._propsAnimated.setNativeView(this._component);
        }
        if (this._component !== this._prevComponent || prevProps !== this.props) {
          this._detachNativeEvents();
          this._attachNativeEvents();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var props = this._propsAnimated.__getValue();
        return React.createElement(Component, _extends({}, props, {
          ref: this._setComponentRef,

          collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1865
          }
        }));
      }
    }, {
      key: '_setComponentRef',
      value: function _setComponentRef(c) {
        this._prevComponent = this._component;
        this._component = c;
      }
    }, {
      key: 'getNode',
      value: function getNode() {
        return this._component;
      }
    }]);

    return AnimatedComponent;
  }(React.Component));

  var propTypes = Component.__propTypesSecretDontUseThesePlease || Component.propTypes;

  AnimatedComponent.propTypes = {
    style: function style(props, propName, componentName) {
      if (!propTypes) {
        return;
      }

      for (var key in ViewStylePropTypes) {
        if (!propTypes[key] && props[key] !== undefined) {
          console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
        }
      }
    }
  };

  return AnimatedComponent;
}

var AnimatedTracking = function (_Animated3) {
  _inherits(AnimatedTracking, _Animated3);

  function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
    _classCallCheck(this, AnimatedTracking);

    var _this26 = _possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

    _this26._value = value;
    _this26._parent = parent;
    _this26._animationClass = animationClass;
    _this26._animationConfig = animationConfig;
    _this26._callback = callback;
    _this26.__attach();
    return _this26;
  }

  _createClass(AnimatedTracking, [{
    key: '__getValue',
    value: function __getValue() {
      return this._parent.__getValue();
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      _get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._value.animate(new this._animationClass(_extends({}, this._animationConfig, {
        toValue: this._animationConfig.toValue.__getValue()
      })), this._callback);
    }
  }]);

  return AnimatedTracking;
}(Animated);

var add = function add(a, b) {
  return new AnimatedAddition(a, b);
};

var divide = function divide(a, b) {
  return new AnimatedDivision(a, b);
};

var multiply = function multiply(a, b) {
  return new AnimatedMultiplication(a, b);
};

var modulo = function modulo(a, modulus) {
  return new AnimatedModulo(a, modulus);
};

var diffClamp = function diffClamp(a, min, max) {
  return new AnimatedDiffClamp(a, min, max);
};

var _combineCallbacks = function _combineCallbacks(callback, config) {
  if (callback && config.onComplete) {
    return function () {
      config.onComplete && config.onComplete.apply(config, arguments);
      callback && callback.apply(undefined, arguments);
    };
  } else {
    return callback || config.onComplete;
  }
};

var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
  if (value instanceof AnimatedValueXY) {
    var configX = _extends({}, config);
    var configY = _extends({}, config);
    for (var key in config) {
      var _config$key = config[key],
          x = _config$key.x,
          y = _config$key.y;

      if (x !== undefined && y !== undefined) {
        configX[key] = x;
        configY[key] = y;
      }
    }
    var aX = anim(value.x, configX);
    var aY = anim(value.y, configY);

    return parallel([aX, aY], { stopTogether: false });
  }
  return null;
};

var spring = function spring(value, config) {
  var start = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    if (configuration.toValue instanceof Animated) {
      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
    } else {
      singleValue.animate(new SpringAnimation(singleConfig), callback);
    }
  };
  return maybeVectorAnim(value, config, spring) || {
    start: function (_start) {
      function start(_x) {
        return _start.apply(this, arguments);
      }

      start.toString = function () {
        return _start.toString();
      };

      return start;
    }(function (callback) {
      start(value, config, callback);
    }),

    stop: function stop() {
      value.stopAnimation();
    },

    reset: function reset() {
      value.resetAnimation();
    },

    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = _extends({}, config, { iterations: iterations });
      start(value, singleConfig);
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};

var timing = function timing(value, config) {
  var start = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    if (configuration.toValue instanceof Animated) {
      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
    } else {
      singleValue.animate(new TimingAnimation(singleConfig), callback);
    }
  };

  return maybeVectorAnim(value, config, timing) || {
    start: function (_start2) {
      function start(_x2) {
        return _start2.apply(this, arguments);
      }

      start.toString = function () {
        return _start2.toString();
      };

      return start;
    }(function (callback) {
      start(value, config, callback);
    }),

    stop: function stop() {
      value.stopAnimation();
    },

    reset: function reset() {
      value.resetAnimation();
    },

    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = _extends({}, config, { iterations: iterations });
      start(value, singleConfig);
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};

var decay = function decay(value, config) {
  var start = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    singleValue.animate(new DecayAnimation(singleConfig), callback);
  };

  return maybeVectorAnim(value, config, decay) || {
    start: function (_start3) {
      function start(_x3) {
        return _start3.apply(this, arguments);
      }

      start.toString = function () {
        return _start3.toString();
      };

      return start;
    }(function (callback) {
      start(value, config, callback);
    }),

    stop: function stop() {
      value.stopAnimation();
    },

    reset: function reset() {
      value.resetAnimation();
    },

    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = _extends({}, config, { iterations: iterations });
      start(value, singleConfig);
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};

var sequence = function sequence(animations) {
  var current = 0;
  return {
    start: function start(callback) {
      var onComplete = function onComplete(result) {
        if (!result.finished) {
          callback && callback(result);
          return;
        }

        current++;

        if (current === animations.length) {
          callback && callback(result);
          return;
        }

        animations[current].start(onComplete);
      };

      if (animations.length === 0) {
        callback && callback({ finished: true });
      } else {
        animations[current].start(onComplete);
      }
    },

    stop: function stop() {
      if (current < animations.length) {
        animations[current].stop();
      }
    },

    reset: function reset() {
      animations.forEach(function (animation, idx) {
        if (idx <= current) {
          animation.reset();
        }
      });
      current = 0;
    },

    _startNativeLoop: function _startNativeLoop() {
      throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };
};

var parallel = function parallel(animations, config) {
  var doneCount = 0;

  var hasEnded = {};
  var stopTogether = !(config && config.stopTogether === false);

  var result = {
    start: function start(callback) {
      if (doneCount === animations.length) {
        callback && callback({ finished: true });
        return;
      }

      animations.forEach(function (animation, idx) {
        var cb = function cb(endResult) {
          hasEnded[idx] = true;
          doneCount++;
          if (doneCount === animations.length) {
            doneCount = 0;
            callback && callback(endResult);
            return;
          }

          if (!endResult.finished && stopTogether) {
            result.stop();
          }
        };

        if (!animation) {
          cb({ finished: true });
        } else {
          animation.start(cb);
        }
      });
    },

    stop: function stop() {
      animations.forEach(function (animation, idx) {
        !hasEnded[idx] && animation.stop();
        hasEnded[idx] = true;
      });
    },

    reset: function reset() {
      animations.forEach(function (animation, idx) {
        animation.reset();
        hasEnded[idx] = false;
        doneCount = 0;
      });
    },

    _startNativeLoop: function _startNativeLoop() {
      throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };

  return result;
};

var delay = function delay(time) {
  return timing(new AnimatedValue(0), { toValue: 0, delay: time, duration: 0 });
};

var stagger = function stagger(time, animations) {
  return parallel(animations.map(function (animation, i) {
    return sequence([delay(time * i), animation]);
  }));
};

var loop = function loop(animation) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$iterations = _ref3.iterations,
      iterations = _ref3$iterations === undefined ? -1 : _ref3$iterations;

  var isFinished = false;
  var iterationsSoFar = 0;
  return {
    start: function start(callback) {
      var restart = function restart() {
        var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { finished: true };

        if (isFinished || iterationsSoFar === iterations || result.finished === false) {
          callback && callback(result);
        } else {
          iterationsSoFar++;
          animation.reset();
          animation.start(restart);
        }
      };
      if (!animation || iterations === 0) {
        callback && callback({ finished: true });
      } else {
        if (animation._isUsingNativeDriver()) {
          animation._startNativeLoop(iterations);
        } else {
          restart();
        }
      }
    },

    stop: function stop() {
      isFinished = true;
      animation.stop();
    },

    reset: function reset() {
      iterationsSoFar = 0;
      isFinished = false;
      animation.reset();
    },

    _startNativeLoop: function _startNativeLoop() {
      throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return animation._isUsingNativeDriver();
    }
  };
};

function attachNativeEvent(viewRef, eventName, argMapping) {
  var eventMappings = [];

  var traverse = function traverse(value, path) {
    if (value instanceof AnimatedValue) {
      value.__makeNative();

      eventMappings.push({
        nativeEventPath: path,
        animatedValueTag: value.__getNativeTag()
      });
    } else if (typeof value === 'object') {
      for (var _key4 in value) {
        traverse(value[_key4], path.concat(_key4));
      }
    }
  };

  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');

  traverse(argMapping[0].nativeEvent, []);

  var viewTag = ReactNative.findNodeHandle(viewRef);

  eventMappings.forEach(function (mapping) {
    NativeAnimatedAPI.addAnimatedEventToView(viewTag, eventName, mapping);
  });

  return {
    detach: function detach() {
      eventMappings.forEach(function (mapping) {
        NativeAnimatedAPI.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
      });
    }
  };
}

function forkEvent(event, listener) {
  if (!event) {
    return listener;
  } else if (event instanceof AnimatedEvent) {
    event.__addListener(listener);
    return event;
  } else {
    return function () {
      typeof event === 'function' && event.apply(undefined, arguments);
      listener.apply(undefined, arguments);
    };
  }
}

function unforkEvent(event, listener) {
  if (event && event instanceof AnimatedEvent) {
    event.__removeListener(listener);
  }
}

var AnimatedEvent = function () {
  function AnimatedEvent(argMapping) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, AnimatedEvent);

    this._listeners = [];

    this._argMapping = argMapping;
    if (config.listener) {
      this.__addListener(config.listener);
    }
    this._callListeners = this._callListeners.bind(this);
    this._attachedEvent = null;
    this.__isNative = shouldUseNativeDriver(config);

    if (__DEV__) {
      this._validateMapping();
    }
  }

  _createClass(AnimatedEvent, [{
    key: '__addListener',
    value: function __addListener(callback) {
      this._listeners.push(callback);
    }
  }, {
    key: '__removeListener',
    value: function __removeListener(callback) {
      this._listeners = this._listeners.filter(function (listener) {
        return listener !== callback;
      });
    }
  }, {
    key: '__attach',
    value: function __attach(viewRef, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be attached.');

      this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
    }
  }, {
    key: '__detach',
    value: function __detach(viewTag, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be detached.');

      this._attachedEvent && this._attachedEvent.detach();
    }
  }, {
    key: '__getHandler',
    value: function __getHandler() {
      var _this27 = this;

      if (this.__isNative) {
        return this._callListeners;
      }

      return function () {
        for (var _len = arguments.length, args = Array(_len), _key5 = 0; _key5 < _len; _key5++) {
          args[_key5] = arguments[_key5];
        }

        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
            recMapping.setValue(recEvt);
          } else if (typeof recMapping === 'object') {
            for (var mappingKey in recMapping) {
              traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
            }
          }
        };

        if (!_this27.__isNative) {
          _this27._argMapping.forEach(function (mapping, idx) {
            traverse(mapping, args[idx], 'arg' + idx);
          });
        }
        _this27._callListeners.apply(_this27, args);
      };
    }
  }, {
    key: '_callListeners',
    value: function _callListeners() {
      for (var _len2 = arguments.length, args = Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {
        args[_key6] = arguments[_key6];
      }

      this._listeners.forEach(function (listener) {
        return listener.apply(undefined, args);
      });
    }
  }, {
    key: '_validateMapping',
    value: function _validateMapping() {
      var traverse = function traverse(recMapping, recEvt, key) {
        if (typeof recEvt === 'number') {
          invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
          return;
        }
        invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
        invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);
        for (var mappingKey in recMapping) {
          traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
        }
      };
    }
  }]);

  return AnimatedEvent;
}();

var event = function event(argMapping, config) {
  var animatedEvent = new AnimatedEvent(argMapping, config);
  if (animatedEvent.__isNative) {
    return animatedEvent;
  } else {
    return animatedEvent.__getHandler();
  }
};

module.exports = {
  Value: AnimatedValue,

  ValueXY: AnimatedValueXY,

  Interpolation: AnimatedInterpolation,

  decay: decay,

  timing: timing,

  spring: spring,

  add: add,

  divide: divide,

  multiply: multiply,

  modulo: modulo,

  diffClamp: diffClamp,

  delay: delay,

  sequence: sequence,

  parallel: parallel,

  stagger: stagger,

  loop: loop,

  event: event,

  createAnimatedComponent: createAnimatedComponent,

  attachNativeEvent: attachNativeEvent,

  forkEvent: forkEvent,
  unforkEvent: unforkEvent,

  __PropsOnlyForTests: AnimatedProps
};
}, 351, null, "AnimatedImplementation");
__d(/* InteractionManager */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(185            ); // 185 = BatchedBridge
var EventEmitter = require(203           ); // 203 = EventEmitter
var Set = require(225  ); // 225 = Set
var TaskQueue = require(353        ); // 353 = TaskQueue

var infoLog = require(266      ); // 266 = infoLog
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var keyMirror = require(290                 ); // 290 = fbjs/lib/keyMirror

var _emitter = new EventEmitter();

var DEBUG_DELAY = 0;
var DEBUG = false;

var InteractionManager = {
  Events: keyMirror({
    interactionStart: true,
    interactionComplete: true
  }),

  runAfterInteractions: function runAfterInteractions(task) {
    var tasks = [];
    var promise = new Promise(function (resolve) {
      _scheduleUpdate();
      if (task) {
        tasks.push(task);
      }
      tasks.push({ run: resolve, name: 'resolve ' + (task && task.name || '?') });
      _taskQueue.enqueueTasks(tasks);
    });
    return {
      then: promise.then.bind(promise),
      done: function done() {
        if (promise.done) {
          return promise.done.apply(promise, arguments);
        } else {
          console.warn('Tried to call done when not supported by current Promise implementation.');
        }
      },
      cancel: function cancel() {
        _taskQueue.cancelTasks(tasks);
      }
    };
  },
  createInteractionHandle: function createInteractionHandle() {
    DEBUG && infoLog('create interaction handle');
    _scheduleUpdate();
    var handle = ++_inc;
    _addInteractionSet.add(handle);
    return handle;
  },
  clearInteractionHandle: function clearInteractionHandle(handle) {
    DEBUG && infoLog('clear interaction handle');
    invariant(!!handle, 'Must provide a handle to clear.');
    _scheduleUpdate();
    _addInteractionSet.delete(handle);
    _deleteInteractionSet.add(handle);
  },


  addListener: _emitter.addListener.bind(_emitter),

  setDeadline: function setDeadline(deadline) {
    _deadline = deadline;
  }
};

var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({ onMoreTasks: _scheduleUpdate });
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;

function _scheduleUpdate() {
  if (!_nextUpdateHandle) {
    if (_deadline > 0) {
      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
    } else {
      _nextUpdateHandle = setImmediate(_processUpdate);
    }
  }
}

function _processUpdate() {
  _nextUpdateHandle = 0;

  var interactionCount = _interactionSet.size;
  _addInteractionSet.forEach(function (handle) {
    return _interactionSet.add(handle);
  });
  _deleteInteractionSet.forEach(function (handle) {
    return _interactionSet.delete(handle);
  });
  var nextInteractionCount = _interactionSet.size;

  if (interactionCount !== 0 && nextInteractionCount === 0) {
    _emitter.emit(InteractionManager.Events.interactionComplete);
  } else if (interactionCount === 0 && nextInteractionCount !== 0) {
    _emitter.emit(InteractionManager.Events.interactionStart);
  }

  if (nextInteractionCount === 0) {
    while (_taskQueue.hasTasksToProcess()) {
      _taskQueue.processNext();
      if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
        _scheduleUpdate();
        break;
      }
    }
  }
  _addInteractionSet.clear();
  _deleteInteractionSet.clear();
}

module.exports = InteractionManager;
}, 352, null, "InteractionManager");
__d(/* TaskQueue */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var infoLog = require(266      ); // 266 = infoLog
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var DEBUG = false;

var TaskQueue = function () {
  function TaskQueue(_ref) {
    var onMoreTasks = _ref.onMoreTasks;

    _classCallCheck(this, TaskQueue);

    this._onMoreTasks = onMoreTasks;
    this._queueStack = [{ tasks: [], popable: false }];
  }

  _createClass(TaskQueue, [{
    key: 'enqueue',
    value: function enqueue(task) {
      this._getCurrentQueue().push(task);
    }
  }, {
    key: 'enqueueTasks',
    value: function enqueueTasks(tasks) {
      var _this = this;

      tasks.forEach(function (task) {
        return _this.enqueue(task);
      });
    }
  }, {
    key: 'cancelTasks',
    value: function cancelTasks(tasksToCancel) {
      this._queueStack = this._queueStack.map(function (queue) {
        return _extends({}, queue, {
          tasks: queue.tasks.filter(function (task) {
            return tasksToCancel.indexOf(task) === -1;
          })
        });
      }).filter(function (queue, idx) {
        return queue.tasks.length > 0 || idx === 0;
      });
    }
  }, {
    key: 'hasTasksToProcess',
    value: function hasTasksToProcess() {
      return this._getCurrentQueue().length > 0;
    }
  }, {
    key: 'processNext',
    value: function processNext() {
      var queue = this._getCurrentQueue();
      if (queue.length) {
        var task = queue.shift();
        try {
          if (task.gen) {
            DEBUG && infoLog('genPromise for task ' + task.name);
            this._genPromise(task);
          } else if (task.run) {
            DEBUG && infoLog('run task ' + task.name);
            task.run();
          } else {
            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
            DEBUG && infoLog('run anonymous task');
            task();
          }
        } catch (e) {
          e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
          throw e;
        }
      }
    }
  }, {
    key: '_getCurrentQueue',
    value: function _getCurrentQueue() {
      var stackIdx = this._queueStack.length - 1;
      var queue = this._queueStack[stackIdx];
      if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
        this._queueStack.pop();
        DEBUG && infoLog('popped queue: ', { stackIdx: stackIdx, queueStackSize: this._queueStack.length });
        return this._getCurrentQueue();
      } else {
        return queue.tasks;
      }
    }
  }, {
    key: '_genPromise',
    value: function _genPromise(task) {
      var _this2 = this;

      this._queueStack.push({ tasks: [], popable: false });
      var stackIdx = this._queueStack.length - 1;
      DEBUG && infoLog('push new queue: ', { stackIdx: stackIdx });
      DEBUG && infoLog('exec gen task ' + task.name);
      task.gen().then(function () {
        DEBUG && infoLog('onThen for gen task ' + task.name, { stackIdx: stackIdx, queueStackSize: _this2._queueStack.length });
        _this2._queueStack[stackIdx].popable = true;
        _this2.hasTasksToProcess() && _this2._onMoreTasks();
      }).catch(function (ex) {
        ex.message = 'TaskQueue: Error resolving Promise in task ' + task.name + ': ' + ex.message;
        throw ex;
      }).done();
    }
  }]);

  return TaskQueue;
}();

module.exports = TaskQueue;
}, 353, null, "TaskQueue");
__d(/* Interpolation */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var normalizeColor = require(209             ); // 209 = normalizeColor

var linear = function linear(t) {
  return t;
};

var Interpolation = function () {
  function Interpolation() {
    _classCallCheck(this, Interpolation);
  }

  _createClass(Interpolation, null, [{
    key: 'create',
    value: function create(config) {

      if (config.outputRange && typeof config.outputRange[0] === 'string') {
        return createInterpolationFromStringOutputRange(config);
      }

      var outputRange = config.outputRange;
      checkInfiniteRange('outputRange', outputRange);

      var inputRange = config.inputRange;
      checkInfiniteRange('inputRange', inputRange);
      checkValidInputRange(inputRange);

      invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');

      var easing = config.easing || linear;

      var extrapolateLeft = 'extend';
      if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
      } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
      }

      var extrapolateRight = 'extend';
      if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
      } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
      }

      return function (input) {
        invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');

        var range = findRange(input, inputRange);
        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
      };
    }
  }]);

  return Interpolation;
}();

function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
  var result = input;

  if (result < inputMin) {
    if (extrapolateLeft === 'identity') {
      return result;
    } else if (extrapolateLeft === 'clamp') {
      result = inputMin;
    } else if (extrapolateLeft === 'extend') {}
  }

  if (result > inputMax) {
    if (extrapolateRight === 'identity') {
      return result;
    } else if (extrapolateRight === 'clamp') {
      result = inputMax;
    } else if (extrapolateRight === 'extend') {}
  }

  if (outputMin === outputMax) {
    return outputMin;
  }

  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }
    return outputMax;
  }

  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }

  result = easing(result);

  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }

  return result;
}

function colorToRgba(input) {
  var int32Color = normalizeColor(input);
  if (int32Color === null) {
    return input;
  }

  int32Color = int32Color || 0;

  var r = (int32Color & 0xff000000) >>> 24;
  var g = (int32Color & 0x00ff0000) >>> 16;
  var b = (int32Color & 0x0000ff00) >>> 8;
  var a = (int32Color & 0x000000ff) / 255;

  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
}

var stringShapeRegex = /[0-9\.-]+/g;

function createInterpolationFromStringOutputRange(config) {
  var outputRange = config.outputRange;
  invariant(outputRange.length >= 2, 'Bad output range');
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);

  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
    return [];
  });
  outputRange.forEach(function (value) {
    value.match(stringShapeRegex).forEach(function (number, i) {
      outputRanges[i].push(+number);
    });
  });

  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
    return Interpolation.create(_extends({}, config, {
      outputRange: outputRanges[i]
    }));
  });

  var shouldRound = isRgbOrRgba(outputRange[0]);

  return function (input) {
    var i = 0;

    return outputRange[0].replace(stringShapeRegex, function () {
      var val = +interpolations[i++](input);
      var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
      return String(rounded);
    });
  };
}

function isRgbOrRgba(range) {
  return typeof range === 'string' && range.startsWith('rgb');
}

function checkPattern(arr) {
  var pattern = arr[0].replace(stringShapeRegex, '');
  for (var i = 1; i < arr.length; ++i) {
    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
  }
}

function findRange(input, inputRange) {
  for (var i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}

function checkValidInputRange(arr) {
  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');
  for (var i = 1; i < arr.length; ++i) {
    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
  }
}

function checkInfiniteRange(name, arr) {
  invariant(arr.length >= 2, name + ' must have at least 2 elements');
  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
}

module.exports = Interpolation;
}, 354, null, "Interpolation");
__d(/* NativeAnimatedHelper */function(global, require, module, exports) {
'use strict';

var NativeAnimatedModule = require(184            ).NativeAnimatedModule; // 184 = NativeModules
var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;

var nativeEventEmitter = void 0;

var API = {
  createAnimatedNode: function createAnimatedNode(tag, config) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.createAnimatedNode(tag, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.dropAnimatedNode(tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
  }
};

var STYLES_WHITELIST = {
  opacity: true,
  transform: true,

  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};

var TRANSFORM_WHITELIST = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  perspective: true
};

function validateTransform(configs) {
  configs.forEach(function (config) {
    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
      throw new Error('Property \'' + config.property + '\' is not supported by native animated module');
    }
  });
}

function validateStyles(styles) {
  for (var key in styles) {
    if (!STYLES_WHITELIST.hasOwnProperty(key)) {
      throw new Error('Style property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function validateInterpolation(config) {
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };
  for (var key in config) {
    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
      throw new Error('Interpolation property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}

function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}

function assertNativeAnimatedModule() {
  invariant(NativeAnimatedModule, 'Native animated module is not available');
}

function isNativeAnimatedAvailable() {
  return !!NativeAnimatedModule;
}

module.exports = {
  API: API,
  validateStyles: validateStyles,
  validateTransform: validateTransform,
  validateInterpolation: validateInterpolation,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  isNativeAnimatedAvailable: isNativeAnimatedAvailable,
  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
    }
    return nativeEventEmitter;
  }
};
}, 355, null, "NativeAnimatedHelper");
__d(/* SpringConfig */function(global, require, module, exports) {

'use strict';

function tensionFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function frictionFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    tension: tensionFromOrigamiValue(tension),
    friction: frictionFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);

  return {
    tension: tensionFromOrigamiValue(bouncyTension),
    friction: frictionFromOrigamiValue(bouncyFriction)
  };
}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
}, 356, null, "SpringConfig");
__d(/* fbjs/lib/requestAnimationFrame.js */function(global, require, module, exports) {'use strict';

var emptyFunction = require(200              ); // 200 = ./emptyFunction
var nativeRequestAnimationFrame = require(358                            ); // 358 = ./nativeRequestAnimationFrame

var lastTime = 0;

var requestAnimationFrame = nativeRequestAnimationFrame || function (callback) {
  var currTime = Date.now();
  var timeDelay = Math.max(0, 16 - (currTime - lastTime));
  lastTime = currTime + timeDelay;
  return global.setTimeout(function () {
    callback(Date.now());
  }, timeDelay);
};

requestAnimationFrame(emptyFunction);

module.exports = requestAnimationFrame;
}, 357, null, "fbjs/lib/requestAnimationFrame.js");
__d(/* fbjs/lib/nativeRequestAnimationFrame.js */function(global, require, module, exports) {"use strict";

var nativeRequestAnimationFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame;

module.exports = nativeRequestAnimationFrame;
}, 358, null, "fbjs/lib/nativeRequestAnimationFrame.js");
__d(/* Easing */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ease = void 0;

var Easing = function () {
  function Easing() {
    _classCallCheck(this, Easing);
  }

  _createClass(Easing, null, [{
    key: 'step0',
    value: function step0(n) {
      return n > 0 ? 1 : 0;
    }
  }, {
    key: 'step1',
    value: function step1(n) {
      return n >= 1 ? 1 : 0;
    }
  }, {
    key: 'linear',
    value: function linear(t) {
      return t;
    }
  }, {
    key: 'ease',
    value: function ease(t) {
      if (!_ease) {
        _ease = Easing.bezier(0.42, 0, 1, 1);
      }
      return _ease(t);
    }
  }, {
    key: 'quad',
    value: function quad(t) {
      return t * t;
    }
  }, {
    key: 'cubic',
    value: function cubic(t) {
      return t * t * t;
    }
  }, {
    key: 'poly',
    value: function poly(n) {
      return function (t) {
        return Math.pow(t, n);
      };
    }
  }, {
    key: 'sin',
    value: function sin(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    }
  }, {
    key: 'circle',
    value: function circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    }
  }, {
    key: 'exp',
    value: function exp(t) {
      return Math.pow(2, 10 * (t - 1));
    }
  }, {
    key: 'elastic',
    value: function elastic() {
      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      var p = bounciness * Math.PI;
      return function (t) {
        return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
      };
    }
  }, {
    key: 'back',
    value: function back(s) {
      if (s === undefined) {
        s = 1.70158;
      }
      return function (t) {
        return t * t * ((s + 1) * t - s);
      };
    }
  }, {
    key: 'bounce',
    value: function bounce(t) {
      if (t < 1 / 2.75) {
        return 7.5625 * t * t;
      }

      if (t < 2 / 2.75) {
        t -= 1.5 / 2.75;
        return 7.5625 * t * t + 0.75;
      }

      if (t < 2.5 / 2.75) {
        t -= 2.25 / 2.75;
        return 7.5625 * t * t + 0.9375;
      }

      t -= 2.625 / 2.75;
      return 7.5625 * t * t + 0.984375;
    }
  }, {
    key: 'bezier',
    value: function bezier(x1, y1, x2, y2) {
      var _bezier = require(360     ); // 360 = bezier
      return _bezier(x1, y1, x2, y2);
    }
  }, {
    key: 'in',
    value: function _in(easing) {
      return easing;
    }
  }, {
    key: 'out',
    value: function out(easing) {
      return function (t) {
        return 1 - easing(1 - t);
      };
    }
  }, {
    key: 'inOut',
    value: function inOut(easing) {
      return function (t) {
        if (t < 0.5) {
          return easing(t * 2) / 2;
        }
        return 1 - easing((1 - t) * 2) / 2;
      };
    }
  }]);

  return Easing;
}();

module.exports = Easing;
}, 359, null, "Easing");
__d(/* bezier */function(global, require, module, exports) {
'use strict';

var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}

function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}

function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX,
      currentT,
      i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}

module.exports = function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }

    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};
}, 360, null, "bezier");
__d(/* Image */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Image\\Image.android.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ImageResizeMode = require(289              ); // 289 = ImageResizeMode
var ImageStylePropTypes = require(288                  ); // 288 = ImageStylePropTypes
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var NativeModules = require(184            ); // 184 = NativeModules
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNativeViewAttributes = require(301                        ); // 301 = ReactNativeViewAttributes
var Set = require(225  ); // 225 = Set
var StyleSheet = require(314         ); // 314 = StyleSheet
var StyleSheetPropType = require(309                 ); // 309 = StyleSheetPropType
var View = require(285   ); // 285 = View
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var filterObject = require(362                    ); // 362 = fbjs/lib/filterObject
var flattenStyle = require(273           ); // 273 = flattenStyle
var merge = require(305    ); // 305 = merge
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent
var resolveAssetSource = require(323                 ); // 323 = resolveAssetSource

var ImageLoader = NativeModules.ImageLoader;


var _requestId = 1;
function generateRequestId() {
  return _requestId++;
}

var ImageViewAttributes = merge(ReactNativeViewAttributes.UIView, {
  src: true,
  loadingIndicatorSrc: true,
  resizeMethod: true,
  resizeMode: true,
  progressiveRenderingEnabled: true,
  fadeDuration: true,
  shouldNotifyLoadEvents: true
});

var ViewStyleKeys = new Set(Object.keys(ViewStylePropTypes));
var ImageSpecificStyleKeys = new Set(Object.keys(ImageStylePropTypes).filter(function (x) {
  return !ViewStyleKeys.has(x);
}));

var Image = createReactClass({
  displayName: 'Image',
  propTypes: _extends({}, ViewPropTypes, {
    style: StyleSheetPropType(ImageStylePropTypes),

    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      headers: PropTypes.objectOf(PropTypes.string)
    }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
      uri: PropTypes.string,
      width: PropTypes.number,
      height: PropTypes.number
    }))]),

    blurRadius: PropTypes.number,

    loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string
    }), PropTypes.number]),
    progressiveRenderingEnabled: PropTypes.bool,
    fadeDuration: PropTypes.number,

    onLoadStart: PropTypes.func,

    onError: PropTypes.func,

    onLoad: PropTypes.func,

    onLoadEnd: PropTypes.func,

    testID: PropTypes.string,

    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),

    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
  }),

  statics: {
    resizeMode: ImageResizeMode,

    getSize: function getSize(url, success, failure) {
      return ImageLoader.getSize(url).then(function (sizes) {
        success(sizes.width, sizes.height);
      }).catch(failure || function () {
        console.warn('Failed to get size for image: ' + url);
      });
    },
    prefetch: function prefetch(url, callback) {
      var requestId = generateRequestId();
      callback && callback(requestId);
      return ImageLoader.prefetchImage(url, requestId);
    },
    abortPrefetch: function abortPrefetch(requestId) {
      ImageLoader.abortRequest(requestId);
    },
    queryCache: function queryCache(urls) {
      return regeneratorRuntime.async(function queryCache$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

            case 2:
              return _context.abrupt('return', _context.sent);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    },

    resolveAssetSource: resolveAssetSource
  },

  mixins: [NativeMethodsMixin],

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  _updateViewConfig: function _updateViewConfig(props) {
    if (props.children) {
      this.viewConfig = {
        uiViewClassName: 'RCTView',
        validAttributes: ReactNativeViewAttributes.RCTView
      };
    } else {
      this.viewConfig = {
        uiViewClassName: 'RCTImageView',
        validAttributes: ImageViewAttributes
      };
    }
  },

  componentWillMount: function componentWillMount() {
    this._updateViewConfig(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this._updateViewConfig(nextProps);
  },

  contextTypes: {
    isInAParentText: PropTypes.bool
  },

  render: function render() {
    var source = resolveAssetSource(this.props.source);
    var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

    if (source && source.uri === '') {
      console.warn('source.uri should not be an empty string');
    }

    if (this.props.src) {
      console.warn('The <Image> component requires a `source` property rather than `src`.');
    }

    if (source && (source.uri || Array.isArray(source))) {
      var style = void 0;
      var sources = void 0;
      if (source.uri) {
        var _width = source.width,
            _height = source.height;

        style = flattenStyle([{ width: _width, height: _height }, styles.base, this.props.style]);
        sources = [{ uri: source.uri }];
      } else {
        style = flattenStyle([styles.base, this.props.style]);
        sources = source;
      }

      var _props = this.props,
          onLoadStart = _props.onLoadStart,
          onLoad = _props.onLoad,
          onLoadEnd = _props.onLoadEnd,
          onError = _props.onError;

      var nativeProps = merge(this.props, {
        style: style,
        shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
        src: sources,
        headers: source.headers,
        loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
      });

      if (nativeProps.children) {
        var containerStyle = filterObject(style, function (val, key) {
          return !ImageSpecificStyleKeys.has(key);
        });
        var imageStyle = filterObject(style, function (val, key) {
          return ImageSpecificStyleKeys.has(key);
        });
        var imageProps = merge(nativeProps, {
          style: [imageStyle, styles.absoluteImage],
          children: undefined
        });

        return React.createElement(
          View,
          { style: containerStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 329
            }
          },
          React.createElement(RKImage, _extends({}, imageProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 330
            }
          })),
          this.props.children
        );
      } else {
        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, _extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 336
            }
          }));
        } else {
          return React.createElement(RKImage, _extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 338
            }
          }));
        }
      }
    }
    return null;
  }
});

var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  },
  absoluteImage: {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    position: 'absolute'
  }
});

var cfg = {
  nativeOnly: {
    src: true,
    headers: true,
    loadingIndicatorSrc: true,
    shouldNotifyLoadEvents: true
  }
};
var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);

module.exports = Image;
}, 361, null, "Image");
__d(/* fbjs/lib/filterObject.js */function(global, require, module, exports) {

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

function filterObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name) && callback.call(context, object[name], name, object)) {
      result[name] = object[name];
    }
  }
  return result;
}

module.exports = filterObject;
}, 362, null, "fbjs/lib/filterObject.js");
__d(/* ScrollView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\ScrollView\\ScrollView.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Animated = require(350       ); // 350 = Animated
var ColorPropType = require(208            ); // 208 = ColorPropType
var EdgeInsetsPropType = require(303                 ); // 303 = EdgeInsetsPropType
var Platform = require(192       ); // 192 = Platform
var PointPropType = require(364            ); // 364 = PointPropType
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var ReactNative = require(211          ); // 211 = ReactNative
var ScrollResponder = require(365              ); // 365 = ScrollResponder
var ScrollViewStickyHeader = require(372                     ); // 372 = ScrollViewStickyHeader
var StyleSheet = require(314         ); // 314 = StyleSheet
var StyleSheetPropType = require(309                 ); // 309 = StyleSheetPropType
var View = require(285   ); // 285 = View
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var dismissKeyboard = require(368              ); // 368 = dismissKeyboard
var flattenStyle = require(273           ); // 273 = flattenStyle
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var processDecelerationRate = require(373                      ); // 373 = processDecelerationRate
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent
var warning = require(199               ); // 199 = fbjs/lib/warning

var ScrollView = createReactClass({
  displayName: 'ScrollView',
  propTypes: _extends({}, ViewPropTypes, {
    automaticallyAdjustContentInsets: PropTypes.bool,

    contentInset: EdgeInsetsPropType,

    contentOffset: PointPropType,

    bounces: PropTypes.bool,

    bouncesZoom: PropTypes.bool,

    alwaysBounceHorizontal: PropTypes.bool,

    alwaysBounceVertical: PropTypes.bool,

    centerContent: PropTypes.bool,

    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),

    decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),

    horizontal: PropTypes.bool,

    indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),

    directionalLockEnabled: PropTypes.bool,

    canCancelContentTouches: PropTypes.bool,

    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),

    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),

    maximumZoomScale: PropTypes.number,

    minimumZoomScale: PropTypes.number,

    onMomentumScrollBegin: PropTypes.func,

    onMomentumScrollEnd: PropTypes.func,

    onScroll: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    pagingEnabled: PropTypes.bool,

    scrollEnabled: PropTypes.bool,

    scrollEventThrottle: PropTypes.number,

    scrollIndicatorInsets: EdgeInsetsPropType,

    scrollsToTop: PropTypes.bool,

    showsHorizontalScrollIndicator: PropTypes.bool,

    showsVerticalScrollIndicator: PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
    style: StyleSheetPropType(ViewStylePropTypes),

    snapToInterval: PropTypes.number,

    snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),

    removeClippedSubviews: PropTypes.bool,

    zoomScale: PropTypes.number,

    contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),

    refreshControl: PropTypes.element,

    endFillColor: ColorPropType,

    scrollPerfTag: PropTypes.string,

    overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),

    DEPRECATED_sendUpdatedChildFrames: PropTypes.bool
  }),

  mixins: [ScrollResponder.Mixin],

  _scrollAnimatedValue: new Animated.Value(0),
  _scrollAnimatedValueAttachment: null,
  _stickyHeaderRefs: new Map(),
  _headerLayoutYs: new Map(),
  getInitialState: function getInitialState() {
    return this.scrollResponderMixinGetInitialState();
  },

  componentWillMount: function componentWillMount() {
    this._scrollAnimatedValue = new Animated.Value(0);
    this._stickyHeaderRefs = new Map();
    this._headerLayoutYs = new Map();
  },

  componentDidMount: function componentDidMount() {
    this._updateAnimatedNodeAttachment();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._updateAnimatedNodeAttachment();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
  },

  setNativeProps: function setNativeProps(props) {
    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
  },

  getScrollResponder: function getScrollResponder() {
    return this;
  },

  getScrollableNode: function getScrollableNode() {
    return ReactNative.findNodeHandle(this._scrollViewRef);
  },

  getInnerViewNode: function getInnerViewNode() {
    return ReactNative.findNodeHandle(this._innerViewRef);
  },

  scrollTo: function scrollTo(y, x, animated) {
    if (typeof y === 'number') {
      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
    } else {
      var _ref = y || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({ x: x || 0, y: y || 0, animated: animated !== false });
  },

  scrollToEnd: function scrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    this.getScrollResponder().scrollResponderScrollToEnd({
      animated: animated
    });
  },

  scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
    var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
    this.scrollTo({ x: x, y: y, animated: false });
  },

  flashScrollIndicators: function flashScrollIndicators() {
    this.getScrollResponder().scrollResponderFlashScrollIndicators();
  },

  _getKeyForIndex: function _getKeyForIndex(index, childArray) {
    var child = childArray[index];
    return child && child.key;
  },

  _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
      this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(this._scrollViewRef, 'onScroll', [{ nativeEvent: { contentOffset: { y: this._scrollAnimatedValue } } }]);
    }
  },

  _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
    if (ref) {
      this._stickyHeaderRefs.set(key, ref);
    } else {
      this._stickyHeaderRefs.delete(key);
    }
  },

  _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
    if (!this.props.stickyHeaderIndices) {
      return;
    }
    var childArray = React.Children.toArray(this.props.children);
    if (key !== this._getKeyForIndex(index, childArray)) {
      return;
    }

    var layoutY = event.nativeEvent.layout.y;
    this._headerLayoutYs.set(key, layoutY);

    var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
    var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];
    if (previousHeaderIndex != null) {
      var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
      previousHeader && previousHeader.setNextHeaderY(layoutY);
    }
  },

  _handleScroll: function _handleScroll(e) {
    if (__DEV__) {
      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
        console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
      }
    }
    if (Platform.OS === 'android') {
      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    }
    this.scrollResponderHandleScroll(e);
  },

  _handleContentOnLayout: function _handleContentOnLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
        width = _e$nativeEvent$layout.width,
        height = _e$nativeEvent$layout.height;

    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _scrollViewRef: null,
  _setScrollViewRef: function _setScrollViewRef(ref) {
    this._scrollViewRef = ref;
  },

  _innerViewRef: null,
  _setInnerViewRef: function _setInnerViewRef(ref) {
    this._innerViewRef = ref;
  },

  render: function render() {
    var _this = this;

    var ScrollViewClass = void 0;
    var ScrollContentContainerViewClass = void 0;
    if (Platform.OS === 'ios') {
      ScrollViewClass = RCTScrollView;
      ScrollContentContainerViewClass = RCTScrollContentView;
      warning(!this.props.snapToInterval || !this.props.pagingEnabled, 'snapToInterval is currently ignored when pagingEnabled is true.');
    } else if (Platform.OS === 'android') {
      if (this.props.horizontal) {
        ScrollViewClass = AndroidHorizontalScrollView;
      } else {
        ScrollViewClass = AndroidScrollView;
      }
      ScrollContentContainerViewClass = View;
    }

    invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');

    invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');

    var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
    var style = void 0,
        childLayoutProps = void 0;
    if (__DEV__ && this.props.style) {
      style = flattenStyle(this.props.style);
      childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
        return style && style[prop] !== undefined;
      });
      invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
    }

    var contentSizeChangeProps = {};
    if (this.props.onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout
      };
    }

    var stickyHeaderIndices = this.props.stickyHeaderIndices;

    var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
    var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
    var children = hasStickyHeaders ? childArray.map(function (child, index) {
      var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
      if (indexOfIndex > -1) {
        var key = child.key;
        var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
        return React.createElement(
          ScrollViewStickyHeader,
          {
            key: key,
            ref: function ref(_ref2) {
              return _this._setStickyHeaderRef(key, _ref2);
            },
            nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
            onLayout: function onLayout(event) {
              return _this._onStickyHeaderLayout(index, event, key);
            },
            scrollAnimatedValue: _this._scrollAnimatedValue, __source: {
              fileName: _jsxFileName,
              lineNumber: 690
            }
          },
          child
        );
      } else {
        return child;
      }
    }) : this.props.children;
    var contentContainer = React.createElement(
      ScrollContentContainerViewClass,
      _extends({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
        collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 707
        }
      }),
      children
    );

    var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;

    var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;

    var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;

    var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
    var props = _extends({}, this.props, {
      alwaysBounceHorizontal: alwaysBounceHorizontal,
      alwaysBounceVertical: alwaysBounceVertical,
      style: [baseStyle, this.props.style],

      onContentSizeChange: null,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderReject: this.scrollResponderHandleResponderReject,
      onResponderRelease: this.scrollResponderHandleResponderRelease,
      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
      onScroll: this._handleScroll,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchStart: this.scrollResponderHandleTouchStart,
      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
      sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
      DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
    });

    var decelerationRate = this.props.decelerationRate;

    if (decelerationRate) {
      props.decelerationRate = processDecelerationRate(decelerationRate);
    }

    var refreshControl = this.props.refreshControl;

    if (refreshControl) {
      if (Platform.OS === 'ios') {
        return React.createElement(
          ScrollViewClass,
          _extends({}, props, { ref: this._setScrollViewRef, __source: {
              fileName: _jsxFileName,
              lineNumber: 778
            }
          }),
          Platform.isTVOS ? null : refreshControl,
          contentContainer
        );
      } else if (Platform.OS === 'android') {

        return React.cloneElement(refreshControl, { style: props.style }, React.createElement(
          ScrollViewClass,
          _extends({}, props, { style: baseStyle, ref: this._setScrollViewRef, __source: {
              fileName: _jsxFileName,
              lineNumber: 793
            }
          }),
          contentContainer
        ));
      }
    }
    return React.createElement(
      ScrollViewClass,
      _extends({}, props, { ref: this._setScrollViewRef, __source: {
          fileName: _jsxFileName,
          lineNumber: 800
        }
      }),
      contentContainer
    );
  }
});

var styles = StyleSheet.create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll'
  },
  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll'
  },
  contentContainerHorizontal: {
    flexDirection: 'row'
  }
});

var nativeOnlyProps = void 0,
    AndroidScrollView = void 0,
    AndroidHorizontalScrollView = void 0,
    RCTScrollView = void 0,
    RCTScrollContentView = void 0;
if (Platform.OS === 'android') {
  nativeOnlyProps = {
    nativeOnly: {
      sendMomentumEvents: true
    }
  };
  AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
  AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
} else if (Platform.OS === 'ios') {
  nativeOnlyProps = {
    nativeOnly: {
      onMomentumScrollBegin: true,
      onMomentumScrollEnd: true,
      onScrollBeginDrag: true,
      onScrollEndDrag: true
    }
  };
  RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);

  RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
}

module.exports = ScrollView;
}, 363, null, "ScrollView");
__d(/* PointPropType */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types

var createStrictShapeTypeChecker = require(304                           ); // 304 = createStrictShapeTypeChecker

var PointPropType = createStrictShapeTypeChecker({
  x: PropTypes.number,
  y: PropTypes.number
});

module.exports = PointPropType;
}, 364, null, "PointPropType");
__d(/* ScrollResponder */function(global, require, module, exports) {
'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Dimensions = require(316         ); // 316 = Dimensions
var FrameRateLogger = require(366              ); // 366 = FrameRateLogger
var Keyboard = require(367       ); // 367 = Keyboard
var ReactNative = require(211          ); // 211 = ReactNative
var Subscribable = require(369           ); // 369 = Subscribable
var TextInputState = require(283             ); // 283 = TextInputState
var UIManager = require(279        ); // 279 = UIManager

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var nullthrows = require(370                  ); // 370 = fbjs/lib/nullthrows
var performanceNow = require(193                      ); // 193 = fbjs/lib/performanceNow
var warning = require(199               ); // 199 = fbjs/lib/warning

var _require = require(184            ), // 184 = NativeModules
    ScrollViewManager = _require.ScrollViewManager;

var _require2 = require(371                       ), // 371 = ReactNativeComponentTree
    getInstanceFromNode = _require2.getInstanceFromNode;

var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

function isTagInstanceOfTextInput(tag) {
  var instance = getInstanceFromNode(tag);
  return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTTextView' || instance.viewConfig.uiViewClassName === 'RCTTextField');
}

var ScrollResponderMixin = {
  mixins: [Subscribable.Mixin],
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,

      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },

  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    return this.state.isTouching;
  },

  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
      return true;
    }
    return false;
  },

  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
    if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
      return true;
    }
    return this.scrollResponderIsAnimating();
  },

  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},

  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },

  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },

  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);

    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
      TextInputState.blurTextInput(currentlyFocusedTextInput);
    }
  },

  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },

  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },

  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    FrameRateLogger.beginScroll();
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },

  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    var velocity = e.nativeEvent.velocity;

    if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
      FrameRateLogger.endScroll();
    }
    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },

  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = performanceNow();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },

  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    FrameRateLogger.endScroll();
    this.state.lastMomentumScrollEndTime = performanceNow();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },

  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },

  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },

  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = performanceNow();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },

  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
  },

  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === 'number') {
      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = x || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
  },

  scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
  },

  scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
    console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
    this.scrollResponderScrollTo({ x: offsetX, y: offsetY, animated: false });
  },

  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');
    if ('animated' in rect) {
      var animated = rect.animated,
          rect = _objectWithoutProperties(rect, ['animated']);
    } else if (typeof animated !== 'undefined') {
      console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
    }
    ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
  },

  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
    invariant(ScrollViewManager && ScrollViewManager.flashScrollIndicators, 'flashScrollIndicators is not implemented');
    ScrollViewManager.flashScrollIndicators(this.scrollResponderGetScrollableNode());
  },

  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
    UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },

  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
    var keyboardScreenY = Dimensions.get('window').height;
    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }
    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }
    this.scrollResponderScrollTo({ x: 0, y: scrollOffsetY, animated: true });

    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },

  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
    console.error('Error measuring text field: ', e);
  },

  componentWillMount: function componentWillMount() {
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    warning(typeof keyboardShouldPersistTaps !== 'boolean', '\'keyboardShouldPersistTaps={' + keyboardShouldPersistTaps + '}\' is deprecated. ' + ('Use \'keyboardShouldPersistTaps="' + (keyboardShouldPersistTaps ? "always" : "never") + '"\' instead'));

    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
    this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
    this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
    this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
    this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
  },

  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },

  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },

  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }
    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },

  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }

};

var ScrollResponder = {
  Mixin: ScrollResponderMixin
};

module.exports = ScrollResponder;
}, 365, null, "ScrollResponder");
__d(/* FrameRateLogger */function(global, require, module, exports) {
'use strict';

var NativeModules = require(184            ); // 184 = NativeModules

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
    }
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
  },

  setContext: function setContext(context) {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
  },

  beginScroll: function beginScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
  },
  endScroll: function endScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
  }
};

module.exports = FrameRateLogger;
}, 366, null, "FrameRateLogger");
__d(/* Keyboard */function(global, require, module, exports) {
'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var KeyboardObserver = require(184            ).KeyboardObserver; // 184 = NativeModules
var dismissKeyboard = require(368              ); // 368 = dismissKeyboard
var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);

var Keyboard = {
  addListener: function addListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeListener: function removeListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeAllListeners: function removeAllListeners(eventName) {
    invariant(false, 'Dummy method used for documentation');
  },
  dismiss: function dismiss() {
    invariant(false, 'Dummy method used for documentation');
  }
};

Keyboard = KeyboardEventEmitter;
Keyboard.dismiss = dismissKeyboard;

module.exports = Keyboard;
}, 367, null, "Keyboard");
__d(/* dismissKeyboard */function(global, require, module, exports) {
'use strict';

var TextInputState = require(283             ); // 283 = TextInputState

function dismissKeyboard() {
  TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
}

module.exports = dismissKeyboard;
}, 368, null, "dismissKeyboard");
__d(/* Subscribable */function(global, require, module, exports) {
'use strict';

var Subscribable = {};

Subscribable.Mixin = {

  componentWillMount: function componentWillMount() {
    this._subscribableSubscriptions = [];
  },

  componentWillUnmount: function componentWillUnmount() {
    this._subscribableSubscriptions.forEach(function (subscription) {
      return subscription.remove();
    });
    this._subscribableSubscriptions = null;
  },

  addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
    this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
  }
};

module.exports = Subscribable;
}, 369, null, "Subscribable");
__d(/* fbjs/lib/nullthrows.js */function(global, require, module, exports) {"use strict";

var nullthrows = function nullthrows(x) {
  if (x != null) {
    return x;
  }
  throw new Error("Got unexpected null or undefined");
};

module.exports = nullthrows;
}, 370, null, "fbjs/lib/nullthrows.js");
__d(/* ReactNativeComponentTree */function(global, require, module, exports) {

'use strict';

var _require = require(211          ), // 211 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
}, 371, null, "ReactNativeComponentTree");
__d(/* ScrollViewStickyHeader */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\ScrollView\\ScrollViewStickyHeader.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ScrollViewStickyHeader: {
    displayName: 'ScrollViewStickyHeader'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var Animated = require(350       ); // 350 = Animated
var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet

var ScrollViewStickyHeader = _wrapComponent('ScrollViewStickyHeader')(function (_React$Component) {
  _inherits(ScrollViewStickyHeader, _React$Component);

  function ScrollViewStickyHeader(props, context) {
    _classCallCheck(this, ScrollViewStickyHeader);

    var _this = _possibleConstructorReturn(this, (ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call(this, props, context));

    _this._onLayout = function (event) {
      _this.setState({
        measured: true,
        layoutY: event.nativeEvent.layout.y,
        layoutHeight: event.nativeEvent.layout.height
      });

      _this.props.onLayout(event);
      var child = React.Children.only(_this.props.children);
      if (child.props.onLayout) {
        child.props.onLayout(event);
      }
    };

    _this.state = {
      measured: false,
      layoutY: 0,
      layoutHeight: 0,
      nextHeaderLayoutY: props.nextHeaderLayoutY
    };
    return _this;
  }

  _createClass(ScrollViewStickyHeader, [{
    key: 'setNextHeaderY',
    value: function setNextHeaderY(y) {
      this.setState({ nextHeaderLayoutY: y });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          measured = _state.measured,
          layoutHeight = _state.layoutHeight,
          layoutY = _state.layoutY,
          nextHeaderLayoutY = _state.nextHeaderLayoutY;

      var inputRange = [-1, 0];
      var outputRange = [0, 0];

      if (measured) {
        inputRange.push(layoutY);
        outputRange.push(0);

        var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
        if (collisionPoint >= layoutY) {
          inputRange.push(collisionPoint, collisionPoint + 1);
          outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);
        } else {
          inputRange.push(layoutY + 1);
          outputRange.push(1);
        }
      }

      var translateY = this.props.scrollAnimatedValue.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });
      var child = React.Children.only(this.props.children);

      return React.createElement(
        Animated.View,
        {
          collapsable: false,
          onLayout: this._onLayout,
          style: [child.props.style, styles.header, { transform: [{ translateY: translateY }] }], __source: {
            fileName: _jsxFileName,
            lineNumber: 99
          }
        },
        React.cloneElement(child, {
          style: styles.fill,
          onLayout: undefined })
      );
    }
  }]);

  return ScrollViewStickyHeader;
}(React.Component));

var styles = StyleSheet.create({
  header: {
    zIndex: 10
  },
  fill: {
    flex: 1
  }
});

module.exports = ScrollViewStickyHeader;
}, 372, null, "ScrollViewStickyHeader");
__d(/* processDecelerationRate */function(global, require, module, exports) {
'use strict';

function processDecelerationRate(decelerationRate) {
  if (decelerationRate === 'normal') {
    decelerationRate = 0.998;
  } else if (decelerationRate === 'fast') {
    decelerationRate = 0.99;
  }
  return decelerationRate;
}

module.exports = processDecelerationRate;
}, 373, null, "processDecelerationRate");
__d(/* DatePickerIOS */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\DatePicker\\DatePickerIOS.android.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  DummyDatePickerIOS: {
    displayName: 'DummyDatePickerIOS'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var View = require(285   ); // 285 = View

var DummyDatePickerIOS = _wrapComponent('DummyDatePickerIOS')(function (_React$Component) {
  _inherits(DummyDatePickerIOS, _React$Component);

  function DummyDatePickerIOS() {
    _classCallCheck(this, DummyDatePickerIOS);

    return _possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
  }

  _createClass(DummyDatePickerIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummyDatePickerIOS, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 22
          }
        },
        React.createElement(
          Text,
          { style: styles.datePickerText, __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          'DatePickerIOS is not supported on this platform!'
        )
      );
    }
  }]);

  return DummyDatePickerIOS;
}(React.Component));

var styles = StyleSheet.create({
  dummyDatePickerIOS: {
    height: 100,
    width: 300,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center',
    margin: 10
  },
  datePickerText: {
    color: '#333333',
    margin: 20
  }
});

module.exports = DummyDatePickerIOS;
}, 374, null, "DatePickerIOS");
__d(/* DrawerLayoutAndroid */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\DrawerAndroid\\DrawerLayoutAndroid.android.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(211          ); // 211 = ReactNative
var StatusBar = require(376        ); // 376 = StatusBar
var StyleSheet = require(314         ); // 314 = StyleSheet
var UIManager = require(279        ); // 279 = UIManager
var View = require(285   ); // 285 = View
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

var createReactClass = require(311                 ); // 311 = create-react-class
var dismissKeyboard = require(368              ); // 368 = dismissKeyboard
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var RK_DRAWER_REF = 'drawerlayout';
var INNERVIEW_REF = 'innerView';

var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];

var DrawerLayoutAndroid = createReactClass({
  displayName: 'DrawerLayoutAndroid',
  statics: {
    positions: DrawerConsts.DrawerPosition
  },

  propTypes: _extends({}, ViewPropTypes, {
    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),

    drawerBackgroundColor: ColorPropType,

    drawerPosition: PropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),

    drawerWidth: PropTypes.number,

    drawerLockMode: PropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),

    onDrawerSlide: PropTypes.func,

    onDrawerStateChanged: PropTypes.func,

    onDrawerOpen: PropTypes.func,

    onDrawerClose: PropTypes.func,

    renderNavigationView: PropTypes.func.isRequired,

    statusBarBackgroundColor: ColorPropType
  }),

  mixins: [NativeMethodsMixin],

  getDefaultProps: function getDefaultProps() {
    return {
      drawerBackgroundColor: 'white'
    };
  },

  getInitialState: function getInitialState() {
    return { statusBarBackgroundColor: undefined };
  },

  getInnerViewNode: function getInnerViewNode() {
    return this.refs[INNERVIEW_REF].getInnerViewNode();
  },

  componentDidMount: function componentDidMount() {
    this._updateStatusBarBackground();
  },

  componentDidReceiveProps: function componentDidReceiveProps() {
    this._updateStatusBarBackground();
  },

  render: function render() {
    var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
    var drawerViewWrapper = React.createElement(
      View,
      {
        style: [styles.drawerSubview, { width: this.props.drawerWidth, backgroundColor: this.props.drawerBackgroundColor }],
        collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 184
        }
      },
      this.props.renderNavigationView(),
      drawStatusBar && React.createElement(View, { style: styles.drawerStatusBar, __source: {
          fileName: _jsxFileName,
          lineNumber: 191
        }
      })
    );
    var childrenWrapper = React.createElement(
      View,
      { ref: INNERVIEW_REF, style: styles.mainSubview, collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 194
        }
      },
      drawStatusBar && React.createElement(StatusBar, {
        translucent: true,
        backgroundColor: this.state.statusBarBackgroundColor,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 196
        }
      }),
      drawStatusBar && React.createElement(View, { style: [styles.statusBar, { backgroundColor: this.props.statusBarBackgroundColor }], __source: {
          fileName: _jsxFileName,
          lineNumber: 201
        }
      }),
      this.props.children
    );
    return React.createElement(
      AndroidDrawerLayout,
      _extends({}, this.props, {
        ref: RK_DRAWER_REF,
        drawerWidth: this.props.drawerWidth,
        drawerPosition: this.props.drawerPosition,
        drawerLockMode: this.props.drawerLockMode,
        style: [styles.base, this.props.style],
        onDrawerSlide: this._onDrawerSlide,
        onDrawerOpen: this._onDrawerOpen,
        onDrawerClose: this._onDrawerClose,
        onDrawerStateChanged: this._onDrawerStateChanged, __source: {
          fileName: _jsxFileName,
          lineNumber: 208
        }
      }),
      childrenWrapper,
      drawerViewWrapper
    );
  },

  _onDrawerSlide: function _onDrawerSlide(event) {
    if (this.props.onDrawerSlide) {
      this.props.onDrawerSlide(event);
    }
    if (this.props.keyboardDismissMode === 'on-drag') {
      dismissKeyboard();
    }
  },

  _onDrawerOpen: function _onDrawerOpen() {
    if (this.props.onDrawerOpen) {
      this.props.onDrawerOpen();
    }
  },

  _onDrawerClose: function _onDrawerClose() {
    if (this.props.onDrawerClose) {
      this.props.onDrawerClose();
    }
  },

  _onDrawerStateChanged: function _onDrawerStateChanged(event) {
    if (this.props.onDrawerStateChanged) {
      this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
    }
  },

  openDrawer: function openDrawer() {
    UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
  },

  closeDrawer: function closeDrawer() {
    UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
  },

  _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
    return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
  },

  _updateStatusBarBackground: function _updateStatusBarBackground() {
    var _this = this;

    if (Platform.Version >= 21 && this.props.statusBarBackgroundColor) {
      if (this.state.statusBarBackgroundColor !== 'transparent') {
        requestAnimationFrame(function () {
          _this.setState({ statusBarBackgroundColor: 'transparent' });
        });
      }
    } else {
      this.setState({ statusBarBackgroundColor: undefined });
    }
  }
});

var styles = StyleSheet.create({
  base: {
    flex: 1,
    elevation: 16
  },
  mainSubview: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  drawerSubview: {
    position: 'absolute',
    top: 0,
    bottom: 0
  },
  statusBar: {
    height: StatusBar.currentHeight
  },
  drawerStatusBar: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: StatusBar.currentHeight,
    backgroundColor: 'rgba(0, 0, 0, 0.251)'
  }
});

var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);

module.exports = DrawerLayoutAndroid;
}, 375, null, "DrawerLayoutAndroid");
__d(/* StatusBar */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  StatusBar: {
    displayName: 'StatusBar'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ColorPropType = require(208            ); // 208 = ColorPropType
var Platform = require(192       ); // 192 = Platform

var processColor = require(297           ); // 297 = processColor

var StatusBarManager = require(184            ).StatusBarManager; // 184 = NativeModules

function mergePropsStack(propsStack, defaultValues) {
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, _extends({}, defaultValues));
}

function createStackEntry(props) {
  return {
    backgroundColor: props.backgroundColor != null ? {
      value: props.backgroundColor,
      animated: props.animated
    } : null,
    barStyle: props.barStyle != null ? {
      value: props.barStyle,
      animated: props.animated
    } : null,
    translucent: props.translucent,
    hidden: props.hidden != null ? {
      value: props.hidden,
      animated: props.animated,
      transition: props.showHideTransition
    } : null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
  };
}

var StatusBar = _wrapComponent('StatusBar')((_temp2 = _class = function (_React$Component) {
  _inherits(StatusBar, _React$Component);

  function StatusBar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, StatusBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
      clearImmediate(StatusBar._updateImmediate);
      StatusBar._updateImmediate = setImmediate(function () {
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

        if (Platform.OS === 'ios') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
          }

          if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
            StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
          }
        } else if (Platform.OS === 'android') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value);
          }
          if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
            StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value);
          }
          if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
            StatusBarManager.setTranslucent(mergedProps.translucent);
          }
        }

        StatusBar._currentValues = mergedProps;
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(StatusBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack.push(this._stackEntry);
      this._updatePropsStack();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      StatusBar._propsStack.splice(index, 1);

      this._updatePropsStack();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack[index] = this._stackEntry;

      this._updatePropsStack();
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }], [{
    key: 'setHidden',
    value: function setHidden(hidden, animation) {
      animation = animation || 'none';
      StatusBar._defaultProps.hidden.value = hidden;
      if (Platform.OS === 'ios') {
        StatusBarManager.setHidden(hidden, animation);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setHidden(hidden);
      }
    }
  }, {
    key: 'setBarStyle',
    value: function setBarStyle(style, animated) {
      animated = animated || false;
      StatusBar._defaultProps.barStyle.value = style;
      if (Platform.OS === 'ios') {
        StatusBarManager.setStyle(style, animated);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setStyle(style);
      }
    }
  }, {
    key: 'setNetworkActivityIndicatorVisible',
    value: function setNetworkActivityIndicatorVisible(visible) {
      if (Platform.OS !== 'ios') {
        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
        return;
      }
      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
      StatusBarManager.setNetworkActivityIndicatorVisible(visible);
    }
  }, {
    key: 'setBackgroundColor',
    value: function setBackgroundColor(color, animated) {
      if (Platform.OS !== 'android') {
        console.warn('`setBackgroundColor` is only available on Android');
        return;
      }
      animated = animated || false;
      StatusBar._defaultProps.backgroundColor.value = color;
      StatusBarManager.setColor(processColor(color), animated);
    }
  }, {
    key: 'setTranslucent',
    value: function setTranslucent(translucent) {
      if (Platform.OS !== 'android') {
        console.warn('`setTranslucent` is only available on Android');
        return;
      }
      StatusBar._defaultProps.translucent = translucent;
      StatusBarManager.setTranslucent(translucent);
    }
  }]);

  return StatusBar;
}(React.Component), _class._propsStack = [], _class._defaultProps = createStackEntry({
  animated: false,
  showHideTransition: 'fade',
  backgroundColor: 'black',
  barStyle: 'default',
  translucent: false,
  hidden: false,
  networkActivityIndicatorVisible: false
}), _class._updateImmediate = null, _class._currentValues = null, _class.currentHeight = StatusBarManager.HEIGHT, _class.propTypes = {
  hidden: PropTypes.bool,

  animated: PropTypes.bool,

  backgroundColor: ColorPropType,

  translucent: PropTypes.bool,

  barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),

  networkActivityIndicatorVisible: PropTypes.bool,

  showHideTransition: PropTypes.oneOf(['fade', 'slide'])
}, _class.defaultProps = {
  animated: false,
  showHideTransition: 'fade'
}, _temp2));

module.exports = StatusBar;
}, 376, null, "StatusBar");
__d(/* FlatList */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Lists\\FlatList.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MetroListView = require(378            ); // 378 = MetroListView
var React = require(286    ); // 286 = React
var View = require(285   ); // 285 = View
var VirtualizedList = require(385              ); // 385 = VirtualizedList

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var defaultProps = _extends({}, VirtualizedList.defaultProps, {
  numColumns: 1
});

var FlatList = function (_React$PureComponent) {
  _inherits(FlatList, _React$PureComponent);

  function FlatList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, FlatList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call.apply(_ref, [this].concat(args))), _this), _this._hasWarnedLegacy = false, _this._captureRef = function (ref) {
      _this._listRef = ref;
    }, _this._getItem = function (data, index) {
      var numColumns = _this.props.numColumns;

      if (numColumns > 1) {
        var ret = [];
        for (var kk = 0; kk < numColumns; kk++) {
          var _item = data[index * numColumns + kk];
          _item && ret.push(_item);
        }
        return ret;
      } else {
        return data[index];
      }
    }, _this._getItemCount = function (data) {
      return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
    }, _this._keyExtractor = function (items, index) {
      var _this$props = _this.props,
          keyExtractor = _this$props.keyExtractor,
          numColumns = _this$props.numColumns;

      if (numColumns > 1) {
        invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
        return items.map(function (it, kk) {
          return keyExtractor(it, index * numColumns + kk);
        }).join(':');
      } else {
        return keyExtractor(items, index);
      }
    }, _this._onViewableItemsChanged = function (info) {
      var _this$props2 = _this.props,
          numColumns = _this$props2.numColumns,
          onViewableItemsChanged = _this$props2.onViewableItemsChanged;

      if (!onViewableItemsChanged) {
        return;
      }
      if (numColumns > 1) {
        var _changed = [];
        var _viewableItems = [];
        info.viewableItems.forEach(function (v) {
          return _this._pushMultiColumnViewable(_viewableItems, v);
        });
        info.changed.forEach(function (v) {
          return _this._pushMultiColumnViewable(_changed, v);
        });
        onViewableItemsChanged({ viewableItems: _viewableItems, changed: _changed });
      } else {
        onViewableItemsChanged(info);
      }
    }, _this._renderItem = function (info) {
      var _this$props3 = _this.props,
          renderItem = _this$props3.renderItem,
          numColumns = _this$props3.numColumns,
          columnWrapperStyle = _this$props3.columnWrapperStyle;

      if (numColumns > 1) {
        var _item2 = info.item,
            _index = info.index;

        invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
        return React.createElement(
          View,
          { style: [{ flexDirection: 'row' }, columnWrapperStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 530
            }
          },
          _item2.map(function (it, kk) {
            var element = renderItem({
              item: it,
              index: _index * numColumns + kk,
              separators: info.separators
            });
            return element && React.cloneElement(element, { key: kk });
          })
        );
      } else {
        return renderItem(info);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(FlatList, [{
    key: 'scrollToEnd',
    value: function scrollToEnd(params) {
      this._listRef.scrollToEnd(params);
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(params) {
      this._listRef.scrollToIndex(params);
    }
  }, {
    key: 'scrollToItem',
    value: function scrollToItem(params) {
      this._listRef.scrollToItem(params);
    }
  }, {
    key: 'scrollToOffset',
    value: function scrollToOffset(params) {
      this._listRef.scrollToOffset(params);
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      this._listRef.recordInteraction();
    }
  }, {
    key: 'flashScrollIndicators',
    value: function flashScrollIndicators() {
      this._listRef.flashScrollIndicators();
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._listRef) {
        return this._listRef.getScrollResponder();
      }
    }
  }, {
    key: 'getScrollableNode',
    value: function getScrollableNode() {
      if (this._listRef) {
        return this._listRef.getScrollableNode();
      }
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      if (this._listRef) {
        this._listRef.setNativeProps(props);
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._checkProps(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
      this._checkProps(nextProps);
    }
  }, {
    key: '_checkProps',
    value: function _checkProps(props) {
      var getItem = props.getItem,
          getItemCount = props.getItemCount,
          horizontal = props.horizontal,
          legacyImplementation = props.legacyImplementation,
          numColumns = props.numColumns,
          columnWrapperStyle = props.columnWrapperStyle;

      invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
      if (numColumns > 1) {
        invariant(!horizontal, 'numColumns does not support horizontal.');
      } else {
        invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
      }
      if (legacyImplementation) {
        invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

        if (!this._hasWarnedLegacy) {
          console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');
          this._hasWarnedLegacy = true;
        }
      }
    }
  }, {
    key: '_pushMultiColumnViewable',
    value: function _pushMultiColumnViewable(arr, v) {
      var _props = this.props,
          numColumns = _props.numColumns,
          keyExtractor = _props.keyExtractor;

      v.item.forEach(function (item, ii) {
        invariant(v.index != null, 'Missing index!');
        var index = v.index * numColumns + ii;
        arr.push(_extends({}, v, { item: item, key: keyExtractor(item, index), index: index }));
      });
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.legacyImplementation) {
        return React.createElement(MetroListView, _extends({}, this.props, {
          items: this.props.data,
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 549
          }
        }));
      } else {
        return React.createElement(VirtualizedList, _extends({}, this.props, {
          renderItem: this._renderItem,
          getItem: this._getItem,
          getItemCount: this._getItemCount,
          keyExtractor: this._keyExtractor,
          ref: this._captureRef,
          onViewableItemsChanged: this.props.onViewableItemsChanged && this._onViewableItemsChanged,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 557
          }
        }));
      }
    }
  }]);

  return FlatList;
}(React.PureComponent);

FlatList.defaultProps = defaultProps;


module.exports = FlatList;
}, 377, null, "FlatList");
__d(/* MetroListView */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp2,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Lists\\MetroListView.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  MetroListView: {
    displayName: 'MetroListView'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Lists/MetroListView.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ListView = require(379       ); // 379 = ListView
var React = require(286    ); // 286 = React
var RefreshControl = require(384             ); // 384 = RefreshControl
var ScrollView = require(363         ); // 363 = ScrollView

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var MetroListView = _wrapComponent('MetroListView')((_temp2 = _class = function (_React$Component) {
  _inherits(MetroListView, _React$Component);

  function MetroListView() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    _classCallCheck(this, MetroListView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
      ds: new ListView.DataSource({
        rowHasChanged: function rowHasChanged(itemA, itemB) {
          return true;
        },
        sectionHeaderHasChanged: function sectionHeaderHasChanged() {
          return true;
        },
        getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
          return _this.state.sectionHeaderData[sectionID];
        }
      }),
      sectionHeaderData: {}
    }), _this._captureRef = function (ref) {
      _this._listRef = ref;
    }, _this._renderFooter = function () {
      return React.createElement(_this2.props.FooterComponent, { key: '$footer', __source: {
          fileName: _jsxFileName,
          lineNumber: 174
        }
      });
    }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
      return _this.props.renderItem({ item: item, index: rowID });
    }, _this._renderSectionHeader = function (section, sectionID) {
      var renderSectionHeader = _this.props.renderSectionHeader;

      invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
      return renderSectionHeader({ section: section });
    }, _this._renderSeparator = function (sID, rID) {
      return React.createElement(_this2.props.SeparatorComponent, { key: sID + rID, __source: {
          fileName: _jsxFileName,
          lineNumber: 187
        }
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(MetroListView, [{
    key: 'scrollToEnd',
    value: function scrollToEnd(params) {
      throw new Error('scrollToEnd not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(params) {
      throw new Error('scrollToIndex not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToItem',
    value: function scrollToItem(params) {
      throw new Error('scrollToItem not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToLocation',
    value: function scrollToLocation(params) {
      throw new Error('scrollToLocation not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToOffset',
    value: function scrollToOffset(params) {
      var animated = params.animated,
          offset = params.offset;

      this._listRef.scrollTo(this.props.horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'getListRef',
    value: function getListRef() {
      return this._listRef;
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      if (this._listRef) {
        this._listRef.setNativeProps(props);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var _this3 = this;

      this.setState(function (state) {
        return _this3._computeState(newProps, state);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(ListView, _extends({}, this.props, {
        dataSource: this.state.ds,
        ref: this._captureRef,
        renderRow: this._renderRow,
        renderFooter: this.props.FooterComponent && this._renderFooter,
        renderSectionHeader: this.props.sections && this._renderSectionHeader,
        renderSeparator: this.props.SeparatorComponent && this._renderSeparator,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 137
        }
      }));
    }
  }, {
    key: '_computeState',
    value: function _computeState(props, state) {
      var sectionHeaderData = {};
      if (props.sections) {
        invariant(!props.items, 'Cannot have both sections and items props.');
        var _sections = {};
        props.sections.forEach(function (sectionIn, ii) {
          var sectionID = 's' + ii;
          _sections[sectionID] = sectionIn.data;
          sectionHeaderData[sectionID] = sectionIn;
        });
        return {
          ds: state.ds.cloneWithRowsAndSections(_sections),
          sectionHeaderData: sectionHeaderData
        };
      } else {
        invariant(!props.sections, 'Cannot have both sections and items props.');
        return {
          ds: state.ds.cloneWithRows(props.items),
          sectionHeaderData: sectionHeaderData
        };
      }
    }
  }]);

  return MetroListView;
}(React.Component), _class.defaultProps = {
  keyExtractor: function keyExtractor(item, index) {
    return item.key || String(index);
  },
  renderScrollComponent: function renderScrollComponent(props) {
    if (props.onRefresh) {
      return React.createElement(ScrollView, _extends({}, props, {
        refreshControl: React.createElement(RefreshControl, {
          refreshing: props.refreshing,
          onRefresh: props.onRefresh,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 111
          }
        }),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 108
        }
      }));
    } else {
      return React.createElement(ScrollView, _extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119
        }
      }));
    }
  }
}, _temp2));

module.exports = MetroListView;
}, 378, null, "MetroListView");
__d(/* ListView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Lists\\ListView\\ListView.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var ListViewDataSource = require(380                 ); // 380 = ListViewDataSource
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(211          ); // 211 = ReactNative
var RCTScrollViewManager = require(184            ).ScrollViewManager; // 184 = NativeModules
var ScrollView = require(363         ); // 363 = ScrollView
var ScrollResponder = require(365              ); // 365 = ScrollResponder
var StaticRenderer = require(382             ); // 382 = StaticRenderer
var TimerMixin = require(347                ); // 347 = react-timer-mixin
var View = require(285   ); // 285 = View

var cloneReferencedElement = require(383                             ); // 383 = react-clone-referenced-element
var createReactClass = require(311                 ); // 311 = create-react-class
var isEmpty = require(381      ); // 381 = isEmpty
var merge = require(305    ); // 305 = merge

var DEFAULT_PAGE_SIZE = 1;
var DEFAULT_INITIAL_ROWS = 10;
var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
var DEFAULT_END_REACHED_THRESHOLD = 1000;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;

var ListView = createReactClass({
  displayName: 'ListView',
  _childFrames: [],
  _sentEndForContentLength: null,
  _scrollComponent: null,
  _prevRenderedRowsCount: 0,
  _visibleRows: {},
  scrollProperties: {},

  mixins: [ScrollResponder.Mixin, TimerMixin],

  statics: {
    DataSource: ListViewDataSource
  },

  propTypes: _extends({}, ScrollView.propTypes, {
    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,

    renderSeparator: PropTypes.func,

    renderRow: PropTypes.func.isRequired,

    initialListSize: PropTypes.number.isRequired,

    onEndReached: PropTypes.func,

    onEndReachedThreshold: PropTypes.number.isRequired,

    pageSize: PropTypes.number.isRequired,

    renderFooter: PropTypes.func,
    renderHeader: PropTypes.func,

    renderSectionHeader: PropTypes.func,

    renderScrollComponent: PropTypes.func.isRequired,

    scrollRenderAheadDistance: PropTypes.number.isRequired,

    onChangeVisibleRows: PropTypes.func,

    removeClippedSubviews: PropTypes.bool,

    stickySectionHeadersEnabled: PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,

    enableEmptySections: PropTypes.bool
  }),

  getMetrics: function getMetrics() {
    return {
      contentLength: this.scrollProperties.contentLength,
      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
      renderedRows: this.state.curRenderedRowsCount,
      visibleRows: Object.keys(this._visibleRows).length
    };
  },

  getScrollResponder: function getScrollResponder() {
    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
      return this._scrollComponent.getScrollResponder();
    }
  },

  getScrollableNode: function getScrollableNode() {
    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
      return this._scrollComponent.getScrollableNode();
    } else {
      return ReactNative.findNodeHandle(this._scrollComponent);
    }
  },

  scrollTo: function scrollTo() {
    if (this._scrollComponent && this._scrollComponent.scrollTo) {
      var _scrollComponent;

      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
    }
  },

  scrollToEnd: function scrollToEnd(options) {
    if (this._scrollComponent) {
      if (this._scrollComponent.scrollToEnd) {
        this._scrollComponent.scrollToEnd(options);
      } else {
        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
      }
    }
  },

  flashScrollIndicators: function flashScrollIndicators() {
    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
      this._scrollComponent.flashScrollIndicators();
    }
  },

  setNativeProps: function setNativeProps(props) {
    if (this._scrollComponent) {
      this._scrollComponent.setNativeProps(props);
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialListSize: DEFAULT_INITIAL_ROWS,
      pageSize: DEFAULT_PAGE_SIZE,
      renderScrollComponent: function renderScrollComponent(props) {
        return React.createElement(ScrollView, _extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 332
          }
        }));
      },
      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
      stickySectionHeadersEnabled: Platform.OS === 'ios',
      stickyHeaderIndices: []
    };
  },

  getInitialState: function getInitialState() {
    return {
      curRenderedRowsCount: this.props.initialListSize,
      highlightedRow: {}
    };
  },

  getInnerViewNode: function getInnerViewNode() {
    return this._scrollComponent.getInnerViewNode();
  },

  componentWillMount: function componentWillMount() {
    this.scrollProperties = {
      visibleLength: null,
      contentLength: null,
      offset: 0
    };
    this._childFrames = [];
    this._visibleRows = {};
    this._prevRenderedRowsCount = 0;
    this._sentEndForContentLength = null;
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this.requestAnimationFrame(function () {
      _this._measureAndUpdateScrollProps();
    });
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
      this.setState(function (state, props) {
        _this2._prevRenderedRowsCount = 0;
        return {
          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
        };
      }, function () {
        return _this2._renderMoreRowsIfNeeded();
      });
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var _this3 = this;

    this.requestAnimationFrame(function () {
      _this3._measureAndUpdateScrollProps();
    });
  },

  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
    this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
  },

  render: function render() {
    var bodyComponents = [];

    var dataSource = this.props.dataSource;
    var allRowIDs = dataSource.rowIdentities;
    var rowCount = 0;
    var stickySectionHeaderIndices = [];

    var renderSectionHeader = this.props.renderSectionHeader;


    var header = this.props.renderHeader && this.props.renderHeader();
    var footer = this.props.renderFooter && this.props.renderFooter();
    var totalIndex = header ? 1 : 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        if (this.props.enableEmptySections === undefined) {
          var warning = require(199               ); // 199 = fbjs/lib/warning
          warning(false, 'In next release empty section headers will be rendered.' + " In this release you can use 'enableEmptySections' flag to render empty section headers.");
          continue;
        } else {
          var invariant = require(182                 ); // 182 = fbjs/lib/invariant
          invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered." + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + " In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
        }
      }

      if (renderSectionHeader) {
        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);
        if (element) {
          bodyComponents.push(React.cloneElement(element, { key: 's_' + sectionID }));
          if (this.props.stickySectionHeadersEnabled) {
            stickySectionHeaderIndices.push(totalIndex);
          }
          totalIndex++;
        }
      }

      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var comboID = sectionID + '_' + rowID;
        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
        var row = React.createElement(StaticRenderer, {
          key: 'r_' + comboID,
          shouldUpdate: !!shouldUpdateRow,
          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 464
          }
        });
        bodyComponents.push(row);
        totalIndex++;

        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);
          if (separator) {
            bodyComponents.push(React.createElement(
              View,
              { key: 's_' + comboID, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 494
                }
              },
              separator
            ));
            totalIndex++;
          }
        }
        if (++rowCount === this.state.curRenderedRowsCount) {
          break;
        }
      }
      if (rowCount >= this.state.curRenderedRowsCount) {
        break;
      }
    }

    var _props = this.props,
        renderScrollComponent = _props.renderScrollComponent,
        props = _objectWithoutProperties(_props, ['renderScrollComponent']);

    if (!props.scrollEventThrottle) {
      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
    }
    if (props.removeClippedSubviews === undefined) {
      props.removeClippedSubviews = true;
    }
    _extends(props, {
      onScroll: this._onScroll,
      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),

      onKeyboardWillShow: undefined,
      onKeyboardWillHide: undefined,
      onKeyboardDidShow: undefined,
      onKeyboardDidHide: undefined
    });

    return cloneReferencedElement(renderScrollComponent(props), {
      ref: this._setScrollComponentRef,
      onContentSizeChange: this._onContentSizeChange,
      onLayout: this._onLayout,
      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
    }, header, bodyComponents, footer);
  },

  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
    var scrollComponent = this.getScrollResponder();
    if (!scrollComponent || !scrollComponent.getInnerViewNode) {
      return;
    }

    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
  },

  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
    this._scrollComponent = scrollComponent;
  },

  _onContentSizeChange: function _onContentSizeChange(width, height) {
    var contentLength = !this.props.horizontal ? height : width;
    if (contentLength !== this.scrollProperties.contentLength) {
      this.scrollProperties.contentLength = contentLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _onLayout: function _onLayout(event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
        width = _event$nativeEvent$la.width,
        height = _event$nativeEvent$la.height;

    var visibleLength = !this.props.horizontal ? height : width;
    if (visibleLength !== this.scrollProperties.visibleLength) {
      this.scrollProperties.visibleLength = visibleLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onLayout && this.props.onLayout(event);
  },

  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._sentEndForContentLength = this.scrollProperties.contentLength;
      this.props.onEndReached(event);
      return true;
    }
    return false;
  },

  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._maybeCallOnEndReached();
      return;
    }

    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);
    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
      this._pageInNewRows();
    }
  },

  _pageInNewRows: function _pageInNewRows() {
    var _this4 = this;

    this.setState(function (state, props) {
      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
      return {
        curRenderedRowsCount: rowsToRender
      };
    }, function () {
      _this4._measureAndUpdateScrollProps();
      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
    });
  },

  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
  },

  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
    var _this5 = this;

    if (!this.props.onChangeVisibleRows) {
      return;
    }
    if (updatedFrames) {
      updatedFrames.forEach(function (newFrame) {
        _this5._childFrames[newFrame.index] = merge(newFrame);
      });
    }
    var isVertical = !this.props.horizontal;
    var dataSource = this.props.dataSource;
    var visibleMin = this.scrollProperties.offset;
    var visibleMax = visibleMin + this.scrollProperties.visibleLength;
    var allRowIDs = dataSource.rowIdentities;

    var header = this.props.renderHeader && this.props.renderHeader();
    var totalIndex = header ? 1 : 0;
    var visibilityChanged = false;
    var changedRows = {};
    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        continue;
      }
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      if (this.props.renderSectionHeader) {
        totalIndex++;
      }
      var visibleSection = this._visibleRows[sectionID];
      if (!visibleSection) {
        visibleSection = {};
      }
      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var frame = this._childFrames[totalIndex];
        totalIndex++;
        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          totalIndex++;
        }
        if (!frame) {
          break;
        }
        var rowVisible = visibleSection[rowID];
        var min = isVertical ? frame.y : frame.x;
        var max = min + (isVertical ? frame.height : frame.width);
        if (!min && !max || min === max) {
          break;
        }
        if (min > visibleMax || max < visibleMin) {
          if (rowVisible) {
            visibilityChanged = true;
            delete visibleSection[rowID];
            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }
            changedRows[sectionID][rowID] = false;
          }
        } else if (!rowVisible) {
          visibilityChanged = true;
          visibleSection[rowID] = true;
          if (!changedRows[sectionID]) {
            changedRows[sectionID] = {};
          }
          changedRows[sectionID][rowID] = true;
        }
      }
      if (!isEmpty(visibleSection)) {
        this._visibleRows[sectionID] = visibleSection;
      } else if (this._visibleRows[sectionID]) {
        delete this._visibleRows[sectionID];
      }
    }
    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
  },

  _onScroll: function _onScroll(e) {
    var isVertical = !this.props.horizontal;
    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];
    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);
    if (!this._maybeCallOnEndReached(e)) {
      this._renderMoreRowsIfNeeded();
    }

    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
      this._sentEndForContentLength = null;
    }

    this.props.onScroll && this.props.onScroll(e);
  }
});

module.exports = ListView;
}, 379, null, "ListView");
__d(/* ListViewDataSource */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var isEmpty = require(381      ); // 381 = isEmpty
var warning = require(199               ); // 199 = fbjs/lib/warning

function defaultGetRowData(dataBlob, sectionID, rowID) {
  return dataBlob[sectionID][rowID];
}

function defaultGetSectionHeaderData(dataBlob, sectionID) {
  return dataBlob[sectionID];
}

var ListViewDataSource = function () {
  function ListViewDataSource(params) {
    _classCallCheck(this, ListViewDataSource);

    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
    this._rowHasChanged = params.rowHasChanged;
    this._getRowData = params.getRowData || defaultGetRowData;
    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;

    this._dataBlob = null;
    this._dirtyRows = [];
    this._dirtySections = [];
    this._cachedRowCount = 0;

    this.rowIdentities = [];
    this.sectionIdentities = [];
  }

  _createClass(ListViewDataSource, [{
    key: 'cloneWithRows',
    value: function cloneWithRows(dataBlob, rowIdentities) {
      var rowIds = rowIdentities ? [[].concat(_toConsumableArray(rowIdentities))] : null;
      if (!this._sectionHeaderHasChanged) {
        this._sectionHeaderHasChanged = function () {
          return false;
        };
      }
      return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);
    }
  }, {
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');

      var newSource = new ListViewDataSource({
        getRowData: this._getRowData,
        getSectionHeaderData: this._getSectionHeaderData,
        rowHasChanged: this._rowHasChanged,
        sectionHeaderHasChanged: this._sectionHeaderHasChanged
      });
      newSource._dataBlob = dataBlob;
      if (sectionIdentities) {
        newSource.sectionIdentities = sectionIdentities;
      } else {
        newSource.sectionIdentities = Object.keys(dataBlob);
      }
      if (rowIdentities) {
        newSource.rowIdentities = rowIdentities;
      } else {
        newSource.rowIdentities = [];
        newSource.sectionIdentities.forEach(function (sectionID) {
          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
        });
      }
      newSource._cachedRowCount = countRows(newSource.rowIdentities);

      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return newSource;
    }
  }, {
    key: 'getRowCount',
    value: function getRowCount() {
      return this._cachedRowCount;
    }
  }, {
    key: 'getRowAndSectionCount',
    value: function getRowAndSectionCount() {
      return this._cachedRowCount + this.sectionIdentities.length;
    }
  }, {
    key: 'rowShouldUpdate',
    value: function rowShouldUpdate(sectionIndex, rowIndex) {
      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
      return needsUpdate;
    }
  }, {
    key: 'getRowData',
    value: function getRowData(sectionIndex, rowIndex) {
      var sectionID = this.sectionIdentities[sectionIndex];
      var rowID = this.rowIdentities[sectionIndex][rowIndex];
      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
      return this._getRowData(this._dataBlob, sectionID, rowID);
    }
  }, {
    key: 'getRowIDForFlatIndex',
    value: function getRowIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.rowIdentities[ii][accessIndex];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionIDForFlatIndex',
    value: function getSectionIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.sectionIdentities[ii];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionLengths',
    value: function getSectionLengths() {
      var results = [];
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        results.push(this.rowIdentities[ii].length);
      }
      return results;
    }
  }, {
    key: 'sectionHeaderShouldUpdate',
    value: function sectionHeaderShouldUpdate(sectionIndex) {
      var needsUpdate = this._dirtySections[sectionIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
      return needsUpdate;
    }
  }, {
    key: 'getSectionHeaderData',
    value: function getSectionHeaderData(sectionIndex) {
      if (!this._getSectionHeaderData) {
        return null;
      }
      var sectionID = this.sectionIdentities[sectionIndex];
      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
      return this._getSectionHeaderData(this._dataBlob, sectionID);
    }
  }, {
    key: '_calculateDirtyArrays',
    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
      var prevRowsHash = {};
      for (var ii = 0; ii < prevRowIDs.length; ii++) {
        var sectionID = prevSectionIDs[ii];
        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
      }

      this._dirtySections = [];
      this._dirtyRows = [];

      var dirty;
      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
        var sectionID = this.sectionIdentities[sIndex];

        dirty = !prevSectionsHash[sectionID];
        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;
        if (!dirty && sectionHeaderHasChanged) {
          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
        }
        this._dirtySections.push(!!dirty);

        this._dirtyRows[sIndex] = [];
        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
          var rowID = this.rowIdentities[sIndex][rIndex];

          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));
          this._dirtyRows[sIndex].push(!!dirty);
        }
      }
    }
  }]);

  return ListViewDataSource;
}();

function countRows(allRowIDs) {
  var totalRows = 0;
  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
    var rowIDs = allRowIDs[sectionIdx];
    totalRows += rowIDs.length;
  }
  return totalRows;
}

function keyedDictionaryFromArray(arr) {
  if (isEmpty(arr)) {
    return {};
  }
  var result = {};
  for (var ii = 0; ii < arr.length; ii++) {
    var key = arr[ii];
    warning(!result[key], 'Value appears more than once in array: ' + key);
    result[key] = true;
  }
  return result;
}

module.exports = ListViewDataSource;
}, 380, null, "ListViewDataSource");
__d(/* isEmpty */function(global, require, module, exports) {
'use strict';

function isEmpty(obj) {
  if (Array.isArray(obj)) {
    return obj.length === 0;
  } else if (typeof obj === 'object') {
    for (var i in obj) {
      return false;
    }
    return true;
  } else {
    return !obj;
  }
}

module.exports = isEmpty;
}, 381, null, "isEmpty");
__d(/* StaticRenderer */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  StaticRenderer: {
    displayName: 'StaticRenderer'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/StaticRenderer.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React

var PropTypes = require(20          ); // 20 = prop-types

var StaticRenderer = _wrapComponent('StaticRenderer')((_temp = _class = function (_React$Component) {
  _inherits(StaticRenderer, _React$Component);

  function StaticRenderer() {
    _classCallCheck(this, StaticRenderer);

    return _possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
  }

  _createClass(StaticRenderer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render();
    }
  }]);

  return StaticRenderer;
}(React.Component), _class.propTypes = {
  shouldUpdate: PropTypes.bool.isRequired,
  render: PropTypes.func.isRequired
}, _temp));

module.exports = StaticRenderer;
}, 382, null, "StaticRenderer");
__d(/* react-clone-referenced-element/cloneReferencedElement.js */function(global, require, module, exports) {'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require(13     ); // 13 = react

function cloneReferencedElement(element, config) {
  var cloneRef = config.ref;
  var originalRef = element.ref;

  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  if (originalRef == null || cloneRef == null) {
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  if (typeof originalRef !== 'function') {
    if (__DEV__) {
      console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
    }
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  return React.cloneElement.apply(React, [element, _extends({}, config, {
    ref: function ref(component) {
      cloneRef(component);
      originalRef(component);
    }
  })].concat(children));
}

module.exports = cloneReferencedElement;
}, 383, null, "react-clone-referenced-element/cloneReferencedElement.js");
__d(/* RefreshControl */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\RefreshControl\\RefreshControl.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

if (Platform.OS === 'android') {
  var RefreshLayoutConsts = require(279        ).AndroidSwipeRefreshLayout.Constants; // 279 = UIManager
} else {
  var RefreshLayoutConsts = { SIZE: {} };
}

var RefreshControl = createReactClass({
  displayName: 'RefreshControl',
  statics: {
    SIZE: RefreshLayoutConsts.SIZE
  },

  mixins: [NativeMethodsMixin],

  propTypes: _extends({}, ViewPropTypes, {
    onRefresh: PropTypes.func,

    refreshing: PropTypes.bool.isRequired,

    tintColor: ColorPropType,

    titleColor: ColorPropType,

    title: PropTypes.string,

    enabled: PropTypes.bool,

    colors: PropTypes.arrayOf(ColorPropType),

    progressBackgroundColor: ColorPropType,

    size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),

    progressViewOffset: PropTypes.number
  }),

  _nativeRef: null,
  _lastNativeRefreshing: false,

  componentDidMount: function componentDidMount() {
    this._lastNativeRefreshing = this.props.refreshing;
  },
  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.refreshing !== prevProps.refreshing) {
      this._lastNativeRefreshing = this.props.refreshing;
    } else if (this.props.refreshing !== this._lastNativeRefreshing) {
      this._nativeRef.setNativeProps({ refreshing: this.props.refreshing });
      this._lastNativeRefreshing = this.props.refreshing;
    }
  },
  render: function render() {
    var _this = this;

    return React.createElement(NativeRefreshControl, _extends({}, this.props, {
      ref: function ref(_ref) {
        _this._nativeRef = _ref;
      },
      onRefresh: this._onRefresh,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 157
      }
    }));
  },
  _onRefresh: function _onRefresh() {
    this._lastNativeRefreshing = true;

    this.props.onRefresh && this.props.onRefresh();

    this.forceUpdate();
  }
});

if (Platform.OS === 'ios') {
  var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
} else if (Platform.OS === 'android') {
  var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
}

module.exports = RefreshControl;
}, 384, null, "RefreshControl");
__d(/* VirtualizedList */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index2 = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index3 = _interopRequireDefault(_index2);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Lists\\VirtualizedList.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  CellRenderer: {
    displayName: 'CellRenderer'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index3.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Lists/VirtualizedList.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var Batchinator = require(386          ); // 386 = Batchinator
var FillRateHelper = require(387             ); // 387 = FillRateHelper
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var ReactNative = require(211          ); // 211 = ReactNative
var RefreshControl = require(384             ); // 384 = RefreshControl
var ScrollView = require(363         ); // 363 = ScrollView
var StyleSheet = require(314         ); // 314 = StyleSheet
var View = require(285   ); // 285 = View
var ViewabilityHelper = require(388                ); // 388 = ViewabilityHelper

var flattenStyle = require(273           ); // 273 = flattenStyle
var infoLog = require(266      ); // 266 = infoLog
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var warning = require(199               ); // 199 = fbjs/lib/warning

var _require = require(389              ), // 389 = VirtualizeUtils
    computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

var _usedIndexForKey = false;

var VirtualizedList = function (_React$PureComponent) {
  _inherits(VirtualizedList, _React$PureComponent);

  _createClass(VirtualizedList, [{
    key: 'scrollToEnd',
    value: function scrollToEnd(params) {
      var animated = params ? params.animated : true;
      var veryLast = this.props.getItemCount(this.props.data) - 1;
      var frame = this._getFrameMetricsApprox(veryLast);
      var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
      this._scrollRef.scrollTo(this.props.horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(params) {
      var _props = this.props,
          data = _props.data,
          horizontal = _props.horizontal,
          getItemCount = _props.getItemCount,
          getItemLayout = _props.getItemLayout;
      var animated = params.animated,
          index = params.index,
          viewOffset = params.viewOffset,
          viewPosition = params.viewPosition;

      invariant(index >= 0 && index < getItemCount(data), 'scrollToIndex out of range: ' + index + ' vs ' + (getItemCount(data) - 1));
      invariant(getItemLayout || index <= this._highestMeasuredFrameIndex, 'scrollToIndex should be used in conjunction with getItemLayout, ' + 'otherwise there is no way to know the location of an arbitrary index.');
      var frame = this._getFrameMetricsApprox(index);
      var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
      this._scrollRef.scrollTo(horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'scrollToItem',
    value: function scrollToItem(params) {
      var item = params.item;
      var _props2 = this.props,
          data = _props2.data,
          getItem = _props2.getItem,
          getItemCount = _props2.getItemCount;

      var itemCount = getItemCount(data);
      for (var _index = 0; _index < itemCount; _index++) {
        if (getItem(data, _index) === item) {
          this.scrollToIndex(_extends({}, params, { index: _index }));
          break;
        }
      }
    }
  }, {
    key: 'scrollToOffset',
    value: function scrollToOffset(params) {
      var animated = params.animated,
          offset = params.offset;

      this._scrollRef.scrollTo(this.props.horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      this._viewabilityHelper.recordInteraction();
      this._updateViewableItems(this.props.data);
    }
  }, {
    key: 'flashScrollIndicators',
    value: function flashScrollIndicators() {
      this._scrollRef.flashScrollIndicators();
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._scrollRef && this._scrollRef.getScrollResponder) {
        return this._scrollRef.getScrollResponder();
      }
    }
  }, {
    key: 'getScrollableNode',
    value: function getScrollableNode() {
      if (this._scrollRef && this._scrollRef.getScrollableNode) {
        return this._scrollRef.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollRef);
      }
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      if (this._scrollRef) {
        this._scrollRef.setNativeProps(props);
      }
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        virtualizedList: {
          horizontal: this.props.horizontal
        }
      };
    }
  }]);

  function VirtualizedList(props, context) {
    _classCallCheck(this, VirtualizedList);

    var _this = _possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

    _initialiseProps.call(_this);

    invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
    invariant(!(_this._isNestedWithSameOrientation() && props.onViewableItemsChanged), 'Nesting lists that scroll in the same direction does not support onViewableItemsChanged' + 'on the inner list.');

    _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
    _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);
    _this._viewabilityHelper = new ViewabilityHelper(_this.props.viewabilityConfig);
    _this.state = {
      first: _this.props.initialScrollIndex || 0,
      last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
    };
    return _this;
  }

  _createClass(VirtualizedList, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.initialScrollIndex) {
        this._initialScrollIndexTimeout = setTimeout(function () {
          return _this2.scrollToIndex({
            animated: false,
            index: _this2.props.initialScrollIndex
          });
        }, 0);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._updateViewableItems(null);
      this._updateCellsToRenderBatcher.dispose();
      this._viewabilityHelper.dispose();
      this._fillRateHelper.deactivateAndFlush();
      clearTimeout(this._initialScrollIndexTimeout);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var data = newProps.data,
          extraData = newProps.extraData,
          getItemCount = newProps.getItemCount,
          maxToRenderPerBatch = newProps.maxToRenderPerBatch;

      this.setState({
        first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
        last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1))
      });
      if (data !== this.props.data || extraData !== this.props.extraData) {
        this._hasDataChangedSinceEndReached = true;
      }
    }
  }, {
    key: '_pushCells',
    value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
      var _this3 = this;

      var _props3 = this.props,
          ItemSeparatorComponent = _props3.ItemSeparatorComponent,
          data = _props3.data,
          getItem = _props3.getItem,
          getItemCount = _props3.getItemCount,
          keyExtractor = _props3.keyExtractor;

      var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
      var end = getItemCount(data) - 1;
      var prevCellKey = void 0;
      last = Math.min(end, last);

      var _loop = function _loop(ii) {
        var item = getItem(data, ii);
        invariant(item, 'No item for index ' + ii);
        var key = keyExtractor(item, ii);
        if (stickyIndicesFromProps.has(ii + stickyOffset)) {
          stickyHeaderIndices.push(cells.length);
        }
        cells.push(React.createElement(CellRenderer, {
          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
          cellKey: key,
          fillRateHelper: _this3._fillRateHelper,
          index: ii,
          inversionStyle: inversionStyle,
          item: item,
          key: key,
          prevCellKey: prevCellKey,
          onUpdateSeparators: _this3._onUpdateSeparators,
          onLayout: function onLayout(e) {
            return _this3._onCellLayout(e, key, ii);
          },
          onUnmount: _this3._onCellUnmount,
          parentProps: _this3.props,
          ref: function ref(_ref) {
            _this3._cellRefs[key] = _ref;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 463
          }
        }));
        prevCellKey = key;
      };

      for (var ii = first; ii <= last; ii++) {
        _loop(ii);
      }
    }
  }, {
    key: '_isVirtualizationDisabled',
    value: function _isVirtualizationDisabled() {
      return this.props.disableVirtualization || this._isNestedWithSameOrientation();
    }
  }, {
    key: '_isNestedWithSameOrientation',
    value: function _isNestedWithSameOrientation() {
      var nestedContext = this.context.virtualizedList;
      return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
    }
  }, {
    key: 'render',
    value: function render() {
      if (__DEV__) {
        var flatStyles = flattenStyle(this.props.contentContainerStyle);
        warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
      }

      var _props4 = this.props,
          ListEmptyComponent = _props4.ListEmptyComponent,
          ListFooterComponent = _props4.ListFooterComponent,
          ListHeaderComponent = _props4.ListHeaderComponent;
      var _props5 = this.props,
          data = _props5.data,
          horizontal = _props5.horizontal;

      var isVirtualizationDisabled = this._isVirtualizationDisabled();
      var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
      var cells = [];
      var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
      var stickyHeaderIndices = [];
      if (ListHeaderComponent) {
        var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 533
          }
        });
        cells.push(React.createElement(
          View,
          {
            key: '$header',
            onLayout: this._onLayoutHeader,
            style: inversionStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 535
            }
          },
          element
        ));
      }
      var itemCount = this.props.getItemCount(data);
      if (itemCount > 0) {
        _usedIndexForKey = false;
        var spacerKey = !horizontal ? 'height' : 'width';
        var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
        var _state = this.state,
            _first = _state.first,
            _last = _state.last;

        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);
        var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);
        if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
          var insertedStickySpacer = false;
          if (stickyIndicesFromProps.size > 0) {
            var stickyOffset = ListHeaderComponent ? 1 : 0;

            for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
              if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                var initBlock = this._getFrameMetricsApprox(lastInitialIndex);
                var stickyBlock = this._getFrameMetricsApprox(ii);
                var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                cells.push(React.createElement(View, { key: '$sticky_lead', style: _defineProperty({}, spacerKey, leadSpace), __source: {
                    fileName: _jsxFileName,
                    lineNumber: 572
                  }
                }));
                this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);
                var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                cells.push(React.createElement(View, { key: '$sticky_trail', style: _defineProperty({}, spacerKey, trailSpace), __source: {
                    fileName: _jsxFileName,
                    lineNumber: 586
                  }
                }));
                insertedStickySpacer = true;
                break;
              }
            }
          }
          if (!insertedStickySpacer) {
            var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);
            var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);
            cells.push(React.createElement(View, { key: '$lead_spacer', style: _defineProperty({}, spacerKey, firstSpace), __source: {
                fileName: _jsxFileName,
                lineNumber: 599
              }
            }));
          }
        }
        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);
        if (!this._hasWarned.keys && _usedIndexForKey) {
          console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');
          this._hasWarned.keys = true;
        }
        if (!isVirtualizationDisabled && _last < itemCount - 1) {
          var lastFrame = this._getFrameMetricsApprox(_last);

          var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
          var endFrame = this._getFrameMetricsApprox(end);
          var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
          cells.push(React.createElement(View, { key: '$tail_spacer', style: _defineProperty({}, spacerKey, tailSpacerLength), __source: {
              fileName: _jsxFileName,
              lineNumber: 632
            }
          }));
        }
      } else if (ListEmptyComponent) {
        var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 638
          }
        });
        cells.push(React.createElement(
          View,
          {
            key: '$empty',
            onLayout: this._onLayoutEmpty,
            style: inversionStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 640
            }
          },
          _element
        ));
      }
      if (ListFooterComponent) {
        var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 651
          }
        });
        cells.push(React.createElement(
          View,
          {
            key: '$footer',
            onLayout: this._onLayoutFooter,
            style: inversionStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 653
            }
          },
          _element2
        ));
      }
      var scrollProps = _extends({}, this.props, {
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        onScroll: this._onScroll,
        onScrollBeginDrag: this._onScrollBeginDrag,
        onScrollEndDrag: this._onScrollEndDrag,
        onMomentumScrollEnd: this._onMomentumScrollEnd,
        scrollEventThrottle: this.props.scrollEventThrottle,
        stickyHeaderIndices: stickyHeaderIndices
      });
      if (inversionStyle) {
        scrollProps.style = [inversionStyle, this.props.style];
      }
      var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
        ref: this._captureScrollRef
      }, cells);
      if (this.props.debug) {
        return React.createElement(
          View,
          { style: { flex: 1 }, __source: {
              fileName: _jsxFileName,
              lineNumber: 686
            }
          },
          ret,
          this._renderDebugOverlay()
        );
      } else {
        return ret;
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._scheduleCellsToRenderUpdate();
    }
  }, {
    key: '_computeBlankness',
    value: function _computeBlankness() {
      this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
    }
  }, {
    key: '_onCellLayout',
    value: function _onCellLayout(e, cellKey, index) {
      var layout = e.nativeEvent.layout;
      var next = {
        offset: this._selectOffset(layout),
        length: this._selectLength(layout),
        index: index,
        inLayout: true
      };
      var curr = this._frames[cellKey];
      if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
        this._totalCellLength += next.length - (curr ? curr.length : 0);
        this._totalCellsMeasured += curr ? 0 : 1;
        this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
        this._frames[cellKey] = next;
        this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);
        this._scheduleCellsToRenderUpdate();
      } else {
        this._frames[cellKey].inLayout = true;
      }
      this._computeBlankness();
    }
  }, {
    key: '_renderDebugOverlay',
    value: function _renderDebugOverlay() {
      var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
      var framesInLayout = [];
      var itemCount = this.props.getItemCount(this.props.data);
      for (var ii = 0; ii < itemCount; ii++) {
        var frame = this._getFrameMetricsApprox(ii);
        if (frame.inLayout) {
          framesInLayout.push(frame);
        }
      }
      var windowTop = this._getFrameMetricsApprox(this.state.first).offset;
      var frameLast = this._getFrameMetricsApprox(this.state.last);
      var windowLen = frameLast.offset + frameLast.length - windowTop;
      var visTop = this._scrollMetrics.offset;
      var visLen = this._scrollMetrics.visibleLength;
      var baseStyle = { position: 'absolute', top: 0, right: 0 };
      return React.createElement(
        View,
        {
          style: _extends({}, baseStyle, {
            bottom: 0,
            width: 20,
            borderColor: 'blue',
            borderWidth: 1
          }), __source: {
            fileName: _jsxFileName,
            lineNumber: 842
          }
        },
        framesInLayout.map(function (f, ii) {
          return React.createElement(View, {
            key: 'f' + ii,
            style: _extends({}, baseStyle, {
              left: 0,
              top: f.offset * normalize,
              height: f.length * normalize,
              backgroundColor: 'orange'
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 851
            }
          });
        }),
        React.createElement(View, {
          style: _extends({}, baseStyle, {
            left: 0,
            top: windowTop * normalize,
            height: windowLen * normalize,
            borderColor: 'green',
            borderWidth: 2
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 862
          }
        }),
        React.createElement(View, {
          style: _extends({}, baseStyle, {
            left: 0,
            top: visTop * normalize,
            height: visLen * normalize,
            borderColor: 'red',
            borderWidth: 2
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 872
          }
        })
      );
    }
  }, {
    key: '_selectLength',
    value: function _selectLength(metrics) {
      return !this.props.horizontal ? metrics.height : metrics.width;
    }
  }, {
    key: '_selectOffset',
    value: function _selectOffset(metrics) {
      return !this.props.horizontal ? metrics.y : metrics.x;
    }
  }, {
    key: '_maybeCallOnEndReached',
    value: function _maybeCallOnEndReached() {
      var _props6 = this.props,
          data = _props6.data,
          getItemCount = _props6.getItemCount,
          onEndReached = _props6.onEndReached,
          onEndReachedThreshold = _props6.onEndReachedThreshold;
      var _scrollMetrics = this._scrollMetrics,
          contentLength = _scrollMetrics.contentLength,
          visibleLength = _scrollMetrics.visibleLength,
          offset = _scrollMetrics.offset;

      var distanceFromEnd = contentLength - visibleLength - offset;
      if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
        this._hasDataChangedSinceEndReached = false;
        this._sentEndForContentLength = this._scrollMetrics.contentLength;
        onEndReached({ distanceFromEnd: distanceFromEnd });
      }
    }
  }, {
    key: '_scheduleCellsToRenderUpdate',
    value: function _scheduleCellsToRenderUpdate() {
      var _state2 = this.state,
          first = _state2.first,
          last = _state2.last;
      var _scrollMetrics2 = this._scrollMetrics,
          offset = _scrollMetrics2.offset,
          visibleLength = _scrollMetrics2.visibleLength,
          velocity = _scrollMetrics2.velocity;

      var itemCount = this.props.getItemCount(this.props.data);
      var hiPri = false;
      if (first > 0 || last < itemCount - 1) {
        var distTop = offset - this._getFrameMetricsApprox(first).offset;
        var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
        var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
        hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
      }

      if (hiPri && this._averageCellLength) {
        this._updateCellsToRenderBatcher.dispose({ abort: true });
        this._updateCellsToRender();
        return;
      } else {
        this._updateCellsToRenderBatcher.schedule();
      }
    }
  }, {
    key: '_updateViewableItems',
    value: function _updateViewableItems(data) {
      var _props7 = this.props,
          getItemCount = _props7.getItemCount,
          onViewableItemsChanged = _props7.onViewableItemsChanged;

      if (!onViewableItemsChanged) {
        return;
      }
      this._viewabilityHelper.onUpdate(getItemCount(data), this._scrollMetrics.offset, this._scrollMetrics.visibleLength, this._getFrameMetrics, this._createViewToken, onViewableItemsChanged, this.state);
    }
  }]);

  return VirtualizedList;
}(React.PureComponent);

VirtualizedList.defaultProps = {
  disableVirtualization: false,
  horizontal: false,
  initialNumToRender: 10,
  keyExtractor: function keyExtractor(item, index) {
    if (item.key != null) {
      return item.key;
    }
    _usedIndexForKey = true;
    return String(index);
  },
  maxToRenderPerBatch: 10,
  onEndReachedThreshold: 2,
  scrollEventThrottle: 50,
  updateCellsBatchingPeriod: 50,
  windowSize: 21 };
VirtualizedList.contextTypes = {
  virtualizedList: PropTypes.shape({
    horizontal: PropTypes.bool
  })
};
VirtualizedList.childContextTypes = {
  virtualizedList: PropTypes.shape({
    horizontal: PropTypes.bool
  })
};

var _initialiseProps = function _initialiseProps() {
  var _this5 = this;

  this._onUpdateSeparators = function (keys, newProps) {
    keys.forEach(function (key) {
      var ref = key != null && _this5._cellRefs[key];
      ref && ref.updateSeparatorProps(newProps);
    });
  };

  this._averageCellLength = 0;
  this._cellRefs = {};
  this._hasDataChangedSinceEndReached = true;
  this._hasWarned = {};
  this._highestMeasuredFrameIndex = 0;
  this._headerLength = 0;
  this._initialScrollIndexTimeout = 0;
  this._frames = {};
  this._footerLength = 0;
  this._scrollMetrics = {
    contentLength: 0,
    dOffset: 0,
    dt: 10,
    offset: 0,
    timestamp: 0,
    velocity: 0,
    visibleLength: 0
  };
  this._scrollRef = null;
  this._sentEndForContentLength = 0;
  this._totalCellLength = 0;
  this._totalCellsMeasured = 0;

  this._captureScrollRef = function (ref) {
    _this5._scrollRef = ref;
  };

  this._defaultRenderScrollComponent = function (props) {
    if (_this5._isNestedWithSameOrientation()) {
      return React.createElement(View, _extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 740
        }
      }));
    } else if (props.onRefresh) {
      invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
      return React.createElement(ScrollView, _extends({}, props, {
        refreshControl: React.createElement(RefreshControl, {
          refreshing: props.refreshing,
          onRefresh: props.onRefresh,
          progressViewOffset: props.progressViewOffset,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 752
          }
        }),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 749
        }
      }));
    } else {
      return React.createElement(ScrollView, _extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 761
        }
      }));
    }
  };

  this._onCellUnmount = function (cellKey) {
    var curr = _this5._frames[cellKey];
    if (curr) {
      _this5._frames[cellKey] = _extends({}, curr, { inLayout: false });
    }
  };

  this._onLayout = function (e) {
    _this5._scrollMetrics.visibleLength = _this5._selectLength(e.nativeEvent.layout);
    _this5.props.onLayout && _this5.props.onLayout(e);
    _this5._scheduleCellsToRenderUpdate();
    _this5._maybeCallOnEndReached();
  };

  this._onLayoutEmpty = function (e) {
    _this5.props.onLayout && _this5.props.onLayout(e);
  };

  this._onLayoutFooter = function (e) {
    _this5._footerLength = _this5._selectLength(e.nativeEvent.layout);
  };

  this._onLayoutHeader = function (e) {
    _this5._headerLength = _this5._selectLength(e.nativeEvent.layout);
  };

  this._onContentSizeChange = function (width, height) {
    if (_this5.props.onContentSizeChange) {
      _this5.props.onContentSizeChange(width, height);
    }
    _this5._scrollMetrics.contentLength = _this5._selectLength({ height: height, width: width });
    _this5._scheduleCellsToRenderUpdate();
    _this5._maybeCallOnEndReached();
  };

  this._onScroll = function (e) {
    if (_this5.props.onScroll) {
      _this5.props.onScroll(e);
    }
    var timestamp = e.timeStamp;
    var visibleLength = _this5._selectLength(e.nativeEvent.layoutMeasurement);
    var contentLength = _this5._selectLength(e.nativeEvent.contentSize);
    var offset = _this5._selectOffset(e.nativeEvent.contentOffset);
    var dt = _this5._scrollMetrics.timestamp ? Math.max(1, timestamp - _this5._scrollMetrics.timestamp) : 1;
    if (dt > 500 && _this5._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this5._hasWarned.perf) {
      infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', { dt: dt, prevDt: _this5._scrollMetrics.dt, contentLength: contentLength });
      _this5._hasWarned.perf = true;
    }
    var dOffset = offset - _this5._scrollMetrics.offset;
    var velocity = dOffset / dt;
    _this5._scrollMetrics = {
      contentLength: contentLength,
      dt: dt,
      dOffset: dOffset,
      offset: offset,
      timestamp: timestamp,
      velocity: velocity,
      visibleLength: visibleLength
    };
    _this5._updateViewableItems(_this5.props.data);
    if (!_this5.props) {
      return;
    }
    _this5._maybeCallOnEndReached();
    if (velocity !== 0) {
      _this5._fillRateHelper.activate();
    }
    _this5._computeBlankness();
    _this5._scheduleCellsToRenderUpdate();
  };

  this._onScrollBeginDrag = function (e) {
    _this5._viewabilityHelper.recordInteraction();
    _this5.props.onScrollBeginDrag && _this5.props.onScrollBeginDrag(e);
  };

  this._onScrollEndDrag = function (e) {
    var velocity = e.nativeEvent.velocity;

    if (velocity) {
      _this5._scrollMetrics.velocity = _this5._selectOffset(velocity);
    }
    _this5._computeBlankness();
    _this5.props.onScrollEndDrag && _this5.props.onScrollEndDrag(e);
  };

  this._onMomentumScrollEnd = function (e) {
    _this5._scrollMetrics.velocity = 0;
    _this5._computeBlankness();
    _this5.props.onMomentumScrollEnd && _this5.props.onMomentumScrollEnd(e);
  };

  this._updateCellsToRender = function () {
    var _props9 = _this5.props,
        data = _props9.data,
        getItemCount = _props9.getItemCount,
        onEndReachedThreshold = _props9.onEndReachedThreshold;

    var isVirtualizationDisabled = _this5._isVirtualizationDisabled();
    _this5._updateViewableItems(data);
    if (!data) {
      return;
    }
    _this5.setState(function (state) {
      var newState = void 0;
      if (!isVirtualizationDisabled) {
        if (_this5._scrollMetrics.visibleLength) {
          if (!_this5.props.initialScrollIndex || _this5._scrollMetrics.offset) {
            newState = computeWindowedRenderLimits(_this5.props, state, _this5._getFrameMetricsApprox, _this5._scrollMetrics);
          }
        }
      } else {
        var _scrollMetrics3 = _this5._scrollMetrics,
            contentLength = _scrollMetrics3.contentLength,
            _offset = _scrollMetrics3.offset,
            visibleLength = _scrollMetrics3.visibleLength;

        var _distanceFromEnd = contentLength - visibleLength - _offset;
        var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this5.props.maxToRenderPerBatch : 0;
        newState = {
          first: 0,
          last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
        };
      }
      return newState;
    });
  };

  this._createViewToken = function (index, isViewable) {
    var _props10 = _this5.props,
        data = _props10.data,
        getItem = _props10.getItem,
        keyExtractor = _props10.keyExtractor;

    var item = getItem(data, index);
    invariant(item, 'Missing item for index ' + index);
    return { index: index, item: item, key: keyExtractor(item, index), isViewable: isViewable };
  };

  this._getFrameMetricsApprox = function (index) {
    var frame = _this5._getFrameMetrics(index);
    if (frame && frame.index === index) {
      return frame;
    } else {
      var _getItemLayout = _this5.props.getItemLayout;

      invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
      return {
        length: _this5._averageCellLength,
        offset: _this5._averageCellLength * index
      };
    }
  };

  this._getFrameMetrics = function (index) {
    var _props11 = _this5.props,
        data = _props11.data,
        getItem = _props11.getItem,
        getItemCount = _props11.getItemCount,
        getItemLayout = _props11.getItemLayout,
        keyExtractor = _props11.keyExtractor;

    invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
    var item = getItem(data, index);
    var frame = item && _this5._frames[keyExtractor(item, index)];
    if (!frame || frame.index !== index) {
      if (getItemLayout) {
        frame = getItemLayout(data, index);
        if (__DEV__) {
          var frameType = PropTypes.shape({
            length: PropTypes.number.isRequired,
            offset: PropTypes.number.isRequired,
            index: PropTypes.number.isRequired
          }).isRequired;
          PropTypes.checkPropTypes({ frame: frameType }, { frame: frame }, 'frame', 'VirtualizedList.getItemLayout');
        }
      }
    }
    return frame;
  };
};

var CellRenderer = _wrapComponent('CellRenderer')(function (_React$Component) {
  _inherits(CellRenderer, _React$Component);

  function CellRenderer() {
    var _ref6;

    var _temp, _this4, _ret2;

    _classCallCheck(this, CellRenderer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret2 = (_temp = (_this4 = _possibleConstructorReturn(this, (_ref6 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref6, [this].concat(args))), _this4), _this4.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this4.props.item
      }
    }, _this4._separators = {
      highlight: function highlight() {
        var _this4$props = _this4.props,
            cellKey = _this4$props.cellKey,
            prevCellKey = _this4$props.prevCellKey;

        _this4.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this4$props2 = _this4.props,
            cellKey = _this4$props2.cellKey,
            prevCellKey = _this4$props2.prevCellKey;

        _this4.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this4$props3 = _this4.props,
            cellKey = _this4$props3.cellKey,
            prevCellKey = _this4$props3.prevCellKey;

        _this4.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
      }
    }, _temp), _possibleConstructorReturn(_this4, _ret2);
  }

  _createClass(CellRenderer, [{
    key: 'updateSeparatorProps',
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: _extends({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.onUnmount(this.props.cellKey);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props8 = this.props,
          ItemSeparatorComponent = _props8.ItemSeparatorComponent,
          fillRateHelper = _props8.fillRateHelper,
          item = _props8.item,
          index = _props8.index,
          inversionStyle = _props8.inversionStyle,
          parentProps = _props8.parentProps;
      var renderItem = parentProps.renderItem,
          getItemLayout = parentProps.getItemLayout;

      invariant(renderItem, 'no renderItem!');
      var element = renderItem({
        item: item,
        index: index,
        separators: this._separators
      });
      var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;

      return React.createElement(
        View,
        { onLayout: onLayout, style: inversionStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 1238
          }
        },
        element,
        ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, _extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1241
          }
        }))
      );
    }
  }]);

  return CellRenderer;
}(React.Component));

var styles = StyleSheet.create({
  verticallyInverted: {
    transform: [{ scaleY: -1 }]
  },
  horizontallyInverted: {
    transform: [{ scaleX: -1 }]
  }
});

module.exports = VirtualizedList;
}, 385, null, "VirtualizedList");
__d(/* Batchinator */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InteractionManager = require(352                 ); // 352 = InteractionManager

var Batchinator = function () {
  function Batchinator(callback, delayMS) {
    _classCallCheck(this, Batchinator);

    this._delay = delayMS;
    this._callback = callback;
  }

  _createClass(Batchinator, [{
    key: 'dispose',
    value: function dispose() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { abort: false };

      if (this._taskHandle) {
        this._taskHandle.cancel();
        if (!options.abort) {
          this._callback();
        }
        this._taskHandle = null;
      }
    }
  }, {
    key: 'schedule',
    value: function schedule() {
      var _this = this;

      if (this._taskHandle) {
        return;
      }
      var timeoutHandle = setTimeout(function () {
        _this._taskHandle = InteractionManager.runAfterInteractions(function () {
          _this._taskHandle = null;
          _this._callback();
        });
      }, this._delay);
      this._taskHandle = { cancel: function cancel() {
          return clearTimeout(timeoutHandle);
        } };
    }
  }]);

  return Batchinator;
}();

module.exports = Batchinator;
}, 386, null, "Batchinator");
__d(/* FillRateHelper */function(global, require, module, exports) {

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var performanceNow = require(193                      ); // 193 = fbjs/lib/performanceNow
var warning = require(199               ); // 199 = fbjs/lib/warning

var Info = function Info() {
  _classCallCheck(this, Info);

  this.any_blank_count = 0;
  this.any_blank_ms = 0;
  this.any_blank_speed_sum = 0;
  this.mostly_blank_count = 0;
  this.mostly_blank_ms = 0;
  this.pixels_blank = 0;
  this.pixels_sampled = 0;
  this.pixels_scrolled = 0;
  this.total_time_spent = 0;
  this.sample_count = 0;
};

var DEBUG = false;

var _listeners = [];
var _minSampleCount = 10;
var _sampleRate = DEBUG ? 1 : null;

var FillRateHelper = function () {
  _createClass(FillRateHelper, null, [{
    key: 'addListener',
    value: function addListener(callback) {
      warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');
      _listeners.push(callback);
      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  }, {
    key: 'setSampleRate',
    value: function setSampleRate(sampleRate) {
      _sampleRate = sampleRate;
    }
  }, {
    key: 'setMinSampleCount',
    value: function setMinSampleCount(minSampleCount) {
      _minSampleCount = minSampleCount;
    }
  }]);

  function FillRateHelper(getFrameMetrics) {
    _classCallCheck(this, FillRateHelper);

    this._anyBlankStartTime = null;
    this._enabled = false;
    this._info = new Info();
    this._mostlyBlankStartTime = null;
    this._samplesStartTime = null;

    this._getFrameMetrics = getFrameMetrics;
    this._enabled = (_sampleRate || 0) > Math.random();
    this._resetData();
  }

  _createClass(FillRateHelper, [{
    key: 'activate',
    value: function activate() {
      if (this._enabled && this._samplesStartTime == null) {
        DEBUG && console.debug('FillRateHelper: activate');
        this._samplesStartTime = performanceNow();
      }
    }
  }, {
    key: 'deactivateAndFlush',
    value: function deactivateAndFlush() {
      if (!this._enabled) {
        return;
      }
      var start = this._samplesStartTime;
      if (start == null) {
        DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
        return;
      }
      if (this._info.sample_count < _minSampleCount) {
        this._resetData();
        return;
      }
      var total_time_spent = performanceNow() - start;
      var info = _extends({}, this._info, {
        total_time_spent: total_time_spent
      });
      if (DEBUG) {
        var derived = {
          avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
          avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
          avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
          any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
          any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
          mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
          mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
        };
        for (var key in derived) {
          derived[key] = Math.round(1000 * derived[key]) / 1000;
        }
        console.debug('FillRateHelper deactivateAndFlush: ', { derived: derived, info: info });
      }
      _listeners.forEach(function (listener) {
        return listener(info);
      });
      this._resetData();
    }
  }, {
    key: 'computeBlankness',
    value: function computeBlankness(props, state, scrollMetrics) {
      if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
        return 0;
      }
      var dOffset = scrollMetrics.dOffset,
          offset = scrollMetrics.offset,
          velocity = scrollMetrics.velocity,
          visibleLength = scrollMetrics.visibleLength;

      this._info.sample_count++;
      this._info.pixels_sampled += Math.round(visibleLength);
      this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
      var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
      var now = performanceNow();
      if (this._anyBlankStartTime != null) {
        this._info.any_blank_ms += now - this._anyBlankStartTime;
      }
      this._anyBlankStartTime = null;
      if (this._mostlyBlankStartTime != null) {
        this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
      }
      this._mostlyBlankStartTime = null;

      var blankTop = 0;
      var first = state.first;
      var firstFrame = this._getFrameMetrics(first);
      while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
        firstFrame = this._getFrameMetrics(first);
        first++;
      }

      if (firstFrame && first > 0) {
        blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
      }
      var blankBottom = 0;
      var last = state.last;
      var lastFrame = this._getFrameMetrics(last);
      while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
        lastFrame = this._getFrameMetrics(last);
        last--;
      }

      if (lastFrame && last < props.getItemCount(props.data) - 1) {
        var bottomEdge = lastFrame.offset + lastFrame.length;
        blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
      }
      var pixels_blank = Math.round(blankTop + blankBottom);
      var blankness = pixels_blank / visibleLength;
      if (blankness > 0) {
        this._anyBlankStartTime = now;
        this._info.any_blank_speed_sum += scrollSpeed;
        this._info.any_blank_count++;
        this._info.pixels_blank += pixels_blank;
        if (blankness > 0.5) {
          this._mostlyBlankStartTime = now;
          this._info.mostly_blank_count++;
        }
      } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
        this.deactivateAndFlush();
      }
      return blankness;
    }
  }, {
    key: 'enabled',
    value: function enabled() {
      return this._enabled;
    }
  }, {
    key: '_resetData',
    value: function _resetData() {
      this._anyBlankStartTime = null;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
    }
  }]);

  return FillRateHelper;
}();

module.exports = FillRateHelper;
}, 387, null, "FillRateHelper");
__d(/* ViewabilityHelper */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var ViewabilityHelper = function () {
  function ViewabilityHelper() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { viewAreaCoveragePercentThreshold: 0 };

    _classCallCheck(this, ViewabilityHelper);

    this._hasInteracted = false;
    this._lastUpdateTime = 0;
    this._timers = new Set();
    this._viewableIndices = [];
    this._viewableItems = new Map();

    this._config = config;
  }

  _createClass(ViewabilityHelper, [{
    key: 'dispose',
    value: function dispose() {
      this._timers.forEach(clearTimeout);
    }
  }, {
    key: 'computeViewableItems',
    value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
      var _config = this._config,
          itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
          viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;

      var viewAreaMode = viewAreaCoveragePercentThreshold != null;
      var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
      invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
      var viewableIndices = [];
      if (itemCount === 0) {
        return viewableIndices;
      }
      var firstVisible = -1;

      var _ref = renderRange || { first: 0, last: itemCount - 1 },
          first = _ref.first,
          last = _ref.last;

      invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({ renderRange: renderRange, itemCount: itemCount }));
      for (var idx = first; idx <= last; idx++) {
        var metrics = getFrameMetrics(idx);
        if (!metrics) {
          continue;
        }
        var top = metrics.offset - scrollOffset;
        var bottom = top + metrics.length;
        if (top < viewportHeight && bottom > 0) {
          firstVisible = idx;
          if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
            viewableIndices.push(idx);
          }
        } else if (firstVisible >= 0) {
          break;
        }
      }
      return viewableIndices;
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
      var _this = this;

      var updateTime = Date.now();
      if (this._lastUpdateTime === 0 && itemCount > 0 && getFrameMetrics(0)) {
        this._lastUpdateTime = updateTime;
      }
      var updateElapsed = this._lastUpdateTime ? updateTime - this._lastUpdateTime : 0;
      if (this._config.waitForInteraction && !this._hasInteracted) {
        return;
      }
      var viewableIndices = [];
      if (itemCount) {
        viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
      }
      if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
        return v === viewableIndices[ii];
      })) {
        return;
      }
      this._viewableIndices = viewableIndices;
      this._lastUpdateTime = updateTime;
      if (this._config.minimumViewTime && updateElapsed < this._config.minimumViewTime) {
        var handle = setTimeout(function () {
          _this._timers.delete(handle);
          _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }, this._config.minimumViewTime);
        this._timers.add(handle);
      } else {
        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
      }
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      this._hasInteracted = true;
    }
  }, {
    key: '_onUpdateSync',
    value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
      var _this2 = this;

      viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
        return _this2._viewableIndices.includes(ii);
      });
      var prevItems = this._viewableItems;
      var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
        var viewable = createViewToken(ii, true);
        return [viewable.key, viewable];
      }));

      var changed = [];
      for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref4;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref4 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref4 = _i.value;
        }

        var _ref2 = _ref4;

        var _ref3 = _slicedToArray(_ref2, 2);

        var _key = _ref3[0];
        var viewable = _ref3[1];

        if (!prevItems.has(_key)) {
          changed.push(viewable);
        }
      }
      for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref7;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref7 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref7 = _i2.value;
        }

        var _ref5 = _ref7;

        var _ref6 = _slicedToArray(_ref5, 2);

        var _key2 = _ref6[0];
        var _viewable = _ref6[1];

        if (!nextItems.has(_key2)) {
          changed.push(_extends({}, _viewable, { isViewable: false }));
        }
      }
      if (changed.length > 0) {
        this._viewableItems = nextItems;
        onViewableItemsChanged({
          viewableItems: Array.from(nextItems.values()),
          changed: changed
        });
      }
    }
  }]);

  return ViewabilityHelper;
}();

function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
  if (_isEntirelyVisible(top, bottom, viewportHeight)) {
    return true;
  } else {
    var pixels = _getPixelsVisible(top, bottom, viewportHeight);
    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
    return percent >= viewablePercentThreshold;
  }
}

function _getPixelsVisible(top, bottom, viewportHeight) {
  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
  return Math.max(0, visibleHeight);
}

function _isEntirelyVisible(top, bottom, viewportHeight) {
  return top >= 0 && bottom <= viewportHeight && bottom > top;
}

module.exports = ViewabilityHelper;
}, 388, null, "ViewabilityHelper");
__d(/* VirtualizeUtils */function(global, require, module, exports) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
  var out = [];
  for (var ii = 0; ii < itemCount; ii++) {
    var frame = getFrameMetrics(ii);
    var trailingOffset = frame.offset + frame.length;
    for (var kk = 0; kk < offsets.length; kk++) {
      if (out[kk] == null && trailingOffset >= offsets[kk]) {
        out[kk] = ii;
        if (kk === offsets.length - 1) {
          invariant(out.length === offsets.length, 'bad offsets input, should be in increasing order ' + JSON.stringify(offsets));
          return out;
        }
      }
    }
  }
  return out;
}

function newRangeCount(prev, next) {
  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
}

function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
  var data = props.data,
      getItemCount = props.getItemCount,
      maxToRenderPerBatch = props.maxToRenderPerBatch,
      windowSize = props.windowSize;

  var itemCount = getItemCount(data);
  if (itemCount === 0) {
    return prev;
  }
  var offset = scrollMetrics.offset,
      velocity = scrollMetrics.velocity,
      visibleLength = scrollMetrics.visibleLength;

  var visibleBegin = Math.max(0, offset);
  var visibleEnd = visibleBegin + visibleLength;
  var overscanLength = (windowSize - 1) * visibleLength;

  var leadFactor = 0.5;

  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';

  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);

  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
      _elementsThatOverlapO2 = _slicedToArray(_elementsThatOverlapO, 4),
      overscanFirst = _elementsThatOverlapO2[0],
      first = _elementsThatOverlapO2[1],
      last = _elementsThatOverlapO2[2],
      overscanLast = _elementsThatOverlapO2[3];

  overscanFirst = overscanFirst == null ? 0 : overscanFirst;
  first = first == null ? Math.max(0, overscanFirst) : first;
  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
  var visible = { first: first, last: last };

  var newCellCount = newRangeCount(prev, visible);

  while (true) {
    if (first <= overscanFirst && last >= overscanLast) {
      break;
    }
    var maxNewCells = newCellCount >= maxToRenderPerBatch;
    var firstWillAddMore = first <= prev.first || first > prev.last;
    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
    var lastWillAddMore = last >= prev.last || last < prev.first;
    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);
    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
      break;
    }
    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
      if (firstWillAddMore) {
        newCellCount++;
      }
      first--;
    }
    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
      if (lastWillAddMore) {
        newCellCount++;
      }
      last++;
    }
  }
  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
    throw new Error('Bad window calculation ' + JSON.stringify({
      first: first,
      last: last,
      itemCount: itemCount,
      overscanFirst: overscanFirst,
      overscanLast: overscanLast,
      visible: visible
    }));
  }
  return { first: first, last: last };
}

var VirtualizeUtils = {
  computeWindowedRenderLimits: computeWindowedRenderLimits,
  elementsThatOverlapOffsets: elementsThatOverlapOffsets,
  newRangeCount: newRangeCount
};

module.exports = VirtualizeUtils;
}, 389, null, "VirtualizeUtils");
__d(/* ImageBackground */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Image\\ImageBackground.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ImageBackground: {
    displayName: 'ImageBackground'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Image/ImageBackground.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var Image = require(361    ); // 361 = Image
var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var View = require(285   ); // 285 = View

var ensureComponentIsNative = require(391                      ); // 391 = ensureComponentIsNative

var ImageBackground = _wrapComponent('ImageBackground')(function (_React$Component) {
  _inherits(ImageBackground, _React$Component);

  function ImageBackground() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ImageBackground);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
      _this._viewRef = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ImageBackground, [{
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      var viewRef = this._viewRef;
      if (viewRef) {
        ensureComponentIsNative(viewRef);
        viewRef.setNativeProps(props);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          style = _props.style,
          imageStyle = _props.imageStyle,
          imageRef = _props.imageRef,
          props = _objectWithoutProperties(_props, ['children', 'style', 'imageStyle', 'imageRef']);

      return React.createElement(
        View,
        { style: style, ref: this._captureRef, __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        React.createElement(Image, _extends({}, props, {
          style: [StyleSheet.absoluteFill, {
            width: style.width,
            height: style.height
          }, imageStyle],
          ref: imageRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        })),
        children
      );
    }
  }]);

  return ImageBackground;
}(React.Component));

module.exports = ImageBackground;
}, 390, null, "ImageBackground");
__d(/* ensureComponentIsNative */function(global, require, module, exports) {
'use strict';

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var ensureComponentIsNative = function ensureComponentIsNative(component) {
  invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
};

module.exports = ensureComponentIsNative;
}, 391, null, "ensureComponentIsNative");
__d(/* ImageEditor */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RCTImageEditingManager = require(184            ).ImageEditingManager; // 184 = NativeModules

var ImageEditor = function () {
  function ImageEditor() {
    _classCallCheck(this, ImageEditor);
  }

  _createClass(ImageEditor, null, [{
    key: 'cropImage',
    value: function cropImage(uri, cropData, success, failure) {
      RCTImageEditingManager.cropImage(uri, cropData, success, failure);
    }
  }]);

  return ImageEditor;
}();

module.exports = ImageEditor;
}, 392, null, "ImageEditor");
__d(/* ImageStore */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RCTImageStoreManager = require(184            ).ImageStoreManager; // 184 = NativeModules

var ImageStore = function () {
  function ImageStore() {
    _classCallCheck(this, ImageStore);
  }

  _createClass(ImageStore, null, [{
    key: 'hasImageForTag',
    value: function hasImageForTag(uri, callback) {
      if (RCTImageStoreManager.hasImageForTag) {
        RCTImageStoreManager.hasImageForTag(uri, callback);
      } else {
        console.warn('hasImageForTag() not implemented');
      }
    }
  }, {
    key: 'removeImageForTag',
    value: function removeImageForTag(uri) {
      if (RCTImageStoreManager.removeImageForTag) {
        RCTImageStoreManager.removeImageForTag(uri);
      } else {
        console.warn('removeImageForTag() not implemented');
      }
    }
  }, {
    key: 'addImageFromBase64',
    value: function addImageFromBase64(base64ImageData, success, failure) {
      RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
    }
  }, {
    key: 'getBase64ForTag',
    value: function getBase64ForTag(uri, success, failure) {
      RCTImageStoreManager.getBase64ForTag(uri, success, failure);
    }
  }]);

  return ImageStore;
}();

module.exports = ImageStore;
}, 393, null, "ImageStore");
__d(/* KeyboardAvoidingView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Keyboard\\KeyboardAvoidingView.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var createReactClass = require(311                 ); // 311 = create-react-class
var Keyboard = require(367       ); // 367 = Keyboard
var LayoutAnimation = require(395              ); // 395 = LayoutAnimation
var Platform = require(192       ); // 192 = Platform
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var TimerMixin = require(347                ); // 347 = react-timer-mixin
var View = require(285   ); // 285 = View
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var viewRef = 'VIEW';

var KeyboardAvoidingView = createReactClass({
  displayName: 'KeyboardAvoidingView',
  mixins: [TimerMixin],

  propTypes: _extends({}, ViewPropTypes, {
    behavior: PropTypes.oneOf(['height', 'position', 'padding']),

    contentContainerStyle: ViewPropTypes.style,

    keyboardVerticalOffset: PropTypes.number.isRequired
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      keyboardVerticalOffset: 0
    };
  },
  getInitialState: function getInitialState() {
    return {
      bottom: 0
    };
  },


  subscriptions: [],
  frame: null,

  relativeKeyboardHeight: function relativeKeyboardHeight(keyboardFrame) {
    var frame = this.frame;
    if (!frame || !keyboardFrame) {
      return 0;
    }

    var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;

    return Math.max(frame.y + frame.height - keyboardY, 0);
  },
  onKeyboardChange: function onKeyboardChange(event) {
    if (!event) {
      this.setState({ bottom: 0 });
      return;
    }

    var duration = event.duration,
        easing = event.easing,
        endCoordinates = event.endCoordinates;

    var height = this.relativeKeyboardHeight(endCoordinates);

    if (duration && easing) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
    this.setState({ bottom: height });
  },
  onLayout: function onLayout(event) {
    this.frame = event.nativeEvent.layout;
  },
  componentWillUpdate: function componentWillUpdate(nextProps, nextState, nextContext) {
    if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
      nextState.bottom = 0;
    }
  },
  componentWillMount: function componentWillMount() {
    if (Platform.OS === 'ios') {
      this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange)];
    } else {
      this.subscriptions = [Keyboard.addListener('keyboardDidHide', this.onKeyboardChange), Keyboard.addListener('keyboardDidShow', this.onKeyboardChange)];
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.subscriptions.forEach(function (sub) {
      return sub.remove();
    });
  },
  render: function render() {
    var _props = this.props,
        behavior = _props.behavior,
        children = _props.children,
        style = _props.style,
        props = _objectWithoutProperties(_props, ['behavior', 'children', 'style']);

    switch (behavior) {
      case 'height':
        var heightStyle = void 0;
        if (this.frame) {
          heightStyle = { height: this.frame.height - this.state.bottom, flex: 0 };
        }
        return React.createElement(
          View,
          _extends({ ref: viewRef, style: [style, heightStyle], onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          }),
          children
        );

      case 'position':
        var positionStyle = { bottom: this.state.bottom };
        var contentContainerStyle = this.props.contentContainerStyle;


        return React.createElement(
          View,
          _extends({ ref: viewRef, style: style, onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 172
            }
          }),
          React.createElement(
            View,
            { style: [contentContainerStyle, positionStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 173
              }
            },
            children
          )
        );

      case 'padding':
        var paddingStyle = { paddingBottom: this.state.bottom };
        return React.createElement(
          View,
          _extends({ ref: viewRef, style: [style, paddingStyle], onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 182
            }
          }),
          children
        );

      default:
        return React.createElement(
          View,
          _extends({ ref: viewRef, onLayout: this.onLayout, style: style }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 189
            }
          }),
          children
        );
    }
  }
});

module.exports = KeyboardAvoidingView;
}, 394, null, "KeyboardAvoidingView");
__d(/* LayoutAnimation */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types
var UIManager = require(279        ); // 279 = UIManager

var keyMirror = require(290                 ); // 290 = fbjs/lib/keyMirror

var checkPropTypes = PropTypes.checkPropTypes;


var TypesEnum = {
  spring: true,
  linear: true,
  easeInEaseOut: true,
  easeIn: true,
  easeOut: true,
  keyboard: true
};
var Types = keyMirror(TypesEnum);

var PropertiesEnum = {
  opacity: true,
  scaleXY: true
};
var Properties = keyMirror(PropertiesEnum);

var animType = PropTypes.shape({
  duration: PropTypes.number,
  delay: PropTypes.number,
  springDamping: PropTypes.number,
  initialVelocity: PropTypes.number,
  type: PropTypes.oneOf(Object.keys(Types)).isRequired,
  property: PropTypes.oneOf(Object.keys(Properties))
});

var configType = PropTypes.shape({
  duration: PropTypes.number.isRequired,
  create: animType,
  update: animType,
  delete: animType
});

function checkConfig(config, location, name) {
  checkPropTypes({ config: configType }, { config: config }, location, name);
}

function configureNext(config, onAnimationDidEnd) {
  if (__DEV__) {
    checkConfig(config, 'config', 'LayoutAnimation.configureNext');
  }
  UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
}

function create(duration, type, creationProp) {
  return {
    duration: duration,
    create: {
      type: type,
      property: creationProp
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: creationProp
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
  linear: create(500, Types.linear, Properties.opacity),
  spring: {
    duration: 700,
    create: {
      type: Types.linear,
      property: Properties.opacity
    },
    update: {
      type: Types.spring,
      springDamping: 0.4
    },
    delete: {
      type: Types.linear,
      property: Properties.opacity
    }
  }
};

var LayoutAnimation = {
  configureNext: configureNext,

  create: create,
  Types: Types,
  Properties: Properties,
  checkConfig: checkConfig,
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};

module.exports = LayoutAnimation;
}, 395, null, "LayoutAnimation");
__d(/* MaskedViewIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(313                ); // 313 = UnimplementedView
}, 396, null, "MaskedViewIOS");
__d(/* Modal */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Modal\\Modal.js',
    _container;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Modal: {
    displayName: 'Modal'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Modal/Modal.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var AppContainer = require(398           ); // 398 = AppContainer
var I18nManager = require(417          ); // 417 = I18nManager
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(314         ); // 314 = StyleSheet
var View = require(285   ); // 285 = View

var deprecatedPropType = require(294                 ); // 294 = deprecatedPropType
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent
var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);

var Modal = _wrapComponent('Modal')((_temp = _class = function (_React$Component) {
  _inherits(Modal, _React$Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    Modal._confirmProps(props);
    return _this;
  }

  _createClass(Modal, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      Modal._confirmProps(nextProps);
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.visible === false) {
        return null;
      }

      var containerStyles = {
        backgroundColor: this.props.transparent ? 'transparent' : 'white'
      };

      var animationType = this.props.animationType;
      if (!animationType) {
        animationType = 'none';
        if (this.props.animated) {
          animationType = 'slide';
        }
      }

      var presentationStyle = this.props.presentationStyle;
      if (!presentationStyle) {
        presentationStyle = 'fullScreen';
        if (this.props.transparent) {
          presentationStyle = 'overFullScreen';
        }
      }

      var innerChildren = __DEV__ ? React.createElement(
        AppContainer,
        { rootTag: this.context.rootTag, __source: {
            fileName: _jsxFileName,
            lineNumber: 199
          }
        },
        this.props.children
      ) : this.props.children;

      return React.createElement(
        RCTModalHostView,
        {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 205
          }
        },
        React.createElement(
          View,
          { style: [styles.container, containerStyles], __source: {
              fileName: _jsxFileName,
              lineNumber: 217
            }
          },
          innerChildren
        )
      );
    }
  }, {
    key: '_shouldSetResponder',
    value: function _shouldSetResponder() {
      return true;
    }
  }], [{
    key: '_confirmProps',
    value: function _confirmProps(props) {
      if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
        console.warn('Modal with \'' + props.presentationStyle + '\' presentation style and \'transparent\' value is not supported.');
      }
    }
  }]);

  return Modal;
}(React.Component), _class.propTypes = {
  animationType: PropTypes.oneOf(['none', 'slide', 'fade']),

  presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),

  transparent: PropTypes.bool,

  hardwareAccelerated: PropTypes.bool,

  visible: PropTypes.bool,

  onRequestClose: Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,

  onShow: PropTypes.func,
  animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),

  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),

  onOrientationChange: PropTypes.func
}, _class.defaultProps = {
  visible: true,
  hardwareAccelerated: false
}, _class.contextTypes = {
  rootTag: PropTypes.number
}, _temp));

var side = I18nManager.isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
  modal: {
    position: 'absolute'
  },
  container: (_container = {
    position: 'absolute'
  }, _defineProperty(_container, side, 0), _defineProperty(_container, 'top', 0), _container)
});

module.exports = Modal;
}, 397, null, "Modal");
__d(/* AppContainer */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp2,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\ReactNative\\AppContainer.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  AppContainer: {
    displayName: 'AppContainer'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/ReactNative/AppContainer.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var EmitterSubscription = require(204                  ); // 204 = EmitterSubscription
var PropTypes = require(20          ); // 20 = prop-types
var RCTDeviceEventEmitter = require(202                    ); // 202 = RCTDeviceEventEmitter
var React = require(286    ); // 286 = React
var ReactNative = require(211          ); // 211 = ReactNative
var StyleSheet = require(314         ); // 314 = StyleSheet
var View = require(285   ); // 285 = View

var AppContainer = _wrapComponent('AppContainer')((_temp2 = _class = function (_React$Component) {
  _inherits(AppContainer, _React$Component);

  function AppContainer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AppContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      inspector: null,
      mainKey: 1
    }, _this._subscription = null, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AppContainer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        rootTag: this.props.rootTag
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (__DEV__) {
        if (!global.__RCTProfileIsProfiling) {
          this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
            var Inspector = require(399        ); // 399 = Inspector
            var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
              inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
              onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                _this2.setState(function (s) {
                  return { mainKey: s.mainKey + 1 };
                }, function () {
                  return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                });
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 65
              }
            });
            _this2.setState({ inspector: inspector });
          });
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subscription) {
        this._subscription.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var yellowBox = null;
      if (__DEV__) {
        if (!global.__RCTProfileIsProfiling) {
          var YellowBox = require(416        ); // 416 = YellowBox
          yellowBox = React.createElement(YellowBox, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 95
            }
          });
        }
      }

      var innerView = React.createElement(
        View,
        {
          collapsable: !this.state.inspector,
          key: this.state.mainKey,
          pointerEvents: 'box-none',
          style: styles.appContainer,
          ref: function ref(_ref2) {
            _this3._mainRef = _ref2;
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 100
          }
        },
        this.props.children
      );

      var Wrapper = this.props.WrapperComponent;
      if (Wrapper) {
        innerView = React.createElement(
          Wrapper,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 115
            }
          },
          innerView
        );
      }
      return React.createElement(
        View,
        { style: styles.appContainer, pointerEvents: 'box-none', __source: {
            fileName: _jsxFileName,
            lineNumber: 121
          }
        },
        innerView,
        yellowBox,
        this.state.inspector
      );
    }
  }]);

  return AppContainer;
}(React.Component), _class.childContextTypes = {
  rootTag: PropTypes.number
}, _temp2));

var styles = StyleSheet.create({
  appContainer: {
    flex: 1
  }
});

module.exports = AppContainer;
}, 398, null, "AppContainer");
__d(/* Inspector */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _initialiseProps,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\Inspector.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Inspector: {
    displayName: 'Inspector'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/Inspector.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var Dimensions = require(316         ); // 316 = Dimensions
var InspectorOverlay = require(400               ); // 400 = InspectorOverlay
var InspectorPanel = require(404             ); // 404 = InspectorPanel
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var ReactNative = require(211          ); // 211 = ReactNative
var StyleSheet = require(314         ); // 314 = StyleSheet
var Touchable = require(338        ); // 338 = Touchable
var UIManager = require(279        ); // 279 = UIManager
var View = require(285   ); // 285 = View

var emptyObject = require(280                   ); // 280 = fbjs/lib/emptyObject
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
var renderer = findRenderer();

hook.resolveRNStyle = require(273           ); // 273 = flattenStyle

function findRenderer() {
  var renderers = hook._renderers;
  var keys = Object.keys(renderers);
  invariant(keys.length === 1, 'Expected to find exactly one React Native renderer on DevTools hook.');
  return renderers[keys[0]];
}

var Inspector = _wrapComponent('Inspector')((_temp = _class = function (_React$Component) {
  _inherits(Inspector, _React$Component);

  function Inspector(props) {
    _classCallCheck(this, Inspector);

    var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      devtoolsAgent: null,
      hierarchy: null,
      panelPos: 'bottom',
      inspecting: true,
      perfing: false,
      inspected: null,
      selection: null,
      inspectedViewTag: _this.props.inspectedViewTag,
      networking: false
    };
    return _this;
  }

  _createClass(Inspector, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      hook.on('react-devtools', this.attachToDevtools);

      if (hook.reactDevtoolsAgent) {
        this.attachToDevtools(hook.reactDevtoolsAgent);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subs) {
        this._subs.map(function (fn) {
          return fn();
        });
      }
      hook.off('react-devtools', this.attachToDevtools);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState({ inspectedViewTag: newProps.inspectedViewTag });
    }
  }, {
    key: 'setSelection',
    value: function setSelection(i) {
      var _this2 = this;

      var hierarchyItem = this.state.hierarchy[i];

      var _hierarchyItem$getIns = hierarchyItem.getInspectorData(ReactNative.findNodeHandle),
          measure = _hierarchyItem$getIns.measure,
          props = _hierarchyItem$getIns.props,
          source = _hierarchyItem$getIns.source;

      measure(function (x, y, width, height, left, top) {
        _this2.setState({
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: props.style,
            source: source
          },
          selection: i
        });
      });
    }
  }, {
    key: 'onTouchViewTag',
    value: function onTouchViewTag(touchedViewTag, frame, pointerY) {
      var _renderer$getInspecto = renderer.getInspectorDataForViewTag(touchedViewTag),
          hierarchy = _renderer$getInspecto.hierarchy,
          props = _renderer$getInspecto.props,
          selection = _renderer$getInspecto.selection,
          source = _renderer$getInspecto.source;

      if (this.state.devtoolsAgent) {
        var offsetFromLeaf = hierarchy.length - 1 - selection;
        this.state.devtoolsAgent.selectFromDOMNode(touchedViewTag, true, offsetFromLeaf);
      }

      this.setState({
        panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
        selection: selection,
        hierarchy: hierarchy,
        inspected: {
          style: props.style,
          frame: frame,
          source: source
        }
      });
    }
  }, {
    key: 'setPerfing',
    value: function setPerfing(val) {
      this.setState({
        perfing: val,
        inspecting: false,
        inspected: null,
        networking: false
      });
    }
  }, {
    key: 'setInspecting',
    value: function setInspecting(val) {
      this.setState({
        inspecting: val,
        inspected: null
      });
    }
  }, {
    key: 'setTouchTargetting',
    value: function setTouchTargetting(val) {
      var _this3 = this;

      Touchable.TOUCH_TARGET_DEBUG = val;
      this.props.onRequestRerenderApp(function (inspectedViewTag) {
        _this3.setState({ inspectedViewTag: inspectedViewTag });
      });
    }
  }, {
    key: 'setNetworking',
    value: function setNetworking(val) {
      this.setState({
        networking: val,
        perfing: false,
        inspecting: false,
        inspected: null
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var panelContainerStyle = this.state.panelPos === 'bottom' ? { bottom: 0 } : { top: Platform.OS === 'ios' ? 20 : 0 };
      return React.createElement(
        View,
        { style: styles.container, pointerEvents: 'box-none', __source: {
            fileName: _jsxFileName,
            lineNumber: 232
          }
        },
        this.state.inspecting && React.createElement(InspectorOverlay, {
          inspected: this.state.inspected,
          inspectedViewTag: this.state.inspectedViewTag,
          onTouchViewTag: this.onTouchViewTag.bind(this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 234
          }
        }),
        React.createElement(
          View,
          { style: [styles.panelContainer, panelContainerStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 239
            }
          },
          React.createElement(InspectorPanel, {
            devtoolsIsOpen: !!this.state.devtoolsAgent,
            inspecting: this.state.inspecting,
            perfing: this.state.perfing,
            setPerfing: this.setPerfing.bind(this),
            setInspecting: this.setInspecting.bind(this),
            inspected: this.state.inspected,
            hierarchy: this.state.hierarchy,
            selection: this.state.selection,
            setSelection: this.setSelection.bind(this),
            touchTargetting: Touchable.TOUCH_TARGET_DEBUG,
            setTouchTargetting: this.setTouchTargetting.bind(this),
            networking: this.state.networking,
            setNetworking: this.setNetworking.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 240
            }
          })
        )
      );
    }
  }]);

  return Inspector;
}(React.Component), _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.attachToDevtools = function (agent) {
    var _hideWait = null;
    var hlSub = agent.sub('highlight', function (_ref) {
      var node = _ref.node,
          name = _ref.name,
          props = _ref.props;

      clearTimeout(_hideWait);

      if (typeof node !== 'number') {
        node = ReactNative.findNodeHandle(node);
      }

      UIManager.measure(node, function (x, y, width, height, left, top) {
        _this4.setState({
          hierarchy: [],
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: props ? props.style : emptyObject
          }
        });
      });
    });
    var hideSub = agent.sub('hideHighlight', function () {
      if (_this4.state.inspected === null) {
        return;
      }

      _hideWait = setTimeout(function () {
        _this4.setState({
          inspected: null
        });
      }, 100);
    });
    _this4._subs = [hlSub, hideSub];

    agent.on('shutdown', function () {
      _this4.setState({ devtoolsAgent: null });
      _this4._subs = null;
    });
    _this4.setState({
      devtoolsAgent: agent
    });
  };
}, _temp));

var styles = StyleSheet.create({
  container: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  panelContainer: {
    position: 'absolute',
    left: 0,
    right: 0
  }
});

module.exports = Inspector;
}, 399, null, "Inspector");
__d(/* InspectorOverlay */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp2,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\InspectorOverlay.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  InspectorOverlay: {
    displayName: 'InspectorOverlay'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var Dimensions = require(316         ); // 316 = Dimensions
var ElementBox = require(401         ); // 401 = ElementBox
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var UIManager = require(279        ); // 279 = UIManager
var View = require(285   ); // 285 = View

var InspectorOverlay = _wrapComponent('InspectorOverlay')((_temp2 = _class = function (_React$Component) {
  _inherits(InspectorOverlay, _React$Component);

  function InspectorOverlay() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, InspectorOverlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
      var _e$nativeEvent$touche = e.nativeEvent.touches[0],
          locationX = _e$nativeEvent$touche.locationX,
          locationY = _e$nativeEvent$touche.locationY;

      UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
        _this.props.onTouchViewTag(nativeViewTag, { left: left, top: top, width: width, height: height }, locationY);
      });
    }, _this.shouldSetResponser = function (e) {
      _this.findViewForTouchEvent(e);
      return true;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(InspectorOverlay, [{
    key: 'render',
    value: function render() {
      var content = null;
      if (this.props.inspected) {
        content = React.createElement(ElementBox, { frame: this.props.inspected.frame, style: this.props.inspected.style, __source: {
            fileName: _jsxFileName,
            lineNumber: 64
          }
        });
      }

      return React.createElement(
        View,
        {
          onStartShouldSetResponder: this.shouldSetResponser,
          onResponderMove: this.findViewForTouchEvent,
          style: [styles.inspector, { height: Dimensions.get('window').height }], __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        content
      );
    }
  }]);

  return InspectorOverlay;
}(React.Component), _class.propTypes = {
  inspected: PropTypes.shape({
    frame: PropTypes.object,
    style: PropTypes.any
  }),
  inspectedViewTag: PropTypes.number,
  onTouchViewTag: PropTypes.func.isRequired
}, _temp2));

var styles = StyleSheet.create({
  inspector: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0
  }
});

module.exports = InspectorOverlay;
}, 400, null, "InspectorOverlay");
__d(/* ElementBox */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\ElementBox.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ElementBox: {
    displayName: 'ElementBox'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/ElementBox.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var View = require(285   ); // 285 = View
var StyleSheet = require(314         ); // 314 = StyleSheet
var BorderBox = require(402        ); // 402 = BorderBox
var resolveBoxStyle = require(403              ); // 403 = resolveBoxStyle

var flattenStyle = require(273           ); // 273 = flattenStyle

var ElementBox = _wrapComponent('ElementBox')(function (_React$Component) {
  _inherits(ElementBox, _React$Component);

  function ElementBox() {
    _classCallCheck(this, ElementBox);

    return _possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
  }

  _createClass(ElementBox, [{
    key: 'render',
    value: function render() {
      var style = flattenStyle(this.props.style) || {};
      var margin = resolveBoxStyle('margin', style);
      var padding = resolveBoxStyle('padding', style);
      var frameStyle = this.props.frame;
      if (margin) {
        frameStyle = {
          top: frameStyle.top - margin.top,
          left: frameStyle.left - margin.left,
          height: frameStyle.height + margin.top + margin.bottom,
          width: frameStyle.width + margin.left + margin.right
        };
      }
      var contentStyle = {
        width: this.props.frame.width,
        height: this.props.frame.height
      };
      if (padding) {
        contentStyle = {
          width: contentStyle.width - padding.left - padding.right,
          height: contentStyle.height - padding.top - padding.bottom
        };
      }
      return React.createElement(
        View,
        { style: [styles.frame, frameStyle], pointerEvents: 'none', __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        },
        React.createElement(
          BorderBox,
          { box: margin, style: styles.margin, __source: {
              fileName: _jsxFileName,
              lineNumber: 48
            }
          },
          React.createElement(
            BorderBox,
            { box: padding, style: styles.padding, __source: {
                fileName: _jsxFileName,
                lineNumber: 49
              }
            },
            React.createElement(View, { style: [styles.content, contentStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 50
              }
            })
          )
        )
      );
    }
  }]);

  return ElementBox;
}(React.Component));

var styles = StyleSheet.create({
  frame: {
    position: 'absolute'
  },
  content: {
    backgroundColor: 'rgba(200, 230, 255, 0.8)'
  },
  padding: {
    borderColor: 'rgba(77, 255, 0, 0.3)'
  },
  margin: {
    borderColor: 'rgba(255, 132, 0, 0.3)'
  }
});

module.exports = ElementBox;
}, 401, null, "ElementBox");
__d(/* BorderBox */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\BorderBox.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  BorderBox: {
    displayName: 'BorderBox'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/BorderBox.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var View = require(285   ); // 285 = View

var BorderBox = _wrapComponent('BorderBox')(function (_React$Component) {
  _inherits(BorderBox, _React$Component);

  function BorderBox() {
    _classCallCheck(this, BorderBox);

    return _possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
  }

  _createClass(BorderBox, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      if (!box) {
        return this.props.children;
      }
      var style = {
        borderTopWidth: box.top,
        borderBottomWidth: box.bottom,
        borderLeftWidth: box.left,
        borderRightWidth: box.right
      };
      return React.createElement(
        View,
        { style: [style, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 30
          }
        },
        this.props.children
      );
    }
  }]);

  return BorderBox;
}(React.Component));

module.exports = BorderBox;
}, 402, null, "BorderBox");
__d(/* resolveBoxStyle */function(global, require, module, exports) {
'use strict';

function resolveBoxStyle(prefix, style) {
  var res = {};
  var subs = ['top', 'left', 'bottom', 'right'];
  var set = false;
  subs.forEach(function (sub) {
    res[sub] = style[prefix] || 0;
  });
  if (style[prefix]) {
    set = true;
  }
  if (style[prefix + 'Vertical']) {
    res.top = res.bottom = style[prefix + 'Vertical'];
    set = true;
  }
  if (style[prefix + 'Horizontal']) {
    res.left = res.right = style[prefix + 'Horizontal'];
    set = true;
  }
  subs.forEach(function (sub) {
    var val = style[prefix + capFirst(sub)];
    if (val) {
      res[sub] = val;
      set = true;
    }
  });
  if (!set) {
    return;
  }
  return res;
}

function capFirst(text) {
  return text[0].toUpperCase() + text.slice(1);
}

module.exports = resolveBoxStyle;
}, 403, null, "resolveBoxStyle");
__d(/* InspectorPanel */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\InspectorPanel.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  InspectorPanel: {
    displayName: 'InspectorPanel'
  },
  Button: {
    displayName: 'Button'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/InspectorPanel.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ElementProperties = require(405                ); // 405 = ElementProperties
var NetworkOverlay = require(412             ); // 412 = NetworkOverlay
var PerformanceOverlay = require(415                 ); // 415 = PerformanceOverlay
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ScrollView = require(363         ); // 363 = ScrollView
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var TouchableHighlight = require(408                 ); // 408 = TouchableHighlight
var View = require(285   ); // 285 = View

var InspectorPanel = _wrapComponent('InspectorPanel')(function (_React$Component) {
  _inherits(InspectorPanel, _React$Component);

  function InspectorPanel() {
    _classCallCheck(this, InspectorPanel);

    return _possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
  }

  _createClass(InspectorPanel, [{
    key: 'renderWaiting',
    value: function renderWaiting() {
      if (this.props.inspecting) {
        return React.createElement(
          Text,
          { style: styles.waitingText, __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          },
          'Tap something to inspect it'
        );
      }
      return React.createElement(
        Text,
        { style: styles.waitingText, __source: {
            fileName: _jsxFileName,
            lineNumber: 34
          }
        },
        'Nothing is inspected'
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var contents = void 0;
      if (this.props.inspected) {
        contents = React.createElement(
          ScrollView,
          { style: styles.properties, __source: {
              fileName: _jsxFileName,
              lineNumber: 41
            }
          },
          React.createElement(ElementProperties, {
            style: this.props.inspected.style,
            frame: this.props.inspected.frame,
            source: this.props.inspected.source,
            hierarchy: this.props.hierarchy,
            selection: this.props.selection,
            setSelection: this.props.setSelection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          })
        );
      } else if (this.props.perfing) {
        contents = React.createElement(PerformanceOverlay, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        });
      } else if (this.props.networking) {
        contents = React.createElement(NetworkOverlay, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        });
      } else {
        contents = React.createElement(
          View,
          { style: styles.waiting, __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          },
          this.renderWaiting()
        );
      }
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        !this.props.devtoolsIsOpen && contents,
        React.createElement(
          View,
          { style: styles.buttonRow, __source: {
              fileName: _jsxFileName,
              lineNumber: 70
            }
          },
          React.createElement(Button, {
            title: 'Inspect',
            pressed: this.props.inspecting,
            onClick: this.props.setInspecting,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 71
            }
          }),
          React.createElement(Button, { title: 'Perf',
            pressed: this.props.perfing,
            onClick: this.props.setPerfing,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            }
          }),
          React.createElement(Button, { title: 'Network',
            pressed: this.props.networking,
            onClick: this.props.setNetworking,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 80
            }
          }),
          React.createElement(Button, { title: 'Touchables',
            pressed: this.props.touchTargetting,
            onClick: this.props.setTouchTargetting,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84
            }
          })
        )
      );
    }
  }]);

  return InspectorPanel;
}(React.Component));

InspectorPanel.propTypes = {
  devtoolsIsOpen: PropTypes.bool,
  inspecting: PropTypes.bool,
  setInspecting: PropTypes.func,
  inspected: PropTypes.object,
  perfing: PropTypes.bool,
  setPerfing: PropTypes.func,
  touchTargetting: PropTypes.bool,
  setTouchTargetting: PropTypes.func,
  networking: PropTypes.bool,
  setNetworking: PropTypes.func
};

var Button = _wrapComponent('Button')(function (_React$Component2) {
  _inherits(Button, _React$Component2);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  _createClass(Button, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            return _this3.props.onClick(!_this3.props.pressed);
          }, style: [styles.button, this.props.pressed && styles.buttonPressed], __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        },
        React.createElement(
          Text,
          { style: styles.buttonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 114
            }
          },
          this.props.title
        )
      );
    }
  }]);

  return Button;
}(React.Component));

var styles = StyleSheet.create({
  buttonRow: {
    flexDirection: 'row'
  },
  button: {
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    margin: 2,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center'
  },
  buttonPressed: {
    backgroundColor: 'rgba(255, 255, 255, 0.3)'
  },
  buttonText: {
    textAlign: 'center',
    color: 'white',
    margin: 5
  },
  container: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)'
  },
  properties: {
    height: 200
  },
  waiting: {
    height: 100
  },
  waitingText: {
    fontSize: 20,
    textAlign: 'center',
    marginVertical: 20,
    color: 'white'
  }
});

module.exports = InspectorPanel;
}, 404, null, "InspectorPanel");
__d(/* ElementProperties */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\ElementProperties.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ElementProperties: {
    displayName: 'ElementProperties'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/ElementProperties.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var BoxInspector = require(406           ); // 406 = BoxInspector
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var StyleInspector = require(407             ); // 407 = StyleInspector
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var TouchableHighlight = require(408                 ); // 408 = TouchableHighlight
var TouchableWithoutFeedback = require(346                       ); // 346 = TouchableWithoutFeedback
var View = require(285   ); // 285 = View

var flattenStyle = require(273           ); // 273 = flattenStyle
var mapWithSeparator = require(410               ); // 410 = mapWithSeparator
var openFileInEditor = require(411               ); // 411 = openFileInEditor

var ElementProperties = _wrapComponent('ElementProperties')((_temp = _class = function (_React$Component) {
  _inherits(ElementProperties, _React$Component);

  function ElementProperties() {
    _classCallCheck(this, ElementProperties);

    return _possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
  }

  _createClass(ElementProperties, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var style = flattenStyle(this.props.style);

      var selection = this.props.selection;
      var openFileButton = void 0;
      var source = this.props.source;

      var _ref = source || {},
          fileName = _ref.fileName,
          lineNumber = _ref.lineNumber;

      if (fileName && lineNumber) {
        var parts = fileName.split('/');
        var fileNameShort = parts[parts.length - 1];
        openFileButton = React.createElement(
          TouchableHighlight,
          {
            style: styles.openButton,
            onPress: openFileInEditor.bind(null, fileName, lineNumber), __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          },
          React.createElement(
            Text,
            { style: styles.openButtonTitle, numberOfLines: 1, __source: {
                fileName: _jsxFileName,
                lineNumber: 65
              }
            },
            fileNameShort,
            ':',
            lineNumber
          )
        );
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 74
          }
        },
        React.createElement(
          View,
          { style: styles.info, __source: {
              fileName: _jsxFileName,
              lineNumber: 75
            }
          },
          React.createElement(
            View,
            { style: styles.breadcrumb, __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            },
            mapWithSeparator(this.props.hierarchy, function (hierarchyItem, i) {
              return React.createElement(
                TouchableHighlight,
                {
                  key: 'item-' + i,
                  style: [styles.breadItem, i === selection && styles.selected],

                  onPress: function onPress() {
                    return _this2.props.setSelection(i);
                  }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                  }
                },
                React.createElement(
                  Text,
                  { style: styles.breadItemText, __source: {
                      fileName: _jsxFileName,
                      lineNumber: 85
                    }
                  },
                  hierarchyItem.name
                )
              );
            }, function (i) {
              return React.createElement(
                Text,
                { key: 'sep-' + i, style: styles.breadSep, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 91
                  }
                },
                '\u25B8'
              );
            })
          ),
          React.createElement(
            View,
            { style: styles.row, __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            },
            React.createElement(
              View,
              { style: styles.col, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 98
                }
              },
              React.createElement(StyleInspector, { style: style, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 99
                }
              }),
              openFileButton
            ),
            React.createElement(BoxInspector, { style: style, frame: this.props.frame, __source: {
                fileName: _jsxFileName,
                lineNumber: 104
              }
            })
          )
        )
      );
    }
  }]);

  return ElementProperties;
}(React.Component), _class.propTypes = {
  hierarchy: PropTypes.array.isRequired,
  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
  source: PropTypes.shape({
    fileName: PropTypes.string,
    lineNumber: PropTypes.number
  })
}, _temp));

var styles = StyleSheet.create({
  breadSep: {
    fontSize: 8,
    color: 'white'
  },
  breadcrumb: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'flex-start',
    marginBottom: 5
  },
  selected: {
    borderColor: 'white',
    borderRadius: 5
  },
  breadItem: {
    borderWidth: 1,
    borderColor: 'transparent',
    marginHorizontal: 2
  },
  breadItemText: {
    fontSize: 10,
    color: 'white',
    marginHorizontal: 5
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  col: {
    flex: 1
  },
  info: {
    padding: 10
  },
  openButton: {
    padding: 10,
    backgroundColor: '#000',
    marginVertical: 5,
    marginRight: 5,
    borderRadius: 2
  },
  openButtonTitle: {
    color: 'white',
    fontSize: 8
  }
});

module.exports = ElementProperties;
}, 405, null, "ElementProperties");
__d(/* BoxInspector */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\BoxInspector.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  BoxInspector: {
    displayName: 'BoxInspector'
  },
  BoxContainer: {
    displayName: 'BoxContainer'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/BoxInspector.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var View = require(285   ); // 285 = View
var resolveBoxStyle = require(403              ); // 403 = resolveBoxStyle

var blank = {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};

var BoxInspector = _wrapComponent('BoxInspector')(function (_React$Component) {
  _inherits(BoxInspector, _React$Component);

  function BoxInspector() {
    _classCallCheck(this, BoxInspector);

    return _possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
  }

  _createClass(BoxInspector, [{
    key: 'render',
    value: function render() {
      var frame = this.props.frame;
      var style = this.props.style;
      var margin = style && resolveBoxStyle('margin', style) || blank;
      var padding = style && resolveBoxStyle('padding', style) || blank;
      return React.createElement(
        BoxContainer,
        { title: 'margin', titleStyle: styles.marginLabel, box: margin, __source: {
            fileName: _jsxFileName,
            lineNumber: 34
          }
        },
        React.createElement(
          BoxContainer,
          { title: 'padding', box: padding, __source: {
              fileName: _jsxFileName,
              lineNumber: 35
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 36
              }
            },
            React.createElement(
              Text,
              { style: styles.innerText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 37
                }
              },
              '(',
              (frame.left || 0).toFixed(1),
              ', ',
              (frame.top || 0).toFixed(1),
              ')'
            ),
            React.createElement(
              Text,
              { style: styles.innerText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 40
                }
              },
              (frame.width || 0).toFixed(1),
              ' \xD7 ',
              (frame.height || 0).toFixed(1)
            )
          )
        )
      );
    }
  }]);

  return BoxInspector;
}(React.Component));

var BoxContainer = _wrapComponent('BoxContainer')(function (_React$Component2) {
  _inherits(BoxContainer, _React$Component2);

  function BoxContainer() {
    _classCallCheck(this, BoxContainer);

    return _possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
  }

  _createClass(BoxContainer, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      return React.createElement(
        View,
        { style: styles.box, __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        },
        React.createElement(
          View,
          { style: styles.row, __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          React.createElement(
            Text,
            { style: [this.props.titleStyle, styles.label], __source: {
                fileName: _jsxFileName,
                lineNumber: 56
              }
            },
            this.props.title
          ),
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 57
              }
            },
            box.top
          )
        ),
        React.createElement(
          View,
          { style: styles.row, __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          },
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            },
            box.left
          ),
          this.props.children,
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            box.right
          )
        ),
        React.createElement(
          Text,
          { style: styles.boxText, __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          box.bottom
        )
      );
    }
  }]);

  return BoxContainer;
}(React.Component));

var styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  marginLabel: {
    width: 60
  },
  label: {
    fontSize: 10,
    color: 'rgb(255,100,0)',
    marginLeft: 5,
    flex: 1,
    textAlign: 'left',
    top: -3
  },
  buffer: {
    fontSize: 10,
    color: 'yellow',
    flex: 1,
    textAlign: 'center'
  },
  innerText: {
    color: 'yellow',
    fontSize: 12,
    textAlign: 'center',
    width: 70
  },
  box: {
    borderWidth: 1,
    borderColor: 'grey'
  },
  boxText: {
    color: 'white',
    fontSize: 12,
    marginHorizontal: 3,
    marginVertical: 2,
    textAlign: 'center'
  }
});

module.exports = BoxInspector;
}, 406, null, "BoxInspector");
__d(/* StyleInspector */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\StyleInspector.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  StyleInspector: {
    displayName: 'StyleInspector'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/StyleInspector.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var View = require(285   ); // 285 = View

var StyleInspector = _wrapComponent('StyleInspector')(function (_React$Component) {
  _inherits(StyleInspector, _React$Component);

  function StyleInspector() {
    _classCallCheck(this, StyleInspector);

    return _possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
  }

  _createClass(StyleInspector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!this.props.style) {
        return React.createElement(
          Text,
          { style: styles.noStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          'No style'
        );
      }
      var names = Object.keys(this.props.style);
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 26
          }
        },
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          },
          names.map(function (name) {
            return React.createElement(
              Text,
              { key: name, style: styles.attr, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 28
                }
              },
              name,
              ':'
            );
          })
        ),
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          },
          names.map(function (name) {
            var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
            return React.createElement(
              Text,
              { key: name, style: styles.value, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 34
                }
              },
              value
            );
          })
        )
      );
    }
  }]);

  return StyleInspector;
}(React.Component));

var styles = StyleSheet.create({
  container: {
    flexDirection: 'row'
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  attr: {
    fontSize: 10,
    color: '#ccc'
  },
  value: {
    fontSize: 10,
    color: 'white',
    marginLeft: 10
  },
  noStyle: {
    color: 'white',
    fontSize: 10
  }
});

module.exports = StyleInspector;
}, 407, null, "StyleInspector");
__d(/* TouchableHighlight */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Touchable\\TouchableHighlight.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var ReactNativeViewAttributes = require(301                        ); // 301 = ReactNativeViewAttributes
var StyleSheet = require(314         ); // 314 = StyleSheet
var TimerMixin = require(347                ); // 347 = react-timer-mixin
var Touchable = require(338        ); // 338 = Touchable
var TouchableWithoutFeedback = require(346                       ); // 346 = TouchableWithoutFeedback
var View = require(285   ); // 285 = View
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var ensureComponentIsNative = require(391                      ); // 391 = ensureComponentIsNative
var ensurePositiveDelayProps = require(348                       ); // 348 = ensurePositiveDelayProps
var keyOf = require(409             ); // 409 = fbjs/lib/keyOf
var merge = require(305    ); // 305 = merge

var DEFAULT_PROPS = {
  activeOpacity: 0.85,
  underlayColor: 'black'
};

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableHighlight = createReactClass({
  displayName: 'TouchableHighlight',
  propTypes: _extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: PropTypes.number,

    underlayColor: ColorPropType,
    style: ViewPropTypes.style,

    onShowUnderlay: PropTypes.func,

    onHideUnderlay: PropTypes.func,

    hasTVPreferredFocus: PropTypes.bool,

    tvParallaxProperties: PropTypes.object
  }),

  mixins: [NativeMethodsMixin, TimerMixin, Touchable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return DEFAULT_PROPS;
  },

  _computeSyntheticState: function _computeSyntheticState(props) {
    return {
      activeProps: {
        style: {
          opacity: props.activeOpacity
        }
      },
      activeUnderlayProps: {
        style: {
          backgroundColor: props.underlayColor
        }
      },
      underlayStyle: [INACTIVE_UNDERLAY_PROPS.style, props.style],
      hasTVPreferredFocus: props.hasTVPreferredFocus
    };
  },

  getInitialState: function getInitialState() {
    this._isMounted = false;
    return merge(this.touchableGetInitialState(), this._computeSyntheticState(this.props));
  },

  componentDidMount: function componentDidMount() {
    this._isMounted = true;
    ensurePositiveDelayProps(this.props);
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentWillUnmount: function componentWillUnmount() {
    this._isMounted = false;
  },

  componentDidUpdate: function componentDidUpdate() {
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
    if (nextProps.activeOpacity !== this.props.activeOpacity || nextProps.underlayColor !== this.props.underlayColor || nextProps.style !== this.props.style) {
      this.setState(this._computeSyntheticState(nextProps));
    }
  },

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    this._showUnderlay();
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    if (!this._hideTimeout) {
      this._hideUnderlay();
    }
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.clearTimeout(this._hideTimeout);
    this._showUnderlay();
    this._hideTimeout = this.setTimeout(this._hideUnderlay, this.props.delayPressOut || 100);
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _showUnderlay: function _showUnderlay() {
    if (!this._isMounted || !this._hasPressHandler()) {
      return;
    }

    this.refs[UNDERLAY_REF].setNativeProps(this.state.activeUnderlayProps);
    this.refs[CHILD_REF].setNativeProps(this.state.activeProps);
    this.props.onShowUnderlay && this.props.onShowUnderlay();
  },

  _hideUnderlay: function _hideUnderlay() {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    if (this._hasPressHandler() && this.refs[UNDERLAY_REF]) {
      this.refs[CHILD_REF].setNativeProps(INACTIVE_CHILD_PROPS);
      this.refs[UNDERLAY_REF].setNativeProps(_extends({}, INACTIVE_UNDERLAY_PROPS, {
        style: this.state.underlayStyle
      }));
      this.props.onHideUnderlay && this.props.onHideUnderlay();
    }
  },

  _hasPressHandler: function _hasPressHandler() {
    return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
  },

  render: function render() {
    return React.createElement(
      View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        ref: UNDERLAY_REF,
        style: this.state.underlayStyle,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hasTVPreferredFocus: this.state.hasTVPreferredFocus,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        nativeID: this.props.nativeID,
        testID: this.props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 257
        }
      },
      React.cloneElement(React.Children.only(this.props.children), {
        ref: CHILD_REF
      }),
      Touchable.renderDebugView({ color: 'green', hitSlop: this.props.hitSlop })
    );
  }
});

var CHILD_REF = keyOf({ childRef: null });
var UNDERLAY_REF = keyOf({ underlayRef: null });
var INACTIVE_CHILD_PROPS = {
  style: StyleSheet.create({ x: { opacity: 1.0 } }).x
};
var INACTIVE_UNDERLAY_PROPS = {
  style: StyleSheet.create({ x: { backgroundColor: 'transparent' } }).x
};

module.exports = TouchableHighlight;
}, 408, null, "TouchableHighlight");
__d(/* fbjs/lib/keyOf.js */function(global, require, module, exports) {"use strict";

var keyOf = function keyOf(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
}, 409, null, "fbjs/lib/keyOf.js");
__d(/* mapWithSeparator */function(global, require, module, exports) {
'use strict';

function mapWithSeparator(items, itemRenderer, spacerRenderer) {
  var mapped = [];
  if (items.length > 0) {
    mapped.push(itemRenderer(items[0], 0, items));
    for (var ii = 1; ii < items.length; ii++) {
      mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
    }
  }
  return mapped;
}

module.exports = mapWithSeparator;
}, 410, null, "mapWithSeparator");
__d(/* openFileInEditor */function(global, require, module, exports) {
'use strict';

var getDevServer = require(216           ); // 216 = getDevServer

function openFileInEditor(file, lineNumber) {
  fetch(getDevServer().url + 'open-stack-frame', {
    method: 'POST',
    body: JSON.stringify({ file: file, lineNumber: lineNumber })
  });
}

module.exports = openFileInEditor;
}, 411, null, "openFileInEditor");
__d(/* NetworkOverlay */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\NetworkOverlay.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  NetworkOverlay: {
    displayName: 'NetworkOverlay'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ListView = require(379       ); // 379 = ListView
var React = require(286    ); // 286 = React
var ScrollView = require(363         ); // 363 = ScrollView
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var TouchableHighlight = require(408                 ); // 408 = TouchableHighlight
var View = require(285   ); // 285 = View
var WebSocketInterceptor = require(413                   ); // 413 = WebSocketInterceptor
var XHRInterceptor = require(414             ); // 414 = XHRInterceptor

var LISTVIEW_CELL_HEIGHT = 15;
var SEPARATOR_THICKNESS = 2;

var nextXHRId = 0;

var NetworkOverlay = _wrapComponent('NetworkOverlay')(function (_React$Component) {
  _inherits(NetworkOverlay, _React$Component);

  function NetworkOverlay(props) {
    _classCallCheck(this, NetworkOverlay);

    var _this = _possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

    _this._requests = [];
    _this._detailViewItems = [];
    _this._listViewDataSource = new ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
        return r1 !== r2;
      } });
    _this.state = {
      dataSource: _this._listViewDataSource.cloneWithRows([]),
      newDetailInfo: false,
      detailRowID: null
    };
    _this._listViewHighlighted = false;
    _this._listViewHeight = 0;
    _this._captureRequestListView = _this._captureRequestListView.bind(_this);
    _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
    _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
    _this._renderRow = _this._renderRow.bind(_this);
    _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
    _this._socketIdMap = {};
    _this._xhrIdMap = {};
    return _this;
  }

  _createClass(NetworkOverlay, [{
    key: '_enableXHRInterception',
    value: function _enableXHRInterception() {
      var _this2 = this;

      if (XHRInterceptor.isInterceptorEnabled()) {
        return;
      }

      XHRInterceptor.setOpenCallback(function (method, url, xhr) {
        xhr._index = nextXHRId++;
        var xhrIndex = _this2._requests.length;
        _this2._xhrIdMap[xhr._index] = xhrIndex;

        var _xhr = {
          'type': 'XMLHttpRequest',
          'method': method,
          'url': url
        };
        _this2._requests.push(_xhr);
        _this2._detailViewItems.push([]);
        _this2._genDetailViewItem(xhrIndex);
        _this2.setState({ dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests) }, _this2._scrollToBottom());
      });

      XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        if (!networkInfo.requestHeaders) {
          networkInfo.requestHeaders = {};
        }
        networkInfo.requestHeaders[header] = value;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setSendCallback(function (data, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        _this2._requests[xhrIndex].dataSent = data;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.responseContentType = type;
        networkInfo.responseSize = size;
        networkInfo.responseHeaders = responseHeaders;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.status = status;
        networkInfo.timeout = timeout;
        networkInfo.response = response;
        networkInfo.responseURL = responseURL;
        networkInfo.responseType = responseType;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.enableInterception();
    }
  }, {
    key: '_enableWebSocketInterception',
    value: function _enableWebSocketInterception() {
      var _this3 = this;

      if (WebSocketInterceptor.isInterceptorEnabled()) {
        return;
      }

      WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
        var socketIndex = _this3._requests.length;
        _this3._socketIdMap[socketId] = socketIndex;
        var _webSocket = {
          'type': 'WebSocket',
          'url': url,
          'protocols': protocols
        };
        _this3._requests.push(_webSocket);
        _this3._detailViewItems.push([]);
        _this3._genDetailViewItem(socketIndex);
        _this3.setState({ dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests) }, _this3._scrollToBottom());
      });

      WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (statusCode !== null && closeReason !== null) {
          _this3._requests[socketIndex].status = statusCode;
          _this3._requests[socketIndex].closeReason = closeReason;
        }
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setSendCallback(function (data, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverClose = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverError = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.enableInterception();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._enableXHRInterception();
      this._enableWebSocketInterception();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      XHRInterceptor.disableInterception();
      WebSocketInterceptor.disableInterception();
    }
  }, {
    key: '_renderRow',
    value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
      var _this4 = this;

      var urlCellViewStyle = styles.urlEvenCellView;
      var methodCellViewStyle = styles.methodEvenCellView;
      if (rowID % 2 === 1) {
        urlCellViewStyle = styles.urlOddCellView;
        methodCellViewStyle = styles.methodOddCellView;
      }
      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            _this4._pressRow(rowID);
            highlightRow(sectionID, rowID);
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 302
          }
        },
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 306
            }
          },
          React.createElement(
            View,
            { style: styles.tableRow, __source: {
                fileName: _jsxFileName,
                lineNumber: 307
              }
            },
            React.createElement(
              View,
              { style: urlCellViewStyle, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 308
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 309
                  }
                },
                rowData.url
              )
            ),
            React.createElement(
              View,
              { style: methodCellViewStyle, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 313
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 314
                  }
                },
                this._getTypeShortName(rowData.type)
              )
            )
          )
        )
      );
    }
  }, {
    key: '_renderSeperator',
    value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
      return React.createElement(View, {
        key: sectionID + '-' + rowID,
        style: {
          height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
          backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 329
        }
      });
    }
  }, {
    key: '_scrollToBottom',
    value: function _scrollToBottom() {
      if (this._listView) {
        var scrollResponder = this._listView.getScrollResponder();
        if (scrollResponder) {
          var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
          scrollResponder.scrollResponderScrollTo({
            x: 0,
            y: scrollY,
            animated: true
          });
        }
      }
    }
  }, {
    key: '_captureRequestListView',
    value: function _captureRequestListView(listRef) {
      this._listView = listRef;
    }
  }, {
    key: '_listViewOnLayout',
    value: function _listViewOnLayout(event) {
      var height = event.nativeEvent.layout.height;

      this._listViewHeight = height;
    }
  }, {
    key: '_pressRow',
    value: function _pressRow(rowID) {
      this._listViewHighlighted = true;
      this.setState({ detailRowID: rowID }, this._scrollToTop());
    }
  }, {
    key: '_scrollToTop',
    value: function _scrollToTop() {
      if (this._scrollView) {
        this._scrollView.scrollTo({
          y: 0,
          animated: false
        });
      }
    }
  }, {
    key: '_captureDetailScrollView',
    value: function _captureDetailScrollView(scrollRef) {
      this._scrollView = scrollRef;
    }
  }, {
    key: '_closeButtonClicked',
    value: function _closeButtonClicked() {
      this.setState({ detailRowID: null });
    }
  }, {
    key: '_getStringByValue',
    value: function _getStringByValue(value) {
      if (value === undefined) {
        return 'undefined';
      }
      if (typeof value === 'object') {
        return JSON.stringify(value);
      }
      if (typeof value === 'string' && value.length > 500) {
        return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
      }
      return value;
    }
  }, {
    key: '_getRequestIndexByXHRID',
    value: function _getRequestIndexByXHRID(index) {
      if (index === undefined) {
        return -1;
      }
      var xhrIndex = this._xhrIdMap[index];
      if (xhrIndex === undefined) {
        return -1;
      } else {
        return xhrIndex;
      }
    }
  }, {
    key: '_getTypeShortName',
    value: function _getTypeShortName(type) {
      if (type === 'XMLHttpRequest') {
        return 'XHR';
      } else if (type === 'WebSocket') {
        return 'WS';
      }

      return '';
    }
  }, {
    key: '_genDetailViewItem',
    value: function _genDetailViewItem(index) {
      this._detailViewItems[index] = [];
      var detailViewItem = this._detailViewItems[index];
      var requestItem = this._requests[index];
      for (var _key in requestItem) {
        detailViewItem.push(React.createElement(
          View,
          { style: styles.detailViewRow, key: _key, __source: {
              fileName: _jsxFileName,
              lineNumber: 444
            }
          },
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailKeyCellView], __source: {
                fileName: _jsxFileName,
                lineNumber: 445
              }
            },
            _key
          ),
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailValueCellView], __source: {
                fileName: _jsxFileName,
                lineNumber: 448
              }
            },
            this._getStringByValue(requestItem[_key])
          )
        ));
      }

      if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
        this.setState({ newDetailInfo: true });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 463
          }
        },
        this.state.detailRowID != null && React.createElement(
          TouchableHighlight,
          {
            style: styles.closeButton,
            onPress: this._closeButtonClicked, __source: {
              fileName: _jsxFileName,
              lineNumber: 465
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 468
              }
            },
            React.createElement(
              Text,
              { style: styles.clostButtonText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 469
                }
              },
              'v'
            )
          )
        ),
        this.state.detailRowID != null && React.createElement(
          ScrollView,
          {
            style: styles.detailScrollView,
            ref: this._captureDetailScrollView, __source: {
              fileName: _jsxFileName,
              lineNumber: 473
            }
          },
          this._detailViewItems[this.state.detailRowID]
        ),
        React.createElement(
          View,
          { style: styles.listViewTitle, __source: {
              fileName: _jsxFileName,
              lineNumber: 478
            }
          },
          this._requests.length > 0 && React.createElement(
            View,
            { style: styles.tableRow, __source: {
                fileName: _jsxFileName,
                lineNumber: 480
              }
            },
            React.createElement(
              View,
              { style: styles.urlTitleCellView, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 481
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 482
                  }
                },
                'URL'
              )
            ),
            React.createElement(
              View,
              { style: styles.methodTitleCellView, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 484
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 485
                  }
                },
                'Type'
              )
            )
          )
        ),
        React.createElement(ListView, {
          style: styles.listView,
          ref: this._captureRequestListView,
          dataSource: this.state.dataSource,
          renderRow: this._renderRow,
          enableEmptySections: true,
          renderSeparator: this._renderSeperator,
          onLayout: this._listViewOnLayout,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 489
          }
        })
      );
    }
  }]);

  return NetworkOverlay;
}(React.Component));

var styles = StyleSheet.create({
  container: {
    paddingTop: 10,
    paddingBottom: 10,
    paddingLeft: 5,
    paddingRight: 5
  },
  listViewTitle: {
    height: 20
  },
  listView: {
    flex: 1,
    height: 60
  },
  tableRow: {
    flexDirection: 'row',
    flex: 1
  },
  cellText: {
    color: 'white',
    fontSize: 12
  },
  methodTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 1
  },
  urlTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 5,
    paddingLeft: 3
  },
  methodOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 1
  },
  urlOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 5,
    paddingLeft: 3
  },
  methodEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 1
  },
  urlEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 5,
    paddingLeft: 3
  },
  detailScrollView: {
    flex: 1,
    height: 180,
    marginTop: 5,
    marginBottom: 5
  },
  detailKeyCellView: {
    flex: 1.3
  },
  detailValueCellView: {
    flex: 2
  },
  detailViewRow: {
    flexDirection: 'row',
    paddingHorizontal: 3
  },
  detailViewText: {
    color: 'white',
    fontSize: 11
  },
  clostButtonText: {
    color: 'white',
    fontSize: 10
  },
  closeButton: {
    marginTop: 5,
    backgroundColor: '#888',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

module.exports = NetworkOverlay;
}, 412, null, "NetworkOverlay");
__d(/* WebSocketInterceptor */function(global, require, module, exports) {
'use strict';

var RCTWebSocketModule = require(184            ).WebSocketModule; // 184 = NativeModules
var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter

var base64 = require(245        ); // 245 = base64-js

var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
var originalRCTWebSocketSend = RCTWebSocketModule.send;
var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
var originalRCTWebSocketClose = RCTWebSocketModule.close;

var eventEmitter = void 0;
var subscriptions = void 0;

var closeCallback = void 0;
var sendCallback = void 0;
var connectCallback = void 0;
var onOpenCallback = void 0;
var onMessageCallback = void 0;
var onErrorCallback = void 0;
var onCloseCallback = void 0;

var _isInterceptorEnabled = false;

var WebSocketInterceptor = {
  setCloseCallback: function setCloseCallback(callback) {
    closeCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setConnectCallback: function setConnectCallback(callback) {
    connectCallback = callback;
  },
  setOnOpenCallback: function setOnOpenCallback(callback) {
    onOpenCallback = callback;
  },
  setOnMessageCallback: function setOnMessageCallback(callback) {
    onMessageCallback = callback;
  },
  setOnErrorCallback: function setOnErrorCallback(callback) {
    onErrorCallback = callback;
  },
  setOnCloseCallback: function setOnCloseCallback(callback) {
    onCloseCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  _unregisterEvents: function _unregisterEvents() {
    subscriptions.forEach(function (e) {
      return e.remove();
    });
    subscriptions = [];
  },
  _registerEvents: function _registerEvents() {
    subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
      if (onMessageCallback) {
        onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
      }
    }), eventEmitter.addListener('websocketOpen', function (ev) {
      if (onOpenCallback) {
        onOpenCallback(ev.id);
      }
    }), eventEmitter.addListener('websocketClosed', function (ev) {
      if (onCloseCallback) {
        onCloseCallback(ev.id, { code: ev.code, reason: ev.reason });
      }
    }), eventEmitter.addListener('websocketFailed', function (ev) {
      if (onErrorCallback) {
        onErrorCallback(ev.id, { message: ev.message });
      }
    })];
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }
    eventEmitter = new NativeEventEmitter(RCTWebSocketModule);
    WebSocketInterceptor._registerEvents();

    RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
      if (connectCallback) {
        connectCallback(url, protocols, options, socketId);
      }
      originalRCTWebSocketConnect.apply(this, arguments);
    };

    RCTWebSocketModule.send = function (data, socketId) {
      if (sendCallback) {
        sendCallback(data, socketId);
      }
      originalRCTWebSocketSend.apply(this, arguments);
    };

    RCTWebSocketModule.sendBinary = function (data, socketId) {
      if (sendCallback) {
        sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
      }
      originalRCTWebSocketSendBinary.apply(this, arguments);
    };

    RCTWebSocketModule.close = function () {
      if (closeCallback) {
        if (arguments.length === 3) {
          closeCallback(arguments[0], arguments[1], arguments[2]);
        } else {
          closeCallback(null, null, arguments[0]);
        }
      }
      originalRCTWebSocketClose.apply(this, arguments);
    };

    _isInterceptorEnabled = true;
  },
  _arrayBufferToString: function _arrayBufferToString(data) {
    var value = base64.toByteArray(data).buffer;
    if (value === undefined || value === null) {
      return '(no value)';
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
      return 'ArrayBuffer {' + String(Array.from(new Uint8Array(value))) + '}';
    }
    return value;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    RCTWebSocketModule.send = originalRCTWebSocketSend;
    RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
    RCTWebSocketModule.close = originalRCTWebSocketClose;
    RCTWebSocketModule.connect = originalRCTWebSocketConnect;

    connectCallback = null;
    closeCallback = null;
    sendCallback = null;
    onOpenCallback = null;
    onMessageCallback = null;
    onCloseCallback = null;
    onErrorCallback = null;

    WebSocketInterceptor._unregisterEvents();
  }
};

module.exports = WebSocketInterceptor;
}, 413, null, "WebSocketInterceptor");
__d(/* XHRInterceptor */function(global, require, module, exports) {
'use strict';

var XMLHttpRequest = require(235             ); // 235 = XMLHttpRequest
var originalXHROpen = XMLHttpRequest.prototype.open;
var originalXHRSend = XMLHttpRequest.prototype.send;
var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;

var openCallback;
var sendCallback;
var requestHeaderCallback;
var headerReceivedCallback;
var responseCallback;

var _isInterceptorEnabled = false;

var XHRInterceptor = {
  setOpenCallback: function setOpenCallback(callback) {
    openCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
    headerReceivedCallback = callback;
  },
  setResponseCallback: function setResponseCallback(callback) {
    responseCallback = callback;
  },
  setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
    requestHeaderCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }

    XMLHttpRequest.prototype.open = function (method, url) {
      if (openCallback) {
        openCallback(method, url, this);
      }
      originalXHROpen.apply(this, arguments);
    };

    XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
      if (requestHeaderCallback) {
        requestHeaderCallback(header, value, this);
      }
      originalXHRSetRequestHeader.apply(this, arguments);
    };

    XMLHttpRequest.prototype.send = function (data) {
      var _this = this;

      if (sendCallback) {
        sendCallback(data, this);
      }
      if (this.addEventListener) {
        this.addEventListener('readystatechange', function () {
          if (!_isInterceptorEnabled) {
            return;
          }
          if (_this.readyState === _this.HEADERS_RECEIVED) {
            var contentTypeString = _this.getResponseHeader('Content-Type');
            var contentLengthString = _this.getResponseHeader('Content-Length');
            var responseContentType = void 0,
                responseSize = void 0;
            if (contentTypeString) {
              responseContentType = contentTypeString.split(';')[0];
            }
            if (contentLengthString) {
              responseSize = parseInt(contentLengthString, 10);
            }
            if (headerReceivedCallback) {
              headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
            }
          }
          if (_this.readyState === _this.DONE) {
            if (responseCallback) {
              responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
            }
          }
        }, false);
      }
      originalXHRSend.apply(this, arguments);
    };
    _isInterceptorEnabled = true;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    XMLHttpRequest.prototype.send = originalXHRSend;
    XMLHttpRequest.prototype.open = originalXHROpen;
    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
    responseCallback = null;
    openCallback = null;
    sendCallback = null;
    headerReceivedCallback = null;
    requestHeaderCallback = null;
  }
};

module.exports = XHRInterceptor;
}, 414, null, "XHRInterceptor");
__d(/* PerformanceOverlay */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Inspector\\PerformanceOverlay.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  PerformanceOverlay: {
    displayName: 'PerformanceOverlay'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var PerformanceLogger = require(265                ); // 265 = PerformanceLogger
var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var View = require(285   ); // 285 = View

var PerformanceOverlay = _wrapComponent('PerformanceOverlay')(function (_React$Component) {
  _inherits(PerformanceOverlay, _React$Component);

  function PerformanceOverlay() {
    _classCallCheck(this, PerformanceOverlay);

    return _possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
  }

  _createClass(PerformanceOverlay, [{
    key: 'render',
    value: function render() {
      var perfLogs = PerformanceLogger.getTimespans();
      var items = [];

      for (var key in perfLogs) {
        if (perfLogs[key].totalTime) {
          var unit = key === 'BundleSize' ? 'b' : 'ms';
          items.push(React.createElement(
            View,
            { style: styles.row, key: key, __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            React.createElement(
              Text,
              { style: [styles.text, styles.label], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 30
                }
              },
              key
            ),
            React.createElement(
              Text,
              { style: [styles.text, styles.totalTime], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 31
                }
              },
              perfLogs[key].totalTime + unit
            )
          ));
        }
      }

      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 40
          }
        },
        items
      );
    }
  }]);

  return PerformanceOverlay;
}(React.Component));

var styles = StyleSheet.create({
  container: {
    height: 100,
    paddingTop: 10
  },
  label: {
    flex: 1
  },
  row: {
    flexDirection: 'row',
    paddingHorizontal: 10
  },
  text: {
    color: 'white',
    fontSize: 12
  },
  totalTime: {
    paddingRight: 100
  }
});

module.exports = PerformanceOverlay;
}, 415, null, "PerformanceOverlay");
__d(/* YellowBox */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\ReactNative\\YellowBox.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _components = {
  YellowBox: {
    displayName: 'YellowBox'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/ReactNative/YellowBox.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var EventEmitter = require(203           ); // 203 = EventEmitter
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet

var infoLog = require(266      ); // 266 = infoLog
var openFileInEditor = require(411               ); // 411 = openFileInEditor
var parseErrorStack = require(196              ); // 196 = parseErrorStack
var symbolicateStackTrace = require(215                    ); // 215 = symbolicateStackTrace

var _warningEmitter = new EventEmitter();
var _warningMap = new Map();
var IGNORED_WARNINGS = [];

if (__DEV__) {
  var _console = console,
      error = _console.error,
      warn = _console.warn;


  console.error = function () {
    error.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
      updateWarningMap.apply(null, arguments);
    }
  };

  console.warn = function () {
    warn.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('(ADVICE)')) {
      return;
    }

    updateWarningMap.apply(null, arguments);
  };

  if (Platform.isTesting) {
    console.disableYellowBox = true;
  }
}

function sprintf(format) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var index = 0;
  return format.replace(/%s/g, function (match) {
    return args[index++];
  });
}

function updateWarningMap(format) {
  if (console.disableYellowBox) {
    return;
  }
  var stringifySafe = require(190            ); // 190 = stringifySafe

  format = String(format);
  var argCount = (format.match(/%s/g) || []).length;

  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var warning = [sprintf.apply(undefined, [format].concat(_toConsumableArray(args.slice(0, argCount))))].concat(_toConsumableArray(args.slice(argCount).map(stringifySafe))).join(' ');

  var warningInfo = _warningMap.get(warning);
  if (warningInfo) {
    warningInfo.count += 1;
  } else {
    var _error = new Error();
    _error.framesToPop = 2;

    _warningMap.set(warning, {
      count: 1,
      stacktrace: parseErrorStack(_error),
      symbolicated: false
    });
  }

  _warningEmitter.emit('warning', _warningMap);
}

function ensureSymbolicatedWarning(warning) {
  var prevWarningInfo = _warningMap.get(warning);
  if (!prevWarningInfo || prevWarningInfo.symbolicated) {
    return;
  }
  prevWarningInfo.symbolicated = true;

  symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      nextWarningInfo.stacktrace = stack;
      _warningEmitter.emit('warning', _warningMap);
    }
  }, function (error) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      infoLog('Failed to symbolicate warning, "%s":', warning, error);
      _warningEmitter.emit('warning', _warningMap);
    }
  });
}

function isWarningIgnored(warning) {
  var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
    return warning.startsWith(ignoredWarning);
  });

  if (isIgnored) {
    return true;
  }

  return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
    return warning.startsWith(String(ignorePrefix));
  });
}

var WarningRow = function WarningRow(_ref) {
  var count = _ref.count,
      warning = _ref.warning,
      onPress = _ref.onPress;

  var Text = require(337   ); // 337 = Text
  var TouchableHighlight = require(408                 ); // 408 = TouchableHighlight
  var View = require(285   ); // 285 = View

  var countText = count > 1 ? React.createElement(
    Text,
    { style: styles.listRowCount, __source: {
        fileName: _jsxFileName,
        lineNumber: 185
      }
    },
    '(' + count + ') '
  ) : null;

  return React.createElement(
    View,
    { style: styles.listRow, __source: {
        fileName: _jsxFileName,
        lineNumber: 189
      }
    },
    React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        onPress: onPress,
        style: styles.listRowContent,
        underlayColor: 'transparent', __source: {
          fileName: _jsxFileName,
          lineNumber: 190
        }
      },
      React.createElement(
        Text,
        { style: styles.listRowText, numberOfLines: 2, __source: {
            fileName: _jsxFileName,
            lineNumber: 195
          }
        },
        countText,
        warning
      )
    )
  );
};

var StackRow = function StackRow(_ref2) {
  var frame = _ref2.frame;

  var Text = require(337   ); // 337 = Text
  var TouchableHighlight = require(408                 ); // 408 = TouchableHighlight
  var file = frame.file,
      lineNumber = frame.lineNumber;

  var fileName = void 0;
  if (file) {
    var fileParts = file.split('/');
    fileName = fileParts[fileParts.length - 1];
  } else {
    fileName = '<unknown file>';
  }

  return React.createElement(
    TouchableHighlight,
    {
      activeOpacity: 0.5,
      style: styles.openInEditorButton,
      underlayColor: 'transparent',
      onPress: openFileInEditor.bind(null, file, lineNumber), __source: {
        fileName: _jsxFileName,
        lineNumber: 218
      }
    },
    React.createElement(
      Text,
      { style: styles.inspectorCountText, __source: {
          fileName: _jsxFileName,
          lineNumber: 223
        }
      },
      fileName,
      ':',
      lineNumber
    )
  );
};

var WarningInspector = function WarningInspector(_ref3) {
  var warningInfo = _ref3.warningInfo,
      warning = _ref3.warning,
      stacktraceVisible = _ref3.stacktraceVisible,
      onDismiss = _ref3.onDismiss,
      onDismissAll = _ref3.onDismissAll,
      onMinimize = _ref3.onMinimize,
      toggleStacktrace = _ref3.toggleStacktrace;

  var ScrollView = require(363         ); // 363 = ScrollView
  var Text = require(337   ); // 337 = Text
  var TouchableHighlight = require(408                 ); // 408 = TouchableHighlight
  var View = require(285   ); // 285 = View

  var _ref4 = warningInfo || {},
      count = _ref4.count,
      stacktrace = _ref4.stacktrace;

  var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';

  var stacktraceList = void 0;
  if (stacktraceVisible && stacktrace) {
    stacktraceList = React.createElement(
      View,
      { style: styles.stacktraceList, __source: {
          fileName: _jsxFileName,
          lineNumber: 251
        }
      },
      stacktrace.map(function (frame, ii) {
        return React.createElement(StackRow, { frame: frame, key: ii, __source: {
            fileName: _jsxFileName,
            lineNumber: 252
          }
        });
      })
    );
  }

  return React.createElement(
    View,
    { style: styles.inspector, __source: {
        fileName: _jsxFileName,
        lineNumber: 258
      }
    },
    React.createElement(
      View,
      { style: styles.inspectorCount, __source: {
          fileName: _jsxFileName,
          lineNumber: 259
        }
      },
      React.createElement(
        Text,
        { style: styles.inspectorCountText, __source: {
            fileName: _jsxFileName,
            lineNumber: 260
          }
        },
        countSentence
      ),
      React.createElement(
        TouchableHighlight,
        { onPress: toggleStacktrace, underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 261
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 262
            }
          },
          stacktraceVisible ? '\u25BC' : '\u25B6',
          ' Stacktrace'
        )
      )
    ),
    React.createElement(
      ScrollView,
      { style: styles.inspectorWarning, __source: {
          fileName: _jsxFileName,
          lineNumber: 267
        }
      },
      stacktraceList,
      React.createElement(
        Text,
        { style: styles.inspectorWarningText, __source: {
            fileName: _jsxFileName,
            lineNumber: 269
          }
        },
        warning
      )
    ),
    React.createElement(
      View,
      { style: styles.inspectorButtons, __source: {
          fileName: _jsxFileName,
          lineNumber: 271
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onMinimize,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 272
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 277
            }
          },
          'Minimize'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismiss,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 281
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 286
            }
          },
          'Dismiss'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismissAll,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 290
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 295
            }
          },
          'Dismiss All'
        )
      )
    )
  );
};

var YellowBox = _wrapComponent('YellowBox')(function (_React$Component) {
  _inherits(YellowBox, _React$Component);

  function YellowBox(props, context) {
    _classCallCheck(this, YellowBox);

    var _this = _possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

    _this.state = {
      inspecting: null,
      stacktraceVisible: false,
      warningMap: _warningMap
    };
    _this.dismissWarning = function (warning) {
      var _this$state = _this.state,
          inspecting = _this$state.inspecting,
          warningMap = _this$state.warningMap;

      if (warning) {
        warningMap.delete(warning);
      } else {
        warningMap.clear();
      }
      _this.setState({
        inspecting: warning && inspecting !== warning ? inspecting : null,
        warningMap: warningMap
      });
    };
    return _this;
  }

  _createClass(YellowBox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var scheduled = null;
      this._listener = _warningEmitter.addListener('warning', function (warningMap) {
        scheduled = scheduled || setImmediate(function () {
          scheduled = null;
          _this2.setState({
            warningMap: warningMap
          });
        });
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var inspecting = this.state.inspecting;

      if (inspecting != null) {
        ensureSymbolicatedWarning(inspecting);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._listener) {
        this._listener.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (console.disableYellowBox || this.state.warningMap.size === 0) {
        return null;
      }
      var ScrollView = require(363         ); // 363 = ScrollView
      var View = require(285   ); // 285 = View

      var _state = this.state,
          inspecting = _state.inspecting,
          stacktraceVisible = _state.stacktraceVisible;

      var inspector = inspecting !== null ? React.createElement(WarningInspector, {
        warningInfo: this.state.warningMap.get(inspecting),
        warning: inspecting,
        stacktraceVisible: stacktraceVisible,
        onDismiss: function onDismiss() {
          return _this3.dismissWarning(inspecting);
        },
        onDismissAll: function onDismissAll() {
          return _this3.dismissWarning(null);
        },
        onMinimize: function onMinimize() {
          return _this3.setState({ inspecting: null });
        },
        toggleStacktrace: function toggleStacktrace() {
          return _this3.setState({ stacktraceVisible: !stacktraceVisible });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 378
        }
      }) : null;

      var rows = [];
      this.state.warningMap.forEach(function (warningInfo, warning) {
        if (!isWarningIgnored(warning)) {
          rows.push(React.createElement(WarningRow, {
            key: warning,
            count: warningInfo.count,
            warning: warning,
            onPress: function onPress() {
              return _this3.setState({ inspecting: warning });
            },
            onDismiss: function onDismiss() {
              return _this3.dismissWarning(warning);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 393
            }
          }));
        }
      });

      var listStyle = [styles.list, { height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight) }];
      return React.createElement(
        View,
        { style: inspector ? styles.fullScreen : listStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 410
          }
        },
        React.createElement(
          ScrollView,
          { style: listStyle, scrollsToTop: false, __source: {
              fileName: _jsxFileName,
              lineNumber: 411
            }
          },
          rows
        ),
        inspector
      );
    }
  }], [{
    key: 'ignoreWarnings',
    value: function ignoreWarnings(warnings) {
      warnings.forEach(function (warning) {
        if (IGNORED_WARNINGS.indexOf(warning) === -1) {
          IGNORED_WARNINGS.push(warning);
        }
      });
    }
  }]);

  return YellowBox;
}(React.Component));

var backgroundColor = function backgroundColor(opacity) {
  return 'rgba(250, 186, 48, ' + opacity + ')';
};
var textColor = 'white';
var rowGutter = 1;
var rowHeight = 46;

var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;

var styles = StyleSheet.create({
  fullScreen: {
    height: '100%',
    width: '100%',
    elevation: elevation,
    position: 'absolute'
  },
  inspector: {
    backgroundColor: backgroundColor(0.95),
    height: '100%',
    paddingTop: 5,
    elevation: elevation
  },
  inspectorButtons: {
    flexDirection: 'row'
  },
  inspectorButton: {
    flex: 1,
    paddingVertical: 22,
    backgroundColor: backgroundColor(1)
  },
  stacktraceList: {
    paddingBottom: 5
  },
  inspectorButtonText: {
    color: textColor,
    fontSize: 14,
    opacity: 0.8,
    textAlign: 'center'
  },
  openInEditorButton: {
    paddingTop: 5,
    paddingBottom: 5
  },
  inspectorCount: {
    padding: 15,
    paddingBottom: 0,
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  inspectorCountText: {
    color: textColor,
    fontSize: 14
  },
  inspectorWarning: {
    flex: 1,
    paddingHorizontal: 15
  },
  inspectorWarningText: {
    color: textColor,
    fontSize: 16,
    fontWeight: '600'
  },
  list: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    elevation: elevation
  },
  listRow: {
    backgroundColor: backgroundColor(0.95),
    height: rowHeight,
    marginTop: rowGutter
  },
  listRowContent: {
    flex: 1
  },
  listRowCount: {
    color: 'rgba(255, 255, 255, 0.5)'
  },
  listRowText: {
    color: textColor,
    position: 'absolute',
    left: 0,
    top: Platform.OS === 'android' ? 5 : 7,
    marginLeft: 15,
    marginRight: 15
  }
});

module.exports = YellowBox;
}, 416, null, "YellowBox");
__d(/* I18nManager */function(global, require, module, exports) {
'use strict';

var I18nManager = require(184            ).I18nManager || { // 184 = NativeModules
  isRTL: false,
  allowRTL: function allowRTL() {},
  forceRTL: function forceRTL() {}
};

module.exports = I18nManager;
}, 417, null, "I18nManager");
__d(/* NavigatorIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(313                ); // 313 = UnimplementedView
}, 418, null, "NavigatorIOS");
__d(/* Picker */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _class2,
    _temp2,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Picker\\Picker.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  PickerItem: {
    displayName: 'PickerItem'
  },
  Picker: {
    displayName: 'Picker'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/Picker/Picker.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ColorPropType = require(208            ); // 208 = ColorPropType
var PickerIOS = require(420        ); // 420 = PickerIOS
var PickerAndroid = require(421            ); // 421 = PickerAndroid
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheetPropType = require(309                 ); // 309 = StyleSheetPropType
var TextStylePropTypes = require(295                 ); // 295 = TextStylePropTypes
var UnimplementedView = require(313                ); // 313 = UnimplementedView
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var itemStylePropType = StyleSheetPropType(TextStylePropTypes);

var pickerStyleType = StyleSheetPropType(_extends({}, ViewStylePropTypes, {
  color: ColorPropType
}));

var MODE_DIALOG = 'dialog';
var MODE_DROPDOWN = 'dropdown';

var PickerItem = _wrapComponent('PickerItem')((_temp = _class = function (_React$Component) {
  _inherits(PickerItem, _React$Component);

  function PickerItem() {
    _classCallCheck(this, PickerItem);

    return _possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
  }

  _createClass(PickerItem, [{
    key: 'render',
    value: function render() {
      throw null;
    }
  }]);

  return PickerItem;
}(React.Component), _class.propTypes = {
  label: PropTypes.string.isRequired,

  value: PropTypes.any,

  color: ColorPropType,

  testID: PropTypes.string
}, _temp));

var Picker = _wrapComponent('Picker')((_temp2 = _class2 = function (_React$Component2) {
  _inherits(Picker, _React$Component2);

  function Picker() {
    _classCallCheck(this, Picker);

    return _possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
  }

  _createClass(Picker, [{
    key: 'render',
    value: function render() {
      if (Platform.OS === 'ios') {
        return React.createElement(
          PickerIOS,
          _extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 161
            }
          }),
          this.props.children
        );
      } else if (Platform.OS === 'android') {
        return React.createElement(
          PickerAndroid,
          _extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 164
            }
          }),
          this.props.children
        );
      } else {
        return React.createElement(UnimplementedView, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 166
          }
        });
      }
    }
  }]);

  return Picker;
}(React.Component), _class2.MODE_DIALOG = MODE_DIALOG, _class2.MODE_DROPDOWN = MODE_DROPDOWN, _class2.Item = PickerItem, _class2.defaultProps = {
  mode: MODE_DIALOG
}, _class2.propTypes = _extends({}, ViewPropTypes, {
  style: pickerStyleType,

  selectedValue: PropTypes.any,

  onValueChange: PropTypes.func,

  enabled: PropTypes.bool,

  mode: PropTypes.oneOf(['dialog', 'dropdown']),

  itemStyle: itemStylePropType,

  prompt: PropTypes.string,

  testID: PropTypes.string
}), _temp2));

module.exports = Picker;
}, 419, null, "Picker");
__d(/* PickerIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(313                ); // 313 = UnimplementedView
}, 420, null, "PickerIOS");
__d(/* PickerAndroid */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _initialiseProps,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Picker\\PickerAndroid.android.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  PickerAndroid: {
    displayName: 'PickerAndroid'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ColorPropType = require(208            ); // 208 = ColorPropType
var React = require(286    ); // 286 = React
var ReactPropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(314         ); // 314 = StyleSheet
var StyleSheetPropType = require(309                 ); // 309 = StyleSheetPropType
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes
var ViewStylePropTypes = require(296                 ); // 296 = ViewStylePropTypes

var processColor = require(297           ); // 297 = processColor
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var REF_PICKER = 'picker';
var MODE_DROPDOWN = 'dropdown';

var pickerStyleType = StyleSheetPropType(_extends({}, ViewStylePropTypes, {
  color: ColorPropType
}));

var PickerAndroid = _wrapComponent('PickerAndroid')((_temp = _class = function (_React$Component) {
  _inherits(PickerAndroid, _React$Component);

  function PickerAndroid(props, context) {
    _classCallCheck(this, PickerAndroid);

    var _this = _possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

    _initialiseProps.call(_this);

    var state = _this._stateFromProps(props);

    _this.state = _extends({}, state, {
      initialSelectedIndex: state.selectedIndex
    });
    return _this;
  }

  _createClass(PickerAndroid, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState(this._stateFromProps(nextProps));
    }
  }, {
    key: 'render',
    value: function render() {
      var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;

      var nativeProps = {
        enabled: this.props.enabled,
        items: this.state.items,
        mode: this.props.mode,
        onSelect: this._onChange,
        prompt: this.props.prompt,
        selected: this.state.initialSelectedIndex,
        testID: this.props.testID,
        style: [styles.pickerAndroid, this.props.style],
        accessibilityLabel: this.props.accessibilityLabel
      };

      return React.createElement(Picker, _extends({ ref: REF_PICKER }, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 111
        }
      }));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._lastNativePosition = this.state.initialSelectedIndex;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
        this.refs[REF_PICKER].setNativeProps({ selected: this.state.selectedIndex });
        this._lastNativePosition = this.state.selectedIndex;
      }
    }
  }]);

  return PickerAndroid;
}(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
  style: pickerStyleType,
  selectedValue: ReactPropTypes.any,
  enabled: ReactPropTypes.bool,
  mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
  onValueChange: ReactPropTypes.func,
  prompt: ReactPropTypes.string,
  testID: ReactPropTypes.string
}), _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this._stateFromProps = function (props) {
    var selectedIndex = 0;
    var items = React.Children.map(props.children, function (child, index) {
      if (child.props.value === props.selectedValue) {
        selectedIndex = index;
      }
      var childProps = {
        value: child.props.value,
        label: child.props.label
      };
      if (child.props.color) {
        childProps.color = processColor(child.props.color);
      }
      return childProps;
    });
    return { selectedIndex: selectedIndex, items: items };
  };

  this._onChange = function (event) {
    if (_this2.props.onValueChange) {
      var position = event.nativeEvent.position;
      if (position >= 0) {
        var children = React.Children.toArray(_this2.props.children);
        var value = children[position].props.value;
        _this2.props.onValueChange(value, position);
      } else {
        _this2.props.onValueChange(null, position);
      }
    }
    _this2._lastNativePosition = event.nativeEvent.position;
    _this2.forceUpdate();
  };
}, _temp));

var styles = StyleSheet.create({
  pickerAndroid: {
    height: 50
  }
});

var cfg = {
  nativeOnly: {
    items: true,
    selected: true
  }
};

var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);

module.exports = PickerAndroid;
}, 421, null, "PickerAndroid");
__d(/* ProgressBarAndroid */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\ProgressBarAndroid\\ProgressBarAndroid.android.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes
var ColorPropType = require(208            ); // 208 = ColorPropType

var createReactClass = require(311                 ); // 311 = create-react-class
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

var indeterminateType = function indeterminateType(props, propName, componentName) {
  var checker = function checker() {
    var indeterminate = props[propName];
    var styleAttr = props.styleAttr;
    if (!indeterminate && styleAttr !== 'Horizontal') {
      return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
    }
  };

  for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  return PropTypes.bool.apply(PropTypes, [props, propName, componentName].concat(rest)) || checker();
};

var ProgressBarAndroid = createReactClass({
  displayName: 'ProgressBarAndroid',
  propTypes: _extends({}, ViewPropTypes, {
    styleAttr: PropTypes.oneOf(STYLE_ATTRIBUTES),

    indeterminate: indeterminateType,

    progress: PropTypes.number,

    color: ColorPropType,

    testID: PropTypes.string
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      styleAttr: 'Normal',
      indeterminate: true
    };
  },

  mixins: [NativeMethodsMixin],

  componentDidMount: function componentDidMount() {
    if (this.props.indeterminate && this.props.styleAttr !== 'Horizontal') {
      console.warn('Circular indeterminate `ProgressBarAndroid`' + 'is deprecated. Use `ActivityIndicator` instead.');
    }
  },

  render: function render() {
    return React.createElement(AndroidProgressBar, _extends({}, this.props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 121
      }
    }));
  }
});

var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, { nativeOnly: { animating: true } });

module.exports = ProgressBarAndroid;
}, 422, null, "ProgressBarAndroid");
__d(/* ProgressViewIOS */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\ProgressViewIOS\\ProgressViewIOS.android.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  DummyProgressViewIOS: {
    displayName: 'DummyProgressViewIOS'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var View = require(285   ); // 285 = View

var DummyProgressViewIOS = _wrapComponent('DummyProgressViewIOS')(function (_React$Component) {
  _inherits(DummyProgressViewIOS, _React$Component);

  function DummyProgressViewIOS() {
    _classCallCheck(this, DummyProgressViewIOS);

    return _possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
  }

  _createClass(DummyProgressViewIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummy, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        },
        React.createElement(
          Text,
          { style: styles.text, __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          'ProgressViewIOS is not supported on this platform!'
        )
      );
    }
  }]);

  return DummyProgressViewIOS;
}(React.Component));

var styles = StyleSheet.create({
  dummy: {
    width: 120,
    height: 20,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    color: '#333333',
    margin: 5,
    fontSize: 10
  }
});

module.exports = DummyProgressViewIOS;
}, 423, null, "ProgressViewIOS");
__d(/* SectionList */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Lists\\SectionList.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MetroListView = require(378            ); // 378 = MetroListView
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var VirtualizedSectionList = require(425                     ); // 425 = VirtualizedSectionList

var defaultProps = _extends({}, VirtualizedSectionList.defaultProps, {
  stickySectionHeadersEnabled: Platform.OS === 'ios'
});

var SectionList = function (_React$PureComponent) {
  _inherits(SectionList, _React$PureComponent);

  function SectionList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SectionList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
      _this._wrapperListRef = ref;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SectionList, [{
    key: 'scrollToLocation',
    value: function scrollToLocation(params) {
      this._wrapperListRef.scrollToLocation(params);
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      listRef && listRef.recordInteraction();
    }
  }, {
    key: 'flashScrollIndicators',
    value: function flashScrollIndicators() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      listRef && listRef.flashScrollIndicators();
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      if (listRef) {
        return listRef.getScrollResponder();
      }
    }
  }, {
    key: 'getScrollableNode',
    value: function getScrollableNode() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      if (listRef) {
        return listRef.getScrollableNode();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
      return React.createElement(List, _extends({}, this.props, { ref: this._captureRef, __source: {
          fileName: _jsxFileName,
          lineNumber: 324
        }
      }));
    }
  }]);

  return SectionList;
}(React.PureComponent);

SectionList.defaultProps = defaultProps;


module.exports = SectionList;
}, 424, null, "SectionList");
__d(/* VirtualizedSectionList */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                           ); // 27 = ./../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Lists\\VirtualizedSectionList.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ItemWithSeparator: {
    displayName: 'ItemWithSeparator'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var View = require(285   ); // 285 = View
var VirtualizedList = require(385              ); // 385 = VirtualizedList

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var VirtualizedSectionList = function (_React$PureComponent) {
  _inherits(VirtualizedSectionList, _React$PureComponent);

  _createClass(VirtualizedSectionList, [{
    key: 'scrollToLocation',
    value: function scrollToLocation(params) {
      var index = params.itemIndex + 1;
      for (var ii = 0; ii < params.sectionIndex; ii++) {
        index += this.props.sections[ii].data.length + 2;
      }
      var toIndexParams = _extends({}, params, {
        index: index
      });
      this._listRef.scrollToIndex(toIndexParams);
    }
  }, {
    key: 'getListRef',
    value: function getListRef() {
      return this._listRef;
    }
  }, {
    key: '_subExtractor',
    value: function _subExtractor(index) {
      var itemIndex = index;
      var defaultKeyExtractor = this.props.keyExtractor;
      for (var ii = 0; ii < this.props.sections.length; ii++) {
        var _section = this.props.sections[ii];
        var _key = _section.key || String(ii);
        itemIndex -= 1;
        if (itemIndex >= _section.data.length + 1) {
          itemIndex -= _section.data.length + 1;
        } else if (itemIndex === -1) {
          return {
            section: _section,
            key: _key + ':header',
            index: null,
            header: true,
            trailingSection: this.props.sections[ii + 1]
          };
        } else if (itemIndex === _section.data.length) {
          return {
            section: _section,
            key: _key + ':footer',
            index: null,
            header: false,
            trailingSection: this.props.sections[ii + 1]
          };
        } else {
          var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;
          return {
            section: _section,
            key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
            index: itemIndex,
            leadingItem: _section.data[itemIndex - 1],
            leadingSection: this.props.sections[ii - 1],
            trailingItem: _section.data[itemIndex + 1],
            trailingSection: this.props.sections[ii + 1]
          };
        }
      }
    }
  }, {
    key: '_getSeparatorComponent',
    value: function _getSeparatorComponent(index, info) {
      info = info || this._subExtractor(index);
      if (!info) {
        return null;
      }
      var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
      var SectionSeparatorComponent = this.props.SectionSeparatorComponent;

      var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
      var isLastItemInSection = info.index === info.section.data.length - 1;
      if (SectionSeparatorComponent && isLastItemInSection) {
        return SectionSeparatorComponent;
      }
      if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
        return ItemSeparatorComponent;
      }
      return null;
    }
  }, {
    key: '_computeState',
    value: function _computeState(props) {
      var offset = props.ListHeaderComponent ? 1 : 0;
      var stickyHeaderIndices = [];
      var itemCount = props.sections.reduce(function (v, section) {
        stickyHeaderIndices.push(v + offset);
        return v + section.data.length + 2;
      }, 0);

      return {
        childProps: _extends({}, props, {
          renderItem: this._renderItem,
          ItemSeparatorComponent: undefined,
          data: props.sections,
          getItemCount: function getItemCount() {
            return itemCount;
          },
          getItem: getItem,
          keyExtractor: this._keyExtractor,
          onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
          stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
        })
      };
    }
  }]);

  function VirtualizedSectionList(props, context) {
    _classCallCheck(this, VirtualizedSectionList);

    var _this = _possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

    _this._keyExtractor = function (item, index) {
      var info = _this._subExtractor(index);
      return info && info.key || String(index);
    };

    _this._convertViewable = function (viewable) {
      invariant(viewable.index != null, 'Received a broken ViewToken');
      var info = _this._subExtractor(viewable.index);
      if (!info) {
        return null;
      }
      var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
      return _extends({}, viewable, {
        index: info.index,
        key: keyExtractor(viewable.item, info.index),
        section: info.section
      });
    };

    _this._onViewableItemsChanged = function (_ref) {
      var viewableItems = _ref.viewableItems,
          changed = _ref.changed;

      if (_this.props.onViewableItemsChanged) {
        _this.props.onViewableItemsChanged({
          viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
          changed: changed.map(_this._convertViewable, _this).filter(Boolean)
        });
      }
    };

    _this._renderItem = function (_ref2) {
      var item = _ref2.item,
          index = _ref2.index;

      var info = _this._subExtractor(index);
      if (!info) {
        return null;
      }
      var infoIndex = info.index;
      if (infoIndex == null) {
        var _section2 = info.section;

        if (info.header === true) {
          var _renderSectionHeader = _this.props.renderSectionHeader;

          return _renderSectionHeader ? _renderSectionHeader({ section: _section2 }) : null;
        } else {
          var _renderSectionFooter = _this.props.renderSectionFooter;

          return _renderSectionFooter ? _renderSectionFooter({ section: _section2 }) : null;
        }
      } else {
        var _renderItem = info.section.renderItem || _this.props.renderItem;
        var _SeparatorComponent = _this._getSeparatorComponent(index, info);
        invariant(_renderItem, 'no renderItem!');
        return React.createElement(ItemWithSeparator, {
          SeparatorComponent: _SeparatorComponent,
          LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
          cellKey: info.key,
          index: infoIndex,
          item: item,
          leadingItem: info.leadingItem,
          leadingSection: info.leadingSection,
          onUpdateSeparator: _this._onUpdateSeparator,
          prevCellKey: (_this._subExtractor(index - 1) || {}).key,
          ref: function ref(_ref3) {
            _this._cellRefs[info.key] = _ref3;
          },
          renderItem: _renderItem,
          section: info.section,
          trailingItem: info.trailingItem,
          trailingSection: info.trailingSection,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 279
          }
        });
      }
    };

    _this._onUpdateSeparator = function (key, newProps) {
      var ref = _this._cellRefs[key];
      ref && ref.updateSeparatorProps(newProps);
    };

    _this._cellRefs = {};

    _this._captureRef = function (ref) {
      _this._listRef = ref;
    };

    _this.state = _this._computeState(props);
    return _this;
  }

  _createClass(VirtualizedSectionList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState(this._computeState(nextProps));
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(VirtualizedList, _extends({}, this.state.childProps, { ref: this._captureRef, __source: {
          fileName: _jsxFileName,
          lineNumber: 365
        }
      }));
    }
  }]);

  return VirtualizedSectionList;
}(React.PureComponent);

VirtualizedSectionList.defaultProps = _extends({}, VirtualizedList.defaultProps, {
  data: []
});

var ItemWithSeparator = _wrapComponent('ItemWithSeparator')(function (_React$Component) {
  _inherits(ItemWithSeparator, _React$Component);

  function ItemWithSeparator() {
    var _ref4;

    var _temp, _this2, _ret;

    _classCallCheck(this, ItemWithSeparator);

    for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this2.props.item,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.trailingItem,
        trailingSection: _this2.props.trailingSection
      },
      leadingSeparatorProps: {
        highlighted: false,
        leadingItem: _this2.props.leadingItem,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.item,
        trailingSection: _this2.props.trailingSection
      }
    }, _this2._separators = {
      highlight: function highlight() {
        ['leading', 'trailing'].forEach(function (s) {
          return _this2._separators.updateProps(s, { highlighted: true });
        });
      },
      unhighlight: function unhighlight() {
        ['leading', 'trailing'].forEach(function (s) {
          return _this2._separators.updateProps(s, { highlighted: false });
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this2$props = _this2.props,
            LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
            cellKey = _this2$props.cellKey,
            prevCellKey = _this2$props.prevCellKey;

        if (select === 'leading' && LeadingSeparatorComponent) {
          _this2.setState(function (state) {
            return {
              leadingSeparatorProps: _extends({}, state.leadingSeparatorProps, newProps)
            };
          });
        } else {
          _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
        }
      }
    }, _temp), _possibleConstructorReturn(_this2, _ret);
  }

  _createClass(ItemWithSeparator, [{
    key: 'updateSeparatorProps',
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: _extends({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
          SeparatorComponent = _props.SeparatorComponent,
          item = _props.item,
          index = _props.index,
          section = _props.section;

      var element = this.props.renderItem({
        item: item,
        index: index,
        section: section,
        separators: this._separators
      });
      var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, _extends({}, this.state.leadingSeparatorProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 460
        }
      }));
      var separator = SeparatorComponent && React.createElement(SeparatorComponent, _extends({}, this.state.separatorProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 463
        }
      }));
      return leadingSeparator || separator ? React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 465
          }
        },
        leadingSeparator,
        element,
        separator
      ) : element;
    }
  }]);

  return ItemWithSeparator;
}(React.Component));

function getItem(sections, index) {
  if (!sections) {
    return null;
  }
  var itemIdx = index - 1;
  for (var ii = 0; ii < sections.length; ii++) {
    if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
      return sections[ii];
    } else if (itemIdx < sections[ii].data.length) {
      return sections[ii].data[itemIdx];
    } else {
      itemIdx -= sections[ii].data.length + 2;
    }
  }
  return null;
}

module.exports = VirtualizedSectionList;
}, 425, null, "VirtualizedSectionList");
__d(/* SegmentedControlIOS */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\SegmentedControlIOS\\SegmentedControlIOS.android.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  DummySegmentedControlIOS: {
    displayName: 'DummySegmentedControlIOS'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var View = require(285   ); // 285 = View

var DummySegmentedControlIOS = _wrapComponent('DummySegmentedControlIOS')(function (_React$Component) {
  _inherits(DummySegmentedControlIOS, _React$Component);

  function DummySegmentedControlIOS() {
    _classCallCheck(this, DummySegmentedControlIOS);

    return _possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
  }

  _createClass(DummySegmentedControlIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummy, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        },
        React.createElement(
          Text,
          { style: styles.text, __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          'SegmentedControlIOS is not supported on this platform!'
        )
      );
    }
  }]);

  return DummySegmentedControlIOS;
}(React.Component));

var styles = StyleSheet.create({
  dummy: {
    width: 120,
    height: 50,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    color: '#333333',
    margin: 5,
    fontSize: 10
  }
});

module.exports = DummySegmentedControlIOS;
}, 426, null, "SegmentedControlIOS");
__d(/* Slider */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Slider\\Slider.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Image = require(361    ); // 361 = Image
var ColorPropType = require(208            ); // 208 = ColorPropType
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var ReactNativeViewAttributes = require(301                        ); // 301 = ReactNativeViewAttributes
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(314         ); // 314 = StyleSheet
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var Slider = createReactClass({
  displayName: 'Slider',
  mixins: [NativeMethodsMixin],

  propTypes: _extends({}, ViewPropTypes, {
    style: ViewPropTypes.style,

    value: PropTypes.number,

    step: PropTypes.number,

    minimumValue: PropTypes.number,

    maximumValue: PropTypes.number,

    minimumTrackTintColor: ColorPropType,

    maximumTrackTintColor: ColorPropType,

    disabled: PropTypes.bool,

    trackImage: Image.propTypes.source,

    minimumTrackImage: Image.propTypes.source,

    maximumTrackImage: Image.propTypes.source,

    thumbImage: Image.propTypes.source,

    thumbTintColor: ColorPropType,

    onValueChange: PropTypes.func,

    onSlidingComplete: PropTypes.func,

    testID: PropTypes.string
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      value: 0,
      minimumValue: 0,
      maximumValue: 1,
      step: 0
    };
  },

  viewConfig: {
    uiViewClassName: 'RCTSlider',
    validAttributes: _extends({}, ReactNativeViewAttributes.RCTView, {
      value: true
    })
  },

  render: function render() {
    var _props = this.props,
        style = _props.style,
        onValueChange = _props.onValueChange,
        onSlidingComplete = _props.onSlidingComplete,
        props = _objectWithoutProperties(_props, ['style', 'onValueChange', 'onSlidingComplete']);

    props.style = [styles.slider, style];

    props.onValueChange = onValueChange && function (event) {
      var userEvent = true;
      if (Platform.OS === 'android') {
        userEvent = event.nativeEvent.fromUser;
      }
      onValueChange && userEvent && onValueChange(event.nativeEvent.value);
    };

    props.onChange = props.onValueChange;

    props.onSlidingComplete = onSlidingComplete && function (event) {
      onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
    };

    return React.createElement(RCTSlider, _extends({}, props, {
      enabled: !this.props.disabled,
      onStartShouldSetResponder: function onStartShouldSetResponder() {
        return true;
      },
      onResponderTerminationRequest: function onResponderTerminationRequest() {
        return false;
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 180
      }
    }));
  }
});

var styles = void 0;
if (Platform.OS === 'ios') {
  styles = StyleSheet.create({
    slider: {
      height: 40
    }
  });
} else {
  styles = StyleSheet.create({
    slider: {}
  });
}

var options = {};
if (Platform.OS === 'android') {
  options = {
    nativeOnly: {
      enabled: true
    }
  };
}
var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);

module.exports = Slider;
}, 427, null, "Slider");
__d(/* SnapshotViewIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(313                ); // 313 = UnimplementedView
}, 428, null, "SnapshotViewIOS");
__d(/* Switch */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\Switch\\Switch.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(314         ); // 314 = StyleSheet
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var createReactClass = require(311                 ); // 311 = create-react-class
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var Switch = createReactClass({
  displayName: 'Switch',
  propTypes: _extends({}, ViewPropTypes, {
    value: PropTypes.bool,

    disabled: PropTypes.bool,

    onValueChange: PropTypes.func,

    testID: PropTypes.string,

    tintColor: ColorPropType,

    onTintColor: ColorPropType,

    thumbTintColor: ColorPropType
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      value: false,
      disabled: false
    };
  },

  mixins: [NativeMethodsMixin],

  _rctSwitch: {},
  _onChange: function _onChange(event) {
    if (Platform.OS === 'android') {
      this._rctSwitch.setNativeProps({ on: this.props.value });
    } else {
      this._rctSwitch.setNativeProps({ value: this.props.value });
    }

    this.props.onChange && this.props.onChange(event);
    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
  },

  render: function render() {
    var _this = this;

    var props = _extends({}, this.props);
    props.onStartShouldSetResponder = function () {
      return true;
    };
    props.onResponderTerminationRequest = function () {
      return false;
    };
    if (Platform.OS === 'android') {
      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = this.props.style;
      props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
    } else if (Platform.OS === 'ios') {
      props.style = [styles.rctSwitchIOS, this.props.style];
    }
    return React.createElement(RCTSwitch, _extends({}, props, {
      ref: function ref(_ref) {
        _this._rctSwitch = _ref;
      },
      onChange: this._onChange,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      }
    }));
  }
});

var styles = StyleSheet.create({
  rctSwitchIOS: {
    height: 31,
    width: 51
  }
});

if (Platform.OS === 'android') {
  var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true,
      trackTintColor: true
    }
  });
} else {
  var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
    nativeOnly: {
      onChange: true
    }
  });
}

module.exports = Switch;
}, 429, null, "Switch");
__d(/* SwipeableListView */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Experimental\\SwipeableRow\\SwipeableListView.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  SwipeableListView: {
    displayName: 'SwipeableListView'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ListView = require(379       ); // 379 = ListView
var PropTypes = require(20          ); // 20 = prop-types
var React = require(286    ); // 286 = React
var SwipeableListViewDataSource = require(431                          ); // 431 = SwipeableListViewDataSource
var SwipeableRow = require(432           ); // 432 = SwipeableRow

var SwipeableListView = _wrapComponent('SwipeableListView')((_temp = _class = function (_React$Component) {
  _inherits(SwipeableListView, _React$Component);

  _createClass(SwipeableListView, null, [{
    key: 'getNewDataSource',
    value: function getNewDataSource() {
      return new SwipeableListViewDataSource({
        getRowData: function getRowData(data, sectionID, rowID) {
          return data[sectionID][rowID];
        },
        getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
          return data[sectionID];
        },
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1 !== row2;
        },
        sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
          return s1 !== s2;
        }
      });
    }
  }]);

  function SwipeableListView(props, context) {
    _classCallCheck(this, SwipeableListView);

    var _this = _possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

    _this._listViewRef = null;
    _this._shouldBounceFirstRowOnMount = false;

    _this._onScroll = function (e) {
      if (_this.props.dataSource.getOpenRowID()) {
        _this.setState({
          dataSource: _this.state.dataSource.setOpenRowID(null)
        });
      }
      _this.props.onScroll && _this.props.onScroll(e);
    };

    _this._renderRow = function (rowData, sectionID, rowID) {
      var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

      if (!slideoutView) {
        return _this.props.renderRow(rowData, sectionID, rowID);
      }

      var shouldBounceOnMount = false;
      if (_this._shouldBounceFirstRowOnMount) {
        _this._shouldBounceFirstRowOnMount = false;
        shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
      }

      return React.createElement(
        SwipeableRow,
        {
          slideoutView: slideoutView,
          isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
          maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
          key: rowID,
          onOpen: function onOpen() {
            return _this._onOpen(rowData.id);
          },
          onClose: function onClose() {
            return _this._onClose(rowData.id);
          },
          onSwipeEnd: function onSwipeEnd() {
            return _this._setListViewScrollable(true);
          },
          onSwipeStart: function onSwipeStart() {
            return _this._setListViewScrollable(false);
          },
          shouldBounceOnMount: shouldBounceOnMount, __source: {
            fileName: _jsxFileName,
            lineNumber: 185
          }
        },
        _this.props.renderRow(rowData, sectionID, rowID)
      );
    };

    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
    _this.state = {
      dataSource: _this.props.dataSource
    };
    return _this;
  }

  _createClass(SwipeableListView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
        this.setState({
          dataSource: nextProps.dataSource
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(ListView, _extends({}, this.props, {
        ref: function ref(_ref) {
          _this2._listViewRef = _ref;
        },
        dataSource: this.state.dataSource.getDataSource(),
        onScroll: this._onScroll,
        renderRow: this._renderRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 118
        }
      }));
    }
  }, {
    key: '_setListViewScrollable',
    value: function _setListViewScrollable(value) {
      if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
        this._listViewRef.setNativeProps({
          scrollEnabled: value
        });
      }
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
        return this._listViewRef.getScrollResponder();
      }
    }
  }, {
    key: '_getMaxSwipeDistance',
    value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
      if (typeof this.props.maxSwipeDistance === 'function') {
        return this.props.maxSwipeDistance(rowData, sectionID, rowID);
      }

      return this.props.maxSwipeDistance;
    }
  }, {
    key: '_onOpen',
    value: function _onOpen(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(rowID)
      });
    }
  }, {
    key: '_onClose',
    value: function _onClose(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(null)
      });
    }
  }]);

  return SwipeableListView;
}(React.Component), _class.propTypes = {
  bounceFirstRowOnMount: PropTypes.bool.isRequired,

  dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,

  maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,

  renderRow: PropTypes.func.isRequired,

  renderQuickActions: PropTypes.func.isRequired
}, _class.defaultProps = {
  bounceFirstRowOnMount: false,
  renderQuickActions: function renderQuickActions() {
    return null;
  }
}, _temp));

module.exports = SwipeableListView;
}, 430, null, "SwipeableListView");
__d(/* SwipeableListViewDataSource */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ListViewDataSource = require(380                 ); // 380 = ListViewDataSource

var SwipeableListViewDataSource = function () {
  function SwipeableListViewDataSource(params) {
    var _this = this;

    _classCallCheck(this, SwipeableListViewDataSource);

    this._dataSource = new ListViewDataSource({
      getRowData: params.getRowData,
      getSectionHeaderData: params.getSectionHeaderData,
      rowHasChanged: function rowHasChanged(row1, row2) {
        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
      },
      sectionHeaderHasChanged: params.sectionHeaderHasChanged
    });
  }

  _createClass(SwipeableListViewDataSource, [{
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);

      this._dataBlob = dataBlob;
      this.rowIdentities = this._dataSource.rowIdentities;
      this.sectionIdentities = this._dataSource.sectionIdentities;

      return this;
    }
  }, {
    key: 'getDataSource',
    value: function getDataSource() {
      return this._dataSource;
    }
  }, {
    key: 'getOpenRowID',
    value: function getOpenRowID() {
      return this._openRowID;
    }
  }, {
    key: 'getFirstRowID',
    value: function getFirstRowID() {
      if (this.rowIdentities) {
        return this.rowIdentities[0] && this.rowIdentities[0][0];
      }
      return Object.keys(this._dataBlob)[0];
    }
  }, {
    key: 'setOpenRowID',
    value: function setOpenRowID(rowID) {
      this._previousOpenRowID = this._openRowID;
      this._openRowID = rowID;

      this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return this;
    }
  }]);

  return SwipeableListViewDataSource;
}();

module.exports = SwipeableListViewDataSource;
}, 431, null, "SwipeableListViewDataSource");
__d(/* SwipeableRow */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Experimental\\SwipeableRow\\SwipeableRow.js';
var Animated = require(350       ); // 350 = Animated
var I18nManager = require(417          ); // 417 = I18nManager
var PanResponder = require(433           ); // 433 = PanResponder
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(314         ); // 314 = StyleSheet
var TimerMixin = require(347                ); // 347 = react-timer-mixin
var View = require(285   ); // 285 = View

var createReactClass = require(311                 ); // 311 = create-react-class
var emptyFunction = require(200                     ); // 200 = fbjs/lib/emptyFunction

var IS_RTL = I18nManager.isRTL;

var CLOSED_LEFT_POSITION = 0;

var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;

var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;

var SLOW_SPEED_SWIPE_FACTOR = 4;

var SWIPE_DURATION = 300;

var ON_MOUNT_BOUNCE_DELAY = 700;
var ON_MOUNT_BOUNCE_DURATION = 400;

var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;

var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;

var SwipeableRow = createReactClass({
  displayName: 'SwipeableRow',
  _panResponder: {},
  _previousLeft: CLOSED_LEFT_POSITION,

  mixins: [TimerMixin],

  propTypes: {
    children: PropTypes.any,
    isOpen: PropTypes.bool,
    preventSwipeRight: PropTypes.bool,
    maxSwipeDistance: PropTypes.number.isRequired,
    onOpen: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
    onSwipeEnd: PropTypes.func.isRequired,
    onSwipeStart: PropTypes.func.isRequired,

    shouldBounceOnMount: PropTypes.bool,

    slideoutView: PropTypes.node.isRequired,

    swipeThreshold: PropTypes.number.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      currentLeft: new Animated.Value(this._previousLeft),

      isSwipeableViewRendered: false,
      rowHeight: null
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      isOpen: false,
      preventSwipeRight: false,
      maxSwipeDistance: 0,
      onOpen: emptyFunction,
      onClose: emptyFunction,
      onSwipeEnd: emptyFunction,
      onSwipeStart: emptyFunction,
      swipeThreshold: 30
    };
  },
  componentWillMount: function componentWillMount() {
    this._panResponder = PanResponder.create({
      onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
      onPanResponderGrant: this._handlePanResponderGrant,
      onPanResponderMove: this._handlePanResponderMove,
      onPanResponderRelease: this._handlePanResponderEnd,
      onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
      onPanResponderTerminate: this._handlePanResponderEnd,
      onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
        return false;
      }
    });
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    if (this.props.shouldBounceOnMount) {
      this.setTimeout(function () {
        _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
      }, ON_MOUNT_BOUNCE_DELAY);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.isOpen && !nextProps.isOpen) {
      this._animateToClosedPosition();
    }
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {
      return false;
    }

    return true;
  },
  render: function render() {
    var slideOutView = void 0;
    if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
      slideOutView = React.createElement(
        View,
        { style: [styles.slideOutContainer, { height: this.state.rowHeight }], __source: {
            fileName: _jsxFileName,
            lineNumber: 170
          }
        },
        this.props.slideoutView
      );
    }

    var swipeableView = React.createElement(
      Animated.View,
      {
        onLayout: this._onSwipeableViewLayout,
        style: { transform: [{ translateX: this.state.currentLeft }] }, __source: {
          fileName: _jsxFileName,
          lineNumber: 181
        }
      },
      this.props.children
    );

    return React.createElement(
      View,
      _extends({}, this._panResponder.panHandlers, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 189
        }
      }),
      slideOutView,
      swipeableView
    );
  },
  close: function close() {
    this.props.onClose();
    this._animateToClosedPosition();
  },
  _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
    this.setState({
      isSwipeableViewRendered: true,
      rowHeight: event.nativeEvent.layout.height
    });
  },
  _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
    return gestureState.dy < 10 && this._isValidSwipe(gestureState);
  },
  _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
  _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
    if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
      return;
    }

    this.props.onSwipeStart();

    if (this._isSwipingRightFromClosed(gestureState)) {
      this._swipeSlowSpeed(gestureState);
    } else {
      this._swipeFullSpeed(gestureState);
    }
  },
  _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
  },
  _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
  },
  _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
  },
  _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
  },
  _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
    return false;
  },
  _animateTo: function _animateTo(toValue) {
    var _this2 = this;

    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;

    Animated.timing(this.state.currentLeft, {
      duration: duration,
      toValue: toValue,
      useNativeDriver: true
    }).start(function () {
      _this2._previousLeft = toValue;
      callback();
    });
  },
  _animateToOpenPosition: function _animateToOpenPosition() {
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance);
  },
  _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
    speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;

    var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance, duration);
  },
  _animateToClosedPosition: function _animateToClosedPosition() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

    this._animateTo(CLOSED_LEFT_POSITION, duration);
  },
  _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
    this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
  },
  _animateBounceBack: function _animateBounceBack(duration) {
    var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;
    this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
  },
  _isValidSwipe: function _isValidSwipe(gestureState) {
    if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
      return false;
    }

    return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
  },
  _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
    return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
  },
  _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
    var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;
    if (this._isSwipingRightFromClosed(gestureState)) {
      this.props.onOpen();
      this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    } else if (this._shouldAnimateRemainder(gestureState)) {
      if (horizontalDistance < 0) {
        this.props.onOpen();
        this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
      } else {
        this.props.onClose();
        this._animateToClosedPosition();
      }
    } else {
      if (this._previousLeft === CLOSED_LEFT_POSITION) {
        this._animateToClosedPosition();
      } else {
        this._animateToOpenPosition();
      }
    }

    this.props.onSwipeEnd();
  }
});

var styles = StyleSheet.create({
  slideOutContainer: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

module.exports = SwipeableRow;
}, 432, null, "SwipeableRow");
__d(/* PanResponder */function(global, require, module, exports) {

'use strict';

var InteractionManager = require(352                   ); // 352 = ./InteractionManager
var TouchHistoryMath = require(434               ); // 434 = TouchHistoryMath

var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = TouchHistoryMath.currentCentroidX;
var currentCentroidY = TouchHistoryMath.currentCentroidY;

var PanResponder = {

  _initializeGestureState: function _initializeGestureState(gestureState) {
    gestureState.moveX = 0;
    gestureState.moveY = 0;
    gestureState.x0 = 0;
    gestureState.y0 = 0;
    gestureState.dx = 0;
    gestureState.dy = 0;
    gestureState.vx = 0;
    gestureState.vy = 0;
    gestureState.numberActiveTouches = 0;

    gestureState._accountsForMovesUpTo = 0;
  },

  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    var movedAfter = gestureState._accountsForMovesUpTo;
    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var nextDX = gestureState.dx + (x - prevX);
    var nextDY = gestureState.dy + (y - prevY);

    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
    gestureState.vx = (nextDX - gestureState.dx) / dt;
    gestureState.vy = (nextDY - gestureState.dy) / dt;

    gestureState.dx = nextDX;
    gestureState.dy = nextDY;
    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
  },

  create: function create(config) {
    var interactionState = {
      handle: null
    };
    var gestureState = {
      stateID: Math.random()
    };
    PanResponder._initializeGestureState(gestureState);
    var panHandlers = {
      onStartShouldSetResponder: function onStartShouldSetResponder(e) {
        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
      },
      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
      },
      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
        if (e.nativeEvent.touches.length === 1) {
          PanResponder._initializeGestureState(gestureState);
        }
        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return false;
        }
        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onResponderGrant: function onResponderGrant(e) {
        if (!interactionState.handle) {
          interactionState.handle = InteractionManager.createInteractionHandle();
        }
        gestureState.x0 = currentCentroidX(e.touchHistory);
        gestureState.y0 = currentCentroidY(e.touchHistory);
        gestureState.dx = 0;
        gestureState.dy = 0;
        if (config.onPanResponderGrant) {
          config.onPanResponderGrant(e, gestureState);
        }

        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
      },

      onResponderReject: function onResponderReject(e) {
        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
      },

      onResponderRelease: function onResponderRelease(e) {
        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderStart: function onResponderStart(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        if (config.onPanResponderStart) {
          config.onPanResponderStart(e, gestureState);
        }
      },

      onResponderMove: function onResponderMove(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return;
        }

        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        if (config.onPanResponderMove) {
          config.onPanResponderMove(e, gestureState);
        }
      },

      onResponderEnd: function onResponderEnd(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
      },

      onResponderTerminate: function onResponderTerminate(e) {
        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderTerminationRequest: function onResponderTerminationRequest(e) {
        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
      }
    };
    return {
      panHandlers: panHandlers,
      getInteractionHandle: function getInteractionHandle() {
        return interactionState.handle;
      }
    };
  }
};

function clearInteractionHandle(interactionState, callback, event, gestureState) {
  if (interactionState.handle) {
    InteractionManager.clearInteractionHandle(interactionState.handle);
    interactionState.handle = null;
  }
  if (callback) {
    callback(event, gestureState);
  }
}

module.exports = PanResponder;
}, 433, null, "PanResponder");
__d(/* TouchHistoryMath */function(global, require, module, exports) {

'use strict';

var _require = require(211          ), // 211 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
}, 434, null, "TouchHistoryMath");
__d(/* TabBarIOS */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\TabBarIOS\\TabBarIOS.android.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  DummyTabBarIOS: {
    displayName: 'DummyTabBarIOS'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var StyleSheet = require(314         ); // 314 = StyleSheet
var TabBarItemIOS = require(436            ); // 436 = TabBarItemIOS
var View = require(285   ); // 285 = View

var DummyTabBarIOS = _wrapComponent('DummyTabBarIOS')((_temp = _class = function (_React$Component) {
  _inherits(DummyTabBarIOS, _React$Component);

  function DummyTabBarIOS() {
    _classCallCheck(this, DummyTabBarIOS);

    return _possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
  }

  _createClass(DummyTabBarIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [this.props.style, styles.tabGroup], __source: {
            fileName: _jsxFileName,
            lineNumber: 25
          }
        },
        this.props.children
      );
    }
  }]);

  return DummyTabBarIOS;
}(React.Component), _class.Item = TabBarItemIOS, _temp));

var styles = StyleSheet.create({
  tabGroup: {
    flex: 1
  }
});

module.exports = DummyTabBarIOS;
}, 435, null, "TabBarIOS");
__d(/* TabBarItemIOS */function(global, require, module, exports) {

'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\TabBarIOS\\TabBarItemIOS.android.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  DummyTab: {
    displayName: 'DummyTab'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var View = require(285   ); // 285 = View
var StyleSheet = require(314         ); // 314 = StyleSheet

var DummyTab = _wrapComponent('DummyTab')(function (_React$Component) {
  _inherits(DummyTab, _React$Component);

  function DummyTab() {
    _classCallCheck(this, DummyTab);

    return _possibleConstructorReturn(this, (DummyTab.__proto__ || Object.getPrototypeOf(DummyTab)).apply(this, arguments));
  }

  _createClass(DummyTab, [{
    key: 'render',
    value: function render() {
      if (!this.props.selected) {
        return React.createElement(View, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        });
      }
      return React.createElement(
        View,
        { style: [this.props.style, styles.tab], __source: {
            fileName: _jsxFileName,
            lineNumber: 24
          }
        },
        this.props.children
      );
    }
  }]);

  return DummyTab;
}(React.Component));

var styles = StyleSheet.create({
  tab: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderColor: 'red',
    borderWidth: 1
  }
});

module.exports = DummyTab;
}, 436, null, "TabBarItemIOS");
__d(/* TextInput */function(global, require, module, exports) {
'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\TextInput\\TextInput.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require(208            ); // 208 = ColorPropType
var DocumentSelectionState = require(438                     ); // 438 = DocumentSelectionState
var EventEmitter = require(203           ); // 203 = EventEmitter
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var Platform = require(192       ); // 192 = Platform
var React = require(286    ); // 286 = React
var createReactClass = require(311                 ); // 311 = create-react-class
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(211          ); // 211 = ReactNative
var StyleSheet = require(314         ); // 314 = StyleSheet
var Text = require(337   ); // 337 = Text
var TextInputState = require(283             ); // 283 = TextInputState
var TimerMixin = require(347                ); // 347 = react-timer-mixin
var TouchableWithoutFeedback = require(346                       ); // 346 = TouchableWithoutFeedback
var UIManager = require(279        ); // 279 = UIManager
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var emptyFunction = require(200                     ); // 200 = fbjs/lib/emptyFunction
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent
var warning = require(199               ); // 199 = fbjs/lib/warning

var onlyMultiline = {
  onTextInput: true,
  children: true
};

if (Platform.OS === 'android') {
  var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
} else if (Platform.OS === 'ios') {
  var RCTTextView = requireNativeComponent('RCTTextView', null);
  var RCTTextField = requireNativeComponent('RCTTextField', null);
}

var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];

var TextInput = createReactClass({
  displayName: 'TextInput',
  statics: {
    State: TextInputState
  },

  propTypes: _extends({}, ViewPropTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),

    autoCorrect: PropTypes.bool,

    spellCheck: PropTypes.bool,

    autoFocus: PropTypes.bool,

    editable: PropTypes.bool,

    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search']),

    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),

    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),

    returnKeyLabel: PropTypes.string,

    maxLength: PropTypes.number,

    numberOfLines: PropTypes.number,

    disableFullscreenUI: PropTypes.bool,

    enablesReturnKeyAutomatically: PropTypes.bool,

    multiline: PropTypes.bool,

    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onBlur: PropTypes.func,

    onFocus: PropTypes.func,

    onChange: PropTypes.func,

    onChangeText: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    onEndEditing: PropTypes.func,

    onSelectionChange: PropTypes.func,

    onSubmitEditing: PropTypes.func,

    onKeyPress: PropTypes.func,

    onLayout: PropTypes.func,

    onScroll: PropTypes.func,

    placeholder: PropTypes.node,

    placeholderTextColor: ColorPropType,

    secureTextEntry: PropTypes.bool,

    selectionColor: ColorPropType,

    selectionState: PropTypes.instanceOf(DocumentSelectionState),

    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),

    value: PropTypes.string,

    defaultValue: PropTypes.string,

    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),

    clearTextOnFocus: PropTypes.bool,

    selectTextOnFocus: PropTypes.bool,

    blurOnSubmit: PropTypes.bool,

    style: Text.propTypes.style,

    underlineColorAndroid: ColorPropType,

    inlineImageLeft: PropTypes.string,

    inlineImagePadding: PropTypes.number,

    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),

    caretHidden: PropTypes.bool
  }),

  mixins: [NativeMethodsMixin, TimerMixin],

  isFocused: function isFocused() {
    return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
  },

  contextTypes: {
    onFocusRequested: PropTypes.func,
    focusEmitter: PropTypes.instanceOf(EventEmitter)
  },

  _inputRef: undefined,
  _focusSubscription: undefined,
  _lastNativeText: undefined,
  _lastNativeSelection: undefined,

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._lastNativeText = this.props.value;
    if (!this.context.focusEmitter) {
      if (this.props.autoFocus) {
        this.requestAnimationFrame(this.focus);
      }
      return;
    }
    this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
      if (_this === el) {
        _this.requestAnimationFrame(_this.focus);
      } else if (_this.isFocused()) {
        _this.blur();
      }
    });
    if (this.props.autoFocus) {
      this.context.onFocusRequested(this);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._focusSubscription && this._focusSubscription.remove();
    if (this.isFocused()) {
      this.blur();
    }
  },

  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: PropTypes.bool
  },

  clear: function clear() {
    this.setNativeProps({ text: '' });
  },

  render: function render() {
    if (Platform.OS === 'ios') {
      return this._renderIOS();
    } else if (Platform.OS === 'android') {
      return this._renderAndroid();
    }
  },

  _getText: function _getText() {
    return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
  },

  _setNativeRef: function _setNativeRef(ref) {
    this._inputRef = ref;
  },

  _renderIOS: function _renderIOS() {
    var textContainer;

    var props = _extends({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    if (!props.multiline) {
      if (__DEV__) {
        for (var propKey in onlyMultiline) {
          if (props[propKey]) {
            var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
            warning(false, '%s', error.stack);
          }
        }
      }
      textContainer = React.createElement(RCTTextField, _extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 651
        }
      }));
    } else {
      var children = props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(props.value && childCount), 'Cannot specify both value and children.');
      if (childCount >= 1) {
        children = React.createElement(
          Text,
          { style: props.style, __source: {
              fileName: _jsxFileName,
              lineNumber: 670
            }
          },
          children
        );
      }
      if (props.inputView) {
        children = [children, props.inputView];
      }
      props.style.unshift(styles.multilineInput);
      textContainer = React.createElement(RCTTextView, _extends({
        ref: this._setNativeRef
      }, props, {
        children: children,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 677
        }
      }));
    }

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityTraits: props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 695
        }
      },
      textContainer
    );
  },

  _renderAndroid: function _renderAndroid() {
    var props = _extends({}, this.props);
    props.style = [this.props.style];
    props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[this.props.autoCapitalize];
    var children = this.props.children;
    var childCount = 0;
    React.Children.forEach(children, function () {
      return ++childCount;
    });
    invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');
    if (childCount > 1) {
      children = React.createElement(
        Text,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 722
          }
        },
        children
      );
    }

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    var textContainer = React.createElement(AndroidTextInput, _extends({
      ref: this._setNativeRef
    }, props, {
      mostRecentEventCount: 0,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      text: this._getText(),
      children: children,
      disableFullscreenUI: this.props.disableFullscreenUI,
      textBreakStrategy: this.props.textBreakStrategy,
      onScroll: this._onScroll,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 730
      }
    }));

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: this.props.onLayout,
        onPress: this._onPress,
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        nativeID: this.props.nativeID,
        testID: this.props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 747
        }
      },
      textContainer
    );
  },

  _onFocus: function _onFocus(event) {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  },

  _onPress: function _onPress(event) {
    if (this.props.editable || this.props.editable === undefined) {
      this.focus();
    }
  },

  _onChange: function _onChange(event) {
    if (this._inputRef) {
      this._inputRef.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount
      });
    }

    var text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  },

  _onSelectionChange: function _onSelectionChange(event) {
    this.props.onSelectionChange && this.props.onSelectionChange(event);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeSelection = event.nativeEvent.selection;

    if (this.props.selection || this.props.selectionState) {
      this.forceUpdate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var nativeProps = {};

    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
      nativeProps.text = this.props.value;
    }

    var selection = this.props.selection;

    if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
      nativeProps.selection = this.props.selection;
    }

    if (Object.keys(nativeProps).length > 0 && this._inputRef) {
      this._inputRef.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  },

  _onBlur: function _onBlur(event) {
    this.blur();
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  },

  _onTextInput: function _onTextInput(event) {
    this.props.onTextInput && this.props.onTextInput(event);
  },

  _onScroll: function _onScroll(event) {
    this.props.onScroll && this.props.onScroll(event);
  }
});

var styles = StyleSheet.create({
  multilineInput: {
    paddingTop: 5
  }
});

module.exports = TextInput;
}, 437, null, "TextInput");
__d(/* DocumentSelectionState */function(global, require, module, exports) {

'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mixInEventEmitter = require(439                ); // 439 = mixInEventEmitter

var DocumentSelectionState = function () {
  function DocumentSelectionState(anchor, focus) {
    _classCallCheck(this, DocumentSelectionState);

    this._anchorOffset = anchor;
    this._focusOffset = focus;
    this._hasFocus = false;
  }

  _createClass(DocumentSelectionState, [{
    key: 'update',
    value: function update(anchor, focus) {
      if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
        this._anchorOffset = anchor;
        this._focusOffset = focus;
        this.emit('update');
      }
    }
  }, {
    key: 'constrainLength',
    value: function constrainLength(maxLength) {
      this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (!this._hasFocus) {
        this._hasFocus = true;
        this.emit('focus');
      }
    }
  }, {
    key: 'blur',
    value: function blur() {
      if (this._hasFocus) {
        this._hasFocus = false;
        this.emit('blur');
      }
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      return this._hasFocus;
    }
  }, {
    key: 'isCollapsed',
    value: function isCollapsed() {
      return this._anchorOffset === this._focusOffset;
    }
  }, {
    key: 'isBackward',
    value: function isBackward() {
      return this._anchorOffset > this._focusOffset;
    }
  }, {
    key: 'getAnchorOffset',
    value: function getAnchorOffset() {
      return this._hasFocus ? this._anchorOffset : null;
    }
  }, {
    key: 'getFocusOffset',
    value: function getFocusOffset() {
      return this._hasFocus ? this._focusOffset : null;
    }
  }, {
    key: 'getStartOffset',
    value: function getStartOffset() {
      return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'getEndOffset',
    value: function getEndOffset() {
      return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'overlaps',
    value: function overlaps(start, end) {
      return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
    }
  }]);

  return DocumentSelectionState;
}();

mixInEventEmitter(DocumentSelectionState, {
  'blur': true,
  'focus': true,
  'update': true
});

module.exports = DocumentSelectionState;
}, 438, null, "DocumentSelectionState");
__d(/* mixInEventEmitter */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var EventEmitter = require(203           ); // 203 = EventEmitter
var EventEmitterWithHolding = require(440                      ); // 440 = EventEmitterWithHolding
var EventHolder = require(441          ); // 441 = EventHolder

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var keyOf = require(409             ); // 409 = fbjs/lib/keyOf

var TYPES_KEY = keyOf({ __types: true });

function mixInEventEmitter(cls, types) {
  invariant(types, 'Must supply set of valid event types');

  var target = cls.prototype || cls;

  invariant(!target.__eventEmitter, 'An active emitter is already mixed in');

  var ctor = cls.constructor;
  if (ctor) {
    invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
  }

  if (target.hasOwnProperty(TYPES_KEY)) {
    _extends(target.__types, types);
  } else if (target.__types) {
    target.__types = _extends({}, target.__types, types);
  } else {
    target.__types = types;
  }
  _extends(target, EventEmitterMixin);
}

var EventEmitterMixin = {
  emit: function emit(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
  },

  emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
  },

  addListener: function addListener(eventType, listener, context) {
    return this.__getEventEmitter().addListener(eventType, listener, context);
  },

  once: function once(eventType, listener, context) {
    return this.__getEventEmitter().once(eventType, listener, context);
  },

  addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
    return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
  },

  addListenerMap: function addListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  removeAllListeners: function removeAllListeners() {
    this.__getEventEmitter().removeAllListeners();
  },

  removeCurrentListener: function removeCurrentListener() {
    this.__getEventEmitter().removeCurrentListener();
  },

  releaseHeldEventType: function releaseHeldEventType(eventType) {
    this.__getEventEmitter().releaseHeldEventType(eventType);
  },

  __getEventEmitter: function __getEventEmitter() {
    if (!this.__eventEmitter) {
      var emitter = new EventEmitter();
      if (__DEV__) {
        var EventValidator = require(442             ); // 442 = EventValidator
        emitter = EventValidator.addValidation(emitter, this.__types);
      }

      var holder = new EventHolder();
      this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
    }
    return this.__eventEmitter;
  }
};

module.exports = mixInEventEmitter;
}, 439, null, "mixInEventEmitter");
__d(/* EventEmitterWithHolding */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventEmitterWithHolding = function () {
  function EventEmitterWithHolding(emitter, holder) {
    _classCallCheck(this, EventEmitterWithHolding);

    this._emitter = emitter;
    this._eventHolder = holder;
    this._currentEventToken = null;
    this._emittingHeldEvents = false;
  }

  _createClass(EventEmitterWithHolding, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      return this._emitter.addListener(eventType, listener, context);
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      return this._emitter.once(eventType, listener, context);
    }
  }, {
    key: 'addRetroactiveListener',
    value: function addRetroactiveListener(eventType, listener, context) {
      var subscription = this._emitter.addListener(eventType, listener, context);

      this._emittingHeldEvents = true;
      this._eventHolder.emitToListener(eventType, listener, context);
      this._emittingHeldEvents = false;

      return subscription;
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._emitter.removeAllListeners(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      this._emitter.removeCurrentListener();
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      return this._emitter.listeners(eventType);
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var _emitter;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(_toConsumableArray(args)));
    }
  }, {
    key: 'emitAndHold',
    value: function emitAndHold(eventType) {
      var _eventHolder, _emitter2;

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(_toConsumableArray(args)));
      (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(_toConsumableArray(args)));
      this._currentEventToken = null;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      if (this._currentEventToken) {
        this._eventHolder.releaseEvent(this._currentEventToken);
      } else if (this._emittingHeldEvents) {
        this._eventHolder.releaseCurrentEvent();
      }
    }
  }, {
    key: 'releaseHeldEventType',
    value: function releaseHeldEventType(eventType) {
      this._eventHolder.releaseEventType(eventType);
    }
  }]);

  return EventEmitterWithHolding;
}();

module.exports = EventEmitterWithHolding;
}, 440, null, "EventEmitterWithHolding");
__d(/* EventHolder */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var EventHolder = function () {
  function EventHolder() {
    _classCallCheck(this, EventHolder);

    this._heldEvents = {};
    this._currentEventKey = null;
  }

  _createClass(EventHolder, [{
    key: 'holdEvent',
    value: function holdEvent(eventType) {
      this._heldEvents[eventType] = this._heldEvents[eventType] || [];
      var eventsOfType = this._heldEvents[eventType];
      var key = {
        eventType: eventType,
        index: eventsOfType.length
      };

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      eventsOfType.push(args);
      return key;
    }
  }, {
    key: 'emitToListener',
    value: function emitToListener(eventType, listener, context) {
      var _this = this;

      var eventsOfType = this._heldEvents[eventType];
      if (!eventsOfType) {
        return;
      }
      var origEventKey = this._currentEventKey;
      eventsOfType.forEach(function (eventHeld, index) {
        if (!eventHeld) {
          return;
        }
        _this._currentEventKey = {
          eventType: eventType,
          index: index
        };
        listener.apply(context, eventHeld);
      });
      this._currentEventKey = origEventKey;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
      this._currentEventKey && this.releaseEvent(this._currentEventKey);
    }
  }, {
    key: 'releaseEvent',
    value: function releaseEvent(token) {
      delete this._heldEvents[token.eventType][token.index];
    }
  }, {
    key: 'releaseEventType',
    value: function releaseEventType(type) {
      this._heldEvents[type] = [];
    }
  }]);

  return EventHolder;
}();

module.exports = EventHolder;
}, 441, null, "EventHolder");
__d(/* EventValidator */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var EventValidator = {
  addValidation: function addValidation(emitter, types) {
    var eventTypes = Object.keys(types);
    var emitterWithValidation = Object.create(emitter);

    _extends(emitterWithValidation, {
      emit: function emit(type, a, b, c, d, e, _) {
        assertAllowsEventType(type, eventTypes);
        return emitter.emit.call(this, type, a, b, c, d, e, _);
      }
    });

    return emitterWithValidation;
  }
};

function assertAllowsEventType(type, allowedTypes) {
  if (allowedTypes.indexOf(type) === -1) {
    throw new TypeError(errorMessageFor(type, allowedTypes));
  }
}

function errorMessageFor(type, allowedTypes) {
  var message = 'Unknown event type "' + type + '". ';
  if (__DEV__) {
    message += recommendationFor(type, allowedTypes);
  }
  message += 'Known event types: ' + allowedTypes.join(', ') + '.';
  return message;
}

if (__DEV__) {
  var recommendationFor = function recommendationFor(type, allowedTypes) {
    var closestTypeRecommendation = closestTypeFor(type, allowedTypes);
    if (isCloseEnough(closestTypeRecommendation, type)) {
      return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
    } else {
      return '';
    }
  };

  var closestTypeFor = function closestTypeFor(type, allowedTypes) {
    var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
    return typeRecommendations.sort(recommendationSort)[0];
  };

  var typeRecommendationFor = function typeRecommendationFor(type, recomendedType) {
    return {
      type: recomendedType,
      distance: damerauLevenshteinDistance(type, recomendedType)
    };
  };

  var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
    if (recommendationA.distance < recommendationB.distance) {
      return -1;
    } else if (recommendationA.distance > recommendationB.distance) {
      return 1;
    } else {
      return 0;
    }
  };

  var isCloseEnough = function isCloseEnough(closestType, actualType) {
    return closestType.distance / actualType.length < 0.334;
  };

  var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
    var i = void 0,
        j = void 0;
    var d = [];

    for (i = 0; i <= a.length; i++) {
      d[i] = [i];
    }

    for (j = 1; j <= b.length; j++) {
      d[0][j] = j;
    }

    for (i = 1; i <= a.length; i++) {
      for (j = 1; j <= b.length; j++) {
        var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;

        d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

        if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
          d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
        }
      }
    }

    return d[a.length][b.length];
  };
}

module.exports = EventValidator;
}, 442, null, "EventValidator");
__d(/* ToolbarAndroid */function(global, require, module, exports) {

'use strict';

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\ToolbarAndroid\\ToolbarAndroid.android.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var Image = require(361    ); // 361 = Image
var NativeMethodsMixin = require(210                 ); // 210 = NativeMethodsMixin
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNativeViewAttributes = require(301                        ); // 301 = ReactNativeViewAttributes
var UIManager = require(279        ); // 279 = UIManager
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes
var ColorPropType = require(208            ); // 208 = ColorPropType

var createReactClass = require(311                 ); // 311 = create-react-class
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent
var resolveAssetSource = require(323                 ); // 323 = resolveAssetSource

var optionalImageSource = PropTypes.oneOfType([Image.propTypes.source, PropTypes.oneOf([])]);

var ToolbarAndroid = createReactClass({
  displayName: 'ToolbarAndroid',
  mixins: [NativeMethodsMixin],

  propTypes: _extends({}, ViewPropTypes, {
    actions: PropTypes.arrayOf(PropTypes.shape({
      title: PropTypes.string.isRequired,
      icon: optionalImageSource,
      show: PropTypes.oneOf(['always', 'ifRoom', 'never']),
      showWithText: PropTypes.bool
    })),

    logo: optionalImageSource,

    navIcon: optionalImageSource,

    onActionSelected: PropTypes.func,

    onIconClicked: PropTypes.func,

    overflowIcon: optionalImageSource,

    subtitle: PropTypes.string,

    subtitleColor: ColorPropType,

    title: PropTypes.string,

    titleColor: ColorPropType,

    contentInsetStart: PropTypes.number,

    contentInsetEnd: PropTypes.number,

    rtl: PropTypes.bool,

    testID: PropTypes.string
  }),

  render: function render() {
    var nativeProps = _extends({}, this.props);
    if (this.props.logo) {
      nativeProps.logo = resolveAssetSource(this.props.logo);
    }
    if (this.props.navIcon) {
      nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
    }
    if (this.props.overflowIcon) {
      nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
    }
    if (this.props.actions) {
      var nativeActions = [];
      for (var i = 0; i < this.props.actions.length; i++) {
        var action = _extends({}, this.props.actions[i]);
        if (action.icon) {
          action.icon = resolveAssetSource(action.icon);
        }
        if (action.show) {
          action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
        }
        nativeActions.push(action);
      }
      nativeProps.nativeActions = nativeActions;
    }

    return React.createElement(NativeToolbar, _extends({ onSelect: this._onSelect }, nativeProps, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 196
      }
    }));
  },

  _onSelect: function _onSelect(event) {
    var position = event.nativeEvent.position;
    if (position === -1) {
      this.props.onIconClicked && this.props.onIconClicked();
    } else {
      this.props.onActionSelected && this.props.onActionSelected(position);
    }
  }
});

var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
  nativeOnly: {
    nativeActions: true
  }
});

module.exports = ToolbarAndroid;
}, 443, null, "ToolbarAndroid");
__d(/* ViewPagerAndroid */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp2,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\ViewPager\\ViewPagerAndroid.android.js';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ViewPagerAndroid: {
    displayName: 'ViewPagerAndroid'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(211          ); // 211 = ReactNative
var UIManager = require(279        ); // 279 = UIManager
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var dismissKeyboard = require(368              ); // 368 = dismissKeyboard
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent

var VIEWPAGER_REF = 'viewPager';

var ViewPagerAndroid = _wrapComponent('ViewPagerAndroid')((_temp2 = _class = function (_React$Component) {
  _inherits(ViewPagerAndroid, _React$Component);

  function ViewPagerAndroid() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ViewPagerAndroid);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
      return _this.refs[VIEWPAGER_REF].getInnerViewNode();
    }, _this._childrenWithOverridenStyle = function () {
      return React.Children.map(_this.props.children, function (child) {
        if (!child) {
          return null;
        }
        var newProps = _extends({}, child.props, {
          style: [child.props.style, {
            position: 'absolute',
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            width: undefined,
            height: undefined
          }],
          collapsable: false
        });
        if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
          console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
        }
        return React.createElement(child.type, newProps);
      });
    }, _this._onPageScroll = function (e) {
      if (_this.props.onPageScroll) {
        _this.props.onPageScroll(e);
      }
      if (_this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    }, _this._onPageScrollStateChanged = function (e) {
      if (_this.props.onPageScrollStateChanged) {
        _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
      }
    }, _this._onPageSelected = function (e) {
      if (_this.props.onPageSelected) {
        _this.props.onPageSelected(e);
      }
    }, _this.setPage = function (selectedPage) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
    }, _this.setPageWithoutAnimation = function (selectedPage) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ViewPagerAndroid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.initialPage != null) {
        this.setPageWithoutAnimation(this.props.initialPage);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(NativeAndroidViewPager, _extends({}, this.props, {
        ref: VIEWPAGER_REF,
        style: this.props.style,
        onPageScroll: this._onPageScroll,
        onPageScrollStateChanged: this._onPageScrollStateChanged,
        onPageSelected: this._onPageSelected,
        children: this._childrenWithOverridenStyle(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 237
        }
      }));
    }
  }]);

  return ViewPagerAndroid;
}(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
  initialPage: PropTypes.number,

  onPageScroll: PropTypes.func,

  onPageScrollStateChanged: PropTypes.func,

  onPageSelected: PropTypes.func,

  pageMargin: PropTypes.number,

  keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag']),

  scrollEnabled: PropTypes.bool,

  peekEnabled: PropTypes.bool
}), _temp2));

var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);

module.exports = ViewPagerAndroid;
}, 444, null, "ViewPagerAndroid");
__d(/* WebView */function(global, require, module, exports) {
'use strict';

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                              ); // 27 = ./../../../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\Components\\WebView\\WebView.android.js',
    _class,
    _temp2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  WebView: {
    displayName: 'WebView'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native/Libraries/Components/WebView/WebView.android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var EdgeInsetsPropType = require(303                 ); // 303 = EdgeInsetsPropType
var ActivityIndicator = require(207                ); // 207 = ActivityIndicator
var React = require(286    ); // 286 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(211          ); // 211 = ReactNative
var StyleSheet = require(314         ); // 314 = StyleSheet
var UIManager = require(279        ); // 279 = UIManager
var View = require(285   ); // 285 = View
var ViewPropTypes = require(302            ); // 302 = ViewPropTypes

var deprecatedPropType = require(294                 ); // 294 = deprecatedPropType
var keyMirror = require(290                 ); // 290 = fbjs/lib/keyMirror
var requireNativeComponent = require(312                     ); // 312 = requireNativeComponent
var resolveAssetSource = require(323                 ); // 323 = resolveAssetSource

var RCT_WEBVIEW_REF = 'webview';

var WebViewState = keyMirror({
  IDLE: null,
  LOADING: null,
  ERROR: null
});

var defaultRenderLoading = function defaultRenderLoading() {
  return React.createElement(
    View,
    { style: styles.loadingView, __source: {
        fileName: _jsxFileName,
        lineNumber: 37
      }
    },
    React.createElement(ActivityIndicator, {
      style: styles.loadingProgressBar,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 38
      }
    })
  );
};

var WebView = _wrapComponent('WebView')((_temp2 = _class = function (_React$Component) {
  _inherits(WebView, _React$Component);

  function WebView() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, WebView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      viewState: WebViewState.IDLE,
      lastErrorEvent: null,
      startInLoadingState: true
    }, _this.goForward = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
    }, _this.goBack = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
    }, _this.reload = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
    }, _this.stopLoading = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
    }, _this.postMessage = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
    }, _this.injectJavaScript = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
    }, _this.updateNavigationState = function (event) {
      if (_this.props.onNavigationStateChange) {
        _this.props.onNavigationStateChange(event.nativeEvent);
      }
    }, _this.getWebViewHandle = function () {
      return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
    }, _this.onLoadingStart = function (event) {
      var onLoadStart = _this.props.onLoadStart;
      onLoadStart && onLoadStart(event);
      _this.updateNavigationState(event);
    }, _this.onLoadingError = function (event) {
      event.persist();var _this$props = _this.props,
          onError = _this$props.onError,
          onLoadEnd = _this$props.onLoadEnd;

      onError && onError(event);
      onLoadEnd && onLoadEnd(event);
      console.warn('Encountered an error loading page', event.nativeEvent);

      _this.setState({
        lastErrorEvent: event.nativeEvent,
        viewState: WebViewState.ERROR
      });
    }, _this.onLoadingFinish = function (event) {
      var _this$props2 = _this.props,
          onLoad = _this$props2.onLoad,
          onLoadEnd = _this$props2.onLoadEnd;

      onLoad && onLoad(event);
      onLoadEnd && onLoadEnd(event);
      _this.setState({
        viewState: WebViewState.IDLE
      });
      _this.updateNavigationState(event);
    }, _this.onMessage = function (event) {
      var onMessage = _this.props.onMessage;

      onMessage && onMessage(event);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(WebView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.startInLoadingState) {
        this.setState({ viewState: WebViewState.LOADING });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var otherView = null;

      if (this.state.viewState === WebViewState.LOADING) {
        otherView = (this.props.renderLoading || defaultRenderLoading)();
      } else if (this.state.viewState === WebViewState.ERROR) {
        var errorEvent = this.state.lastErrorEvent;
        otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
      } else if (this.state.viewState !== WebViewState.IDLE) {
        console.error('RCTWebView invalid state encountered: ' + this.state.loading);
      }

      var webViewStyles = [styles.container, this.props.style];
      if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
        webViewStyles.push(styles.hidden);
      }

      var source = this.props.source || {};
      if (this.props.html) {
        source.html = this.props.html;
      } else if (this.props.url) {
        source.uri = this.props.url;
      }

      if (source.method === 'POST' && source.headers) {
        console.warn('WebView: `source.headers` is not supported when using POST.');
      } else if (source.method === 'GET' && source.body) {
        console.warn('WebView: `source.body` is not supported when using GET.');
      }

      var webView = React.createElement(RCTWebView, {
        ref: RCT_WEBVIEW_REF,
        key: 'webViewKey',
        style: webViewStyles,
        source: resolveAssetSource(source),
        scalesPageToFit: this.props.scalesPageToFit,
        injectedJavaScript: this.props.injectedJavaScript,
        userAgent: this.props.userAgent,
        javaScriptEnabled: this.props.javaScriptEnabled,
        thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
        domStorageEnabled: this.props.domStorageEnabled,
        messagingEnabled: typeof this.props.onMessage === 'function',
        onMessage: this.onMessage,
        contentInset: this.props.contentInset,
        automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
        onContentSizeChange: this.props.onContentSizeChange,
        onLoadingStart: this.onLoadingStart,
        onLoadingFinish: this.onLoadingFinish,
        onLoadingError: this.onLoadingError,
        testID: this.props.testID,
        mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
        allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
        mixedContentMode: this.props.mixedContentMode,
        saveFormDataDisabled: this.props.saveFormDataDisabled,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 255
        }
      });

      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 282
          }
        },
        webView,
        otherView
      );
    }
  }]);

  return WebView;
}(React.Component), _class.propTypes = _extends({}, ViewPropTypes, {
  renderError: PropTypes.func,
  renderLoading: PropTypes.func,
  onLoad: PropTypes.func,
  onLoadEnd: PropTypes.func,
  onLoadStart: PropTypes.func,
  onError: PropTypes.func,
  automaticallyAdjustContentInsets: PropTypes.bool,
  contentInset: EdgeInsetsPropType,
  onNavigationStateChange: PropTypes.func,
  onMessage: PropTypes.func,
  onContentSizeChange: PropTypes.func,
  startInLoadingState: PropTypes.bool,
  style: ViewPropTypes.style,

  html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  source: PropTypes.oneOfType([PropTypes.shape({
    uri: PropTypes.string,

    method: PropTypes.oneOf(['GET', 'POST']),

    headers: PropTypes.object,

    body: PropTypes.string
  }), PropTypes.shape({
    html: PropTypes.string,

    baseUrl: PropTypes.string
  }), PropTypes.number]),

  javaScriptEnabled: PropTypes.bool,

  thirdPartyCookiesEnabled: PropTypes.bool,

  domStorageEnabled: PropTypes.bool,

  injectedJavaScript: PropTypes.string,

  scalesPageToFit: PropTypes.bool,

  userAgent: PropTypes.string,

  testID: PropTypes.string,

  mediaPlaybackRequiresUserAction: PropTypes.bool,

  allowUniversalAccessFromFileURLs: PropTypes.bool,

  injectJavaScript: PropTypes.func,

  mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility']),

  saveFormDataDisabled: PropTypes.bool
}), _class.defaultProps = {
  javaScriptEnabled: true,
  thirdPartyCookiesEnabled: true,
  scalesPageToFit: true,
  saveFormDataDisabled: false
}, _temp2));

var RCTWebView = requireNativeComponent('RCTWebView', WebView, {
  nativeOnly: {
    messagingEnabled: PropTypes.bool
  }
});

var styles = StyleSheet.create({
  container: {
    flex: 1
  },
  hidden: {
    height: 0,
    flex: 0 },
  loadingView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  loadingProgressBar: {
    height: 20
  }
});

module.exports = WebView;
}, 445, null, "WebView");
__d(/* ActionSheetIOS */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var RCTActionSheetManager = require(184            ).ActionSheetManager; // 184 = NativeModules

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var processColor = require(297           ); // 297 = processColor

var ActionSheetIOS = {
  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof callback === 'function', 'Must provide a valid callback');
    RCTActionSheetManager.showActionSheetWithOptions(_extends({}, options, { tintColor: processColor(options.tintColor) }), callback);
  },
  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
    RCTActionSheetManager.showShareActionSheetWithOptions(_extends({}, options, { tintColor: processColor(options.tintColor) }), failureCallback, successCallback);
  }
};

module.exports = ActionSheetIOS;
}, 446, null, "ActionSheetIOS");
__d(/* AppRegistry */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var BatchedBridge = require(185            ); // 185 = BatchedBridge
var BugReporting = require(448           ); // 448 = BugReporting
var NativeModules = require(184            ); // 184 = NativeModules
var ReactNative = require(211          ); // 211 = ReactNative
var SceneTracker = require(450           ); // 450 = SceneTracker

var infoLog = require(266      ); // 266 = infoLog
var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var renderApplication = require(451                ); // 451 = renderApplication

var runnables = {};
var runCount = 1;
var sections = {};
var tasks = new Map();
var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
  return component();
};

var wrapperComponentProvider = void 0;

var AppRegistry = {
  setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
    wrapperComponentProvider = provider;
  },
  registerConfig: function registerConfig(config) {
    config.forEach(function (appConfig) {
      if (appConfig.run) {
        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
      } else {
        invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
        AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
      }
    });
  },
  registerComponent: function registerComponent(appKey, componentProvider, section) {
    runnables[appKey] = {
      componentProvider: componentProvider,
      run: function run(appParameters) {
        return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
      }
    };
    if (section) {
      sections[appKey] = runnables[appKey];
    }
    return appKey;
  },
  registerRunnable: function registerRunnable(appKey, run) {
    runnables[appKey] = { run: run };
    return appKey;
  },
  registerSection: function registerSection(appKey, component) {
    AppRegistry.registerComponent(appKey, component, true);
  },
  getAppKeys: function getAppKeys() {
    return Object.keys(runnables);
  },
  getSectionKeys: function getSectionKeys() {
    return Object.keys(sections);
  },
  getSections: function getSections() {
    return _extends({}, sections);
  },
  getRunnable: function getRunnable(appKey) {
    return runnables[appKey];
  },
  getRegistry: function getRegistry() {
    return {
      sections: AppRegistry.getSectionKeys(),
      runnables: _extends({}, runnables)
    };
  },
  setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
    componentProviderInstrumentationHook = hook;
  },
  runApplication: function runApplication(appKey, appParameters) {
    var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
    infoLog(msg);
    BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
      return msg;
    });
    invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + 'Hint: This error often happens when you\'re running the packager ' + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + 'folder and run \'npm start\').\n\n' + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');

    SceneTracker.setActiveScene({ name: appKey });
    runnables[appKey].run(appParameters);
  },
  unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
  },
  registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
    if (tasks.has(taskKey)) {
      console.warn('registerHeadlessTask called multiple times for same key \'' + taskKey + '\'');
    }
    tasks.set(taskKey, task);
  },
  startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
    var taskProvider = tasks.get(taskKey);
    if (!taskProvider) {
      throw new Error('No task registered for key ' + taskKey);
    }
    taskProvider()(data).then(function () {
      return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    }).catch(function (reason) {
      console.error(reason);
      NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    });
  }
};

BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);

module.exports = AppRegistry;
}, 447, null, "AppRegistry");
__d(/* BugReporting */function(global, require, module, exports) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RCTDeviceEventEmitter = require(202                    ); // 202 = RCTDeviceEventEmitter
var Map = require(221  ); // 221 = Map
var infoLog = require(266      ); // 266 = infoLog

function defaultExtras() {
  BugReporting.addFileSource('react_hierarchy.txt', function () {
    return require(449            )(); // 449 = dumpReactTree
  });
}

var BugReporting = function () {
  function BugReporting() {
    _classCallCheck(this, BugReporting);
  }

  _createClass(BugReporting, null, [{
    key: '_maybeInit',
    value: function _maybeInit() {
      if (!BugReporting._subscription) {
        BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
        defaultExtras();
      }
    }
  }, {
    key: 'addSource',
    value: function addSource(key, callback) {
      return this._addSource(key, callback, BugReporting._extraSources);
    }
  }, {
    key: 'addFileSource',
    value: function addFileSource(key, callback) {
      return this._addSource(key, callback, BugReporting._fileSources);
    }
  }, {
    key: '_addSource',
    value: function _addSource(key, callback, source) {
      BugReporting._maybeInit();
      if (source.has(key)) {
        console.warn('BugReporting.add* called multiple times for same key \'' + key + '\'');
      }
      source.set(key, callback);
      return { remove: function remove() {
          source.delete(key);
        } };
    }
  }, {
    key: 'collectExtraData',
    value: function collectExtraData() {
      var extraData = {};
      for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref = _ref3;

        var _ref2 = _slicedToArray(_ref, 2);

        var _key = _ref2[0];
        var callback = _ref2[1];

        extraData[_key] = callback();
      }
      var fileData = {};
      for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref6;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref6 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref6 = _i2.value;
        }

        var _ref4 = _ref6;

        var _ref5 = _slicedToArray(_ref4, 2);

        var _key2 = _ref5[0];
        var _callback = _ref5[1];

        fileData[_key2] = _callback();
      }
      infoLog('BugReporting extraData:', extraData);
      var BugReportingNativeModule = require(184            ).BugReporting; // 184 = NativeModules
      BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

      return { extras: extraData, files: fileData };
    }
  }]);

  return BugReporting;
}();

BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;


module.exports = BugReporting;
}, 448, null, "BugReporting");
__d(/* dumpReactTree */function(global, require, module, exports) {
'use strict';

function dumpReactTree() {
  try {
    return getReactTree();
  } catch (e) {
    return 'Failed to dump react tree: ' + e;
  }
}

function getReactTree() {
  return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
}

module.exports = dumpReactTree;
}, 449, null, "dumpReactTree");
__d(/* SceneTracker */function(global, require, module, exports) {

'use strict';

var _listeners = [];

var _activeScene = { name: 'default' };

var SceneTracker = {
  setActiveScene: function setActiveScene(scene) {
    _activeScene = scene;
    _listeners.forEach(function (listener) {
      return listener(_activeScene);
    });
  },
  getActiveScene: function getActiveScene() {
    return _activeScene;
  },
  addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
    _listeners.push(callback);
    return {
      remove: function remove() {
        _listeners = _listeners.filter(function (listener) {
          return callback !== listener;
        });
      }
    };
  }
};

module.exports = SceneTracker;
}, 450, null, "SceneTracker");
__d(/* renderApplication */function(global, require, module, exports) {

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native\\Libraries\\ReactNative\\renderApplication.js';
var AppContainer = require(398           ); // 398 = AppContainer
var React = require(286    ); // 286 = React
var ReactNative = require(211          ); // 211 = ReactNative

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

require(452          ); // 452 = BackHandler

function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);

  ReactNative.render(React.createElement(
    AppContainer,
    { rootTag: rootTag, WrapperComponent: WrapperComponent, __source: {
        fileName: _jsxFileName,
        lineNumber: 34
      }
    },
    React.createElement(RootComponent, _extends({}, initialProps, { rootTag: rootTag, __source: {
        fileName: _jsxFileName,
        lineNumber: 35
      }
    }))
  ), rootTag);
}

module.exports = renderApplication;
}, 451, null, "renderApplication");
__d(/* BackHandler */function(global, require, module, exports) {

'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var DeviceEventManager = require(184            ).DeviceEventManager; // 184 = NativeModules
var RCTDeviceEventEmitter = require(202                    ); // 202 = RCTDeviceEventEmitter

var DEVICE_BACK_EVENT = 'hardwareBackPress';

var _backPressSubscriptions = new Set();

RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
  var backPressSubscriptions = new Set(_backPressSubscriptions);
  var invokeDefault = true;
  var subscriptions = [].concat(_toConsumableArray(backPressSubscriptions)).reverse();
  for (var i = 0; i < subscriptions.length; ++i) {
    if (subscriptions[i]()) {
      invokeDefault = false;
      break;
    }
  }

  if (invokeDefault) {
    BackHandler.exitApp();
  }
});

var BackHandler = {

  exitApp: function exitApp() {
    DeviceEventManager.invokeDefaultBackPressHandler();
  },

  addEventListener: function addEventListener(eventName, handler) {
    _backPressSubscriptions.add(handler);
    return {
      remove: function remove() {
        return BackHandler.removeEventListener(eventName, handler);
      }
    };
  },

  removeEventListener: function removeEventListener(eventName, handler) {
    _backPressSubscriptions.delete(handler);
  }

};

module.exports = BackHandler;
}, 452, null, "BackHandler");
__d(/* AsyncStorage */function(global, require, module, exports) {
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var NativeModules = require(184            ); // 184 = NativeModules

var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;

var AsyncStorage = {
  _getRequests: [],
  _getKeys: [],
  _immediate: null,

  getItem: function getItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiGet([key], function (errors, result) {
        var value = result && result[0] && result[0][1] ? result[0][1] : null;
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0], value);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  },

  setItem: function setItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  removeItem: function removeItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove([key], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  mergeItem: function mergeItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  clear: function clear(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.clear(function (error) {
        callback && callback(convertError(error));
        if (error && convertError(error)) {
          reject(convertError(error));
        } else {
          resolve(null);
        }
      });
    });
  },

  getAllKeys: function getAllKeys(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.getAllKeys(function (error, keys) {
        callback && callback(convertError(error), keys);
        if (error) {
          reject(convertError(error));
        } else {
          resolve(keys);
        }
      });
    });
  },

  flushGetRequests: function flushGetRequests() {
    var getRequests = this._getRequests;
    var getKeys = this._getKeys;

    this._getRequests = [];
    this._getKeys = [];

    RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
      var map = {};
      result && result.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        map[key] = value;return value;
      });
      var reqLength = getRequests.length;
      for (var i = 0; i < reqLength; i++) {
        var request = getRequests[i];
        var requestKeys = request.keys;
        var requestResult = requestKeys.map(function (key) {
          return [key, map[key]];
        });
        request.callback && request.callback(null, requestResult);
        request.resolve && request.resolve(requestResult);
      }
    });
  },

  multiGet: function multiGet(keys, callback) {
    var _this = this;

    if (!this._immediate) {
      this._immediate = setImmediate(function () {
        _this._immediate = null;
        _this.flushGetRequests();
      });
    }

    var getRequest = {
      keys: keys,
      callback: callback,

      keyIndex: this._getKeys.length,
      resolve: null,
      reject: null
    };

    var promiseResult = new Promise(function (resolve, reject) {
      getRequest.resolve = resolve;
      getRequest.reject = reject;
    });

    this._getRequests.push(getRequest);

    keys.forEach(function (key) {
      if (_this._getKeys.indexOf(key) === -1) {
        _this._getKeys.push(key);
      }
    });

    return promiseResult;
  },

  multiSet: function multiSet(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiRemove: function multiRemove(keys, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove(keys, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiMerge: function multiMerge(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  }
};

if (!RCTAsyncStorage.multiMerge) {
  delete AsyncStorage.mergeItem;
  delete AsyncStorage.multiMerge;
}

function convertErrors(errs) {
  if (!errs) {
    return null;
  }
  return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
    return convertError(e);
  });
}

function convertError(error) {
  if (!error) {
    return null;
  }
  var out = new Error(error.message);
  out.key = error.key;
  return out;
}

module.exports = AsyncStorage;
}, 453, null, "AsyncStorage");
__d(/* BackAndroid */function(global, require, module, exports) {

'use strict';

var BackHandler = require(452          ); // 452 = BackHandler

var warning = require(199               ); // 199 = fbjs/lib/warning

var BackAndroid = {

  exitApp: function exitApp() {
    warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
    BackHandler.exitApp();
  },

  addEventListener: function addEventListener(eventName, handler) {
    warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
    return BackHandler.addEventListener(eventName, handler);
  },

  removeEventListener: function removeEventListener(eventName, handler) {
    warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
    BackHandler.removeEventListener(eventName, handler);
  }

};

module.exports = BackAndroid;
}, 454, null, "BackAndroid");
__d(/* CameraRoll */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PropTypes = require(20          ); // 20 = prop-types
var checkPropTypes = PropTypes.checkPropTypes;

var RCTCameraRollManager = require(184            ).CameraRollManager; // 184 = NativeModules

var createStrictShapeTypeChecker = require(304                           ); // 304 = createStrictShapeTypeChecker
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var GROUP_TYPES_OPTIONS = {
  Album: 'Album',
  All: 'All',
  Event: 'Event',
  Faces: 'Faces',
  Library: 'Library',
  PhotoStream: 'PhotoStream',
  SavedPhotos: 'SavedPhotos' };

var ASSET_TYPE_OPTIONS = {
  All: 'All',
  Videos: 'Videos',
  Photos: 'Photos'
};

var getPhotosParamChecker = createStrictShapeTypeChecker({
  first: PropTypes.number.isRequired,

  after: PropTypes.string,

  groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),

  groupName: PropTypes.string,

  assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),

  mimeTypes: PropTypes.arrayOf(PropTypes.string)
});

var getPhotosReturnChecker = createStrictShapeTypeChecker({
  edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
    node: createStrictShapeTypeChecker({
      type: PropTypes.string.isRequired,
      group_name: PropTypes.string.isRequired,
      image: createStrictShapeTypeChecker({
        uri: PropTypes.string.isRequired,
        height: PropTypes.number.isRequired,
        width: PropTypes.number.isRequired,
        isStored: PropTypes.bool,

        playableDuration: PropTypes.number
      }).isRequired,
      timestamp: PropTypes.number.isRequired,
      location: createStrictShapeTypeChecker({
        latitude: PropTypes.number,
        longitude: PropTypes.number,
        altitude: PropTypes.number,
        heading: PropTypes.number,
        speed: PropTypes.number
      })
    }).isRequired
  })).isRequired,
  page_info: createStrictShapeTypeChecker({
    has_next_page: PropTypes.bool.isRequired,
    start_cursor: PropTypes.string,
    end_cursor: PropTypes.string
  }).isRequired
});

var CameraRoll = function () {
  function CameraRoll() {
    _classCallCheck(this, CameraRoll);
  }

  _createClass(CameraRoll, null, [{
    key: 'saveImageWithTag',
    value: function saveImageWithTag(tag) {
      console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
      return this.saveToCameraRoll(tag, 'photo');
    }
  }, {
    key: 'saveToCameraRoll',
    value: function saveToCameraRoll(tag, type) {
      invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');

      invariant(type === 'photo' || type === 'video' || type === undefined, 'The second argument to saveToCameraRoll must be \'photo\' or \'video\'. You passed ' + type);

      var mediaType = 'photo';
      if (type) {
        mediaType = type;
      } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
        mediaType = 'video';
      }

      return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
    }
  }, {
    key: 'getPhotos',
    value: function getPhotos(params) {
      if (__DEV__) {
        checkPropTypes({ params: getPhotosParamChecker }, { params: params }, 'params', 'CameraRoll.getPhotos');
      }
      if (arguments.length > 1) {
        console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
        var successCallback = arguments[1];
        if (__DEV__) {
          var callback = arguments[1];
          successCallback = function successCallback(response) {
            checkPropTypes({ response: getPhotosReturnChecker }, { response: response }, 'response', 'CameraRoll.getPhotos callback');
            callback(response);
          };
        }
        var errorCallback = arguments[2] || function () {};
        RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
      }

      return RCTCameraRollManager.getPhotos(params);
    }
  }]);

  return CameraRoll;
}();

CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;


module.exports = CameraRoll;
}, 455, null, "CameraRoll");
__d(/* Clipboard */function(global, require, module, exports) {
'use strict';

var Clipboard = require(184            ).Clipboard; // 184 = NativeModules

module.exports = {
  getString: function getString() {
    return Clipboard.getString();
  },
  setString: function setString(content) {
    Clipboard.setString(content);
  }
};
}, 456, null, "Clipboard");
__d(/* DatePickerAndroid */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DatePickerModule = require(184            ).DatePickerAndroid; // 184 = NativeModules

function _toMillis(options, key) {
  var dateVal = options[key];

  if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
    options[key] = dateVal.getTime();
  }
}

var DatePickerAndroid = function () {
  function DatePickerAndroid() {
    _classCallCheck(this, DatePickerAndroid);
  }

  _createClass(DatePickerAndroid, null, [{
    key: 'open',
    value: function open(options) {
      var optionsMs;
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              optionsMs = options;

              if (optionsMs) {
                _toMillis(options, 'date');
                _toMillis(options, 'minDate');
                _toMillis(options, 'maxDate');
              }
              return _context.abrupt('return', DatePickerModule.open(options));

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'dateSetAction',
    get: function get() {
      return 'dateSetAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);

  return DatePickerAndroid;
}();

module.exports = DatePickerAndroid;
}, 457, null, "DatePickerAndroid");
__d(/* ImagePickerIOS */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var RCTImagePicker = require(184            ).ImagePickerIOS; // 184 = NativeModules

var ImagePickerIOS = {
  canRecordVideos: function canRecordVideos(callback) {
    return RCTImagePicker.canRecordVideos(callback);
  },
  canUseCamera: function canUseCamera(callback) {
    return RCTImagePicker.canUseCamera(callback);
  },
  openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
    config = _extends({
      videoMode: false
    }, config);
    return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
  },
  openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
    config = _extends({
      showImages: true,
      showVideos: false
    }, config);
    return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
  }
};

module.exports = ImagePickerIOS;
}, 458, null, "ImagePickerIOS");
__d(/* Linking */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var NativeModules = require(184            ); // 184 = NativeModules
var Platform = require(192       ); // 192 = Platform

var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

var Linking = function (_NativeEventEmitter) {
  _inherits(Linking, _NativeEventEmitter);

  function Linking() {
    _classCallCheck(this, Linking);

    return _possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
  }

  _createClass(Linking, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      this.addListener(type, handler);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      this.removeListener(type, handler);
    }
  }, {
    key: 'openURL',
    value: function openURL(url) {
      this._validateURL(url);
      return LinkingManager.openURL(url);
    }
  }, {
    key: 'canOpenURL',
    value: function canOpenURL(url) {
      this._validateURL(url);
      return LinkingManager.canOpenURL(url);
    }
  }, {
    key: 'getInitialURL',
    value: function getInitialURL() {
      return LinkingManager.getInitialURL();
    }
  }, {
    key: '_validateURL',
    value: function _validateURL(url) {
      invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
      invariant(url, 'Invalid URL: cannot be empty');
    }
  }]);

  return Linking;
}(NativeEventEmitter);

module.exports = new Linking();
}, 459, null, "Linking");
__d(/* NetInfo */function(global, require, module, exports) {
'use strict';

var Map = require(221  ); // 221 = Map
var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var NativeModules = require(184            ); // 184 = NativeModules
var Platform = require(192       ); // 192 = Platform
var RCTNetInfo = NativeModules.NetInfo;

var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);

var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

var _subscriptions = new Map();

var _isConnectedDeprecated = void 0;
if (Platform.OS === 'ios') {
  _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
    return reachability !== 'none' && reachability !== 'unknown';
  };
} else if (Platform.OS === 'android') {
  _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
  };
}

function _isConnected(connection) {
  return connection.type !== 'none' && connection.type !== 'unknown';
}

var _isConnectedSubscriptions = new Map();

var NetInfo = {
  addEventListener: function addEventListener(eventName, handler) {
    var listener = void 0;
    if (eventName === 'connectionChange') {
      listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
        handler({
          type: appStateData.connectionType,
          effectiveType: appStateData.effectiveConnectionType
        });
      });
    } else if (eventName === 'change') {
      console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');

      listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
        handler(appStateData.network_info);
      });
    } else {
      console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
      return {
        remove: function remove() {}
      };
    }

    _subscriptions.set(handler, listener);
    return {
      remove: function remove() {
        return NetInfo.removeEventListener(eventName, handler);
      }
    };
  },
  removeEventListener: function removeEventListener(eventName, handler) {
    var listener = _subscriptions.get(handler);
    if (!listener) {
      return;
    }
    listener.remove();
    _subscriptions.delete(handler);
  },
  fetch: function fetch() {
    console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
    return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
      return resp.network_info;
    });
  },
  getConnectionInfo: function getConnectionInfo() {
    return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
      return {
        type: resp.connectionType,
        effectiveType: resp.effectiveConnectionType
      };
    });
  },

  isConnected: {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = function listener(connection) {
        if (eventName === 'change') {
          handler(_isConnectedDeprecated(connection));
        } else if (eventName === 'connectionChange') {
          handler(_isConnected(connection));
        }
      };
      _isConnectedSubscriptions.set(handler, listener);
      NetInfo.addEventListener(eventName, listener);
      return {
        remove: function remove() {
          return NetInfo.isConnected.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _isConnectedSubscriptions.get(handler);
      NetInfo.removeEventListener(eventName, listener);
      _isConnectedSubscriptions.delete(handler);
    },
    fetch: function fetch() {
      return NetInfo.getConnectionInfo().then(_isConnected);
    }
  },

  isConnectionExpensive: function isConnectionExpensive() {
    return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
  }
};

module.exports = NetInfo;
}, 460, null, "NetInfo");
__d(/* PushNotificationIOS */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter
var RCTPushNotificationManager = require(184            ).PushNotificationManager; // 184 = NativeModules
var invariant = require(182                 ); // 182 = fbjs/lib/invariant

var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

var _notifHandlers = new Map();

var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

var PushNotificationIOS = function () {
  _createClass(PushNotificationIOS, null, [{
    key: 'presentLocalNotification',
    value: function presentLocalNotification(details) {
      RCTPushNotificationManager.presentLocalNotification(details);
    }
  }, {
    key: 'scheduleLocalNotification',
    value: function scheduleLocalNotification(details) {
      RCTPushNotificationManager.scheduleLocalNotification(details);
    }
  }, {
    key: 'cancelAllLocalNotifications',
    value: function cancelAllLocalNotifications() {
      RCTPushNotificationManager.cancelAllLocalNotifications();
    }
  }, {
    key: 'removeAllDeliveredNotifications',
    value: function removeAllDeliveredNotifications() {
      RCTPushNotificationManager.removeAllDeliveredNotifications();
    }
  }, {
    key: 'getDeliveredNotifications',
    value: function getDeliveredNotifications(callback) {
      RCTPushNotificationManager.getDeliveredNotifications(callback);
    }
  }, {
    key: 'removeDeliveredNotifications',
    value: function removeDeliveredNotifications(identifiers) {
      RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
    }
  }, {
    key: 'setApplicationIconBadgeNumber',
    value: function setApplicationIconBadgeNumber(number) {
      RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
    }
  }, {
    key: 'getApplicationIconBadgeNumber',
    value: function getApplicationIconBadgeNumber(callback) {
      RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
    }
  }, {
    key: 'cancelLocalNotifications',
    value: function cancelLocalNotifications(userInfo) {
      RCTPushNotificationManager.cancelLocalNotifications(userInfo);
    }
  }, {
    key: 'getScheduledLocalNotifications',
    value: function getScheduledLocalNotifications(callback) {
      RCTPushNotificationManager.getScheduledLocalNotifications(callback);
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener;
      if (type === 'notification') {
        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'localNotification') {
        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'register') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
          handler(registrationInfo.deviceToken);
        });
      } else if (type === 'registrationError') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
          handler(errorInfo);
        });
      }
      _notifHandlers.set(type, listener);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener = _notifHandlers.get(type);
      if (!listener) {
        return;
      }
      listener.remove();
      _notifHandlers.delete(type);
    }
  }, {
    key: 'requestPermissions',
    value: function requestPermissions(permissions) {
      var requestedPermissions = {};
      if (permissions) {
        requestedPermissions = {
          alert: !!permissions.alert,
          badge: !!permissions.badge,
          sound: !!permissions.sound
        };
      } else {
        requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };
      }
      return RCTPushNotificationManager.requestPermissions(requestedPermissions);
    }
  }, {
    key: 'abandonPermissions',
    value: function abandonPermissions() {
      RCTPushNotificationManager.abandonPermissions();
    }
  }, {
    key: 'checkPermissions',
    value: function checkPermissions(callback) {
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTPushNotificationManager.checkPermissions(callback);
    }
  }, {
    key: 'getInitialNotification',
    value: function getInitialNotification() {
      return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
        return notification && new PushNotificationIOS(notification);
      });
    }
  }]);

  function PushNotificationIOS(nativeNotif) {
    var _this = this;

    _classCallCheck(this, PushNotificationIOS);

    this._data = {};
    this._remoteNotificationCompleteCallbackCalled = false;
    this._isRemote = nativeNotif.remote;
    if (this._isRemote) {
      this._notificationId = nativeNotif.notificationId;
    }

    if (nativeNotif.remote) {
      Object.keys(nativeNotif).forEach(function (notifKey) {
        var notifVal = nativeNotif[notifKey];
        if (notifKey === 'aps') {
          _this._alert = notifVal.alert;
          _this._sound = notifVal.sound;
          _this._badgeCount = notifVal.badge;
          _this._category = notifVal.category;
          _this._contentAvailable = notifVal['content-available'];
        } else {
          _this._data[notifKey] = notifVal;
        }
      });
    } else {
      this._badgeCount = nativeNotif.applicationIconBadgeNumber;
      this._sound = nativeNotif.soundName;
      this._alert = nativeNotif.alertBody;
      this._data = nativeNotif.userInfo;
      this._category = nativeNotif.category;
    }
  }

  _createClass(PushNotificationIOS, [{
    key: 'finish',
    value: function finish(fetchResult) {
      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
        return;
      }
      this._remoteNotificationCompleteCallbackCalled = true;

      RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
    }
  }, {
    key: 'getMessage',
    value: function getMessage() {
      return this._alert;
    }
  }, {
    key: 'getSound',
    value: function getSound() {
      return this._sound;
    }
  }, {
    key: 'getCategory',
    value: function getCategory() {
      return this._category;
    }
  }, {
    key: 'getAlert',
    value: function getAlert() {
      return this._alert;
    }
  }, {
    key: 'getContentAvailable',
    value: function getContentAvailable() {
      return this._contentAvailable;
    }
  }, {
    key: 'getBadgeCount',
    value: function getBadgeCount() {
      return this._badgeCount;
    }
  }, {
    key: 'getData',
    value: function getData() {
      return this._data;
    }
  }]);

  return PushNotificationIOS;
}();

PushNotificationIOS.FetchResult = {
  NewData: 'UIBackgroundFetchResultNewData',
  NoData: 'UIBackgroundFetchResultNoData',
  ResultFailed: 'UIBackgroundFetchResultFailed'
};


module.exports = PushNotificationIOS;
}, 461, null, "PushNotificationIOS");
__d(/* Settings */function(global, require, module, exports) {
'use strict';

var Settings = {
  get: function get(key) {
    console.warn('Settings is not yet supported on Android');
    return null;
  },
  set: function set(settings) {
    console.warn('Settings is not yet supported on Android');
  },
  watchKeys: function watchKeys(keys, callback) {
    console.warn('Settings is not yet supported on Android');
    return -1;
  },
  clearWatch: function clearWatch(watchId) {
    console.warn('Settings is not yet supported on Android');
  }
};

module.exports = Settings;
}, 462, null, "Settings");
__d(/* Share */function(global, require, module, exports) {
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Platform = require(192       ); // 192 = Platform

var invariant = require(182                 ); // 182 = fbjs/lib/invariant
var processColor = require(297           ); // 297 = processColor

var _require = require(184            ), // 184 = NativeModules
    ActionSheetManager = _require.ActionSheetManager,
    ShareModule = _require.ShareModule;

var Share = function () {
  function Share() {
    _classCallCheck(this, Share);
  }

  _createClass(Share, null, [{
    key: 'share',
    value: function share(content) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
      invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

      if (Platform.OS === 'android') {
        invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
        return ShareModule.share(content, options.dialogTitle);
      } else if (Platform.OS === 'ios') {
        return new Promise(function (resolve, reject) {
          ActionSheetManager.showShareActionSheetWithOptions(_extends({}, content, options, { tintColor: processColor(options.tintColor) }), function (error) {
            return reject(error);
          }, function (success, activityType) {
            if (success) {
              resolve({
                'action': 'sharedAction',
                'activityType': activityType
              });
            } else {
              resolve({
                'action': 'dismissedAction'
              });
            }
          });
        });
      } else {
        return Promise.reject(new Error('Unsupported platform'));
      }
    }
  }, {
    key: 'sharedAction',
    get: function get() {
      return 'sharedAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);

  return Share;
}();

module.exports = Share;
}, 463, null, "Share");
__d(/* StatusBarIOS */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(242                 ); // 242 = NativeEventEmitter

module.exports = new NativeEventEmitter('StatusBarManager');
}, 464, null, "StatusBarIOS");
__d(/* TimePickerAndroid */function(global, require, module, exports) {
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TimePickerModule = require(184            ).TimePickerAndroid; // 184 = NativeModules

var TimePickerAndroid = function () {
  function TimePickerAndroid() {
    _classCallCheck(this, TimePickerAndroid);
  }

  _createClass(TimePickerAndroid, null, [{
    key: 'open',
    value: function open(options) {
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', TimePickerModule.open(options));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'timeSetAction',
    get: function get() {
      return 'timeSetAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);

  return TimePickerAndroid;
}();

module.exports = TimePickerAndroid;
}, 465, null, "TimePickerAndroid");
__d(/* Vibration */function(global, require, module, exports) {
'use strict';

var RCTVibration = require(184            ).Vibration; // 184 = NativeModules
var Platform = require(192       ); // 192 = Platform

var _vibrating = false;
var _id = 0;

function vibrateByPattern(pattern) {
  var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (_vibrating) {
    return;
  }
  _vibrating = true;
  if (pattern[0] === 0) {
    RCTVibration.vibrate();
    pattern = pattern.slice(1);
  }
  if (pattern.length === 0) {
    _vibrating = false;
    return;
  }
  setTimeout(function () {
    return vibrateScheduler(++_id, pattern, repeat, 1);
  }, pattern[0]);
}

function vibrateScheduler(id, pattern, repeat, nextIndex) {
  if (!_vibrating || id !== _id) {
    return;
  }
  RCTVibration.vibrate();
  if (nextIndex >= pattern.length) {
    if (repeat) {
      nextIndex = 0;
    } else {
      _vibrating = false;
      return;
    }
  }
  setTimeout(function () {
    return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
  }, pattern[nextIndex]);
}

var Vibration = {
  vibrate: function vibrate() {
    var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (Platform.OS === 'android') {
      if (typeof pattern === 'number') {
        RCTVibration.vibrate(pattern);
      } else if (Array.isArray(pattern)) {
        RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    } else {
      if (_vibrating) {
        return;
      }
      if (typeof pattern === 'number') {
        RCTVibration.vibrate();
      } else if (Array.isArray(pattern)) {
        vibrateByPattern(pattern, repeat);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    }
  },

  cancel: function cancel() {
    if (Platform.OS === 'ios') {
      _vibrating = false;
    } else {
      RCTVibration.cancel();
    }
  }
};

module.exports = Vibration;
}, 466, null, "Vibration");
__d(/* VibrationIOS */function(global, require, module, exports) {
'use strict';

var warning = require(199               ); // 199 = fbjs/lib/warning

var VibrationIOS = {
  vibrate: function vibrate() {
    warning('VibrationIOS is not supported on this platform!');
  }
};

module.exports = VibrationIOS;
}, 467, null, "VibrationIOS");
__d(/* takeSnapshot */function(global, require, module, exports) {

'use strict';

var _require = require(211          ), // 211 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
}, 468, null, "takeSnapshot");
__d(/* native-base/dist/src/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.mapPropsToStyleNames = exports.SwipeRow = exports.Root = exports.Segment = exports.DefaultTabBar = exports.TabContainer = exports.TabHeading = exports.ActionSheet = exports.ScrollableTab = exports.Toast = exports.View = exports.TabContent = exports.Text = exports.Grid = exports.Row = exports.Col = exports.Textarea = exports.Label = exports.Subtitle = exports.Item = exports.DeckSwiper = exports.Separator = exports.ListItem = exports.List = exports.Picker = exports.FooterTab = exports.Tabs = exports.Tab = exports.Footer = exports.Content = exports.Container = exports.Switch = exports.Spinner = exports.H3 = exports.H2 = exports.H1 = exports.CardItem = exports.Card = exports.Thumbnail = exports.Radio = exports.CheckBox = exports.Badge = exports.Body = exports.Right = exports.Left = exports.Fab = exports.Title = exports.Input = exports.InputGroup = exports.Form = exports.Header = exports.Icon = exports.IconNB = exports.Button = exports.Drawer = exports.connectStyle = exports.StyleProvider = exports.variables = exports.getTheme = undefined;var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _lodash = require(484     ); // 484 = lodash
var _reactNativeEasyGrid = require(485                     ); // 485 = react-native-easy-grid

var _init = require(490     );var _init2 = _interopRequireDefault(_init); // 490 = ./init
var _components = require(491                 );var _components2 = _interopRequireDefault(_components); // 491 = ./theme/components
var _platform = require(493                         );var _platform2 = _interopRequireDefault(_platform); // 493 = ./theme/variables/platform
var _Drawer = require(543             );var _Drawer2 = _interopRequireDefault(_Drawer); // 543 = ./basic/Drawer
var _SwipeRow = require(547               ); // 547 = ./basic/SwipeRow
var _Text = require(548           ); // 548 = ./basic/Text
var _View = require(556           ); // 556 = ./basic/View
var _Button = require(557             ); // 557 = ./basic/Button
var _TabHeading = require(559                 ); // 559 = ./basic/TabHeading
var _TabContainer = require(560                   ); // 560 = ./basic/TabContainer
var _IconNB = require(561             ); // 561 = ./basic/IconNB
var _Icon = require(628           ); // 628 = ./basic/Icon
var _Header = require(630             ); // 630 = ./basic/Header
var _InputGroup = require(631                 ); // 631 = ./basic/InputGroup
var _Input = require(632            ); // 632 = ./basic/Input
var _Title = require(634            ); // 634 = ./basic/Title
var _Fab = require(635          ); // 635 = ./basic/Fab
var _Left = require(550           ); // 550 = ./basic/Left
var _Right = require(553            ); // 553 = ./basic/Right
var _Body = require(554           ); // 554 = ./basic/Body
var _Badge = require(636            ); // 636 = ./basic/Badge
var _Checkbox = require(637               ); // 637 = ./basic/Checkbox
var _Radio = require(638            ); // 638 = ./basic/Radio
var _Thumbnail = require(639                ); // 639 = ./basic/Thumbnail
var _Card = require(640           ); // 640 = ./basic/Card
var _CardItem = require(641               ); // 641 = ./basic/CardItem
var _H = require(642         ); // 642 = ./basic/H1
var _H2 = require(643         ); // 643 = ./basic/H2
var _H3 = require(644         ); // 644 = ./basic/H3
var _Spinner = require(645              ); // 645 = ./basic/Spinner
var _Switch = require(646             ); // 646 = ./basic/Switch
var _Container = require(647                ); // 647 = ./basic/Container
var _Root = require(652           ); // 652 = ./basic/Root
var _Content = require(653              ); // 653 = ./basic/Content
var _Footer = require(658             ); // 658 = ./basic/Footer
var _FooterTab = require(659                ); // 659 = ./basic/FooterTab
var _Form = require(660           ); // 660 = ./basic/Form
var _ToastContainer = require(648                     ); // 648 = ./basic/ToastContainer
var _Actionsheet = require(650                  ); // 650 = ./basic/Actionsheet
var _Picker = require(661             ); // 661 = ./basic/Picker
var _List = require(651           ); // 651 = ./basic/List
var _ListItem = require(555               ); // 555 = ./basic/ListItem
var _Separator = require(662                ); // 662 = ./basic/Separator
var _DeckSwiper = require(663                 ); // 663 = ./basic/DeckSwiper
var _Item = require(665           ); // 665 = ./basic/Item
var _Segment = require(667              ); // 667 = ./basic/Segment
var _Label = require(666            ); // 666 = ./basic/Label
var _Textarea = require(668               ); // 668 = ./basic/Textarea
var _Tab = require(669          ); // 669 = ./basic/Tab
var _Tabs = require(670           );var _Tabs2 = _interopRequireDefault(_Tabs); // 670 = ./basic/Tabs
var _DefaultTabBar = require(673                         ); // 673 = ./basic/Tabs/DefaultTabBar
var _ScrollableTabBar = require(675                            ); // 675 = ./basic/Tabs/ScrollableTabBar
var _Subtitle = require(676               );function _interopRequireDefault(obj) { // 676 = ./basic/Subtitle
  return obj && obj.__esModule ? obj : { default: obj };
}

(0, _init2.default)();exports.getTheme = _components2.default;exports.variables = _platform2.default;exports.StyleProvider = _nativeBaseShoutemTheme.StyleProvider;exports.connectStyle = _nativeBaseShoutemTheme.connectStyle;exports.Drawer = _Drawer2.default;exports.Button = _Button.Button;exports.IconNB = _IconNB.IconNB;exports.Icon = _Icon.Icon;exports.Header = _Header.Header;exports.Form = _Form.Form;exports.InputGroup = _InputGroup.InputGroup;exports.Input = _Input.Input;exports.Title = _Title.Title;exports.Fab = _Fab.Fab;exports.Left = _Left.Left;exports.Right = _Right.Right;exports.Body = _Body.Body;exports.Badge = _Badge.Badge;exports.CheckBox = _Checkbox.CheckBox;exports.Radio = _Radio.Radio;exports.Thumbnail = _Thumbnail.Thumbnail;exports.Card = _Card.Card;exports.CardItem = _CardItem.CardItem;exports.H1 = _H.H1;exports.H2 = _H2.H2;exports.H3 = _H3.H3;exports.Spinner = _Spinner.Spinner;exports.Switch = _Switch.Switch;exports.Container = _Container.Container;exports.Content = _Content.Content;exports.Footer = _Footer.Footer;exports.Tab = _Tab.Tab;exports.Tabs = _Tabs2.default;exports.FooterTab = _FooterTab.FooterTab;exports.Picker = _Picker.PickerNB;exports.List = _List.List;exports.ListItem = _ListItem.ListItem;exports.Separator = _Separator.Separator;exports.DeckSwiper = _DeckSwiper.DeckSwiper;exports.Item = _Item.Item;exports.Subtitle = _Subtitle.Subtitle;exports.Label = _Label.Label;exports.Textarea = _Textarea.Textarea;exports.Col = _reactNativeEasyGrid.Col;exports.Row = _reactNativeEasyGrid.Row;exports.Grid = _reactNativeEasyGrid.Grid;exports.Text = _Text.Text;exports.TabContent = _Content.Content;exports.View = _View.ViewNB;exports.Toast = _ToastContainer.ToastContainer;exports.ScrollableTab = _ScrollableTabBar.ScrollableTab;exports.ActionSheet = _Actionsheet.ActionSheetContainer;exports.TabHeading = _TabHeading.TabHeading;exports.TabContainer = _TabContainer.TabContainer;exports.DefaultTabBar = _DefaultTabBar.DefaultTabBar;exports.Segment = _Segment.Segment;exports.Root = _Root.Root;exports.SwipeRow = _SwipeRow.SwipeRow;

var mapPropsToStyleNames = function mapPropsToStyleNames(styleNames, props) {
  return (0, _lodash.keys)(props);
};exports.mapPropsToStyleNames = mapPropsToStyleNames;
}, 469, null, "native-base/dist/src/index.js");
__d(/* native-base-shoutem-theme/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSharedStyle = exports.createVariations = exports.ThemeShape = exports.Theme = exports.StyleProvider = exports.INCLUDE = exports.connectStyle = undefined;

var _connectStyle = require(471                 ); // 471 = ./src/connectStyle

var _connectStyle2 = _interopRequireDefault(_connectStyle);

var _resolveIncludes = require(478                    ); // 478 = ./src/resolveIncludes

var _StyleProvider = require(482                  ); // 482 = ./src/StyleProvider

var _StyleProvider2 = _interopRequireDefault(_StyleProvider);

var _Theme = require(477          ); // 477 = ./src/Theme

var _Theme2 = _interopRequireDefault(_Theme);

var _addons = require(483           ); // 483 = ./src/addons

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.connectStyle = _connectStyle2.default;
exports.INCLUDE = _resolveIncludes.INCLUDE;
exports.StyleProvider = _StyleProvider2.default;
exports.Theme = _Theme2.default;
exports.ThemeShape = _Theme.ThemeShape;
exports.createVariations = _addons.createVariations;
exports.createSharedStyle = _addons.createSharedStyle;
}, 470, null, "native-base-shoutem-theme/index.js");
__d(/* native-base-shoutem-theme/src/connectStyle.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\native-base-shoutem-theme\\src\\connectStyle.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = require(472                      ); // 472 = hoist-non-react-statics

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _lodash = require(473     ); // 473 = lodash

var _ = _interopRequireWildcard(_lodash);

var _normalizeStyle = require(474                               ); // 474 = ./StyleNormalizer/normalizeStyle

var _normalizeStyle2 = _interopRequireDefault(_normalizeStyle);

var _reactNative = require(181           ); // 181 = react-native

var _Theme = require(477      ); // 477 = ./Theme

var _Theme2 = _interopRequireDefault(_Theme);

var _resolveComponentStyle = require(480                      ); // 480 = ./resolveComponentStyle

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  StyledComponent: {
    displayName: 'StyledComponent',
    isInFunction: true
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/native-base-shoutem-theme/src/connectStyle.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var themeCache = {};

function throwConnectStyleError(errorMessage, componentDisplayName) {
  throw Error(errorMessage + ' - when connecting ' + componentDisplayName + ' component to style.');
}

function getTheme(context) {
  return context.theme || _Theme2.default.getDefaultTheme();
}

function isStyleVariant(propertyName) {
  return (/^\./.test(propertyName)
  );
}

function isChildStyle(propertyName) {
  return (/(^[^\.].*\.)|^\*$/.test(propertyName)
  );
}

function getConcreteStyle(style) {
  return _.pickBy(style, function (value, key) {
    return !isStyleVariant(key) && !isChildStyle(key);
  });
}

exports.default = function (componentStyleName) {
  var componentStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var mapPropsToStyleNames = arguments[2];
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  function getComponentDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }

  return function wrapWithStyledComponent(WrappedComponent) {
    var _class, _temp;

    var componentDisplayName = getComponentDisplayName(WrappedComponent);

    if (!_.isPlainObject(componentStyle)) {
      throwConnectStyleError("Component style must be plain object", componentDisplayName);
    }

    if (!_.isString(componentStyleName)) {
      throwConnectStyleError("Component Style Name must be string", componentDisplayName);
    }

    var StyledComponent = _wrapComponent('StyledComponent')((_temp = _class = function (_React$Component) {
      _inherits(StyledComponent, _React$Component);

      function StyledComponent(props, context) {
        _classCallCheck(this, StyledComponent);

        var _this = _possibleConstructorReturn(this, (StyledComponent.__proto__ || Object.getPrototypeOf(StyledComponent)).call(this, props, context));

        var styleNames = _this.getStyleNames(props);
        var style = props.style;

        var finalStyle = _this.getFinalStyle(props, context, style, styleNames);

        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);
        _this.resolveConnectedComponentStyle = _this.resolveConnectedComponentStyle.bind(_this);
        _this.state = {
          style: finalStyle,

          addedProps: _this.resolveAddedProps(),
          styleNames: styleNames
        };
        return _this;
      }

      _createClass(StyledComponent, [{
        key: 'getFinalStyle',
        value: function getFinalStyle(props, context, style, styleNames) {
          var resolvedStyle = {};
          if (context.parentPath) {
            resolvedStyle = this.getOrSetStylesInCache(context, props, styleNames, [].concat(_toConsumableArray(context.parentPath), [componentStyleName], _toConsumableArray(styleNames)));
          } else {
            resolvedStyle = this.resolveStyle(context, props, styleNames);
            themeCache[componentStyleName] = resolvedStyle;
          }

          var concreteStyle = getConcreteStyle(_.merge({}, resolvedStyle));

          if (_.isArray(style)) {
            return [concreteStyle].concat(_toConsumableArray(style));
          }

          if (typeof style == "number" || typeof style == "object") {
            return [concreteStyle, style];
          }

          return concreteStyle;
        }
      }, {
        key: 'getStyleNames',
        value: function getStyleNames(props) {
          var styleNamesArr = _.map(props, function (value, key) {
            if (typeof value !== "object" && value === true) {
              return "." + key;
            } else {
              return false;
            }
          });
          _.remove(styleNamesArr, function (value, index) {
            return value === false;
          });

          return styleNamesArr;
        }
      }, {
        key: 'getParentPath',
        value: function getParentPath() {
          if (!this.context.parentPath) {
            return [componentStyleName];
          } else {
            return [].concat(_toConsumableArray(this.context.parentPath), [componentStyleName], _toConsumableArray(this.getStyleNames(this.props)));
          }
        }
      }, {
        key: 'getChildContext',
        value: function getChildContext() {
          return {
            parentPath: this.getParentPath()
          };
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps, nextContext) {
          var styleNames = this.getStyleNames(nextProps);
          var style = nextProps.style;
          if (this.shouldRebuildStyle(nextProps, nextContext, styleNames)) {
            var finalStyle = this.getFinalStyle(nextProps, nextContext, style, styleNames);

            this.setState({
              style: finalStyle,

              styleNames: styleNames
            });
          }
        }
      }, {
        key: 'setNativeProps',
        value: function setNativeProps(nativeProps) {
          if (this.wrappedInstance.setNativeProps) {
            this.wrappedInstance.setNativeProps(nativeProps);
          }
        }
      }, {
        key: 'setWrappedInstance',
        value: function setWrappedInstance(component) {
          if (component && component._root) {
            this._root = component._root;
          } else {
            this._root = component;
          }
          this.wrappedInstance = this._root;
        }
      }, {
        key: 'hasStyleNameChanged',
        value: function hasStyleNameChanged(nextProps, styleNames) {
          return mapPropsToStyleNames && this.props !== nextProps && !_.isEqual(this.state.styleNames, styleNames);
        }
      }, {
        key: 'shouldRebuildStyle',
        value: function shouldRebuildStyle(nextProps, nextContext, styleNames) {
          return nextProps.style !== this.props.style || nextProps.styleName !== this.props.styleName || nextContext.theme !== this.context.theme || !_.isEqual(nextContext.parentPath, this.context.parentPath) || this.hasStyleNameChanged(nextProps, styleNames);
        }
      }, {
        key: 'resolveStyleNames',
        value: function resolveStyleNames(props) {
          var styleName = props.styleName;

          var styleNames = styleName ? styleName.split(/\s/g) : [];

          if (!mapPropsToStyleNames) {
            return styleNames;
          }

          return _.uniq(mapPropsToStyleNames(styleNames, props));
        }
      }, {
        key: 'resolveAddedProps',
        value: function resolveAddedProps() {
          var addedProps = {};
          if (options.withRef) {
            addedProps.ref = "wrappedInstance";
          }
          return addedProps;
        }
      }, {
        key: 'getOrSetStylesInCache',
        value: function getOrSetStylesInCache(context, props, styleNames, path) {
          if (themeCache && themeCache[path.join(">")]) {

            return themeCache[path.join(">")];
          } else {
            resolvedStyle = this.resolveStyle(context, props, styleNames);
            if (Object.keys(themeCache).length < 10000) {
              themeCache[path.join(">")] = resolvedStyle;
            }
            return resolvedStyle;
          }
        }
      }, {
        key: 'resolveStyle',
        value: function resolveStyle(context, props, styleNames) {
          var parentStyle = {};

          var theme = getTheme(context);
          var themeStyle = theme.createComponentStyle(componentStyleName, componentStyle);

          if (context.parentPath) {
            parentStyle = themeCache[context.parentPath.join(">")];
          } else {
            parentStyle = (0, _resolveComponentStyle.resolveComponentStyle)(componentStyleName, styleNames, themeStyle, parentStyle);
          }

          return (0, _resolveComponentStyle.resolveComponentStyle)(componentStyleName, styleNames, themeStyle, parentStyle);
        }
      }, {
        key: 'resolveConnectedComponentStyle',
        value: function resolveConnectedComponentStyle(props) {
          var styleNames = this.resolveStyleNames(props);
          return this.resolveStyle(this.context, props, styleNames).componentStyle;
        }
      }, {
        key: 'render',
        value: function render() {
          var _state = this.state,
              addedProps = _state.addedProps,
              style = _state.style;

          return _react3.default.createElement(WrappedComponent, _extends({}, this.props, addedProps, {
            style: style,
            ref: this.setWrappedInstance,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 384
            }
          }));
        }
      }]);

      return StyledComponent;
    }(_react3.default.Component), _class.contextTypes = {
      theme: _Theme.ThemeShape,

      parentPath: _propTypes2.default.array
    }, _class.childContextTypes = {
      parentPath: _propTypes2.default.array
    }, _class.propTypes = {
      style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),

      styleName: _propTypes2.default.string,

      virtual: _propTypes2.default.bool
    }, _class.defaultProps = {
      virtual: options.virtual
    }, _class.displayName = 'Styled(' + componentDisplayName + ')', _class.WrappedComponent = WrappedComponent, _temp));

    return (0, _hoistNonReactStatics2.default)(StyledComponent, WrappedComponent);
  };
};
}, 471, null, "native-base-shoutem-theme/src/connectStyle.js");
__d(/* hoist-non-react-statics/index.js */function(global, require, module, exports) {
'use strict';

var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    arguments: true,
    arity: true
};

var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
    if (typeof sourceComponent !== 'string') {
        var keys = Object.getOwnPropertyNames(sourceComponent);

        if (isGetOwnPropertySymbolsAvailable) {
            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                try {
                    targetComponent[keys[i]] = sourceComponent[keys[i]];
                } catch (error) {}
            }
        }
    }

    return targetComponent;
};
}, 472, null, "hoist-non-react-statics/index.js");
__d(/* lodash/lodash.js */function(global, require, module, exports) {/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function () {
  var undefined;

  var VERSION = '4.17.4';

  var LARGE_ARRAY_SIZE = 200;

  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  var MAX_MEMOIZE_SIZE = 500;

  var PLACEHOLDER = '__lodash_placeholder__';

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  var reEscapeChar = /\\(\\)?/g;

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  var reFlags = /\w*$/;

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  var reIsBinary = /^0b[01]+$/i;

  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  var reIsOctal = /^0o[0-7]+$/i;

  var reIsUint = /^(?:0|[1-9]\d*)$/;

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  var reNoMatch = /($^)/;

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  var rsApos = '[\'\u2019]',
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  var reApos = RegExp(rsApos, 'g');

  var reComboMark = RegExp(rsCombo, 'g');

  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];

  var templateCounter = -1;

  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  var deburredLetters = {
    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C', '\xe7': 'c',
    '\xd0': 'D', '\xf0': 'd',
    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N', '\xf1': 'n',
    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',

    '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C', '\u0108': 'C', '\u010A': 'C', '\u010C': 'C',
    '\u0107': 'c', '\u0109': 'c', '\u010B': 'c', '\u010D': 'c',
    '\u010E': 'D', '\u0110': 'D', '\u010F': 'd', '\u0111': 'd',
    '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011A': 'E',
    '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011B': 'e',
    '\u011C': 'G', '\u011E': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011D': 'g', '\u011F': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I', '\u012A': 'I', '\u012C': 'I', '\u012E': 'I', '\u0130': 'I',
    '\u0129': 'i', '\u012B': 'i', '\u012D': 'i', '\u012F': 'i', '\u0131': 'i',
    '\u0134': 'J', '\u0135': 'j',
    '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L', '\u013B': 'L', '\u013D': 'L', '\u013F': 'L', '\u0141': 'L',
    '\u013A': 'l', '\u013C': 'l', '\u013E': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014A': 'N',
    '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014B': 'n',
    '\u014C': 'O', '\u014E': 'O', '\u0150': 'O',
    '\u014D': 'o', '\u014F': 'o', '\u0151': 'o',
    '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
    '\u015A': 'S', '\u015C': 'S', '\u015E': 'S', '\u0160': 'S',
    '\u015B': 's', '\u015D': 's', '\u015F': 's', '\u0161': 's',
    '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't', '\u0165': 't', '\u0167': 't',
    '\u0168': 'U', '\u016A': 'U', '\u016C': 'U', '\u016E': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u', '\u016B': 'u', '\u016D': 'u', '\u016F': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W', '\u0175': 'w',
    '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z', '\u017B': 'Z', '\u017D': 'Z',
    '\u017A': 'z', '\u017C': 'z', '\u017E': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017F': 's'
  };

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  var root = freeGlobal || freeSelf || Function('return this')();

  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  var moduleExports = freeModule && freeModule.exports === freeExports;

  var freeProcess = moduleExports && freeGlobal.process;

  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }();

  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }

  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var asciiSize = baseProperty('length');

  function asciiToArray(string) {
    return string.split('');
  }

  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function (value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  function baseIsNaN(value) {
    return value !== value;
  }

  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? baseSum(array, iteratee) / length : NAN;
  }

  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function (value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : result + current;
      }
    }
    return result;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  function baseToPairs(object, props) {
    return arrayMap(props, function (key) {
      return [key, object[key]];
    });
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function baseValues(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }

  function cacheHas(cache, key) {
    return cache.has(key);
  }

  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  var deburrLetter = basePropertyOf(deburredLetters);

  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = [value, value];
    });
    return result;
  }

  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
  }

  function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  }

  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  var runInContext = function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    var coreJsData = context['__core-js_shared__'];

    var funcToString = funcProto.toString;

    var hasOwnProperty = objectProto.hasOwnProperty;

    var idCounter = 0;

    var maskSrcKey = function () {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? 'Symbol(src)_1.' + uid : '';
    }();

    var nativeObjectToString = objectProto.toString;

    var objectCtorString = funcToString.call(Object);

    var oldDash = root._;

    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? typeof Symbol === 'function' ? Symbol.isConcatSpreadable : '@@isConcatSpreadable' : undefined,
        symIterator = Symbol ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : undefined,
        symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

    var defineProperty = function () {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }();

    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    var metaMap = WeakMap && new WeakMap();

    var realNames = {};

    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    var baseCreate = function () {
      function object() {}
      return function (proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = undefined;
        return result;
      };
    }();

    function baseLodash() {}

    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    lodash.templateSettings = {
      'escape': reEscape,

      'evaluate': reEvaluate,

      'interpolate': reInterpolate,

      'variable': '',

      'imports': {
        '_': lodash
      }
    };

    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : start - 1,
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || !isRight && arrLength == length && takeCount == length) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer: while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
      return this;
    }

    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash(),
        'map': new (Map || ListCache)(),
        'string': new Hash()
      };
    }

    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }

    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }

    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    function stackGet(key) {
      return this.__data__.get(key);
    }

    function stackHas(key) {
      return this.__data__.has(key);
    }

    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }

    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    function assignMergeValue(object, key, value) {
      if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }

    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function (value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          result = isFlat || isFunc ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }

      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function (subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }

        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    function baseConforms(source) {
      var props = keys(source);
      return function (object) {
        return baseConformsTo(object, source, props);
      };
    }

    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if (value === undefined && !(key in object) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function () {
        func.apply(undefined, args);
      }, wait);
    }

    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    var baseEach = createBaseEach(baseForOwn);

    var baseEachRight = createBaseEach(baseForOwnRight, true);

    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function (value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end === undefined || end > length ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function (value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var baseFor = createBaseFor();

    var baseForRight = createBaseFor(true);

    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    function baseFunctions(object, props) {
      return arrayFilter(props, function (key) {
        return isFunction(object[key]);
      });
    }

    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : undefined;
    }

    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }

    function baseGt(value, other) {
      return value > other;
    }

    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function (value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    function baseIteratee(value) {
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }

    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    function baseLt(value, other) {
      return value < other;
    }

    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function (object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function (object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function (srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack());
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function (value, key, collection) {
        var criteria = arrayMap(iteratees, function (iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function (object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    function basePick(object, paths) {
      return basePickBy(object, paths, function (value, path) {
        return hasIn(object, path);
      });
    }

    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    function basePropertyDeep(path) {
      return function (object) {
        return baseGet(object, path);
      };
    }

    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }

      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    function baseSample(collection) {
      return arraySample(values(collection));
    }

    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    var baseSetData = !metaMap ? identity : function (func, data) {
      metaMap.set(func, data);
      return func;
    };

    var baseSetToString = !defineProperty ? identity : function (func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function (value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = low + high >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? computed <= value : computed < value;
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    function baseToString(value) {
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

      return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
    }

    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function (result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    var castRest = baseRest;

    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }

    var clearTimeout = ctxClearTimeout || function (id) {
      return root.clearTimeout(id);
    };

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }

    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }

    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }

      return object.index - other.index;
    }

    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    function createAggregator(setter, initializer) {
      return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    function createAssigner(assigner) {
      return baseRest(function (object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    function createBaseEach(eachFunc, fromRight) {
      return function (collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    function createBaseFor(fromRight) {
      return function (object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    function createCaseFirst(methodName) {
      return function (string) {
        string = toString(string);

        var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

        var chr = strSymbols ? strSymbols[0] : string.charAt(0);

        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    function createCompounder(callback) {
      return function (string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    function createCtor(Ctor) {
      return function () {
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor();
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        return isObject(result) ? result : thisBinding;
      };
    }

    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    function createFind(findIndexFunc) {
      return function (collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function predicate(key) {
            return iteratee(iterable[key], key, iterable);
          };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    function createFlow(fromRight) {
      return flatRest(function (funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function () {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    function createInverter(setter, toIteratee) {
      return function (object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    function createMathOperation(operator, defaultValue) {
      return function (value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    function createOver(arrayFunc) {
      return flatRest(function (iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function (args) {
          var thisArg = this;
          return arrayFunc(iteratees, function (iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }

    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = this && this !== root && this instanceof wrapper ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    function createRange(fromRight) {
      return function (start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }

        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    function createRelationalOperation(operator) {
      return function (value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    function createRound(methodName) {
      var func = Math[methodName];
      return function (number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
      return new Set(values);
    };

    function createToPairs(keysFunc) {
      return function (object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }

    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }

      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

      stack.set(array, other);
      stack.set(other, array);

      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }

        if (seen) {
          if (!arraySome(other, function (othValue, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          return object == other + '';

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }

          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }

      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }

        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    var getData = !metaMap ? noop : function (func) {
      return metaMap.get(func);
    };

    function getFuncName(func) {
      var result = func.name + '',
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
    }

    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function (symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    var getTag = baseGetTag;

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function getTag(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }

    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':
            start += size;break;
          case 'dropRight':
            end -= size;break;
          case 'take':
            end = nativeMin(end, start + size);break;
          case 'takeRight':
            start = nativeMax(start, end - size);break;
        }
      }
      return { 'start': start, 'end': end };
    }

    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }

    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    function initCloneObject(object) {
      return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag:case float64Tag:
        case int8Tag:case int16Tag:case int32Tag:
        case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }

    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
        return eq(object[index], value);
      }
      return false;
    }

    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }

    function isKeyable(value) {
      var type = typeof value;
      return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
    }

    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }

    var isMaskable = coreJsData ? isFunction : stubFalse;

    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

      return value === proto;
    }

    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    function matchesStrictComparable(key, srcValue) {
      return function (object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
      };
    }

    function memoizeCapped(func) {
      var result = memoize(func, function (key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;

      if (!(isCommon || isCombo)) {
        return data;
      }

      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];

        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }

      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }

      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }

      value = source[7];
      if (value) {
        data[7] = value;
      }

      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }

      if (data[9] == null) {
        data[9] = source[9];
      }

      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? func.length - 1 : start, 0);
      return function () {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    var setData = shortOut(baseSetData);

    var setTimeout = ctxSetTimeout || function (func, wait) {
      return root.setTimeout(func, wait);
    };

    var setToString = shortOut(baseSetToString);

    function setWrapToString(wrapper, reference, bitmask) {
      var source = reference + '';
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function () {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    var stringToPath = memoizeCapped(function (string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function (match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
      });
      return result;
    });

    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return func + '';
        } catch (e) {}
      }
      return '';
    }

    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function (pair) {
        var value = '_.' + pair[0];
        if (bitmask & pair[1] && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }
      return result;
    }

    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    var difference = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });

    var differenceBy = baseRest(function (array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
    });

    var differenceWith = baseRest(function (array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });

    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    function dropRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }

    function dropWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }

    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    function head(array) {
      return array && array.length ? array[0] : undefined;
    }

    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    var intersection = baseRest(function (arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
    });

    var intersectionBy = baseRest(function (arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
    });

    var intersectionWith = baseRest(function (arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
    });

    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
    }

    function nth(array, n) {
      return array && array.length ? baseNth(array, toInteger(n)) : undefined;
    }

    var pull = baseRest(pullAll);

    function pullAll(array, values) {
      return array && array.length && values && values.length ? basePullAll(array, values) : array;
    }

    function pullAllBy(array, values, iteratee) {
      return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
    }

    function pullAllWith(array, values, comparator) {
      return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
    }

    var pullAt = flatRest(function (array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function (index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    function sortedUniq(array) {
      return array && array.length ? baseSortedUniq(array) : [];
    }

    function sortedUniqBy(array, iteratee) {
      return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
    }

    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    function takeRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }

    function takeWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }

    var union = baseRest(function (arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    var unionBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    var unionWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    function uniq(array) {
      return array && array.length ? baseUniq(array) : [];
    }

    function uniqBy(array, iteratee) {
      return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return array && array.length ? baseUniq(array, undefined, comparator) : [];
    }

    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function (group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function (index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function (group) {
        return apply(iteratee, undefined, group);
      });
    }

    var without = baseRest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });

    var xor = baseRest(function (arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    var xorBy = baseRest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    var xorWith = baseRest(function (arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    var zip = baseRest(unzip);

    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    var zipWith = baseRest(function (arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    function thru(value, interceptor) {
      return interceptor(value);
    }

    var wrapperAt = flatRest(function (paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function interceptor(object) {
        return baseAt(object, paths);
      };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function (array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    function wrapperChain() {
      return chain(this);
    }

    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    function wrapperToIterator() {
      return this;
    }

    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    var countBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    var find = createFind(findIndex);

    var findLast = createFind(findLastIndex);

    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    var groupBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }

    var invokeMap = baseRest(function (collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    var keyBy = createAggregator(function (result, value, key) {
      baseAssignValue(result, key, value);
    });

    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    var partition = createAggregator(function (result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function () {
      return [[], []];
    });

    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    function sampleSize(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    var sortBy = baseRest(function (collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    var now = ctxNow || function () {
      return root.Date.now();
    };

    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = func && n == null ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    var bind = baseRest(function (func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    var bindKey = baseRest(function (object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        lastInvokeTime = time;

        timerId = setTimeout(timerExpired, wait);

        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }

        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    var defer = baseRest(function (func, args) {
      return baseDelay(func, 1, args);
    });

    var delay = baseRest(function (func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    function memoize(func, resolver) {
      if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function memoized() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }

    memoize.Cache = MapCache;

    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function () {
        var args = arguments;
        switch (args.length) {
          case 0:
            return !predicate.call(this);
          case 1:
            return !predicate.call(this, args[0]);
          case 2:
            return !predicate.call(this, args[0], args[1]);
          case 3:
            return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    function once(func) {
      return before(2, func);
    }

    var overArgs = castRest(function (func, transforms) {
      transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function (args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    var partial = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    var partialRight = baseRest(function (func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    var rearg = flatRest(function (func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function (args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    function unary(func) {
      return ary(func, 1);
    }

    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }

    var gt = createRelationalOperation(baseGt);

    var gte = createRelationalOperation(function (value, other) {
      return value >= other;
    });

    var isArguments = baseIsArguments(function () {
      return arguments;
    }()) ? baseIsArguments : function (value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };

    var isArray = Array.isArray;

    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }

    var isBuffer = nativeIsBuffer || stubFalse;

    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
    }

    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }

      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    function isNaN(value) {
      return isNumber(value) && value != +value;
    }

    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    function isNull(value) {
      return value === null;
    }

    function isNil(value) {
      return value == null;
    }

    function isNumber(value) {
      return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
    }

    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }

    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    function isString(value) {
      return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }

    function isSymbol(value) {
      return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }

    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    function isUndefined(value) {
      return value === undefined;
    }

    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    var lt = createRelationalOperation(baseLt);

    var lte = createRelationalOperation(function (value, other) {
      return value <= other;
    });

    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

      return func(value);
    }

    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? remainder ? result - remainder : result : 0;
    }

    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }

    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    function toSafeInteger(value) {
      return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
    }

    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    var assign = createAssigner(function (object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    var assignIn = createAssigner(function (object, source) {
      copyObject(source, keysIn(source), object);
    });

    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    var at = flatRest(baseAt);

    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    var defaults = baseRest(function (args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    var defaultsDeep = baseRest(function (args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    var invert = createInverter(function (result, value, key) {
      result[value] = key;
    }, constant(identity));

    var invertBy = createInverter(function (result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    var invoke = baseRest(baseInvoke);

    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    var merge = createAssigner(function (object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    var omit = flatRest(function (object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function (path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    var pick = flatRest(function (object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function (prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function (value, path) {
        return predicate(value, path[0]);
      });
    }

    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    var toPairs = createToPairs(keys);

    var toPairsIn = createToPairs(keysIn);

    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor() : [];
        } else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        } else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
      }
      return baseRandom(lower, upper);
    }

    var camelCase = createCompounder(function (result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    function escape(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }

    function escapeRegExp(string) {
      string = toString(string);
      return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
    }

    var kebabCase = createCompounder(function (result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    var lowerCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    var lowerFirst = createCaseFirst('toLowerCase');

    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
    }

    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
    }

    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
    }

    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    function repeat(string, n, guard) {
      if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    var snakeCase = createCompounder(function (result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    var startCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    function template(string, options, guard) {
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';

      string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        return match;
      });

      source += "';\n";

      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }

      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';

      var result = attempt(function () {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    function toLower(value) {
      return toString(value).toLowerCase();
    }

    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += result.length - end;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while (match = separator.exec(substring)) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    function unescape(string) {
      string = toString(string);
      return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }

    var upperCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    var upperFirst = createCaseFirst('toUpperCase');

    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    var attempt = baseRest(function (func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    var bindAll = flatRest(function (object, methodNames) {
      arrayEach(methodNames, function (key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function (pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function (args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    function constant(value) {
      return function () {
        return value;
      };
    }

    function defaultTo(value, defaultValue) {
      return value == null || value !== value ? defaultValue : value;
    }

    var flow = createFlow();

    var flowRight = createFlow(true);

    function identity(value) {
      return value;
    }

    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    var method = baseRest(function (path, args) {
      return function (object) {
        return baseInvoke(object, path, args);
      };
    });

    var methodOf = baseRest(function (object, args) {
      return function (path) {
        return baseInvoke(object, path, args);
      };
    });

    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function (methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function () {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    function noop() {}

    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function (args) {
        return baseNth(args, n);
      });
    }

    var over = createOver(arrayMap);

    var overEvery = createOver(arrayEvery);

    var overSome = createOver(arraySome);

    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    function propertyOf(object) {
      return function (path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    var range = createRange();

    var rangeRight = createRange(true);

    function stubArray() {
      return [];
    }

    function stubFalse() {
      return false;
    }

    function stubObject() {
      return {};
    }

    function stubString() {
      return '';
    }

    function stubTrue() {
      return true;
    }

    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    var add = createMathOperation(function (augend, addend) {
      return augend + addend;
    }, 0);

    var ceil = createRound('ceil');

    var divide = createMathOperation(function (dividend, divisor) {
      return dividend / divisor;
    }, 1);

    var floor = createRound('floor');

    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }

    function maxBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
    }

    function mean(array) {
      return baseMean(array, identity);
    }

    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }

    function minBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
    }

    var multiply = createMathOperation(function (multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    var round = createRound('round');

    var subtract = createMathOperation(function (minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    function sum(array) {
      return array && array.length ? baseSum(array, identity) : 0;
    }

    function sumBy(array, iteratee) {
      return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
    }

    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    mixin(lodash, lodash);

    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, function () {
      var source = {};
      baseForOwn(lodash, function (func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }(), { 'chain': false });

    lodash.VERSION = VERSION;

    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
      lodash[methodName].placeholder = lodash;
    });

    arrayEach(['drop', 'take'], function (methodName, index) {
      LazyWrapper.prototype[methodName] = function (n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function (n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function (iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    arrayEach(['head', 'last'], function (methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function () {
        return this[takeName](1).value()[0];
      };
    });

    arrayEach(['initial', 'tail'], function (methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function () {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function () {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function (predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function (predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function (value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function (predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function (start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function (predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function () {
      return this.take(MAX_ARRAY_LENGTH);
    };

    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function () {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function interceptor(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return isTaker && chainAll ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
      };
    });

    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function () {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function (value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '',
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  };

  var _ = runInContext();

  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    root._ = _;

    define(function () {
      return _;
    });
  } else if (freeModule) {
      (freeModule.exports = _)._ = _;

      freeExports._ = _;
    } else {
      root._ = _;
    }
}).call(this);
}, 473, null, "lodash/lodash.js");
__d(/* native-base-shoutem-theme/src/StyleNormalizer/normalizeStyle.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = normalizeStyle;

var _lodash = require(473     ); // 473 = lodash

var _lodash2 = _interopRequireDefault(_lodash);

var _StyleNormalizer = require(475                ); // 475 = ./StyleNormalizer

var _StyleNormalizer2 = _interopRequireDefault(_StyleNormalizer);

var _reactNative = require(181           ); // 181 = react-native

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var styleNormalizer = new _StyleNormalizer2.default();

function normalizeStyle(style) {
  return _lodash2.default.reduce(style, function (normalizedStyle, val, prop) {
    if (_lodash2.default.isPlainObject(val)) {
      normalizedStyle[prop] = normalizeStyle(val);
    } else if (styleNormalizer.canNormalize(prop)) {
      normalizedStyle = _extends({}, normalizedStyle, styleNormalizer.normalize(prop, val));
    } else {
      normalizedStyle[prop] = val;
    }


    return normalizedStyle;
  }, {});
}
}, 474, null, "native-base-shoutem-theme/src/StyleNormalizer/normalizeStyle.js");
__d(/* native-base-shoutem-theme/src/StyleNormalizer/StyleNormalizer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ShorthandsNormalizerFactory = require(476                            ); // 476 = ./ShorthandsNormalizerFactory

var _ShorthandsNormalizerFactory2 = _interopRequireDefault(_ShorthandsNormalizerFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StyleNormalizer = function () {
  function StyleNormalizer() {
    _classCallCheck(this, StyleNormalizer);

    this.normalizers = {};
    this.createNormalizers('margin', [_ShorthandsNormalizerFactory.HORIZONTAL, _ShorthandsNormalizerFactory.VERTICAL, _ShorthandsNormalizerFactory.SIDES]);
    this.createNormalizers('padding', [_ShorthandsNormalizerFactory.HORIZONTAL, _ShorthandsNormalizerFactory.VERTICAL, _ShorthandsNormalizerFactory.SIDES]);
    this.createNormalizers('border', [_ShorthandsNormalizerFactory.SIDES], 'Width');
  }

  _createClass(StyleNormalizer, [{
    key: 'createNormalizers',
    value: function createNormalizers(prop, shorthands) {
      var _this = this;

      var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      shorthands.forEach(function (shorthand) {
        var propName = prop + shorthand.type + suffix;

        if (_this.normalizerExists(propName)) {
          throw Error('Normalizer for \'' + propName + '\' shorthand already exists');
        }

        _this.normalizers[propName] = _ShorthandsNormalizerFactory2.default.createNormalizer(prop, shorthand, suffix);
      });
    }
  }, {
    key: 'normalizerExists',
    value: function normalizerExists(normalizerName) {
      return !!this.normalizers[normalizerName];
    }
  }, {
    key: 'canNormalize',
    value: function canNormalize(prop) {
      return this.normalizerExists(prop);
    }
  }, {
    key: 'normalize',
    value: function normalize(prop, val) {
      return this.normalizers[prop](val);
    }
  }]);

  return StyleNormalizer;
}();

exports.default = StyleNormalizer;
}, 475, null, "native-base-shoutem-theme/src/StyleNormalizer/StyleNormalizer.js");
__d(/* native-base-shoutem-theme/src/StyleNormalizer/ShorthandsNormalizerFactory.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BOTTOM_LEFT = exports.TOP_LEFT = exports.BOTTOM_RIGHT = exports.TOP_RIGHT = exports.BOTTOM = exports.TOP = exports.RIGHT = exports.LEFT = exports.VERTICAL = exports.HORIZONTAL = exports.CORNERS = exports.SIDES = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require(473     ); // 473 = lodash

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var createShorthand = function createShorthand(name, type) {
  return { name: name, type: _lodash2.default.isUndefined(type) ? name : type };
};

var SIDES = exports.SIDES = createShorthand('Sides', '');
var CORNERS = exports.CORNERS = createShorthand('Corners', '');
var HORIZONTAL = exports.HORIZONTAL = createShorthand('Horizontal');
var VERTICAL = exports.VERTICAL = createShorthand('Vertical');

var LEFT = exports.LEFT = 'Left';
var RIGHT = exports.RIGHT = 'Right';
var TOP = exports.TOP = 'Top';
var BOTTOM = exports.BOTTOM = 'Bottom';
var TOP_RIGHT = exports.TOP_RIGHT = 'TopRight';
var BOTTOM_RIGHT = exports.BOTTOM_RIGHT = 'BottomRight';
var TOP_LEFT = exports.TOP_LEFT = 'TopLeft';
var BOTTOM_LEFT = exports.BOTTOM_LEFT = 'BottomLeft';

var ShorthandsNormalizerFactory = function () {
  function ShorthandsNormalizerFactory() {
    var _createNormalizersMap;

    _classCallCheck(this, ShorthandsNormalizerFactory);

    this.createNormalizersMap = (_createNormalizersMap = {}, _defineProperty(_createNormalizersMap, SIDES.name, this.createAllSidesNormalizer), _defineProperty(_createNormalizersMap, CORNERS.name, this.createAllCornersNormalizer), _defineProperty(_createNormalizersMap, HORIZONTAL.name, this.createHorizontalSidesNormalizer), _defineProperty(_createNormalizersMap, VERTICAL.name, this.createVerticalSidesNormalizer), _createNormalizersMap);
  }

  _createClass(ShorthandsNormalizerFactory, [{
    key: 'createAllSidesNormalizer',
    value: function createAllSidesNormalizer(prop, shorthand) {
      var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      return function (val) {
        var _ref;

        return _ref = {}, _defineProperty(_ref, prop + LEFT + suffix, val), _defineProperty(_ref, prop + RIGHT + suffix, val), _defineProperty(_ref, prop + TOP + suffix, val), _defineProperty(_ref, prop + BOTTOM + suffix, val), _ref;
      };
    }
  }, {
    key: 'createAllCornersNormalizer',
    value: function createAllCornersNormalizer(prop, shorthand) {
      var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      return function (val) {
        var _ref2;

        return _ref2 = {}, _defineProperty(_ref2, prop + BOTTOM_LEFT + suffix, val), _defineProperty(_ref2, prop + BOTTOM_RIGHT + suffix, val), _defineProperty(_ref2, prop + TOP_LEFT + suffix, val), _defineProperty(_ref2, prop + TOP_RIGHT + suffix, val), _ref2;
      };
    }
  }, {
    key: 'createHorizontalSidesNormalizer',
    value: function createHorizontalSidesNormalizer(prop) {
      return function (val) {
        var _ref3;

        return _ref3 = {}, _defineProperty(_ref3, prop + LEFT, val), _defineProperty(_ref3, prop + RIGHT, val), _ref3;
      };
    }
  }, {
    key: 'createVerticalSidesNormalizer',
    value: function createVerticalSidesNormalizer(prop) {
      return function (val) {
        var _ref4;

        return _ref4 = {}, _defineProperty(_ref4, prop + TOP, val), _defineProperty(_ref4, prop + BOTTOM, val), _ref4;
      };
    }
  }, {
    key: 'getNormalizerCreator',
    value: function getNormalizerCreator(shorthand) {
      return this.createNormalizersMap[shorthand.name];
    }
  }, {
    key: 'createNormalizer',
    value: function createNormalizer(prop, shorthand, suffix) {
      var normalizerCreator = this.getNormalizerCreator(shorthand);
      return normalizerCreator(prop, shorthand, suffix);
    }
  }]);

  return ShorthandsNormalizerFactory;
}();

exports.default = new ShorthandsNormalizerFactory();
}, 476, null, "native-base-shoutem-theme/src/StyleNormalizer/ShorthandsNormalizerFactory.js");
__d(/* native-base-shoutem-theme/src/Theme.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThemeShape = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require(20          ); // 20 = prop-types

var _resolveIncludes = require(478                ); // 478 = ./resolveIncludes

var _resolveIncludes2 = _interopRequireDefault(_resolveIncludes);

var _mergeComponentAndThemeStyles = require(479                             ); // 479 = ./mergeComponentAndThemeStyles

var _mergeComponentAndThemeStyles2 = _interopRequireDefault(_mergeComponentAndThemeStyles);

var _normalizeStyle = require(474                               ); // 474 = ./StyleNormalizer/normalizeStyle

var _normalizeStyle2 = _interopRequireDefault(_normalizeStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var THEME_STYLE = "@@shoutem.theme/themeStyle";
var THEME_STYLE_CACHE = "@@shoutem.theme/themeCachedStyle";

var defaultTheme = void 0;

var resolveStyle = function resolveStyle(style, baseStyle) {
  return (0, _normalizeStyle2.default)((0, _resolveIncludes2.default)(style, baseStyle));
};

var Theme = function () {
  function Theme(themeStyle) {
    _classCallCheck(this, Theme);

    this[THEME_STYLE] = resolveStyle(themeStyle);
    this[THEME_STYLE_CACHE] = {};
  }

  _createClass(Theme, [{
    key: "createComponentStyle",
    value: function createComponentStyle(componentName, defaultStyle) {
      if (this[THEME_STYLE_CACHE][componentName]) {
        return this[THEME_STYLE_CACHE][componentName];
      }

      var componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);

      this[THEME_STYLE_CACHE][componentName] = (0, _mergeComponentAndThemeStyles2.default)(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);

      return this[THEME_STYLE_CACHE][componentName];
    }
  }], [{
    key: "setDefaultThemeStyle",
    value: function setDefaultThemeStyle(style) {
      defaultTheme = new Theme(style);
    }
  }, {
    key: "getDefaultTheme",
    value: function getDefaultTheme() {
      if (!defaultTheme) {
        defaultTheme = new Theme({});
      }

      return defaultTheme;
    }
  }]);

  return Theme;
}();

exports.default = Theme;
var ThemeShape = exports.ThemeShape = _propTypes.PropTypes.shape({
  createComponentStyle: _propTypes.PropTypes.func.isRequired
});
}, 477, null, "native-base-shoutem-theme/src/Theme.js");
__d(/* native-base-shoutem-theme/src/resolveIncludes.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INCLUDE = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = resolveIncludes;

var _lodash = require(473     ); // 473 = lodash

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var INCLUDE = exports.INCLUDE = '@@shoutem.theme/include';

function includeSymbolMergeHandler(objVal, srcVal) {
  var newObjVal = objVal;
  var include = void 0;

  if (srcVal && srcVal[INCLUDE]) {
    include = newObjVal && newObjVal[INCLUDE] ? [].concat(_toConsumableArray(newObjVal[INCLUDE]), _toConsumableArray(srcVal[INCLUDE])) : srcVal[INCLUDE];
  }

  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {
    var newObj = _.mergeWith({}, srcVal, function (o, s) {
      return s;
    });

    if (include) {
      newObj[INCLUDE] = include;
    }
    return newObj;
  }

  if (_.isPlainObject(newObjVal) && include) {
    newObjVal[INCLUDE] = include;
  }
}

function resolveIncludes(target) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  function getStyle(styleName) {
    var defaultStyle = {};
    var style = defaultStyle;

    var baseStyle = base[styleName];
    if (baseStyle) {
      if (baseStyle[INCLUDE]) {
        throw Error('Base style cannot have includes, unexpected include in ' + styleName + '.');
      }
      style = _extends({}, baseStyle);
    }

    var targetStyle = target[styleName];
    if (targetStyle) {
      style = _extends({}, style, targetStyle);
    }

    if (style === defaultStyle) {
      console.warn('Including unexisting style: ' + styleName);
    }

    return style;
  }

  function includeNodeStyles(styleNode, processingStyleNames) {
    if (!_.isPlainObject(styleNode)) {
      return styleNode;
    }

    var styleNamesToInclude = styleNode[INCLUDE];

    var stylesToInclude = {};
    if (styleNamesToInclude) {
      if (!_.isArray(styleNamesToInclude)) {
        throw Error('Include should be array');
      }

      for (var _iterator = styleNamesToInclude, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var styleName = _ref;

        if (processingStyleNames.has(styleName)) {
          throw Error('Circular style include, including ' + styleName);
        }
        processingStyleNames.add(styleName);
        stylesToInclude = _.mergeWith({}, stylesToInclude, includeNodeStyles(getStyle(styleName), processingStyleNames), includeSymbolMergeHandler);
        processingStyleNames.delete(styleName);
      }
    }

    var resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);
    delete resultingStyle[INCLUDE];

    for (var _iterator2 = _.keys(resultingStyle), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _styleName = _ref2;

      resultingStyle[_styleName] = includeNodeStyles(resultingStyle[_styleName], processingStyleNames);
    }
    return resultingStyle;
  }

  var processingStyleNames = new Set();
  return includeNodeStyles(target, processingStyleNames);
}
}, 478, null, "native-base-shoutem-theme/src/resolveIncludes.js");
__d(/* native-base-shoutem-theme/src/mergeComponentAndThemeStyles.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mergeComponentAndThemeStyles;

var _lodash = require(473     ); // 473 = lodash

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function mergeComponentAndThemeStyles(componentStyle, themeComponentStyle, themeStyle) {
  var componentThemedStyle = _.merge({}, componentStyle, themeComponentStyle);

  var intersectedRootThemeStyle = _.pick(themeStyle, _.keys(componentThemedStyle));

  return _.merge({}, intersectedRootThemeStyle, componentThemedStyle);
}
}, 479, null, "native-base-shoutem-theme/src/mergeComponentAndThemeStyles.js");
__d(/* native-base-shoutem-theme/src/resolveComponentStyle.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveComponentStyle = resolveComponentStyle;

var _lodash = require(473     ); // 473 = lodash

var _lodash2 = _interopRequireDefault(_lodash);

var _customMerge = require(481            ); // 481 = ./customMerge

var _customMerge2 = _interopRequireDefault(_customMerge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isStyleVariant(propertyName) {
  return (/^\./.test(propertyName)
  );
}

function isChildStyle(propertyName) {
  return (/(^[^\.].*\.)|^\*$/.test(propertyName)
  );
}

function splitStyle(style) {
  return _lodash2.default.reduce(style, function (result, value, key) {
    var styleSection = result.componentStyle;
    if (isStyleVariant(key)) {
      styleSection = result.styleVariants;
    } else if (isChildStyle(key)) {
      styleSection = result.childrenStyle;
    }
    styleSection[key] = value;
    return result;
  }, {
    componentStyle: {},
    styleVariants: {},
    childrenStyle: {}
  });
}

function resolveComponentStyle(componentName) {
  var styleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var themeStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var parentStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var themeCache = arguments[4];


  var mergedStyle = (0, _customMerge2.default)(themeStyle, parentStyle[componentName]);
  styleNames.forEach(function (sn, index) {
    mergedStyle = (0, _customMerge2.default)(mergedStyle, themeStyle["" + sn]);
  });

  styleNames.forEach(function (sn, index) {
    mergedStyle = (0, _customMerge2.default)(mergedStyle, parentStyle["" + componentName + sn]);
  });

  var resolvedStyle = (0, _customMerge2.default)(mergedStyle, parentStyle[componentName]);

  styleNames.forEach(function (sn, index) {
    resolvedStyle = (0, _customMerge2.default)(resolvedStyle, mergedStyle["" + sn]);
  });

  styleNames.forEach(function (sn, index) {
    resolvedStyle = (0, _customMerge2.default)(resolvedStyle, parentStyle["" + componentName + sn]);
  });

  return resolvedStyle;
}
}, 480, null, "native-base-shoutem-theme/src/resolveComponentStyle.js");
__d(/* native-base-shoutem-theme/src/customMerge.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = customMerge;
function customMerge(obj1, obj2) {
  var objToReturn = {};

  var property1 = void 0,
      property2 = void 0;

  if (!obj1) {
    return obj2;
  } else if (!obj2) {
    return obj1;
  }

  for (property1 in obj1) {
    for (property2 in obj2) {
      if (property1 === property2) {
        if (typeof obj1[property1] !== "object" || typeof obj2[property1] !== "object" || !obj2[property1] || !obj1[property1]) {
          objToReturn[property1] = obj2[property1];
        } else {
          objToReturn[property1] = customMerge(obj1[property1], obj2[property1]);
        }
      } else {
        if (objToReturn[property1] === undefined) objToReturn[property1] = obj1[property1];
        if (objToReturn[property2] === undefined) objToReturn[property2] = obj2[property2];
      }
    }
  }

  return objToReturn;
}
}, 481, null, "native-base-shoutem-theme/src/customMerge.js");
__d(/* native-base-shoutem-theme/src/StyleProvider.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Theme = require(477      ); // 477 = ./Theme

var _Theme2 = _interopRequireDefault(_Theme);

var _normalizeStyle = require(474                               ); // 474 = ./StyleNormalizer/normalizeStyle

var _normalizeStyle2 = _interopRequireDefault(_normalizeStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  StyleProvider: {
    displayName: 'StyleProvider'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/native-base-shoutem-theme/src/StyleProvider.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var StyleProvider = _wrapComponent('StyleProvider')((_temp = _class = function (_React$Component) {
  _inherits(StyleProvider, _React$Component);

  function StyleProvider(props, context) {
    _classCallCheck(this, StyleProvider);

    var _this = _possibleConstructorReturn(this, (StyleProvider.__proto__ || Object.getPrototypeOf(StyleProvider)).call(this, props, context));

    _this.state = {
      theme: _this.createTheme(props)
    };
    return _this;
  }

  _createClass(StyleProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        theme: this.state.theme
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.style !== this.props.style) {
        this.setState({
          theme: this.createTheme(nextProps)
        });
      }
    }
  }, {
    key: 'createTheme',
    value: function createTheme(props) {
      return new _Theme2.default(props.style);
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return _react2.Children.only(children);
    }
  }]);

  return StyleProvider;
}(_react3.default.Component), _class.propTypes = {
  children: _propTypes2.default.element.isRequired,
  style: _propTypes2.default.object
}, _class.defaultProps = {
  style: {}
}, _class.childContextTypes = {
  theme: _Theme.ThemeShape.isRequired
}, _temp));

exports.default = StyleProvider;
}, 482, null, "native-base-shoutem-theme/src/StyleProvider.js");
__d(/* native-base-shoutem-theme/src/addons.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.createVariations = createVariations;
exports.createSharedStyle = createSharedStyle;

var _lodash = require(473     ); // 473 = lodash

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function capitalizeFirstLetter(value) {
  return value.charAt(0).toUpperCase() + value.slice(1);
}

function createVariations(baseName, nameSuffixes, key, value) {
  return _lodash2.default.reduce(nameSuffixes, function (result, variant) {
    var variantName = variant ? baseName + '-' + variant : baseName;
    var keyName = variant ? '' + key + capitalizeFirstLetter(variant) : key;

    result[variantName] = _defineProperty({}, keyName, value);

    return result;
  }, {});
}

function createSharedStyle(componentNames) {
  var sharedStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var customStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return _lodash2.default.reduce(componentNames, function (result, componentName) {
    result[componentName] = _extends({}, sharedStyle, customStyles[componentName]);

    return result;
  }, {});
}
}, 483, null, "native-base-shoutem-theme/src/addons.js");
__d(/* lodash/lodash.js */function(global, require, module, exports) {/**
 * @license
 * lodash 4.11.2 (Custom Build) <https://lodash.com/>
 * Build: `lodash -d -o ./foo/lodash.js`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function () {
  var undefined;

  var VERSION = '4.11.2';

  var LARGE_ARRAY_SIZE = 200;

  var FUNC_ERROR_TEXT = 'Expected a function';

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  var PLACEHOLDER = '__lodash_placeholder__';

  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  var reBasicWord = /[a-zA-Z0-9]+/g;

  var reEscapeChar = /\\(\\)?/g;

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  var reFlags = /\w*$/;

  var reHasHexPrefix = /^0x/i;

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  var reIsBinary = /^0b[01]+$/i;

  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  var reIsOctal = /^0o[0-7]+$/i;

  var reIsUint = /^(?:0|[1-9]\d*)$/;

  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  var reNoMatch = /($^)/;

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  var rsApos = '[\'\u2019]',
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  var reApos = RegExp(rsApos, 'g');

  var reComboMark = RegExp(rsCombo, 'g');

  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  var reComplexWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');

  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  var contextProps = ['Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array', 'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object', 'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap', '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'];

  var templateCounter = -1;

  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  var deburredLetters = {
    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C', '\xe7': 'c',
    '\xd0': 'D', '\xf0': 'd',
    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N', '\xf1': 'n',
    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  var objectTypes = {
    'function': true,
    'object': true
  };

  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : undefined;

  var freeModule = objectTypes[typeof module] && module && !module.nodeType ? module : undefined;

  var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : undefined;

  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function('return this')();

  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }

  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  function apply(func, thisArg, args) {
    var length = args.length;
    switch (length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  function arrayConcat(array, other) {
    var index = -1,
        length = array.length,
        othIndex = -1,
        othLength = other.length,
        result = Array(length + othLength);

    while (++index < length) {
      result[index] = array[index];
    }
    while (++othIndex < othLength) {
      result[index++] = other[othIndex];
    }
    return result;
  }

  function arrayEach(array, iteratee) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  function arrayEachRight(array, iteratee) {
    var length = array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  function arrayEvery(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  function arrayFilter(array, predicate) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  function arrayIncludes(array, value) {
    return !!array.length && baseIndexOf(array, value, 0) > -1;
  }

  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  function arrayMap(array, iteratee) {
    var index = -1,
        length = array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  function arraySome(array, predicate) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function (value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  function baseMean(array, iteratee) {
    var length = array ? array.length : 0;
    return length ? baseSum(array, iteratee) / length : NAN;
  }

  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function (value, index, collection) {
      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : result + current;
      }
    }
    return result;
  }

  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  function baseToPairs(object, props) {
    return arrayMap(props, function (key) {
      return [key, object[key]];
    });
  }

  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  function baseValues(object, props) {
    return arrayMap(props, function (key) {
      return object[key];
    });
  }

  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  function checkGlobal(value) {
    return value && value.Object === Object ? value : null;
  }

  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        result++;
      }
    }
    return result;
  }

  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while (fromRight ? index-- : ++index < length) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype,
        stringProto = context.String.prototype;

    var funcToString = context.Function.prototype.toString;

    var hasOwnProperty = objectProto.hasOwnProperty;

    var idCounter = 0;

    var objectCtorString = funcToString.call(Object);

    var objectToString = objectProto.toString;

    var oldDash = root._;

    var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        clearTimeout = context.clearTimeout,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = Symbol && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator')) == 'symbol' ? iteratorSymbol : undefined,
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice;

    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetPrototype = Object.getPrototypeOf,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReplace = stringProto.replace,
        nativeReverse = arrayProto.reverse,
        nativeSplit = stringProto.split;

    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    var metaMap = WeakMap && new WeakMap();

    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    var realNames = {};

    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    function baseLodash() {}

    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    lodash.templateSettings = {
      'escape': reEscape,

      'evaluate': reEvaluate,

      'interpolate': reInterpolate,

      'variable': '',

      'imports': {
        '_': lodash
      }
    };

    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : start - 1,
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer: while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    function Hash() {}

    function hashDelete(hash, key) {
      return hashHas(hash, key) && delete hash[key];
    }

    function hashGet(hash, key) {
      if (nativeCreate) {
        var result = hash[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
    }

    function hashHas(hash, key) {
      return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
    }

    function hashSet(hash, key, value) {
      hash[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    }

    Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

    function MapCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    function mapClear() {
      this.__data__ = {
        'hash': new Hash(),
        'map': Map ? new Map() : [],
        'string': new Hash()
      };
    }

    function mapDelete(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map['delete'](key) : assocDelete(data.map, key);
    }

    function mapGet(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashGet(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.get(key) : assocGet(data.map, key);
    }

    function mapHas(key) {
      var data = this.__data__;
      if (isKeyable(key)) {
        return hashHas(typeof key == 'string' ? data.string : data.hash, key);
      }
      return Map ? data.map.has(key) : assocHas(data.map, key);
    }

    function mapSet(key, value) {
      var data = this.__data__;
      if (isKeyable(key)) {
        hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
      } else if (Map) {
        data.map.set(key, value);
      } else {
        assocSet(data.map, key, value);
      }
      return this;
    }

    MapCache.prototype.clear = mapClear;
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache();
      while (++index < length) {
        this.push(values[index]);
      }
    }

    function cacheHas(cache, value) {
      var map = cache.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        return hash[value] === HASH_UNDEFINED;
      }
      return map.has(value);
    }

    function cachePush(value) {
      var map = this.__data__;
      if (isKeyable(value)) {
        var data = map.__data__,
            hash = typeof value == 'string' ? data.string : data.hash;

        hash[value] = HASH_UNDEFINED;
      } else {
        map.set(value, HASH_UNDEFINED);
      }
    }

    SetCache.prototype.push = cachePush;

    function Stack(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.clear();
      while (++index < length) {
        var entry = values[index];
        this.set(entry[0], entry[1]);
      }
    }

    function stackClear() {
      this.__data__ = { 'array': [], 'map': null };
    }

    function stackDelete(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocDelete(array, key) : data.map['delete'](key);
    }

    function stackGet(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocGet(array, key) : data.map.get(key);
    }

    function stackHas(key) {
      var data = this.__data__,
          array = data.array;

      return array ? assocHas(array, key) : data.map.has(key);
    }

    function stackSet(key, value) {
      var data = this.__data__,
          array = data.array;

      if (array) {
        if (array.length < LARGE_ARRAY_SIZE - 1) {
          assocSet(array, key, value);
        } else {
          data.array = null;
          data.map = new MapCache(array);
        }
      }
      var map = data.map;
      if (map) {
        map.set(key, value);
      }
      return this;
    }

    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    function assocDelete(array, key) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = array.length - 1;
      if (index == lastIndex) {
        array.pop();
      } else {
        splice.call(array, index, 1);
      }
      return true;
    }

    function assocGet(array, key) {
      var index = assocIndexOf(array, key);
      return index < 0 ? undefined : array[index][1];
    }

    function assocHas(array, key) {
      return assocIndexOf(array, key) > -1;
    }

    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    function assocSet(array, key, value) {
      var index = assocIndexOf(array, key);
      if (index < 0) {
        array.push([key, value]);
      } else {
        array[index][1] = value;
      }
    }

    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }

    function assignMergeValue(object, key, value) {
      if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
        object[key] = value;
      }
    }

    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
        object[key] = value;
      }
    }

    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function (value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }

      stack || (stack = new Stack());
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }

      arrayEach(props || value, function (subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return result;
    }

    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function (object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if (value === undefined && !(key in Object(object)) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }

    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function () {
        func.apply(undefined, args);
      }, wait);
    }

    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    var baseEach = createBaseEach(baseForOwn);

    var baseEachRight = createBaseEach(baseForOwnRight, true);

    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function (value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end === undefined || end > length ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function (value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var baseFor = createBaseFor();

    var baseForRight = createBaseFor(true);

    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    function baseFunctions(object, props) {
      return arrayFilter(props, function (key) {
        return isFunction(object[key]);
      });
    }

    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : undefined;
    }

    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    function baseGt(value, other) {
      return value > other;
    }

    function baseHas(object, key) {
      return hasOwnProperty.call(object, key) || typeof object == 'object' && key in object && getPrototype(object) === null;
    }

    function baseHasIn(object, key) {
      return key in Object(object);
    }

    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer: while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function (value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = castPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[toKey(path)];
      return func == null ? undefined : apply(func, object, args);
    }

    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    function baseIteratee(value) {
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }

    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function baseKeysIn(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    function baseLt(value, other) {
      return value < other;
    }

    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function (object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function (object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      if (!(isArray(source) || isTypedArray(source))) {
        var props = keysIn(source);
      }
      arrayEach(props || source, function (srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack());
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          } else {
            newValue = objValue;
          }
        } else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      stack['delete'](srcValue);
      assignMergeValue(object, key, newValue);
    }

    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function (value, key, collection) {
        var criteria = arrayMap(iteratees, function (iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function (object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function (result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    function basePickBy(object, predicate) {
      var index = -1,
          props = getAllKeysIn(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }

    function baseProperty(key) {
      return function (object) {
        return object == null ? undefined : object[key];
      };
    }

    function basePropertyDeep(path) {
      return function (object) {
        return baseGet(object, path);
      };
    }

    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else if (!isKey(index, array)) {
            var path = castPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[toKey(last(path))];
            }
          } else {
            delete array[toKey(index)];
          }
        }
      }
      return array;
    }

    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }

      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]);
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null ? isIndex(path[index + 1]) ? [] : {} : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    var baseSetData = !metaMap ? identity : function (func, data) {
      metaMap.set(func, data);
      return func;
    };

    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function (value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = low + high >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? computed <= value : computed < value;
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    function baseToString(value) {
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer: while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    function baseUnset(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      object = parent(object, path);

      var key = toKey(last(path));
      return !(object != null && baseHas(object, key)) || delete object[key];
    }

    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}

      return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
    }

    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function (result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result ? arrayPush(baseDifference(result, arrays[index], iteratee, comparator), baseDifference(arrays[index], result, iteratee, comparator)) : arrays[index];
      }
      return result && result.length ? baseUniq(result, iteratee, comparator) : [];
    }

    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }

    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor());
    }

    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor());
    }

    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }

      return object.index - other.index;
    }

    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    function copyObject(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    function createAggregator(setter, initializer) {
      return function (collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee), accumulator);
      };
    }

    function createAssigner(assigner) {
      return rest(function (object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    function createBaseEach(eachFunc, fromRight) {
      return function (collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while (fromRight ? index-- : ++index < length) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    function createBaseFor(fromRight) {
      return function (object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    function createCaseFirst(methodName) {
      return function (string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined;

        var chr = strSymbols ? strSymbols[0] : string.charAt(0);

        var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    function createCompounder(callback) {
      return function (string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    function createCtorWrapper(Ctor) {
      return function () {
        var args = arguments;
        switch (args.length) {
          case 0:
            return new Ctor();
          case 1:
            return new Ctor(args[0]);
          case 2:
            return new Ctor(args[0], args[1]);
          case 3:
            return new Ctor(args[0], args[1], args[2]);
          case 4:
            return new Ctor(args[0], args[1], args[2], args[3]);
          case 5:
            return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7:
            return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        return isObject(result) ? result : thisBinding;
      };
    }

    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getPlaceholder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
        }
        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    function createFlow(fromRight) {
      return rest(function (funcs) {
        funcs = baseFlatten(funcs, 1);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function () {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getPlaceholder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    function createInverter(setter, toIteratee) {
      return function (object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    function createMathOperation(operator) {
      return function (value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return 0;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    function createOver(arrayFunc) {
      return rest(function (iteratees) {
        iteratees = iteratees.length == 1 && isArray(iteratees[0]) ? arrayMap(iteratees[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));

        return rest(function (args) {
          var thisArg = this;
          return arrayFunc(iteratees, function (iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return reHasComplexSymbol.test(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
    }

    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = this && this !== root && this instanceof wrapper ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    function createRange(fromRight) {
      return function (start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }

        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? start < end ? 1 : -1 : toNumber(step) || 0;
        return baseRange(start, end, step, fromRight);
      };
    }

    function createRelationalOperation(operator) {
      return function (value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    function createRound(methodName) {
      var func = Math[methodName];
      return function (number, precision) {
        number = toNumber(number);
        precision = toInteger(precision);
        if (precision) {
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
      return new Set(values);
    };

    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var index = -1,
          isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }

      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(array, other);

      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }

        if (isUnordered) {
          if (!arraySome(other, function (othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          return object != +object ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          return object == other + '';

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }

          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);

          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }

      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }

        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    var getData = !metaMap ? noop : function (func) {
      return metaMap.get(func);
    };

    function getFuncName(func) {
      var result = func.name + '',
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    var getLength = baseProperty('length');

    function getMatchData(object) {
      var result = toPairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    function getNative(object, key) {
      var value = object[key];
      return isNative(value) ? value : undefined;
    }

    function getPlaceholder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    function getPrototype(value) {
      return nativeGetPrototype(Object(value));
    }

    function getSymbols(object) {
      return getOwnPropertySymbols(Object(object));
    }

    if (!getOwnPropertySymbols) {
      getSymbols = function getSymbols() {
        return [];
      };
    }

    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function (object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    function getTag(value) {
      return objectToString.call(value);
    }

    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function getTag(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }

    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':
            start += size;break;
          case 'dropRight':
            end -= size;break;
          case 'take':
            end = nativeMin(end, start + size);break;
          case 'takeRight':
            start = nativeMax(start, end - size);break;
        }
      }
      return { 'start': start, 'end': end };
    }

    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);

      var result,
          index = -1,
          length = path.length;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isString(object) || isArguments(object));
    }

    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    function initCloneObject(object) {
      return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag:case float64Tag:
        case int8Tag:case int16Tag:case int32Tag:
        case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) && (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }

    function isFlattenable(value) {
      return isArrayLikeObject(value) && (isArray(value) || isArguments(value));
    }

    function isFlattenableIteratee(value) {
      return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
    }

    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
    }

    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
        return eq(object[index], value);
      }
      return false;
    }

    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }

    function isKeyable(value) {
      var type = typeof value;
      return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
    }

    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

      return value === proto;
    }

    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    function matchesStrictComparable(key, srcValue) {
      return function (object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
      };
    }

    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG;

      if (!(isCommon || isCombo)) {
        return data;
      }

      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];

        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }

      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }

      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }

      value = source[7];
      if (value) {
        data[7] = value;
      }

      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }

      if (data[9] == null) {
        data[9] = source[9];
      }

      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
      }
      return objValue;
    }

    function parent(object, path) {
      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    var setData = function () {
      var count = 0,
          lastCalled = 0;

      return function (key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }();

    var stringToPath = memoize(function (string) {
      var result = [];
      toString(string).replace(rePropName, function (match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
      });
      return result;
    });

    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = value + '';
      return result == '0' && 1 / value == -INFINITY ? '-0' : result;
    }

    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return func + '';
        } catch (e) {}
      }
      return '';
    }

    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__ = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }
      return result;
    }

    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    function concat() {
      var length = arguments.length,
          array = castArray(arguments[0]);

      if (length < 2) {
        return length ? copyArray(array) : [];
      }
      var args = Array(length - 1);
      while (length--) {
        args[length - 1] = arguments[length];
      }
      return arrayConcat(array, baseFlatten(args, 1));
    }

    var difference = rest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
    });

    var differenceBy = rest(function (array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee)) : [];
    });

    var differenceWith = rest(function (array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
    });

    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    function dropRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
    }

    function dropWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
    }

    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    function findIndex(array, predicate) {
      return array && array.length ? baseFindIndex(array, getIteratee(predicate, 3)) : -1;
    }

    function findLastIndex(array, predicate) {
      return array && array.length ? baseFindIndex(array, getIteratee(predicate, 3), true) : -1;
    }

    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }

    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    function head(array) {
      return array && array.length ? array[0] : undefined;
    }

    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      fromIndex = toInteger(fromIndex);
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return baseIndexOf(array, value, fromIndex);
    }

    function initial(array) {
      return dropRight(array, 1);
    }

    var intersection = rest(function (arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
    });

    var intersectionBy = rest(function (arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee)) : [];
    });

    var intersectionWith = rest(function (arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
    });

    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    function nth(array, n) {
      return array && array.length ? baseNth(array, toInteger(n)) : undefined;
    }

    var pull = rest(pullAll);

    function pullAll(array, values) {
      return array && array.length && values && values.length ? basePullAll(array, values) : array;
    }

    function pullAllBy(array, values, iteratee) {
      return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee)) : array;
    }

    function pullAllWith(array, values, comparator) {
      return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
    }

    var pullAt = rest(function (array, indexes) {
      indexes = baseFlatten(indexes, 1);

      var length = array ? array.length : 0,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function (index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      } else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    function sortedUniq(array) {
      return array && array.length ? baseSortedUniq(array) : [];
    }

    function sortedUniqBy(array, iteratee) {
      return array && array.length ? baseSortedUniq(array, getIteratee(iteratee)) : [];
    }

    function tail(array) {
      return drop(array, 1);
    }

    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = guard || n === undefined ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    function takeRightWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
    }

    function takeWhile(array, predicate) {
      return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
    }

    var union = rest(function (arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    var unionBy = rest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
    });

    var unionWith = rest(function (arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    function uniq(array) {
      return array && array.length ? baseUniq(array) : [];
    }

    function uniqBy(array, iteratee) {
      return array && array.length ? baseUniq(array, getIteratee(iteratee)) : [];
    }

    function uniqWith(array, comparator) {
      return array && array.length ? baseUniq(array, undefined, comparator) : [];
    }

    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function (group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function (index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function (group) {
        return apply(iteratee, undefined, group);
      });
    }

    var without = rest(function (array, values) {
      return isArrayLikeObject(array) ? baseDifference(array, values) : [];
    });

    var xor = rest(function (arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    var xorBy = rest(function (arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    var xorWith = rest(function (arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    var zip = rest(unzip);

    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    var zipWith = rest(function (arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    function thru(value, interceptor) {
      return interceptor(value);
    }

    var wrapperAt = rest(function (paths) {
      paths = baseFlatten(paths, 1);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function interceptor(object) {
        return baseAt(object, paths);
      };

      if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function (array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    function wrapperChain() {
      return chain(this);
    }

    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    function wrapperToIterator() {
      return this;
    }

    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    var countBy = createAggregator(function (result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1;
    });

    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    function find(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEach);
    }

    function findLast(collection, predicate) {
      predicate = getIteratee(predicate, 3);
      if (isArray(collection)) {
        var index = baseFindIndex(collection, predicate, true);
        return index > -1 ? collection[index] : undefined;
      }
      return baseFind(collection, predicate, baseEachRight);
    }

    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    function forEach(collection, iteratee) {
      return typeof iteratee == 'function' && isArray(collection) ? arrayEach(collection, iteratee) : baseEach(collection, getIteratee(iteratee));
    }

    function forEachRight(collection, iteratee) {
      return typeof iteratee == 'function' && isArray(collection) ? arrayEachRight(collection, iteratee) : baseEachRight(collection, getIteratee(iteratee));
    }

    var groupBy = createAggregator(function (result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }

    var invokeMap = rest(function (collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function (value) {
        var func = isFunc ? path : isProp && value != null ? value[path] : undefined;
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    var keyBy = createAggregator(function (result, value, key) {
      result[key] = value;
    });

    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    var partition = createAggregator(function (result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function () {
      return [[], []];
    });

    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function (value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    function sampleSize(collection, n, guard) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = baseClamp(toInteger(n), 0, length);
      }
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return result && isString(collection) ? stringSize(collection) : result;
      }
      if (isObjectLike(collection)) {
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
      }
      return keys(collection).length;
    }

    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    var sortBy = rest(function (collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      iteratees = iteratees.length == 1 && isArray(iteratees[0]) ? iteratees[0] : baseFlatten(iteratees, 1, isFlattenableIteratee);

      return baseOrderBy(collection, iteratees, []);
    });

    var now = Date.now;

    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = func && n == null ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function () {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    var bind = rest(function (func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getPlaceholder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    var bindKey = rest(function (object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getPlaceholder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime = 0,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        lastInvokeTime = time;

        timerId = setTimeout(timerExpired, wait);

        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        return !lastCallTime || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }

        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        clearTimeout(timerId);
        timerId = undefined;

        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastCallTime = lastInvokeTime = 0;
        lastArgs = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    var defer = rest(function (func, args) {
      return baseDelay(func, 1, args);
    });

    var delay = rest(function (func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    function memoize(func, resolver) {
      if (typeof func != 'function' || resolver && typeof resolver != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function memoized() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }

    memoize.Cache = MapCache;

    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function () {
        return !predicate.apply(this, arguments);
      };
    }

    function once(func) {
      return before(2, func);
    }

    var overArgs = rest(function (func, transforms) {
      transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return rest(function (args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    var partial = rest(function (func, partials) {
      var holders = replaceHolders(partials, getPlaceholder(partial));
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    var partialRight = rest(function (func, partials) {
      var holders = replaceHolders(partials, getPlaceholder(partialRight));
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    var rearg = rest(function (func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    });

    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? func.length - 1 : toInteger(start), 0);
      return function () {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0:
            return func.call(this, array);
          case 1:
            return func.call(this, args[0], array);
          case 2:
            return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return rest(function (args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    function unary(func) {
      return ary(func, 1);
    }

    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    function clone(value) {
      return baseClone(value, false, true);
    }

    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }

    function cloneDeep(value) {
      return baseClone(value, true, true);
    }

    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }

    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }

    var gt = createRelationalOperation(baseGt);

    var gte = createRelationalOperation(function (value, other) {
      return value >= other;
    });

    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    var isArray = Array.isArray;

    function isArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }

    function isArrayLike(value) {
      return value != null && isLength(getLength(value)) && !isFunction(value);
    }

    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
    }

    var isBuffer = !Buffer ? constant(false) : function (value) {
      return value instanceof Buffer;
    };

    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    function isEmpty(value) {
      if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value) || isBuffer(value))) {
        return !value.length;
      }
      if (isObjectLike(value)) {
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return !(nonEnumShadows && keys(value).length);
    }

    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return objectToString.call(value) == errorTag || typeof value.message == 'string' && typeof value.name == 'string';
    }

    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    function isMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    function isNaN(value) {
      return isNumber(value) && value != +value;
    }

    function isNative(value) {
      if (!isObject(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    function isNull(value) {
      return value === null;
    }

    function isNil(value) {
      return value == null;
    }

    function isNumber(value) {
      return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;
    }

    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }

    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    function isSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    function isString(value) {
      return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
    }

    function isSymbol(value) {
      return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }

    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    function isUndefined(value) {
      return value === undefined;
    }

    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }

    var lt = createRelationalOperation(baseLt);

    var lte = createRelationalOperation(function (value, other) {
      return value <= other;
    });

    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

      return func(value);
    }

    function toInteger(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      var remainder = value % 1;
      return value === value ? remainder ? value - remainder : value : 0;
    }

    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }

    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    var assign = createAssigner(function (object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    var assignIn = createAssigner(function (object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keysIn(source), object);
        return;
      }
      for (var key in source) {
        assignValue(object, key, source[key]);
      }
    });

    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    var at = rest(function (object, paths) {
      return baseAt(object, baseFlatten(paths, 1));
    });

    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    var defaults = rest(function (args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    var defaultsDeep = rest(function (args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    function findKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
    }

    function findLastKey(object, predicate) {
      return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
    }

    function forIn(object, iteratee) {
      return object == null ? object : baseFor(object, getIteratee(iteratee), keysIn);
    }

    function forInRight(object, iteratee) {
      return object == null ? object : baseForRight(object, getIteratee(iteratee), keysIn);
    }

    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee));
    }

    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee));
    }

    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    var invert = createInverter(function (result, value, key) {
      result[value] = key;
    }, constant(identity));

    var invertBy = createInverter(function (result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    var invoke = rest(baseInvoke);

    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) && !(skipIndexes && (key == 'length' || isIndex(key, length))) && !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function (value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    var merge = createAssigner(function (object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    var omit = rest(function (object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });

    function omitBy(object, predicate) {
      predicate = getIteratee(predicate);
      return basePickBy(object, function (value, key) {
        return !predicate(value, key);
      });
    }

    var pick = rest(function (object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });

    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate));
    }

    function result(object, path, defaultValue) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length;

      if (!length) {
        object = undefined;
        length = 1;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    function toPairs(object) {
      return baseToPairs(object, keys(object));
    }

    function toPairsIn(object) {
      return baseToPairs(object, keysIn(object));
    }

    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor() : [];
          } else {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        } else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      } else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
      }
      return baseRandom(lower, upper);
    }

    var camelCase = createCompounder(function (result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined ? length : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    function escape(string) {
      string = toString(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }

    function escapeRegExp(string) {
      string = toString(string);
      return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
    }

    var kebabCase = createCompounder(function (result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    var lowerCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    var lowerFirst = createCaseFirst('toLowerCase');

    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
    }

    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
    }

    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
    }

    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    function repeat(string, n, guard) {
      if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
    }

    var snakeCase = createCompounder(function (result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
        separator = baseToString(separator);
        if (separator == '' && reHasComplexSymbol.test(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return nativeSplit.call(string, separator, limit);
    }

    var startCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(baseToString(target), position) == position;
    }

    function template(string, options, guard) {
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');

      var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';

      string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        return match;
      });

      source += "';\n";

      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }

      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');

      source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';

      var result = attempt(function () {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    function toLower(value) {
      return toString(value).toLowerCase();
    }

    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += result.length - end;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while (match = separator.exec(substring)) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    function unescape(string) {
      string = toString(string);
      return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }

    var upperCase = createCompounder(function (result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    var upperFirst = createCaseFirst('toUpperCase');

    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    var attempt = rest(function (func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    var bindAll = rest(function (object, methodNames) {
      arrayEach(baseFlatten(methodNames, 1), function (key) {
        key = toKey(key);
        object[key] = bind(object[key], object);
      });
      return object;
    });

    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function (pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function (args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    function constant(value) {
      return function () {
        return value;
      };
    }

    var flow = createFlow();

    var flowRight = createFlow(true);

    function identity(value) {
      return value;
    }

    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }

    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    var method = rest(function (path, args) {
      return function (object) {
        return baseInvoke(object, path, args);
      };
    });

    var methodOf = rest(function (object, args) {
      return function (path) {
        return baseInvoke(object, path, args);
      };
    });

    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function (methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function () {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    function noop() {}

    function nthArg(n) {
      n = toInteger(n);
      return rest(function (args) {
        return baseNth(args, n);
      });
    }

    var over = createOver(arrayMap);

    var overEvery = createOver(arrayEvery);

    var overSome = createOver(arraySome);

    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    function propertyOf(object) {
      return function (path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    var range = createRange();

    var rangeRight = createRange(true);

    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    }

    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    var add = createMathOperation(function (augend, addend) {
      return augend + addend;
    });

    var ceil = createRound('ceil');

    var divide = createMathOperation(function (dividend, divisor) {
      return dividend / divisor;
    });

    var floor = createRound('floor');

    function max(array) {
      return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }

    function maxBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee), baseGt) : undefined;
    }

    function mean(array) {
      return baseMean(array, identity);
    }

    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee));
    }

    function min(array) {
      return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }

    function minBy(array, iteratee) {
      return array && array.length ? baseExtremum(array, getIteratee(iteratee), baseLt) : undefined;
    }

    var multiply = createMathOperation(function (multiplier, multiplicand) {
      return multiplier * multiplicand;
    });

    var round = createRound('round');

    var subtract = createMathOperation(function (minuend, subtrahend) {
      return minuend - subtrahend;
    });

    function sum(array) {
      return array && array.length ? baseSum(array, identity) : 0;
    }

    function sumBy(array, iteratee) {
      return array && array.length ? baseSum(array, getIteratee(iteratee)) : 0;
    }

    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    mixin(lodash, lodash);

    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, function () {
      var source = {};
      baseForOwn(lodash, function (func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }(), { 'chain': false });

    lodash.VERSION = VERSION;

    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
      lodash[methodName].placeholder = lodash;
    });

    arrayEach(['drop', 'take'], function (methodName, index) {
      LazyWrapper.prototype[methodName] = function (n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function (n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function (iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    arrayEach(['head', 'last'], function (methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function () {
        return this[takeName](1).value()[0];
      };
    });

    arrayEach(['initial', 'tail'], function (methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function () {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function () {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function (predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function (predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function (path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function (value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function (predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function (value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function (start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function (predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function () {
      return this.take(MAX_ARRAY_LENGTH);
    };

    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function () {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function interceptor(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return isTaker && chainAll ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
      };
    });

    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function () {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function (value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '',
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  var _ = runInContext();

  (freeWindow || freeSelf || {})._ = _;

  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    define(function () {
      return _;
    });
  } else if (freeExports && freeModule) {
      if (moduleExports) {
        (freeModule.exports = _)._ = _;
      }

      freeExports._ = _;
    } else {
      root._ = _;
    }
}).call(this);
}, 484, null, "lodash/lodash.js");
__d(/* react-native-easy-grid/index.js */function(global, require, module, exports) {
'use strict';

var _Row = require(486               ); // 486 = ./Components/Row

var _Row2 = _interopRequireDefault(_Row);

var _Grid = require(488                ); // 488 = ./Components/Grid

var _Grid2 = _interopRequireDefault(_Grid);

var _Col = require(489               ); // 489 = ./Components/Col

var _Col2 = _interopRequireDefault(_Col);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
	Row: _Row2.default,
	Col: _Col2.default,
	Grid: _Grid2.default
};
}, 485, null, "react-native-easy-grid/index.js");
__d(/* react-native-easy-grid/Components/Row.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-easy-grid\\Components\\Row.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require(181           ); // 181 = react-native

var _computeProps = require(487                    ); // 487 = ../Utils/computeProps

var _computeProps2 = _interopRequireDefault(_computeProps);

var _lodash = require(473     ); // 473 = lodash

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  RowNB: {
    displayName: 'RowNB'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-easy-grid/Components/Row.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var RowNB = _wrapComponent('RowNB')(function (_Component) {
  _inherits(RowNB, _Component);

  function RowNB() {
    _classCallCheck(this, RowNB);

    return _possibleConstructorReturn(this, (RowNB.__proto__ || Object.getPrototypeOf(RowNB)).apply(this, arguments));
  }

  _createClass(RowNB, [{
    key: 'prepareRootProps',
    value: function prepareRootProps() {

      var type = {
        flexDirection: 'row',
        flex: this.props.size ? this.props.size : this.props.style && this.props.style.height ? 0 : 1
      };

      var defaultProps = {
        style: type
      };
      return (0, _computeProps2.default)(this.props, defaultProps);
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(nativeProps) {
      this._root.setNativeProps(nativeProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (this.props.onPress) {
        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          { onPress: this.props.onPress, __source: {
              fileName: _jsxFileName,
              lineNumber: 32
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            _extends({
              ref: function ref(component) {
                return _this2._root = component;
              }
            }, this.props, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 33
              }
            }),
            this.props.children
          )
        );
      } else {
        return _react3.default.createElement(
          _reactNative.View,
          _extends({
            ref: function ref(component) {
              return _this2._root = component;
            }
          }, this.props, this.prepareRootProps(), {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 43
            }
          }),
          this.props.children
        );
      }
    }
  }]);

  return RowNB;
}(_react2.Component));

exports.default = RowNB;
}, 486, null, "react-native-easy-grid/Components/Row.js");
__d(/* react-native-easy-grid/Utils/computeProps.js */function(global, require, module, exports) {var _ReactNativePropRegistry = require(274                                                            ); // 274 = react-native/Libraries/Renderer/shims/ReactNativePropRegistry

var _ReactNativePropRegistry2 = _interopRequireDefault(_ReactNativePropRegistry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var React = require(13     ); // 13 = react

var _ = require(473     ); // 473 = lodash

module.exports = function (incomingProps, defaultProps) {
  var computedProps = {};

  incomingProps = _.clone(incomingProps);
  delete incomingProps.children;

  var incomingPropsStyle = incomingProps.style;
  delete incomingProps.style;

  if (incomingProps) _.merge(computedProps, defaultProps, incomingProps);else computedProps = defaultProps;

  if (incomingPropsStyle) {
    var computedPropsStyle = {};
    computedProps.style = {};
    if (Array.isArray(incomingPropsStyle)) {
      _.forEach(incomingPropsStyle, function (style) {
        if (typeof style == "number") {
          _.merge(computedPropsStyle, _ReactNativePropRegistry2.default.getByID(style));
        } else {
          _.merge(computedPropsStyle, style);
        }
      });
    } else {
      if (typeof incomingPropsStyle == "number") {
        computedPropsStyle = _ReactNativePropRegistry2.default.getByID(incomingPropsStyle);
      } else {
        computedPropsStyle = incomingPropsStyle;
      }
    }

    _.merge(computedProps.style, defaultProps.style, computedPropsStyle);
  }

  return computedProps;
};
}, 487, null, "react-native-easy-grid/Utils/computeProps.js");
__d(/* react-native-easy-grid/Components/Grid.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-easy-grid\\Components\\Grid.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require(181           ); // 181 = react-native

var _computeProps = require(487                    ); // 487 = ../Utils/computeProps

var _computeProps2 = _interopRequireDefault(_computeProps);

var _lodash = require(473     ); // 473 = lodash

var _lodash2 = _interopRequireDefault(_lodash);

var _Col = require(489    ); // 489 = ./Col

var _Col2 = _interopRequireDefault(_Col);

var _Row = require(486    ); // 486 = ./Row

var _Row2 = _interopRequireDefault(_Row);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  GridNB: {
    displayName: 'GridNB'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-easy-grid/Components/Grid.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var GridNB = _wrapComponent('GridNB')(function (_Component) {
  _inherits(GridNB, _Component);

  function GridNB() {
    _classCallCheck(this, GridNB);

    return _possibleConstructorReturn(this, (GridNB.__proto__ || Object.getPrototypeOf(GridNB)).apply(this, arguments));
  }

  _createClass(GridNB, [{
    key: 'prepareRootProps',
    value: function prepareRootProps() {

      var type = {
        flex: 1,
        flexDirection: this.ifRow() ? 'column' : 'row'
      };

      var defaultProps = {
        style: type
      };

      return (0, _computeProps2.default)(this.props, defaultProps);
    }
  }, {
    key: 'ifRow',
    value: function ifRow() {
      var row = false;
      _react3.default.Children.forEach(this.props.children, function (child) {
        if (child && child.type == _Row2.default) row = true;
      });
      return row;
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(nativeProps) {
      this._root.setNativeProps(nativeProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (this.props.onPress) {
        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          { onPress: this.props.onPress, __source: {
              fileName: _jsxFileName,
              lineNumber: 43
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            _extends({
              ref: function ref(component) {
                return _this2._root = component;
              }
            }, this.props, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 44
              }
            }),
            this.props.children
          )
        );
      } else {
        return _react3.default.createElement(
          _reactNative.View,
          _extends({
            ref: function ref(component) {
              return _this2._root = component;
            }
          }, this.props, this.prepareRootProps(), {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          }),
          this.props.children
        );
      }
    }
  }]);

  return GridNB;
}(_react2.Component));

exports.default = GridNB;
}, 488, null, "react-native-easy-grid/Components/Grid.js");
__d(/* react-native-easy-grid/Components/Col.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-easy-grid\\Components\\Col.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require(181           ); // 181 = react-native

var _computeProps = require(487                    ); // 487 = ../Utils/computeProps

var _computeProps2 = _interopRequireDefault(_computeProps);

var _lodash = require(473     ); // 473 = lodash

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  ColumnNB: {
    displayName: 'ColumnNB'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-easy-grid/Components/Col.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var ColumnNB = _wrapComponent('ColumnNB')(function (_Component) {
  _inherits(ColumnNB, _Component);

  function ColumnNB() {
    _classCallCheck(this, ColumnNB);

    return _possibleConstructorReturn(this, (ColumnNB.__proto__ || Object.getPrototypeOf(ColumnNB)).apply(this, arguments));
  }

  _createClass(ColumnNB, [{
    key: 'prepareRootProps',
    value: function prepareRootProps() {

      var type = {
        flexDirection: 'column',
        flex: this.props.size ? this.props.size : this.props.style && this.props.style.width ? 0 : 1
      };

      var defaultProps = {
        style: type
      };
      return (0, _computeProps2.default)(this.props, defaultProps);
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(nativeProps) {
      this._root.setNativeProps(nativeProps);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (this.props.onPress) {
        return _react3.default.createElement(
          _reactNative.TouchableOpacity,
          { onPress: this.props.onPress, __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            _extends({
              ref: function ref(component) {
                return _this2._root = component;
              }
            }, this.props, this.prepareRootProps(), {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 32
              }
            }),
            this.props.children
          )
        );
      } else {
        return _react3.default.createElement(
          _reactNative.View,
          _extends({
            ref: function ref(component) {
              return _this2._root = component;
            }
          }, this.props, this.prepareRootProps(), {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          }),
          this.props.children
        );
      }
    }
  }]);

  return ColumnNB;
}(_react2.Component));

exports.default = ColumnNB;
}, 489, null, "react-native-easy-grid/Components/Col.js");
__d(/* native-base/dist/src/init.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.default = setDefaultThemeStyle;var _nativeBaseShoutemTheme = require(470                        );var _components = require(491                 );var _components2 = _interopRequireDefault(_components);function _interopRequireDefault(obj) { // 491 = ./theme/components // 470 = native-base-shoutem-theme
  return obj && obj.__esModule ? obj : { default: obj };
}function setDefaultThemeStyle() {
  var theme = (0, _components2.default)();
  _nativeBaseShoutemTheme.Theme.setDefaultThemeStyle(theme);
}
}, 490, null, "native-base/dist/src/init.js");
__d(/* native-base/dist/src/theme/components/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash
var _Body = require(492     );var _Body2 = _interopRequireDefault(_Body); // 492 = ./Body
var _Left = require(502     );var _Left2 = _interopRequireDefault(_Left); // 502 = ./Left
var _Right = require(503      );var _Right2 = _interopRequireDefault(_Right); // 503 = ./Right
var _Header = require(504       );var _Header2 = _interopRequireDefault(_Header); // 504 = ./Header
var _Switch = require(505       );var _Switch2 = _interopRequireDefault(_Switch); // 505 = ./Switch
var _Thumbnail = require(506          );var _Thumbnail2 = _interopRequireDefault(_Thumbnail); // 506 = ./Thumbnail
var _Container = require(507          );var _Container2 = _interopRequireDefault(_Container); // 507 = ./Container
var _Content = require(508        );var _Content2 = _interopRequireDefault(_Content); // 508 = ./Content
var _Button = require(509       );var _Button2 = _interopRequireDefault(_Button); // 509 = ./Button
var _Title = require(510      );var _Title2 = _interopRequireDefault(_Title); // 510 = ./Title
var _Subtitle = require(511         );var _Subtitle2 = _interopRequireDefault(_Subtitle); // 511 = ./Subtitle
var _InputGroup = require(512           );var _InputGroup2 = _interopRequireDefault(_InputGroup); // 512 = ./InputGroup
var _Badge = require(513      );var _Badge2 = _interopRequireDefault(_Badge); // 513 = ./Badge
var _CheckBox = require(514         );var _CheckBox2 = _interopRequireDefault(_CheckBox); // 514 = ./CheckBox
var _Card = require(515     );var _Card2 = _interopRequireDefault(_Card); // 515 = ./Card
var _Radio = require(516      );var _Radio2 = _interopRequireDefault(_Radio); // 516 = ./Radio
var _H = require(517   );var _H2 = _interopRequireDefault(_H); // 517 = ./H3
var _H3 = require(518   );var _H4 = _interopRequireDefault(_H3); // 518 = ./H2
var _H5 = require(519   );var _H6 = _interopRequireDefault(_H5); // 519 = ./H1
var _Footer = require(520       );var _Footer2 = _interopRequireDefault(_Footer); // 520 = ./Footer
var _FooterTab = require(521          );var _FooterTab2 = _interopRequireDefault(_FooterTab); // 521 = ./FooterTab
var _Fab = require(522    );var _Fab2 = _interopRequireDefault(_Fab); // 522 = ./Fab
var _Item = require(523     );var _Item2 = _interopRequireDefault(_Item); // 523 = ./Item
var _Label = require(524      );var _Label2 = _interopRequireDefault(_Label); // 524 = ./Label
var _Textarea = require(525         );var _Textarea2 = _interopRequireDefault(_Textarea); // 525 = ./Textarea
var _Text = require(526     );var _Text2 = _interopRequireDefault(_Text); // 526 = ./Text
var _Toast = require(527      );var _Toast2 = _interopRequireDefault(_Toast); // 527 = ./Toast
var _Tab = require(528    );var _Tab2 = _interopRequireDefault(_Tab); // 528 = ./Tab
var _TabBar = require(529       );var _TabBar2 = _interopRequireDefault(_TabBar); // 529 = ./TabBar
var _TabContainer = require(530             );var _TabContainer2 = _interopRequireDefault(_TabContainer); // 530 = ./TabContainer
var _View = require(531     );var _View2 = _interopRequireDefault(_View); // 531 = ./View
var _TabHeading = require(532           );var _TabHeading2 = _interopRequireDefault(_TabHeading); // 532 = ./TabHeading
var _Icon = require(533     );var _Icon2 = _interopRequireDefault(_Icon); // 533 = ./Icon
var _Input = require(534      );var _Input2 = _interopRequireDefault(_Input); // 534 = ./Input
var _SwipeRow = require(535         );var _SwipeRow2 = _interopRequireDefault(_SwipeRow); // 535 = ./SwipeRow
var _Segment = require(536        );var _Segment2 = _interopRequireDefault(_Segment); // 536 = ./Segment
var _Spinner = require(537        );var _Spinner2 = _interopRequireDefault(_Spinner); // 537 = ./Spinner
var _CardItem = require(538         );var _CardItem2 = _interopRequireDefault(_CardItem); // 538 = ./CardItem
var _ListItem = require(539         );var _ListItem2 = _interopRequireDefault(_ListItem); // 539 = ./ListItem
var _Form = require(541     );var _Form2 = _interopRequireDefault(_Form); // 541 = ./Form
var _Separator = require(542          );var _Separator2 = _interopRequireDefault(_Separator); // 542 = ./Separator
var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var theme = {
    variables: variables,
    "NativeBase.Left": _extends({}, (0, _Left2.default)(variables)),

    "NativeBase.Right": _extends({}, (0, _Right2.default)(variables)),

    "NativeBase.Body": _extends({}, (0, _Body2.default)(variables)),

    "NativeBase.Header": _extends({}, (0, _Header2.default)(variables)),

    "NativeBase.Button": _extends({}, (0, _Button2.default)(variables)),

    "NativeBase.Title": _extends({}, (0, _Title2.default)(variables)),

    "NativeBase.Subtitle": _extends({}, (0, _Subtitle2.default)(variables)),

    "NativeBase.InputGroup": _extends({}, (0, _InputGroup2.default)(variables)),

    "NativeBase.Input": _extends({}, (0, _Input2.default)(variables)),

    "NativeBase.Badge": _extends({}, (0, _Badge2.default)(variables)),

    "NativeBase.CheckBox": _extends({}, (0, _CheckBox2.default)(variables)),

    "NativeBase.Radio": _extends({}, (0, _Radio2.default)(variables)),

    "NativeBase.Card": _extends({}, (0, _Card2.default)()),

    "NativeBase.CardItem": _extends({}, (0, _CardItem2.default)(variables)),

    "NativeBase.Toast": _extends({}, (0, _Toast2.default)(variables)),

    "NativeBase.H1": _extends({}, (0, _H6.default)(variables)),

    "NativeBase.H2": _extends({}, (0, _H4.default)(variables)),

    "NativeBase.H3": _extends({}, (0, _H2.default)(variables)),

    "NativeBase.Form": _extends({}, (0, _Form2.default)(variables)),

    "NativeBase.Container": _extends({}, (0, _Container2.default)(variables)),

    "NativeBase.Content": _extends({}, (0, _Content2.default)(variables)),

    "NativeBase.Footer": _extends({}, (0, _Footer2.default)(variables)),

    "NativeBase.Tabs": {
      flex: 1 },

    "NativeBase.FooterTab": _extends({}, (0, _FooterTab2.default)(variables)),

    "NativeBase.ListItem": _extends({}, (0, _ListItem2.default)(variables)),

    "NativeBase.ListItem1": _extends({}, (0, _ListItem2.default)(variables)),

    "NativeBase.Icon": _extends({}, (0, _Icon2.default)(variables)),

    "NativeBase.IconNB": _extends({}, (0, _Icon2.default)(variables)),

    "NativeBase.Text": _extends({}, (0, _Text2.default)(variables)),

    "NativeBase.Spinner": _extends({}, (0, _Spinner2.default)(variables)),

    "NativeBase.Fab": _extends({}, (0, _Fab2.default)(variables)),

    "NativeBase.Item": _extends({}, (0, _Item2.default)(variables)),

    "NativeBase.Label": _extends({}, (0, _Label2.default)(variables)),

    "NativeBase.Textarea": _extends({}, (0, _Textarea2.default)(variables)),

    "NativeBase.PickerNB": {
      "NativeBase.Button": {
        "NativeBase.Text": {} } },

    "NativeBase.Tab": _extends({}, (0, _Tab2.default)(variables)),

    "NativeBase.Segment": _extends({}, (0, _Segment2.default)(variables)),

    "NativeBase.TabBar": _extends({}, (0, _TabBar2.default)(variables)),

    "NativeBase.ViewNB": _extends({}, (0, _View2.default)(variables)),

    "NativeBase.TabHeading": _extends({}, (0, _TabHeading2.default)(variables)),

    "NativeBase.TabContainer": _extends({}, (0, _TabContainer2.default)(variables)),

    "NativeBase.Switch": _extends({}, (0, _Switch2.default)(variables)),

    "NativeBase.Separator": _extends({}, (0, _Separator2.default)(variables)),

    "NativeBase.SwipeRow": _extends({}, (0, _SwipeRow2.default)(variables)),

    "NativeBase.Thumbnail": _extends({}, (0, _Thumbnail2.default)(variables)) };

  var cssifyTheme = function cssifyTheme(grandparent, parent, parentKey) {
    _lodash2.default.forEach(parent, function (style, styleName) {

      if (styleName.indexOf(".") === 0 && parentKey && parentKey.indexOf(".") === 0) {
        if (grandparent) {
          if (!grandparent[styleName]) {
            grandparent[styleName] = {};
          } else {
            grandparent[styleName][parentKey] = style;
          }
        }
      }
      if (style && typeof style === "object") {
        cssifyTheme(parent, style, styleName);
      }
    });
  };

  cssifyTheme(null, theme, null);

  return theme;
};
}, 491, null, "native-base/dist/src/theme/components/index.js");
__d(/* native-base/dist/src/theme/components/Body.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var bodyTheme = {
    flex: 1,
    alignItems: 'center',
    alignSelf: 'center' };

  return bodyTheme;
};
}, 492, null, "native-base/dist/src/theme/components/Body.js");
__d(/* native-base/dist/src/theme/variables/platform.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _color = require(494    );var _color2 = _interopRequireDefault(_color); // 494 = color

var _reactNative = require(181           );function _interopRequireDefault(obj) { // 181 = react-native
  return obj && obj.__esModule ? obj : { default: obj };
}

var deviceHeight = _reactNative.Dimensions.get("window").height;
var deviceWidth = _reactNative.Dimensions.get("window").width;
var platform = _reactNative.Platform.OS;
var platformStyle = undefined;exports.default = {
  platformStyle: platformStyle,
  platform: platform,

  androidRipple: true,
  androidRippleColor: "rgba(256, 256, 256, 0.3)",
  androidRippleColorDark: "rgba(0, 0, 0, 0.15)",

  badgeBg: "#ED1727",
  badgeColor: "#fff",

  badgePadding: platform === "ios" ? 3 : 0,

  btnFontFamily: platform === "ios" ? "System" : "Roboto_medium",
  btnDisabledBg: "#b5b5b5",
  btnDisabledClr: "#f1f1f1",

  CheckboxRadius: platform === "ios" ? 13 : 0,
  CheckboxBorderWidth: platform === "ios" ? 1 : 2,
  CheckboxPaddingLeft: platform === "ios" ? 4 : 2,
  CheckboxPaddingBottom: platform === "ios" ? 0 : 5,
  CheckboxIconSize: platform === "ios" ? 21 : 14,
  CheckboxIconMarginTop: platform === "ios" ? undefined : 1,
  CheckboxFontSize: platform === "ios" ? 23 / 0.9 : 18,
  DefaultFontSize: 17,
  checkboxBgColor: "#039BE5",
  checkboxSize: 20,
  checkboxTickColor: "#fff",

  segmentBackgroundColor: platform === "ios" ? "#F8F8F8" : "#3F51B5",
  segmentActiveBackgroundColor: platform === "ios" ? "#007aff" : "#fff",
  segmentTextColor: platform === "ios" ? "#007aff" : "#fff",
  segmentActiveTextColor: platform === "ios" ? "#fff" : "#3F51B5",
  segmentBorderColor: platform === "ios" ? "#007aff" : "#fff",
  segmentBorderColorMain: platform === "ios" ? "#a7a6ab" : "#3F51B5",

  get defaultTextColor() {
    return this.textColor;
  },

  get btnPrimaryBg() {
    return this.brandPrimary;
  },
  get btnPrimaryColor() {
    return this.inverseTextColor;
  },
  get btnInfoBg() {
    return this.brandInfo;
  },
  get btnInfoColor() {
    return this.inverseTextColor;
  },
  get btnSuccessBg() {
    return this.brandSuccess;
  },
  get btnSuccessColor() {
    return this.inverseTextColor;
  },
  get btnDangerBg() {
    return this.brandDanger;
  },
  get btnDangerColor() {
    return this.inverseTextColor;
  },
  get btnWarningBg() {
    return this.brandWarning;
  },
  get btnWarningColor() {
    return this.inverseTextColor;
  },
  get btnTextSize() {
    return platform === "ios" ? this.fontSizeBase * 1.1 : this.fontSizeBase - 1;
  },
  get btnTextSizeLarge() {
    return this.fontSizeBase * 1.5;
  },
  get btnTextSizeSmall() {
    return this.fontSizeBase * 0.8;
  },
  get borderRadiusLarge() {
    return this.fontSizeBase * 3.8;
  },

  buttonPadding: 6,

  get iconSizeLarge() {
    return this.iconFontSize * 1.5;
  },
  get iconSizeSmall() {
    return this.iconFontSize * 0.6;
  },

  cardDefaultBg: "#fff",

  brandPrimary: platform === "ios" ? "#007aff" : "#3F51B5",
  brandInfo: "#62B1F6",
  brandSuccess: "#5cb85c",
  brandDanger: "#d9534f",
  brandWarning: "#f0ad4e",
  brandSidebar: "#252932",

  fontFamily: platform === "ios" ? "System" : "Roboto",
  fontSizeBase: 15,

  get fontSizeH1() {
    return this.fontSizeBase * 1.8;
  },
  get fontSizeH2() {
    return this.fontSizeBase * 1.6;
  },
  get fontSizeH3() {
    return this.fontSizeBase * 1.4;
  },

  footerHeight: 55,
  footerDefaultBg: platform === "ios" ? "#F8F8F8" : "#4179F7",

  tabBarTextColor: platform === "ios" ? "#6b6b6b" : "#b3c7f9",
  tabBarTextSize: platform === "ios" ? 14 : 11,
  activeTab: platform === "ios" ? "#007aff" : "#fff",
  sTabBarActiveTextColor: "#007aff",
  tabBarActiveTextColor: platform === "ios" ? "#007aff" : "#fff",
  tabActiveBgColor: platform === "ios" ? "#cde1f9" : "#3F51B5",

  tabDefaultBg: platform === "ios" ? "#F8F8F8" : "#3F51B5",
  topTabBarTextColor: platform === "ios" ? "#6b6b6b" : "#b3c7f9",
  topTabBarActiveTextColor: platform === "ios" ? "#007aff" : "#fff",
  topTabActiveBgColor: platform === "ios" ? "#cde1f9" : undefined,
  topTabBarBorderColor: platform === "ios" ? "#a7a6ab" : "#fff",
  topTabBarActiveBorderColor: platform === "ios" ? "#007aff" : "#fff",

  toolbarBtnColor: platform === "ios" ? "#007aff" : "#fff",
  toolbarDefaultBg: platform === "ios" ? "#F8F8F8" : "#3F51B5",
  toolbarHeight: platform === "ios" ? 64 : 56,
  toolbarIconSize: platform === "ios" ? 20 : 22,
  toolbarSearchIconSize: platform === "ios" ? 20 : 23,
  toolbarInputColor: platform === "ios" ? "#CECDD2" : "#fff",
  searchBarHeight: platform === "ios" ? 30 : 40,
  toolbarInverseBg: "#222",
  toolbarTextColor: platform === "ios" ? "#000" : "#fff",
  toolbarDefaultBorder: platform === "ios" ? "#a7a6ab" : "#3F51B5",
  iosStatusbar: platform === "ios" ? "dark-content" : "light-content",
  get statusBarColor() {
    return (0, _color2.default)(this.toolbarDefaultBg).darken(0.2).hex();
  },

  iconFamily: "Ionicons",
  iconFontSize: platform === "ios" ? 30 : 28,
  iconMargin: 7,
  iconHeaderSize: platform === "ios" ? 33 : 24,

  inputFontSize: 17,
  inputBorderColor: "#D9D5DC",
  inputSuccessBorderColor: "#2b8339",
  inputErrorBorderColor: "#ed2f2f",

  get inputColor() {
    return this.textColor;
  },
  get inputColorPlaceholder() {
    return "#575757";
  },

  inputGroupMarginBottom: 10,
  inputHeightBase: 50,
  inputPaddingLeft: 5,

  get inputPaddingLeftIcon() {
    return this.inputPaddingLeft * 8;
  },

  btnLineHeight: 19,
  lineHeightH1: 32,
  lineHeightH2: 27,
  lineHeightH3: 22,
  iconLineHeight: platform === "ios" ? 37 : 30,
  lineHeight: platform === "ios" ? 20 : 24,

  listBg: "#fff",
  listBorderColor: "#c9c9c9",
  listDividerBg: "#f4f4f4",
  listItemHeight: 45,
  listBtnUnderlayColor: "#DDD",

  cardBorderColor: "#ccc",

  listItemPadding: platform === "ios" ? 10 : 12,

  listNoteColor: "#808080",
  listNoteSize: 13,

  defaultProgressColor: "#E4202D",
  inverseProgressColor: "#1A191B",

  radioBtnSize: platform === "ios" ? 25 : 23,
  radioSelectedColorAndroid: "#3F51B5",

  radioBtnLineHeight: platform === "ios" ? 29 : 24,

  radioColor: "#7e7e7e",

  get radioSelectedColor() {
    return (0, _color2.default)(this.radioColor).darken(0.2).hex();
  },

  defaultSpinnerColor: "#45D56E",
  inverseSpinnerColor: "#1A191B",

  tabBgColor: "#F8F8F8",
  tabFontSize: 15,
  tabTextColor: "#222222",

  textColor: "#000",
  inverseTextColor: "#fff",
  noteFontSize: 14,

  titleFontfamily: platform === "ios" ? "System" : "Roboto_medium",
  titleFontSize: platform === "ios" ? 17 : 19,
  subTitleFontSize: platform === "ios" ? 12 : 14,
  subtitleColor: platform === "ios" ? "#8e8e93" : "#FFF",

  titleFontColor: platform === "ios" ? "#000" : "#FFF",

  borderRadiusBase: platform === "ios" ? 5 : 2,
  borderWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
  contentPadding: 10,

  get darkenHeader() {
    return (0, _color2.default)(this.tabBgColor).darken(0.03).hex();
  },

  dropdownBg: "#000",
  dropdownLinkColor: "#414142",
  inputLineHeight: 24,
  jumbotronBg: "#C9C9CE",
  jumbotronPadding: 30,
  deviceWidth: deviceWidth,
  deviceHeight: deviceHeight,

  inputGroupRoundedBorderRadius: 30 };
}, 493, null, "native-base/dist/src/theme/variables/platform.js");
__d(/* color/index.js */function(global, require, module, exports) {'use strict';

var colorString = require(495           ); // 495 = color-string
var convert = require(499            ); // 499 = color-convert

var _slice = [].slice;

var skippedModels = ['keyword', 'gray', 'hex'];

var hashedModelKeys = {};
Object.keys(convert).forEach(function (model) {
	hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
});

var limiters = {};

function Color(obj, model) {
	if (!(this instanceof Color)) {
		return new Color(obj, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	var i;
	var channels;

	if (!obj) {
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (obj instanceof Color) {
		this.model = obj.model;
		this.color = obj.color.slice();
		this.valpha = obj.valpha;
	} else if (typeof obj === 'string') {
		var result = colorString.get(obj);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + obj);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (obj.length) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		var newArr = _slice.call(obj, 0, channels);
		this.color = zeroArray(newArr, channels);
		this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
	} else if (typeof obj === 'number') {
		obj &= 0xFFFFFF;
		this.model = 'rgb';
		this.color = [obj >> 16 & 0xFF, obj >> 8 & 0xFF, obj & 0xFF];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		var keys = Object.keys(obj);
		if ('alpha' in obj) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
		}

		var hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
		}

		this.model = hashedModelKeys[hashedKeys];

		var labels = convert[this.model].labels;
		var color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(obj[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			var limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString: function toString() {
		return this.string();
	},

	toJSON: function toJSON() {
		return this[this.model]();
	},

	string: function string(places) {
		var self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to[self.model](args);
	},

	percentString: function percentString(places) {
		var self = this.rgb().round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to.rgb.percent(args);
	},

	array: function array() {
		return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
	},

	object: function object() {
		var result = {};
		var channels = convert[this.model].channels;
		var labels = convert[this.model].labels;

		for (var i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray: function unitArray() {
		var rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject: function unitObject() {
		var rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round: function round(places) {
		places = Math.max(places || 0, 0);
		return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
	},

	alpha: function alpha(val) {
		if (arguments.length) {
			return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
		}

		return this.valpha;
	},

	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) {
		return (val % 360 + 360) % 360;
	}),

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(100)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(100)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword: function keyword(val) {
		if (arguments.length) {
			return new Color(val);
		}

		return convert[this.model].keyword(this.color);
	},

	hex: function hex(val) {
		if (arguments.length) {
			return new Color(val);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	rgbNumber: function rgbNumber() {
		var rgb = this.rgb().color;
		return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;
	},

	luminosity: function luminosity() {
		var rgb = this.rgb().color;

		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function contrast(color2) {
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function level(color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return contrastRatio >= 4.5 ? 'AA' : '';
	},

	dark: function dark() {
		var rgb = this.rgb().color;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	light: function light() {
		return !this.dark();
	},

	negate: function negate() {
		var rgb = this.rgb();
		for (var i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}
		return rgb;
	},

	lighten: function lighten(ratio) {
		var hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken: function darken(ratio) {
		var hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate: function saturate(ratio) {
		var hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate: function desaturate(ratio) {
		var hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten: function whiten(ratio) {
		var hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken: function blacken(ratio) {
		var hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale: function grayscale() {
		var rgb = this.rgb().color;
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(val, val, val);
	},

	fade: function fade(ratio) {
		return this.alpha(this.valpha - this.valpha * ratio);
	},

	opaquer: function opaquer(ratio) {
		return this.alpha(this.valpha + this.valpha * ratio);
	},

	rotate: function rotate(degrees) {
		var hsl = this.hsl();
		var hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix: function mix(mixinColor, weight) {
		var color1 = this.rgb();
		var color2 = mixinColor.rgb();
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
	}
};

Object.keys(convert).forEach(function (model) {
	if (skippedModels.indexOf(model) !== -1) {
		return;
	}

	var channels = convert[model].channels;

	Color.prototype[model] = function () {
		if (this.model === model) {
			return new Color(this);
		}

		if (arguments.length) {
			return new Color(arguments, model);
		}

		var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
		return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
	};

	Color[model] = function (color) {
		if (typeof color === 'number') {
			color = zeroArray(_slice.call(arguments), channels);
		}
		return new Color(color, model);
	};
});

function roundTo(num, places) {
	return Number(num.toFixed(places));
}

function roundToPlace(places) {
	return function (num) {
		return roundTo(num, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	model.forEach(function (m) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	});

	model = model[0];

	return function (val) {
		var result;

		if (arguments.length) {
			if (modifier) {
				val = modifier(val);
			}

			result = this[model]();
			result.color[channel] = val;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(val) {
	return Array.isArray(val) ? val : [val];
}

function zeroArray(arr, length) {
	for (var i = 0; i < length; i++) {
		if (typeof arr[i] !== 'number') {
			arr[i] = 0;
		}
	}

	return arr;
}

module.exports = Color;
}, 494, null, "color/index.js");
__d(/* color-string/index.js */function(global, require, module, exports) {
var colorNames = require(496         ); // 496 = color-name
var swizzle = require(497             ); // 497 = simple-swizzle

var reverseNames = {};

for (var name in colorNames) {
	if (colorNames.hasOwnProperty(name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return { model: model, value: val };
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var keyword = /(\D+)/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		rgb = colorNames[match[1]];

		if (!rgb) {
			return null;
		}

		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = (parseFloat(match[1]) % 360 + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = (parseFloat(match[1]) % 360 + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return '#' + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : '');
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')' : 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1 ? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)' : 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1 ? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)' : 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = num.toString(16).toUpperCase();
	return str.length < 2 ? '0' + str : str;
}
}, 495, null, "color-string/index.js");
__d(/* color-name/index.js */function(global, require, module, exports) {'use strict';

module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};
}, 496, null, "color-name/index.js");
__d(/* simple-swizzle/index.js */function(global, require, module, exports) {'use strict';

var isArrayish = require(498          ); // 498 = is-arrayish

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};
}, 497, null, "simple-swizzle/index.js");
__d(/* is-arrayish/index.js */function(global, require, module, exports) {'use strict';

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== 'String');
};
}, 498, null, "is-arrayish/index.js");
__d(/* color-convert/index.js */function(global, require, module, exports) {var conversions = require(500            ); // 500 = ./conversions
var route = require(501      ); // 501 = ./route

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function wrappedFn(args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function wrappedFn(args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', { value: conversions[fromModel].channels });
	Object.defineProperty(convert[fromModel], 'labels', { value: conversions[fromModel].labels });

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;
}, 499, null, "color-convert/index.js");
__d(/* color-convert/conversions.js */function(global, require, module, exports) {
var cssKeywords = require(496         ); // 496 = color-name

var reverseKeywords = {};
for (var key in cssKeywords) {
	if (cssKeywords.hasOwnProperty(key)) {
		reverseKeywords[cssKeywords[key]] = key;
	}
}

var convert = module.exports = {
	rgb: { channels: 3, labels: 'rgb' },
	hsl: { channels: 3, labels: 'hsl' },
	hsv: { channels: 3, labels: 'hsv' },
	hwb: { channels: 3, labels: 'hwb' },
	cmyk: { channels: 4, labels: 'cmyk' },
	xyz: { channels: 3, labels: 'xyz' },
	lab: { channels: 3, labels: 'lab' },
	lch: { channels: 3, labels: 'lch' },
	hex: { channels: 1, labels: ['hex'] },
	keyword: { channels: 1, labels: ['keyword'] },
	ansi16: { channels: 1, labels: ['ansi16'] },
	ansi256: { channels: 1, labels: ['ansi256'] },
	hcg: { channels: 3, labels: ['h', 'c', 'g'] },
	apple: { channels: 3, labels: ['r16', 'g16', 'b16'] },
	gray: { channels: 1, labels: ['gray'] }
};

for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', { value: channels });
		Object.defineProperty(convert[model], 'labels', { value: labels });
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var v;

	if (max === 0) {
		s = 0;
	} else {
		s = delta / max * 1000 / 10;
	}

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	v = max / 255 * 1000 / 10;

	return [h, s, v];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in cssKeywords) {
		if (cssKeywords.hasOwnProperty(keyword)) {
			var value = cssKeywords[keyword];

			var distance = comparativeDistance(rgb, value);

			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
	g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
	b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;

	var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
	var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
	var z = r * 0.0193 + g * 0.1192 + b * 0.9505;

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

	l = 116 * y - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= l <= 1 ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - s * f);
	var t = 255 * v * (1 - s * (1 - f));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= lmin <= 1 ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh);

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0:
			r = v;g = n;b = wh;break;
		case 1:
			r = n;g = v;b = wh;break;
		case 2:
			r = wh;g = v;b = n;break;
		case 3:
			r = wh;g = n;b = v;break;
		case 4:
			r = n;g = wh;b = v;break;
		case 5:
			r = v;g = wh;b = n;break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = x * 3.2406 + y * -1.5372 + z * -0.4986;
	g = x * -0.9689 + y * 1.8758 + z * 0.0415;
	b = x * 0.0557 + y * -0.2040 + z * 1.0570;

	r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;

	g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;

	b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;

	l = 116 * y - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round((r - 8) / 247 * 24) + 232;
	}

	var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = (color & 1) * mult * 255;
	var g = (color >> 1 & 1) * mult * 255;
	var b = (color >> 2 & 1) * mult * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = rem % 6 / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = integer >> 16 & 0xFF;
	var g = integer >> 8 & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = max - min;
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else if (max === r) {
		hue = (g - b) / chroma % 6;
	} else if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = h % 1 * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1;pure[1] = v;pure[2] = 0;break;
		case 1:
			pure[0] = w;pure[1] = 1;pure[2] = 0;break;
		case 2:
			pure[0] = 0;pure[1] = 1;pure[2] = v;break;
		case 3:
			pure[0] = 0;pure[1] = w;pure[2] = 1;break;
		case 4:
			pure[0] = v;pure[1] = 0;pure[2] = 1;break;
		default:
			pure[0] = 1;pure[1] = 0;pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};

convert.rgb.apple = function (rgb) {
	return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};
}, 500, null, "color-convert/conversions.js");
__d(/* color-convert/route.js */function(global, require, module, exports) {var conversions = require(500            ); // 500 = ./conversions

var models = Object.keys(conversions);

function buildGraph() {
	var graph = {};

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			distance: -1,
			parent: null
		};
	}

	return graph;
}

function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel];

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};
}, 501, null, "color-convert/route.js");
__d(/* native-base/dist/src/theme/components/Left.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var leftTheme = {
    flex: 1,
    alignSelf: 'center',
    alignItems: 'flex-start' };

  return leftTheme;
};
}, 502, null, "native-base/dist/src/theme/components/Left.js");
__d(/* native-base/dist/src/theme/components/Right.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var rightTheme = {
    'NativeBase.Button': {
      alignSelf: null },

    flex: 1,
    alignSelf: 'center',
    alignItems: 'flex-end' };

  return rightTheme;
};
}, 503, null, "native-base/dist/src/theme/components/Right.js");
__d(/* native-base/dist/src/theme/components/Header.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(181           ); // 181 = react-native

var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platformStyle = variables.platformStyle;
  var platform = variables.platform;

  var headerTheme = {
    ".span": {
      height: 128,
      "NativeBase.Left": {
        alignSelf: "flex-start" },

      "NativeBase.Body": {
        alignSelf: "flex-end",
        alignItems: "flex-start",
        justifyContent: "center",
        paddingBottom: 26 },

      "NativeBase.Right": {
        alignSelf: "flex-start" } },

    ".hasSubtitle": {
      "NativeBase.Body": {
        "NativeBase.Title": {
          fontSize: variables.titleFontSize - 2,
          fontFamily: variables.titleFontfamily,
          textAlign: "center" },

        "NativeBase.Subtitle": {
          fontSize: variables.subTitleFontSize,
          fontFamily: variables.titleFontfamily,
          color: variables.subtitleColor,
          textAlign: "center" } } },

    ".noShadow": {
      elevation: 0,
      shadowColor: null,
      shadowOffset: null,
      shadowRadius: null,
      shadowOpacity: null },

    ".hasTabs": {
      elevation: 0,
      shadowColor: null,
      shadowOffset: null,
      shadowRadius: null,
      shadowOpacity: null,
      borderBottomWidth: null },

    ".hasSegment": {
      elevation: 0,
      shadowColor: null,
      shadowOffset: null,
      shadowRadius: null,
      shadowOpacity: null,
      borderBottomWidth: null },

    "NativeBase.Button": {
      justifyContent: "center",
      alignSelf: "center",
      alignItems: "center",
      ".transparent": {
        "NativeBase.Text": {
          color: variables.toolbarBtnColor,
          fontWeight: "600" },

        "NativeBase.Icon": {
          color: variables.toolbarBtnColor },

        "NativeBase.IconNB": {
          color: variables.toolbarBtnColor },

        paddingHorizontal: variables.buttonPadding },

      paddingHorizontal: 15 },

    ".searchBar": {
      "NativeBase.Item": {
        "NativeBase.Icon": {
          backgroundColor: "transparent",
          color: variables.dropdownLinkColor,
          fontSize: variables.toolbarSearchIconSize,
          alignItems: "center",
          marginTop: 2,
          paddingRight: 10,
          paddingLeft: 10 },

        "NativeBase.IconNB": {
          backgroundColor: "transparent",
          color: null,
          alignSelf: "center" },

        "NativeBase.Input": {
          alignSelf: "center",
          lineHeight: 24,
          height: variables.searchBarHeight },

        alignSelf: "center",
        alignItems: "center",
        justifyContent: "flex-start",
        flex: 1,
        height: variables.searchBarHeight,
        borderColor: "transparent",
        backgroundColor: variables.toolbarInputColor },

      "NativeBase.Button": {
        ".transparent": {
          "NativeBase.Text": {
            fontWeight: "500" },

          paddingHorizontal: null,
          paddingLeft: platform === "ios" ? 10 : null },

        paddingHorizontal: platform === "ios" ? undefined : null,
        width: platform === "ios" ? undefined : 0,
        height: platform === "ios" ? undefined : 0 } },

    ".rounded": {
      "NativeBase.Item": {
        borderRadius: platform === "ios" && platformStyle !== "material" ? 25 : 3 } },

    "NativeBase.Left": {
      "NativeBase.Button": {
        ".hasText": {
          marginLeft: -10,
          height: 30,
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor,
            fontSize: variables.iconHeaderSize,
            marginTop: 2,
            marginRight: 5,
            marginLeft: 2 },

          "NativeBase.Text": {
            color: variables.toolbarBtnColor,
            fontSize: 17,
            marginLeft: 2,
            lineHeight: 21 },

          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor,
            fontSize: variables.iconHeaderSize,
            marginTop: 2,
            marginRight: 5,
            marginLeft: 2 } },

        ".transparent": {
          marginLeft: -3,
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor,
            fontSize: variables.iconHeaderSize,
            marginTop: 2,
            marginRight: 2,
            marginLeft: 2 },

          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor,
            fontSize: variables.iconHeaderSize,
            marginTop: 2,
            marginRight: 2,
            marginLeft: 2 },

          "NativeBase.Text": {
            color: variables.toolbarBtnColor,
            fontSize: 17,
            top: platform === "ios" ? undefined : -1.5 },

          backgroundColor: "transparent",
          borderColor: null,
          elevation: 0,
          shadowColor: null,
          shadowOffset: null,
          shadowRadius: null,
          shadowOpacity: null },

        "NativeBase.Icon": {
          color: variables.toolbarBtnColor },

        "NativeBase.IconNB": {
          color: variables.toolbarBtnColor },

        alignSelf: null,
        paddingHorizontal: variables.buttonPadding },

      flex: platform === "ios" && platformStyle !== "material" ? 1 : 0.5,
      alignSelf: "center",
      alignItems: "flex-start" },

    "NativeBase.Body": {
      flex: 1,
      alignItems: platform === "ios" && platformStyle !== "material" ? "center" : "flex-start",
      alignSelf: "center",
      "NativeBase.Segment": {
        borderWidth: 0,
        alignSelf: "flex-end",
        marginRight: platform === "ios" ? -40 : -55 },

      "NativeBase.Button": {
        alignSelf: "center",
        ".transparent": {
          backgroundColor: "transparent" },

        "NativeBase.Icon": {
          color: variables.toolbarBtnColor },

        "NativeBase.IconNB": {
          color: variables.toolbarBtnColor },

        "NativeBase.Text": {
          color: variables.inverseTextColor,
          backgroundColor: "transparent" } } },

    "NativeBase.Right": {
      "NativeBase.Button": {
        ".hasText": {
          height: 30,
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor,
            fontSize: variables.iconHeaderSize - 2,
            marginTop: 2,
            marginRight: 2,
            marginLeft: 5 },

          "NativeBase.Text": {
            color: variables.toolbarBtnColor,
            fontSize: 17,
            lineHeight: 21 },

          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor,
            fontSize: variables.iconHeaderSize - 2,
            marginTop: 2,
            marginRight: 2,
            marginLeft: 5 } },

        ".transparent": {
          marginRight: -8,
          paddingHorizontal: 15,
          borderRadius: 50,
          "NativeBase.Icon": {
            color: variables.toolbarBtnColor,
            fontSize: platform === "ios" ? variables.iconHeaderSize - 6 : variables.iconHeaderSize - 2,
            marginTop: 2,
            marginLeft: 2,
            marginRight: 2 },

          "NativeBase.IconNB": {
            color: variables.toolbarBtnColor,
            fontSize: platform === "ios" ? variables.iconHeaderSize - 6 : variables.iconHeaderSize - 2,
            marginTop: 2,
            marginLeft: 2,
            marginRight: 2 },

          "NativeBase.Text": {
            color: variables.toolbarBtnColor,
            fontSize: 17,
            top: platform === "ios" ? undefined : -1.5 },

          backgroundColor: "transparent",
          borderColor: null,
          elevation: 0,
          shadowColor: null,
          shadowOffset: null,
          shadowRadius: null,
          shadowOpacity: null },

        "NativeBase.Icon": {
          color: variables.toolbarBtnColor },

        "NativeBase.IconNB": {
          color: variables.toolbarBtnColor },

        alignSelf: null,
        paddingHorizontal: variables.buttonPadding },

      flex: 1,
      alignSelf: "center",
      alignItems: "flex-end",
      flexDirection: "row",
      justifyContent: "flex-end" },

    backgroundColor: variables.toolbarDefaultBg,
    flexDirection: "row",
    paddingHorizontal: 10,
    justifyContent: "center",
    paddingTop: platform === "ios" ? 15 : 0,
    borderBottomWidth: platform === "ios" ? 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1) : 0,
    borderBottomColor: variables.toolbarDefaultBorder,
    height: variables.toolbarHeight,
    elevation: 3,
    shadowColor: platformStyle === "material" ? "#000" : undefined,
    shadowOffset: platformStyle === "material" ? { width: 0, height: 2 } : undefined,
    shadowOpacity: platformStyle === "material" ? 0.2 : undefined,
    shadowRadius: platformStyle === "material" ? 1.2 : undefined,
    top: 0,
    left: 0,
    right: 0 };

  return headerTheme;
};
}, 504, null, "native-base/dist/src/theme/components/Header.js");
__d(/* native-base/dist/src/theme/components/Switch.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var switchTheme = {
    marginVertical: -5 };

  return switchTheme;
};
}, 505, null, "native-base/dist/src/theme/components/Switch.js");
__d(/* native-base/dist/src/theme/components/Thumbnail.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var thumbnailTheme = {
    '.square': {
      borderRadius: 0,
      '.small': {
        width: 36,
        height: 36,
        borderRadius: 0 },

      '.large': {
        width: 80,
        height: 80,
        borderRadius: 0 } },

    '.small': {
      width: 36,
      height: 36,
      borderRadius: 18,
      '.square': {
        borderRadius: 0 } },

    '.large': {
      width: 80,
      height: 80,
      borderRadius: 40,
      '.square': {
        borderRadius: 0 } },

    width: 56,
    height: 56,
    borderRadius: 28 };

  return thumbnailTheme;
};
}, 506, null, "native-base/dist/src/theme/components/Thumbnail.js");
__d(/* native-base/dist/src/theme/components/Container.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(181           ); // 181 = react-native

var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}

var deviceHeight = _reactNative.Dimensions.get("window").height;exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var theme = {
    flex: 1,
    height: _reactNative.Platform.OS === "ios" ? deviceHeight : deviceHeight - 20 };

  return theme;
};
}, 507, null, "native-base/dist/src/theme/components/Container.js");
__d(/* native-base/dist/src/theme/components/Content.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var contentTheme = {
    ".padder": {
      padding: variables.contentPadding },

    flex: 1,
    backgroundColor: "transparent",
    "NativeBase.Segment": {
      borderWidth: 0,
      backgroundColor: "transparent" } };

  return contentTheme;
};
}, 508, null, "native-base/dist/src/theme/components/Content.js");
__d(/* native-base/dist/src/theme/components/Button.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platformStyle = variables.platformStyle;
  var platform = variables.platform;

  var buttonTheme = {
    ".disabled": {
      backgroundColor: variables.btnDisabledBg },

    ".bordered": {
      ".dark": {
        "NativeBase.Text": {
          color: "#000" },

        "NativeBase.Icon": {
          color: "#000" },

        "NativeBase.IconNB": {
          color: "#000" },

        backgroundColor: "transparent",
        borderColor: "#000",
        borderWidth: variables.borderWidth * 2 },

      ".light": {
        "NativeBase.Text": {
          color: "#f4f4f4" },

        "NativeBase.Icon": {
          color: "#f4f4f4" },

        "NativeBase.IconNB": {
          color: "#f4f4f4" },

        backgroundColor: "transparent",
        borderColor: "#f4f4f4",
        borderWidth: variables.borderWidth * 2 },

      ".primary": {
        "NativeBase.Text": {
          color: variables.btnPrimaryBg },

        "NativeBase.Icon": {
          color: variables.btnPrimaryBg },

        "NativeBase.IconNB": {
          color: variables.btnPrimaryBg },

        backgroundColor: "transparent",
        borderColor: variables.btnPrimaryBg,
        borderWidth: variables.borderWidth * 2 },

      ".success": {
        "NativeBase.Text": {
          color: variables.btnSuccessBg },

        "NativeBase.Icon": {
          color: variables.btnSuccessBg },

        "NativeBase.IconNB": {
          color: variables.btnSuccessBg },

        backgroundColor: "transparent",
        borderColor: variables.btnSuccessBg,
        borderWidth: variables.borderWidth * 2 },

      ".info": {
        "NativeBase.Text": {
          color: variables.btnInfoBg },

        "NativeBase.Icon": {
          color: variables.btnInfoBg },

        "NativeBase.IconNB": {
          color: variables.btnInfoBg },

        backgroundColor: "transparent",
        borderColor: variables.btnInfoBg,
        borderWidth: variables.borderWidth * 2 },

      ".warning": {
        "NativeBase.Text": {
          color: variables.btnWarningBg },

        "NativeBase.Icon": {
          color: variables.btnWarningBg },

        "NativeBase.IconNB": {
          color: variables.btnWarningBg },

        backgroundColor: "transparent",
        borderColor: variables.btnWarningBg,
        borderWidth: variables.borderWidth * 2 },

      ".danger": {
        "NativeBase.Text": {
          color: variables.btnDangerBg },

        "NativeBase.Icon": {
          color: variables.btnDangerBg },

        "NativeBase.IconNB": {
          color: variables.btnDangerBg },

        backgroundColor: "transparent",
        borderColor: variables.btnDangerBg,
        borderWidth: variables.borderWidth * 2 },

      ".disabled": {
        backgroundColor: null,
        borderColor: variables.btnDisabledBg,
        borderWidth: variables.borderWidth * 2,
        "NativeBase.Text": {
          color: variables.btnDisabledBg } },

      "NativeBase.Text": {
        color: variables.btnPrimaryBg },

      "NativeBase.Icon": {
        color: variables.btnPrimaryBg },

      "NativeBase.IconNB": {
        color: variables.btnPrimaryBg },

      borderWidth: variables.borderWidth * 2,
      elevation: null,
      shadowColor: null,
      shadowOffset: null,
      shadowOpacity: null,
      shadowRadius: null,
      backgroundColor: "transparent" },

    ".dark": {
      ".bordered": {
        "NativeBase.Text": {
          color: "#000" },

        "NativeBase.Icon": {
          color: "#000" },

        "NativeBase.IconNB": {
          color: "#000" } },

      backgroundColor: "#000" },

    ".light": {
      ".transparent": {
        "NativeBase.Text": {
          color: "#f4f4f4" },

        "NativeBase.Icon": {
          color: "#f4f4f4" },

        "NativeBase.IconNB": {
          color: "#f4f4f4" },

        backgroundColor: null },

      ".bordered": {
        "NativeBase.Text": {
          color: "#f4f4f4" },

        "NativeBase.Icon": {
          color: "#f4f4f4" },

        "NativeBase.IconNB": {
          color: "#f4f4f4" } },

      "NativeBase.Text": {
        color: "#000" },

      "NativeBase.Icon": {
        color: "#000" },

      "NativeBase.IconNB": {
        color: "#000" },

      backgroundColor: "#f4f4f4" },

    ".primary": {
      ".bordered": {
        "NativeBase.Text": {
          color: variables.btnPrimaryBg },

        "NativeBase.Icon": {
          color: variables.btnPrimaryBg },

        "NativeBase.IconNB": {
          color: variables.btnPrimaryBg } },

      backgroundColor: variables.btnPrimaryBg },

    ".success": {
      ".bordered": {
        "NativeBase.Text": {
          color: variables.btnSuccessBg },

        "NativeBase.Icon": {
          color: variables.btnSuccessBg },

        "NativeBase.IconNB": {
          color: variables.btnSuccessBg } },

      backgroundColor: variables.btnSuccessBg },

    ".info": {
      ".bordered": {
        "NativeBase.Text": {
          color: variables.btnInfoBg },

        "NativeBase.Icon": {
          color: variables.btnInfoBg },

        "NativeBase.IconNB": {
          color: variables.btnInfoBg } },

      backgroundColor: variables.btnInfoBg },

    ".warning": {
      ".bordered": {
        "NativeBase.Text": {
          color: variables.btnWarningBg },

        "NativeBase.Icon": {
          color: variables.btnWarningBg },

        "NativeBase.IconNB": {
          color: variables.btnWarningBg } },

      backgroundColor: variables.btnWarningBg },

    ".danger": {
      ".bordered": {
        "NativeBase.Text": {
          color: variables.btnDangerBg },

        "NativeBase.Icon": {
          color: variables.btnDangerBg },

        "NativeBase.IconNB": {
          color: variables.btnDangerBg } },

      backgroundColor: variables.btnDangerBg },

    ".block": {
      justifyContent: "center",
      alignSelf: "stretch" },

    ".full": {
      justifyContent: "center",
      alignSelf: "stretch",
      borderRadius: 0 },

    ".rounded": {

      borderRadius: variables.borderRadiusLarge },

    ".transparent": {
      backgroundColor: "transparent",
      elevation: 0,
      shadowColor: null,
      shadowOffset: null,
      shadowRadius: null,
      shadowOpacity: null,

      "NativeBase.Text": {
        color: variables.btnPrimaryBg },

      "NativeBase.Icon": {
        color: variables.btnPrimaryBg },

      "NativeBase.IconNB": {
        color: variables.btnPrimaryBg },

      ".dark": {
        "NativeBase.Text": {
          color: "#000" },

        "NativeBase.IconNB": {
          color: "#000" },

        "NativeBase.Icon": {
          color: "#000" },

        backgroundColor: null },

      ".danger": {
        "NativeBase.Text": {
          color: variables.btnDangerBg },

        "NativeBase.IconNB": {
          color: variables.btnDangerBg },

        "NativeBase.Icon": {
          color: variables.btnDangerBg },

        backgroundColor: null },

      ".warning": {
        "NativeBase.Text": {
          color: variables.btnWarningBg },

        "NativeBase.IconNB": {
          color: variables.btnWarningBg },

        "NativeBase.Icon": {
          color: variables.btnWarningBg },

        backgroundColor: null },

      ".info": {
        "NativeBase.Text": {
          color: variables.btnInfoBg },

        "NativeBase.IconNB": {
          color: variables.btnInfoBg },

        "NativeBase.Icon": {
          color: variables.btnInfoBg },

        backgroundColor: null },

      ".primary": {
        "NativeBase.Text": {
          color: variables.btnPrimaryBg },

        "NativeBase.IconNB": {
          color: variables.btnPrimaryBg },

        "NativeBase.Icon": {
          color: variables.btnPrimaryBg },

        backgroundColor: null },

      ".success": {
        "NativeBase.Text": {
          color: variables.btnSuccessBg },

        "NativeBase.IconNB": {
          color: variables.btnSuccessBg },

        "NativeBase.Icon": {
          color: variables.btnSuccessBg },

        backgroundColor: null },

      ".light": {
        "NativeBase.Text": {
          color: "#f4f4f4" },

        "NativeBase.IconNB": {
          color: "#f4f4f4" },

        "NativeBase.Icon": {
          color: "#f4f4f4" },

        backgroundColor: null } },

    ".small": {
      height: 30,
      "NativeBase.Text": {
        fontSize: 14 } },

    ".large": {
      height: 60,
      "NativeBase.Text": {
        fontSize: 22,
        lineHeight: 32 } },

    ".capitalize": {},

    ".vertical": {
      flexDirection: "column",
      height: null },

    "NativeBase.Text": {
      fontFamily: variables.btnFontFamily,
      marginLeft: 0,
      marginRight: 0,
      color: variables.inverseTextColor,
      fontSize: variables.btnTextSize,
      lineHeight: variables.btnLineHeight,
      paddingHorizontal: 16,
      backgroundColor: "transparent" },

    "NativeBase.Icon": {
      color: variables.inverseTextColor,
      fontSize: 24,
      marginHorizontal: 16,
      paddingTop: platform === "ios" ? 2 : undefined },

    "NativeBase.IconNB": {
      color: variables.inverseTextColor,
      fontSize: 24,
      marginHorizontal: 16,
      paddingTop: platform === "ios" ? 2 : undefined },

    ".iconLeft": {
      "NativeBase.Text": {
        marginLeft: 0 },

      "NativeBase.IconNB": {
        marginRight: 0,
        marginLeft: 16 },

      "NativeBase.Icon": {
        marginRight: 0,
        marginLeft: 16 } },

    ".iconRight": {
      "NativeBase.Text": {
        marginRight: 0 },

      "NativeBase.IconNB": {
        marginLeft: 0,
        marginRight: 16 },

      "NativeBase.Icon": {
        marginLeft: 0,
        marginRight: 16 } },

    ".picker": {
      "NativeBase.Text": {
        ".note": {
          fontSize: 16,
          lineHeight: null } } },

    paddingVertical: variables.buttonPadding,

    backgroundColor: variables.btnPrimaryBg,
    borderRadius: variables.borderRadiusBase,
    borderColor: variables.btnPrimaryBg,
    borderWidth: null,
    height: 45,
    alignSelf: "flex-start",
    flexDirection: "row",
    elevation: 2,
    shadowColor: platformStyle === "material" ? "#000" : undefined,
    shadowOffset: platformStyle === "material" ? { width: 0, height: 2 } : undefined,
    shadowOpacity: platformStyle === "material" ? 0.2 : undefined,
    shadowRadius: platformStyle === "material" ? 1.2 : undefined,
    alignItems: "center",
    justifyContent: "space-between" };

  return buttonTheme;
};
}, 509, null, "native-base/dist/src/theme/components/Button.js");
__d(/* native-base/dist/src/theme/components/Title.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(181           ); // 181 = react-native

var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var titleTheme = {
    fontSize: variables.titleFontSize,
    fontFamily: variables.titleFontfamily,
    color: variables.titleFontColor,
    fontWeight: _reactNative.Platform.OS === "ios" ? "600" : undefined,
    textAlign: "center" };

  return titleTheme;
};
}, 510, null, "native-base/dist/src/theme/components/Title.js");
__d(/* native-base/dist/src/theme/components/Subtitle.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var subtitleTheme = {
    fontSize: variables.subTitleFontSize,
    fontFamily: variables.titleFontfamily,
    color: variables.subtitleColor,
    textAlign: 'center' };

  return subtitleTheme;
};
}, 511, null, "native-base/dist/src/theme/components/Subtitle.js");
__d(/* native-base/dist/src/theme/components/InputGroup.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var inputGroupTheme = {
    "NativeBase.Icon": {
      fontSize: 24,
      color: variables.sTabBarActiveTextColor,
      paddingHorizontal: 5 },

    "NativeBase.IconNB": {
      fontSize: 24,
      color: variables.sTabBarActiveTextColor,
      paddingHorizontal: 5 },

    "NativeBase.Input": {
      height: variables.inputHeightBase,
      color: variables.inputColor,
      paddingLeft: 5,
      paddingRight: 5,
      flex: 1,
      fontSize: variables.inputFontSize,
      lineHeight: variables.inputLineHeight },

    ".underline": {
      ".success": {
        borderColor: variables.inputSuccessBorderColor },

      ".error": {
        borderColor: variables.inputErrorBorderColor },

      paddingLeft: 5,
      borderWidth: variables.borderWidth,
      borderTopWidth: 0,
      borderRightWidth: 0,
      borderLeftWidth: 0,
      borderColor: variables.inputBorderColor },

    ".regular": {
      ".success": {
        borderColor: variables.inputSuccessBorderColor },

      ".error": {
        borderColor: variables.inputErrorBorderColor },

      paddingLeft: 5,
      borderWidth: variables.borderWidth,
      borderColor: variables.inputBorderColor },

    ".rounded": {
      ".success": {
        borderColor: variables.inputSuccessBorderColor },

      ".error": {
        borderColor: variables.inputErrorBorderColor },

      paddingLeft: 5,
      borderWidth: variables.borderWidth,
      borderRadius: variables.inputGroupRoundedBorderRadius,
      borderColor: variables.inputBorderColor },

    ".success": {
      "NativeBase.Icon": {
        color: variables.inputSuccessBorderColor },

      "NativeBase.IconNB": {
        color: variables.inputSuccessBorderColor },

      ".rounded": {
        borderRadius: 30,
        borderColor: variables.inputSuccessBorderColor },

      ".regular": {
        borderColor: variables.inputSuccessBorderColor },

      ".underline": {
        borderWidth: variables.borderWidth,
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderLeftWidth: 0,
        borderColor: variables.inputSuccessBorderColor },

      borderColor: variables.inputSuccessBorderColor },

    ".error": {
      "NativeBase.Icon": {
        color: variables.inputErrorBorderColor },

      "NativeBase.IconNB": {
        color: variables.inputErrorBorderColor },

      ".rounded": {
        borderRadius: 30,
        borderColor: variables.inputErrorBorderColor },

      ".regular": {
        borderColor: variables.inputErrorBorderColor },

      ".underline": {
        borderWidth: variables.borderWidth,
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderLeftWidth: 0,
        borderColor: variables.inputErrorBorderColor },

      borderColor: variables.inputErrorBorderColor },

    ".disabled": {
      "NativeBase.Icon": {
        color: "#384850" },

      "NativeBase.IconNB": {
        color: "#384850" } },

    paddingLeft: 5,
    borderWidth: variables.borderWidth,
    borderTopWidth: 0,
    borderRightWidth: 0,
    borderLeftWidth: 0,
    borderColor: variables.inputBorderColor,
    backgroundColor: "transparent",
    flexDirection: "row",
    alignItems: "center" };

  return inputGroupTheme;
};
}, 512, null, "native-base/dist/src/theme/components/InputGroup.js");
__d(/* native-base/dist/src/theme/components/Badge.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var badgeTheme = {
    ".primary": {
      backgroundColor: variables.btnPrimaryBg },

    ".warning": {
      backgroundColor: variables.btnWarningBg },

    ".info": {
      backgroundColor: variables.btnInfoBg },

    ".success": {
      backgroundColor: variables.btnSuccessBg },

    ".danger": {
      backgroundColor: variables.btnDangerBg },

    "NativeBase.Text": {
      color: variables.badgeColor,
      fontSize: variables.fontSizeBase,
      lineHeight: variables.lineHeight - 1,
      textAlign: "center",
      paddingHorizontal: 3 },

    backgroundColor: variables.badgeBg,
    padding: variables.badgePadding,
    paddingHorizontal: 6,
    alignSelf: "flex-start",
    borderRadius: 13.5,
    height: 27 };

  return badgeTheme;
};
}, 513, null, "native-base/dist/src/theme/components/Badge.js");
__d(/* native-base/dist/src/theme/components/CheckBox.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var checkBoxTheme = {
    ".checked": {
      "NativeBase.Icon": {
        color: variables.checkboxTickColor },

      "NativeBase.IconNB": {
        color: variables.checkboxTickColor } },

    "NativeBase.Icon": {
      color: "transparent",
      lineHeight: variables.CheckboxIconSize,
      marginTop: variables.CheckboxIconMarginTop,
      fontSize: variables.CheckboxFontSize },

    "NativeBase.IconNB": {
      color: "transparent",
      lineHeight: variables.CheckboxIconSize,
      marginTop: variables.CheckboxIconMarginTop,
      fontSize: variables.CheckboxFontSize },

    borderRadius: variables.CheckboxRadius,
    overflow: "hidden",
    width: variables.checkboxSize,
    height: variables.checkboxSize,
    borderWidth: variables.CheckboxBorderWidth,
    paddingLeft: variables.CheckboxPaddingLeft - 1,
    paddingBottom: variables.CheckboxPaddingBottom,
    left: 10 };

  return checkBoxTheme;
};
}, 514, null, "native-base/dist/src/theme/components/CheckBox.js");
__d(/* native-base/dist/src/theme/components/Card.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var cardTheme = {
    ".transparent": {
      shadowColor: null,
      shadowOffset: null,
      shadowOpacity: null,
      shadowRadius: null,
      elevation: null },

    marginVertical: 5,
    marginHorizontal: 2,
    flex: 1,
    borderWidth: variables.borderWidth,
    borderRadius: 2,
    borderColor: variables.cardBorderColor,
    flexWrap: "wrap",
    backgroundColor: variables.cardDefaultBg,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 1.5,
    elevation: 3 };

  return cardTheme;
};
}, 515, null, "native-base/dist/src/theme/components/Card.js");
__d(/* native-base/dist/src/theme/components/Radio.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(181           ); // 181 = react-native

var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var radioTheme = {
    ".selected": {
      "NativeBase.IconNB": {
        color: _reactNative.Platform.OS === "ios" ? variables.brandPrimary : variables.radioSelectedColorAndroid,
        lineHeight: _reactNative.Platform.OS === "ios" ? 25 : variables.radioBtnLineHeight,
        height: _reactNative.Platform.OS === "ios" ? 20 : undefined } },

    "NativeBase.IconNB": {
      color: _reactNative.Platform.OS === "ios" ? "transparent" : undefined,
      lineHeight: _reactNative.Platform.OS === "ios" ? undefined : variables.radioBtnLineHeight,
      fontSize: _reactNative.Platform.OS === "ios" ? undefined : variables.radioBtnSize } };

  return radioTheme;
};
}, 516, null, "native-base/dist/src/theme/components/Radio.js");
__d(/* native-base/dist/src/theme/components/H3.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var h3Theme = {
    color: variables.textColor,
    fontSize: variables.fontSizeH3,
    lineHeight: variables.lineHeightH3 };

  return h3Theme;
};
}, 517, null, "native-base/dist/src/theme/components/H3.js");
__d(/* native-base/dist/src/theme/components/H2.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var h2Theme = {
    color: variables.textColor,
    fontSize: variables.fontSizeH2,
    lineHeight: variables.lineHeightH2 };

  return h2Theme;
};
}, 518, null, "native-base/dist/src/theme/components/H2.js");
__d(/* native-base/dist/src/theme/components/H1.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var h1Theme = {
    color: variables.textColor,
    fontSize: variables.fontSizeH1,
    lineHeight: variables.lineHeightH1 };

  return h1Theme;
};
}, 519, null, "native-base/dist/src/theme/components/H1.js");
__d(/* native-base/dist/src/theme/components/Footer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platformStyle = variables.platformStyle;
  var platform = variables.platform;

  var footerTheme = {
    "NativeBase.Left": {
      "NativeBase.Button": {
        ".transparent": {
          backgroundColor: "transparent",
          borderColor: null,
          elevation: 0,
          shadowColor: null,
          shadowOffset: null,
          shadowRadius: null,
          shadowOpacity: null },

        "NativeBase.Icon": {
          color: variables.topTabBarActiveTextColor },

        "NativeBase.IconNB": {
          color: variables.topTabBarActiveTextColor },

        alignSelf: null },

      flex: 1,
      alignSelf: "center",
      alignItems: "flex-start" },

    "NativeBase.Body": {
      flex: 1,
      alignItems: "center",
      alignSelf: "center",
      flexDirection: "row",
      "NativeBase.Button": {
        alignSelf: "center",
        ".transparent": {
          backgroundColor: "transparent",
          borderColor: null,
          elevation: 0,
          shadowColor: null,
          shadowOffset: null,
          shadowRadius: null,
          shadowOpacity: null },

        ".full": {
          height: variables.footerHeight,
          flex: 1 },

        "NativeBase.Icon": {
          color: variables.topTabBarActiveTextColor },

        "NativeBase.IconNB": {
          color: variables.topTabBarActiveTextColor } } },

    "NativeBase.Right": {
      "NativeBase.Button": {
        ".transparent": {
          backgroundColor: "transparent",
          borderColor: null,
          elevation: 0,
          shadowColor: null,
          shadowOffset: null,
          shadowRadius: null,
          shadowOpacity: null },

        "NativeBase.Icon": {
          color: variables.topTabBarActiveTextColor },

        "NativeBase.IconNB": {
          color: variables.topTabBarActiveTextColor },

        alignSelf: null },

      flex: 1,
      alignSelf: "center",
      alignItems: "flex-end" },

    backgroundColor: variables.footerDefaultBg,
    flexDirection: "row",
    justifyContent: "center",
    borderTopWidth: platform === "ios" && platformStyle !== "material" ? variables.borderWidth : undefined,
    borderColor: platform === "ios" && platformStyle !== "material" ? "#cbcbcb" : undefined,
    height: variables.footerHeight,
    elevation: 3,
    left: 0,
    right: 0 };

  return footerTheme;
};
}, 520, null, "native-base/dist/src/theme/components/Footer.js");
__d(/* native-base/dist/src/theme/components/FooterTab.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(181           ); // 181 = react-native

var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var footerTabTheme = {
    "NativeBase.Button": {
      ".active": {
        "NativeBase.Text": {
          color: variables.tabBarActiveTextColor,
          fontSize: variables.tabBarTextSize,
          lineHeight: 16 },

        "NativeBase.Icon": {
          color: variables.tabBarActiveTextColor },

        "NativeBase.IconNB": {
          color: variables.tabBarActiveTextColor },

        backgroundColor: variables.tabActiveBgColor },

      flexDirection: null,
      backgroundColor: "transparent",
      borderColor: null,
      elevation: 0,
      shadowColor: null,
      shadowOffset: null,
      shadowRadius: null,
      shadowOpacity: null,
      alignSelf: "center",
      flex: 1,
      height: variables.footerHeight,
      justifyContent: "center",
      ".badge": {
        "NativeBase.Badge": {
          "NativeBase.Text": {
            fontSize: 11,
            fontWeight: platform === "ios" ? "600" : undefined,
            lineHeight: 14 },

          top: -3,
          alignSelf: "center",
          left: 10,
          zIndex: 99,
          height: 18,
          padding: 1.7,
          paddingHorizontal: 3 },

        "NativeBase.Icon": {
          marginTop: -18 } },

      "NativeBase.Icon": {
        color: variables.tabBarTextColor },

      "NativeBase.IconNB": {
        color: variables.tabBarTextColor },

      "NativeBase.Text": {
        color: variables.tabBarTextColor,
        fontSize: variables.tabBarTextSize,
        lineHeight: 16 } },

    backgroundColor: _reactNative.Platform.OS === "android" ? variables.tabActiveBgColor : undefined,
    flexDirection: "row",
    justifyContent: "space-between",
    flex: 1,
    alignSelf: "stretch" };

  return footerTabTheme;
};
}, 521, null, "native-base/dist/src/theme/components/FooterTab.js");
__d(/* native-base/dist/src/theme/components/Fab.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var fabTheme = {
    "NativeBase.Button": {
      alignItems: "center",
      padding: null,
      justifyContent: "center",
      "NativeBase.Icon": {
        alignSelf: "center" },

      "NativeBase.IconNB": {
        alignSelf: "center",
        fontSize: 20,
        lineHeight: platform === "ios" ? 24 : undefined } } };

  return fabTheme;
};
}, 522, null, "native-base/dist/src/theme/components/Fab.js");
__d(/* native-base/dist/src/theme/components/Item.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(181           ); // 181 = react-native

var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var itemTheme = {
    '.floatingLabel': {
      'NativeBase.Input': {
        height: 60,
        top: 8 },

      'NativeBase.Label': {
        top: 8 },

      'NativeBase.Icon': {
        top: 6 } },

    '.fixedLabel': {
      'NativeBase.Label': {
        position: null,
        top: null,
        left: null,
        right: null,
        flex: 1,
        height: null,
        width: null,
        fontSize: variables.inputFontSize },

      'NativeBase.Input': {
        flex: 2,
        fontSize: variables.inputFontSize } },

    '.stackedLabel': {
      'NativeBase.Label': {
        position: null,
        top: null,
        left: null,
        right: null,
        paddingTop: 5,
        alignSelf: 'flex-start',
        fontSize: variables.inputFontSize - 2 },

      'NativeBase.Icon': {
        marginTop: 36 },

      'NativeBase.Input': {
        alignSelf: _reactNative.Platform.OS === 'ios' ? 'stretch' : 'flex-start',
        flex: 1,
        width: _reactNative.Platform.OS === 'ios' ? null : variables.deviceWidth - 25,
        fontSize: variables.inputFontSize },

      flexDirection: null },

    '.inlineLabel': {
      'NativeBase.Label': {
        position: null,
        top: null,
        left: null,
        right: null,
        paddingRight: 20,
        height: null,
        width: null,
        fontSize: variables.inputFontSize },

      'NativeBase.Input': {
        paddingLeft: 5,
        fontSize: variables.inputFontSize },

      flexDirection: 'row' },

    'NativeBase.Label': {
      fontSize: variables.inputFontSize,
      color: variables.inputColorPlaceholder,
      paddingRight: 5 },

    'NativeBase.Icon': {
      fontSize: 24,
      paddingRight: 8 },

    'NativeBase.IconNB': {
      fontSize: 24,
      paddingRight: 8 },

    'NativeBase.Input': {
      '.multiline': {
        height: null },

      height: variables.inputHeightBase,
      color: variables.inputColor,
      flex: 1,
      top: _reactNative.Platform.OS === 'ios' ? 1.5 : undefined,
      fontSize: variables.inputFontSize,
      lineHeight: variables.inputLineHeight },

    '.underline': {
      'NativeBase.Input': {
        paddingLeft: 15 },

      '.success': {
        borderColor: variables.inputSuccessBorderColor },

      '.error': {
        borderColor: variables.inputErrorBorderColor },

      borderWidth: variables.borderWidth * 2,
      borderTopWidth: 0,
      borderRightWidth: 0,
      borderLeftWidth: 0,
      borderColor: variables.inputBorderColor },

    '.regular': {
      'NativeBase.Input': {
        paddingLeft: 8 },

      'NativeBase.Icon': {
        paddingLeft: 10 },

      '.success': {
        borderColor: variables.inputSuccessBorderColor },

      '.error': {
        borderColor: variables.inputErrorBorderColor },

      borderWidth: variables.borderWidth * 2,
      borderColor: variables.inputBorderColor },

    '.rounded': {
      'NativeBase.Input': {
        paddingLeft: 8 },

      'NativeBase.Icon': {
        paddingLeft: 10 },

      '.success': {
        borderColor: variables.inputSuccessBorderColor },

      '.error': {
        borderColor: variables.inputErrorBorderColor },

      borderWidth: variables.borderWidth * 2,
      borderRadius: 30,
      borderColor: variables.inputBorderColor },

    '.success': {
      'NativeBase.Icon': {
        color: variables.inputSuccessBorderColor },

      'NativeBase.IconNB': {
        color: variables.inputSuccessBorderColor },

      '.rounded': {
        borderRadius: 30,
        borderColor: variables.inputSuccessBorderColor },

      '.regular': {
        borderColor: variables.inputSuccessBorderColor },

      '.underline': {
        borderWidth: variables.borderWidth * 2,
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderLeftWidth: 0,
        borderColor: variables.inputSuccessBorderColor },

      borderColor: variables.inputSuccessBorderColor },

    '.error': {
      'NativeBase.Icon': {
        color: variables.inputErrorBorderColor },

      'NativeBase.IconNB': {
        color: variables.inputErrorBorderColor },

      '.rounded': {
        borderRadius: 30,
        borderColor: variables.inputErrorBorderColor },

      '.regular': {
        borderColor: variables.inputErrorBorderColor },

      '.underline': {
        borderWidth: variables.borderWidth * 2,
        borderTopWidth: 0,
        borderRightWidth: 0,
        borderLeftWidth: 0,
        borderColor: variables.inputErrorBorderColor },

      borderColor: variables.inputErrorBorderColor },

    '.disabled': {
      'NativeBase.Icon': {
        color: '#384850' },

      'NativeBase.IconNB': {
        color: '#384850' } },

    borderWidth: variables.borderWidth * 2,
    borderTopWidth: 0,
    borderRightWidth: 0,
    borderLeftWidth: 0,
    borderColor: variables.inputBorderColor,
    backgroundColor: 'transparent',
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 2 };

  return itemTheme;
};
}, 523, null, "native-base/dist/src/theme/components/Item.js");
__d(/* native-base/dist/src/theme/components/Label.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var labelTheme = {
    ".focused": {
      width: 0 },

    fontSize: 17 };

  return labelTheme;
};
}, 524, null, "native-base/dist/src/theme/components/Label.js");
__d(/* native-base/dist/src/theme/components/Textarea.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var textAreaTheme = {
    ".underline": {
      borderBottomWidth: variables.borderWidth,
      marginTop: 5,
      borderColor: variables.inputBorderColor },

    ".bordered": {
      borderWidth: 1,
      marginTop: 5,
      borderColor: variables.inputBorderColor },

    color: variables.textColor,
    paddingLeft: 10,
    paddingRight: 5,
    fontSize: 15,
    textAlignVertical: "top" };

  return textAreaTheme;
};
}, 525, null, "native-base/dist/src/theme/components/Textarea.js");
__d(/* native-base/dist/src/theme/components/Text.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var textTheme = {
    fontSize: variables.DefaultFontSize - 1,
    fontFamily: variables.fontFamily,
    color: variables.textColor,
    ".note": {
      color: "#a7a7a7",
      fontSize: variables.noteFontSize } };

  return textTheme;
};
}, 526, null, "native-base/dist/src/theme/components/Text.js");
__d(/* native-base/dist/src/theme/components/Toast.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var toastTheme = {
    ".danger": {
      backgroundColor: variables.brandDanger },

    ".warning": {
      backgroundColor: variables.brandWarning },

    ".success": {
      backgroundColor: variables.brandSuccess },

    backgroundColor: "rgba(0,0,0,0.8)",
    borderRadius: platform === "ios" ? 5 : 0,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 10,
    minHeight: 50,
    "NativeBase.Text": {
      color: "#fff",
      flex: 1 },

    "NativeBase.Button": {
      backgroundColor: "transparent",
      height: 30,
      elevation: 0,
      "NativeBase.Text": {
        fontSize: 14 } } };

  return toastTheme;
};
}, 527, null, "native-base/dist/src/theme/components/Toast.js");
__d(/* native-base/dist/src/theme/components/Tab.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var tabTheme = {
    flex: 1,
    backgroundColor: "#FFF" };

  return tabTheme;
};
}, 528, null, "native-base/dist/src/theme/components/Tab.js");
__d(/* native-base/dist/src/theme/components/TabBar.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var tabBarTheme = {
    ".tabIcon": {
      height: undefined },

    ".vertical": {
      height: 60 },

    "NativeBase.Button": {
      ".transparent": {
        "NativeBase.Text": {
          fontSize: variables.tabFontSize,
          color: variables.sTabBarActiveTextColor,
          fontWeight: "400" },

        "NativeBase.IconNB": {
          color: variables.sTabBarActiveTextColor } },

      "NativeBase.IconNB": {
        color: variables.sTabBarActiveTextColor },

      "NativeBase.Text": {
        fontSize: variables.tabFontSize,
        color: variables.sTabBarActiveTextColor,
        fontWeight: "400" },

      ".isTabActive": {
        "NativeBase.Text": {
          fontWeight: "900" } },

      flex: 1,
      alignSelf: "stretch",
      alignItems: "center",
      justifyContent: "center",
      borderRadius: null,
      borderBottomColor: "transparent",
      backgroundColor: variables.tabBgColor },

    height: 45,
    flexDirection: "row",
    justifyContent: "space-around",
    borderWidth: 1,
    borderTopWidth: 0,
    borderLeftWidth: 0,
    borderRightWidth: 0,
    borderBottomColor: "#ccc",
    backgroundColor: variables.tabBgColor };

  return tabBarTheme;
};
}, 529, null, "native-base/dist/src/theme/components/TabBar.js");
__d(/* native-base/dist/src/theme/components/TabContainer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform); // 493 = ./../variables/platform
var _reactNative = require(181           );function _interopRequireDefault(obj) { // 181 = react-native
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platformStyle = variables.platformStyle;
  var platform = variables.platform;

  var tabContainerTheme = {
    elevation: 3,
    height: 50,
    flexDirection: "row",
    shadowColor: platformStyle === "material" ? "#000" : undefined,
    shadowOffset: platformStyle === "material" ? { width: 0, height: 2 } : undefined,
    shadowOpacity: platformStyle === "material" ? 0.2 : undefined,
    shadowRadius: platformStyle === "material" ? 1.2 : undefined,
    justifyContent: "space-around",
    borderBottomWidth: _reactNative.Platform.OS === "ios" ? variables.borderWidth : 0,
    borderColor: variables.topTabBarBorderColor };

  return tabContainerTheme;
};
}, 530, null, "native-base/dist/src/theme/components/TabContainer.js");
__d(/* native-base/dist/src/theme/components/View.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var viewTheme = {
    ".padder": {
      padding: variables.contentPadding } };

  return viewTheme;
};
}, 531, null, "native-base/dist/src/theme/components/View.js");
__d(/* native-base/dist/src/theme/components/TabHeading.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var tabHeadingTheme = {
    flexDirection: "row",
    backgroundColor: variables.tabDefaultBg,
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    ".scrollable": {
      paddingHorizontal: 20,
      flex: platform === "android" ? 0 : 1,
      minWidth: platform === "android" ? undefined : 60 },

    "NativeBase.Text": {
      color: variables.topTabBarTextColor,
      marginHorizontal: 7 },

    "NativeBase.Icon": {
      color: variables.topTabBarTextColor,
      fontSize: platform === "ios" ? 26 : undefined },

    ".active": {
      "NativeBase.Text": {
        color: variables.topTabBarActiveTextColor,
        fontWeight: "600" },

      "NativeBase.Icon": {
        color: variables.topTabBarActiveTextColor } } };

  return tabHeadingTheme;
};
}, 532, null, "native-base/dist/src/theme/components/TabHeading.js");
__d(/* native-base/dist/src/theme/components/Icon.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var iconTheme = {
    fontSize: variables.iconFontSize,
    color: "#000" };

  return iconTheme;
};
}, 533, null, "native-base/dist/src/theme/components/Icon.js");
__d(/* native-base/dist/src/theme/components/Input.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var inputTheme = {
    '.multiline': {
      height: null },

    height: variables.inputHeightBase,
    color: variables.inputColor,
    paddingLeft: 5,
    paddingRight: 5,
    flex: 1,
    fontSize: variables.inputFontSize,
    lineHeight: variables.inputLineHeight };

  return inputTheme;
};
}, 534, null, "native-base/dist/src/theme/components/Input.js");
__d(/* native-base/dist/src/theme/components/SwipeRow.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var swipeRowTheme = {
    "NativeBase.ListItem": {
      ".list": {
        backgroundColor: "#FFF" },

      marginLeft: 0 },

    "NativeBase.Left": {
      flex: 0,
      alignSelf: null,
      alignItems: null,
      "NativeBase.Button": {
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
        alignSelf: "stretch",
        borderRadius: 0 } },

    "NativeBase.Right": {
      flex: 0,
      alignSelf: null,
      alignItems: null,
      "NativeBase.Button": {
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
        alignSelf: "stretch",
        borderRadius: 0 } },

    "NativeBase.Button": {
      flex: 1,
      height: null,
      alignItems: "center",
      justifyContent: "center",
      alignSelf: "stretch",
      borderRadius: 0 } };

  return swipeRowTheme;
};
}, 535, null, "native-base/dist/src/theme/components/SwipeRow.js");
__d(/* native-base/dist/src/theme/components/Segment.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var segmentTheme = {
    height: 45,
    borderColor: variables.segmentBorderColorMain,
    flexDirection: "row",
    justifyContent: "center",
    backgroundColor: variables.segmentBackgroundColor,
    "NativeBase.Button": {
      alignSelf: "center",
      borderRadius: 0,
      paddingHorizontal: 20,
      height: 30,
      backgroundColor: "transparent",
      borderWidth: 1,
      borderLeftWidth: 0,
      borderColor: variables.segmentBorderColor,
      elevation: 0,
      ".active": {
        backgroundColor: variables.segmentActiveBackgroundColor,
        "NativeBase.Text": {
          color: variables.segmentActiveTextColor } },

      ".first": {
        borderTopLeftRadius: platform === "ios" ? 5 : undefined,
        borderBottomLeftRadius: platform === "ios" ? 5 : undefined,
        borderLeftWidth: 1 },

      ".last": {
        borderTopRightRadius: platform === "ios" ? 5 : undefined,
        borderBottomRightRadius: platform === "ios" ? 5 : undefined },

      "NativeBase.Text": {
        color: variables.segmentTextColor,
        fontSize: 14 } } };

  return segmentTheme;
};
}, 536, null, "native-base/dist/src/theme/components/Segment.js");
__d(/* native-base/dist/src/theme/components/Spinner.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var spinnerTheme = {
    height: 80 };

  return spinnerTheme;
};
}, 537, null, "native-base/dist/src/theme/components/Spinner.js");
__d(/* native-base/dist/src/theme/components/CardItem.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var cardItemTheme = {
    'NativeBase.Left': {
      'NativeBase.Body': {
        'NativeBase.Text': {
          '.note': {
            color: variables.listNoteColor,
            fontWeight: '400',
            marginRight: 20 } },

        flex: 1,
        marginLeft: 10,
        alignItems: null },

      'NativeBase.Icon': {
        fontSize: variables.iconFontSize },

      'NativeBase.IconNB': {
        fontSize: variables.iconFontSize },

      'NativeBase.Text': {
        marginLeft: 10,
        alignSelf: 'center' },

      'NativeBase.Button': {
        '.transparent': {
          'NativeBase.Text': {
            fontSize: variables.DefaultFontSize - 4,
            color: variables.sTabBarActiveTextColor },

          'NativeBase.Icon': {
            fontSize: variables.iconFontSize - 10,
            color: variables.sTabBarActiveTextColor,
            marginHorizontal: null },

          'NativeBase.IconNB': {
            fontSize: variables.iconFontSize - 10,
            color: variables.sTabBarActiveTextColor },

          paddingVertical: null,
          paddingHorizontal: null,
          paddingRight: variables.listItemPadding + 5 } },

      flex: 1,
      flexDirection: 'row',
      alignItems: 'center' },

    '.content': {
      'NativeBase.Text': {
        color: platform === 'ios' ? '#555' : '#222',
        fontSize: variables.DefaultFontSize - 3 } },

    '.cardBody': {
      padding: -5,
      'NativeBase.Text': {
        marginTop: 5 } },

    'NativeBase.Body': {
      'NativeBase.Text': {
        '.note': {
          color: variables.listNoteColor,
          fontWeight: '200',
          marginRight: 20 } },

      'NativeBase.Button': {
        '.transparent': {
          'NativeBase.Text': {
            fontSize: variables.DefaultFontSize - 4,
            color: variables.sTabBarActiveTextColor },

          'NativeBase.Icon': {
            fontSize: variables.iconFontSize - 10,
            color: variables.sTabBarActiveTextColor,
            marginHorizontal: null },

          'NativeBase.IconNB': {
            fontSize: variables.iconFontSize - 10,
            color: variables.sTabBarActiveTextColor },

          paddingVertical: null,
          paddingHorizontal: null,
          paddingRight: variables.listItemPadding + 5,
          alignSelf: 'stretch' } },

      flex: 1,
      alignSelf: 'stretch',
      alignItems: 'flex-start' },

    'NativeBase.Right': {
      'NativeBase.Badge': {
        alignSelf: null },

      'NativeBase.Button': {
        '.transparent': {
          'NativeBase.Text': {
            fontSize: variables.DefaultFontSize - 4,
            color: variables.sTabBarActiveTextColor },

          'NativeBase.Icon': {
            fontSize: variables.iconFontSize - 10,
            color: variables.sTabBarActiveTextColor,
            marginHorizontal: null },

          'NativeBase.IconNB': {
            fontSize: variables.iconFontSize - 10,
            color: variables.sTabBarActiveTextColor },

          paddingVertical: null,
          paddingHorizontal: null },

        alignSelf: null },

      'NativeBase.Icon': {
        alignSelf: null,
        fontSize: variables.iconFontSize - 8,
        color: variables.cardBorderColor },

      'NativeBase.IconNB': {
        alignSelf: null,
        fontSize: variables.iconFontSize - 8,
        color: variables.cardBorderColor },

      'NativeBase.Text': {
        fontSize: variables.DefaultFontSize - 2,
        alignSelf: null },

      'NativeBase.Thumbnail': {
        alignSelf: null },

      'NativeBase.Image': {
        alignSelf: null },

      'NativeBase.Radio': {
        alignSelf: null },

      'NativeBase.Checkbox': {
        alignSelf: null },

      'NativeBase.Switch': {
        alignSelf: null },

      flex: 0.8 },

    '.header': {
      'NativeBase.Text': {
        fontSize: 16,
        fontWeight: platform === 'ios' ? '500' : undefined },

      '.bordered': {
        'NativeBase.Text': {
          color: variables.sTabBarActiveTextColor,
          fontWeight: platform === 'ios' ? '500' : undefined },

        borderBottomWidth: platform === 'ios' ? variables.borderWidth : null },

      borderBottomWidth: null,
      paddingVertical: variables.listItemPadding + 5 },

    '.footer': {
      'NativeBase.Text': {
        fontSize: 16,
        fontWeight: platform === 'ios' ? '500' : undefined },

      '.bordered': {
        'NativeBase.Text': {
          color: variables.activeTab,
          fontWeight: '500' },

        borderTopWidth: platform === 'ios' ? variables.borderWidth : null },

      borderBottomWidth: null },

    'NativeBase.Text': {
      '.note': {
        color: variables.listNoteColor,
        fontWeight: '200' } },

    'NativeBase.Icon': {
      width: variables.iconFontSize + 5,
      fontSize: variables.iconFontSize - 2 },

    'NativeBase.IconNB': {
      width: variables.iconFontSize + 5,
      fontSize: variables.iconFontSize - 2 },

    '.bordered': {
      borderBottomWidth: variables.borderWidth,
      borderColor: variables.cardBorderColor },

    flexDirection: 'row',
    alignItems: 'center',
    borderRadius: 2,
    padding: variables.listItemPadding + 5,
    paddingVertical: variables.listItemPadding,
    backgroundColor: variables.cardDefaultBg };

  return cardItemTheme;
};
}, 538, null, "native-base/dist/src/theme/components/CardItem.js");
__d(/* native-base/dist/src/theme/components/ListItem.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _reactNative = require(181           ); // 181 = react-native

var _Picker = require(540       );var _Picker2 = _interopRequireDefault(_Picker); // 540 = ./Picker
var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var listItemTheme = {
    "NativeBase.InputGroup": {
      "NativeBase.Icon": {
        paddingRight: 5 },

      "NativeBase.IconNB": {
        paddingRight: 5 },

      "NativeBase.Input": {
        paddingHorizontal: 5 },

      flex: 1,
      borderWidth: null,
      margin: -10,
      borderBottomColor: "transparent" },

    ".searchBar": {
      "NativeBase.Item": {
        "NativeBase.Icon": {
          backgroundColor: "transparent",
          color: variables.dropdownLinkColor,
          fontSize: platform === "ios" ? variables.iconFontSize - 10 : variables.iconFontSize - 5,
          alignItems: "center",
          marginTop: 2,
          paddingRight: 8 },

        "NativeBase.IconNB": {
          backgroundColor: "transparent",
          color: null,
          alignSelf: "center" },

        "NativeBase.Input": {
          alignSelf: "center" },

        alignSelf: "center",
        alignItems: "center",
        justifyContent: "flex-start",
        flex: 1,
        height: platform === "ios" ? 30 : 40,
        borderColor: "transparent",
        backgroundColor: "#fff",
        borderRadius: 5 },

      "NativeBase.Button": {
        ".transparent": {
          "NativeBase.Text": {
            fontWeight: "500" },

          paddingHorizontal: null,
          paddingLeft: platform === "ios" ? 10 : null },

        paddingHorizontal: platform === "ios" ? undefined : null,
        width: platform === "ios" ? undefined : 0,
        height: platform === "ios" ? undefined : 0 },

      backgroundColor: variables.toolbarInputColor,
      padding: 10,
      marginLeft: null },

    "NativeBase.CheckBox": {
      marginLeft: -10,
      marginRight: 10 },

    ".first": {
      ".itemHeader": {
        paddingTop: variables.listItemPadding + 3 } },

    ".itemHeader": {
      ".first": {
        paddingTop: variables.listItemPadding + 3 },

      borderBottomWidth: platform === "ios" ? variables.borderWidth : null,
      marginLeft: null,
      padding: variables.listItemPadding,
      paddingLeft: variables.listItemPadding + 5,
      paddingTop: platform === "ios" ? variables.listItemPadding + 25 : undefined,
      paddingBottom: platform === "android" ? variables.listItemPadding + 20 : undefined,
      flexDirection: "row",
      borderColor: variables.listBorderColor,
      "NativeBase.Text": {
        fontSize: 14,
        color: platform === "ios" ? undefined : variables.listNoteColor } },

    ".itemDivider": {
      borderBottomWidth: null,
      marginLeft: null,
      padding: variables.listItemPadding,
      paddingLeft: variables.listItemPadding + 5,
      backgroundColor: variables.listDividerBg,
      flexDirection: "row",
      borderColor: variables.listBorderColor },

    ".selected": {
      "NativeBase.Left": {
        "NativeBase.Text": {
          color: variables.brandPrimary } },

      "NativeBase.Text": {
        color: variables.brandPrimary } },

    "NativeBase.Left": {
      "NativeBase.Body": {
        "NativeBase.Text": {
          ".note": {
            color: variables.listNoteColor,
            fontWeight: "200" },

          fontWeight: "600" },

        marginLeft: 10,
        alignItems: null,
        alignSelf: null },

      "NativeBase.Icon": {
        width: variables.iconFontSize - 10,
        fontSize: variables.iconFontSize - 10 },

      "NativeBase.IconNB": {
        width: variables.iconFontSize - 10,
        fontSize: variables.iconFontSize - 10 },

      "NativeBase.Text": {
        marginLeft: 10,
        alignSelf: "center" },

      flexDirection: "row" },

    "NativeBase.Body": {
      "NativeBase.Text": {
        marginHorizontal: variables.listItemPadding,
        ".note": {
          color: variables.listNoteColor,
          fontWeight: "200" } },

      alignSelf: null,
      alignItems: null },

    "NativeBase.Right": {
      "NativeBase.Badge": {
        alignSelf: null },

      "NativeBase.PickerNB": {
        "NativeBase.Button": {
          marginRight: -15,
          "NativeBase.Text": {
            color: variables.topTabBarActiveTextColor } } },

      "NativeBase.Button": {
        alignSelf: null,
        ".transparent": {
          "NativeBase.Text": {
            color: variables.topTabBarActiveTextColor } } },

      "NativeBase.Icon": {
        alignSelf: null,
        fontSize: variables.iconFontSize - 8,
        color: "#c9c8cd" },

      "NativeBase.IconNB": {
        alignSelf: null,
        fontSize: variables.iconFontSize - 8,
        color: "#c9c8cd" },

      "NativeBase.Text": {
        ".note": {
          color: variables.listNoteColor,
          fontWeight: "200" },

        alignSelf: null },

      "NativeBase.Thumbnail": {
        alignSelf: null },

      "NativeBase.Image": {
        alignSelf: null },

      "NativeBase.Radio": {
        alignSelf: null },

      "NativeBase.Checkbox": {
        alignSelf: null },

      "NativeBase.Switch": {
        alignSelf: null },

      padding: null,
      flex: 0.28 },

    "NativeBase.Text": {
      ".note": {
        color: variables.listNoteColor,
        fontWeight: "200" },

      alignSelf: 'center' },

    ".last": {
      marginLeft: -(variables.listItemPadding + 5),
      paddingLeft: (variables.listItemPadding + 5) * 2,
      top: 1 },

    ".avatar": {
      "NativeBase.Left": {
        flex: 0 },

      "NativeBase.Body": {
        "NativeBase.Text": {
          marginLeft: null },

        flex: 1,
        paddingVertical: variables.listItemPadding,
        borderBottomWidth: variables.borderWidth,
        borderColor: variables.listBorderColor,
        marginLeft: variables.listItemPadding + 5 },

      "NativeBase.Right": {
        "NativeBase.Text": {
          ".note": {
            fontSize: variables.noteFontSize - 2 } },

        flex: 0,
        paddingRight: variables.listItemPadding + 5,
        alignSelf: "stretch",
        paddingVertical: variables.listItemPadding,
        borderBottomWidth: variables.borderWidth,
        borderColor: variables.listBorderColor },

      borderBottomWidth: null,
      paddingVertical: null,
      paddingRight: null },

    ".thumbnail": {
      "NativeBase.Left": {
        flex: 0 },

      "NativeBase.Body": {
        "NativeBase.Text": {
          marginLeft: null },

        flex: 1,
        paddingVertical: variables.listItemPadding + 5,
        borderBottomWidth: variables.borderWidth,
        borderColor: variables.listBorderColor,
        marginLeft: variables.listItemPadding + 5 },

      "NativeBase.Right": {
        "NativeBase.Button": {
          ".transparent": {
            "NativeBase.Text": {
              fontSize: variables.listNoteSize,
              color: variables.sTabBarActiveTextColor } },

          height: null },

        flex: 0,
        justifyContent: "center",
        alignSelf: "stretch",
        paddingRight: variables.listItemPadding + 5,
        paddingVertical: variables.listItemPadding + 5,
        borderBottomWidth: variables.borderWidth,
        borderColor: variables.listBorderColor },

      borderBottomWidth: null,
      paddingVertical: null,
      paddingRight: null },

    ".icon": {
      ".last": {
        "NativeBase.Body": {
          borderBottomWidth: null },

        "NativeBase.Right": {
          borderBottomWidth: null },

        borderBottomWidth: variables.borderWidth,
        borderColor: variables.listBorderColor },

      "NativeBase.Left": {
        "NativeBase.Button": {
          "NativeBase.IconNB": {
            marginHorizontal: null,
            fontSize: variables.iconFontSize - 5 },

          "NativeBase.Icon": {
            marginHorizontal: null,
            fontSize: variables.iconFontSize - 8 },

          alignSelf: "center",
          height: 29,
          width: 29,
          borderRadius: 6,
          paddingVertical: null,
          paddingHorizontal: null,
          alignItems: "center",
          justifyContent: "center" },

        "NativeBase.Icon": {
          width: variables.iconFontSize - 5,
          fontSize: variables.iconFontSize - 2 },

        "NativeBase.IconNB": {
          width: variables.iconFontSize - 5,
          fontSize: variables.iconFontSize - 2 },

        paddingRight: variables.listItemPadding + 5,
        flex: 0,
        height: 44,
        justifyContent: "center",
        alignItems: "center" },

      "NativeBase.Body": {
        "NativeBase.Text": {
          marginLeft: null,
          fontSize: 17 },

        flex: 1,
        height: 44,
        justifyContent: "center",
        borderBottomWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
        borderColor: variables.listBorderColor },

      "NativeBase.Right": {
        "NativeBase.Text": {
          textAlign: "center",
          color: "#8F8E95",
          fontSize: 17 },

        "NativeBase.IconNB": {
          color: "#C8C7CC",
          fontSize: variables.iconFontSize - 10,
          alignSelf: "center",
          paddingLeft: 10,
          paddingTop: 3 },

        "NativeBase.Icon": {
          color: "#C8C7CC",
          fontSize: variables.iconFontSize - 10,
          alignSelf: "center",
          paddingLeft: 10,
          paddingTop: 3 },

        "NativeBase.Switch": {
          marginRight: _reactNative.Platform.OS === "ios" ? undefined : -5,
          alignSelf: null },

        "NativeBase.PickerNB": _extends({}, (0, _Picker2.default)()),

        flexDirection: "row",
        alignItems: "center",
        flex: 0,
        alignSelf: "stretch",
        height: 44,
        justifyContent: "flex-end",
        borderBottomWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
        borderColor: variables.listBorderColor,
        paddingRight: variables.listItemPadding + 5 },

      borderBottomWidth: null,
      paddingVertical: null,
      paddingRight: null,
      height: 44,
      justifyContent: "center" },

    ".noBorder": {
      borderBottomWidth: null },

    alignItems: "center",
    flexDirection: "row",
    paddingRight: variables.listItemPadding + 5,
    paddingVertical: variables.listItemPadding + 3,
    marginLeft: variables.listItemPadding + 5,
    borderBottomWidth: 1 / _reactNative.PixelRatio.getPixelSizeForLayoutSize(1),
    backgroundColor: variables.listBg,
    borderColor: variables.listBorderColor };

  return listItemTheme;
};
}, 539, null, "native-base/dist/src/theme/components/ListItem.js");
__d(/* native-base/dist/src/theme/components/Picker.android.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var pickerTheme = {
    ".note": {
      color: "#8F8E95" },

    width: 90,
    marginRight: -4 };

  return pickerTheme;
};
}, 540, null, "native-base/dist/src/theme/components/Picker.android.js");
__d(/* native-base/dist/src/theme/components/Form.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var platform = variables.platform;

  var theme = {
    "NativeBase.Item": {
      ".fixedLabel": {
        "NativeBase.Label": {
          paddingLeft: null },

        marginLeft: 15 },

      ".inlineLabel": {
        "NativeBase.Label": {
          paddingLeft: null },

        marginLeft: 15 },

      ".placeholderLabel": {
        "NativeBase.Input": {} },

      ".stackedLabel": {
        "NativeBase.Label": {
          top: 5,
          paddingLeft: null },

        "NativeBase.Input": {
          paddingLeft: null,
          marginLeft: null },

        "NativeBase.Icon": {
          marginTop: 36 },

        marginLeft: 15 },

      ".floatingLabel": {
        "NativeBase.Input": {
          paddingLeft: null,
          top: 10,
          marginLeft: null },

        "NativeBase.Label": {
          left: 0,
          top: 8 },

        "NativeBase.Icon": {
          top: 6 },

        marginTop: 15,
        marginLeft: 15 },

      ".regular": {
        "NativeBase.Label": {
          left: 0 },

        marginLeft: 0 },

      ".rounded": {
        "NativeBase.Label": {
          left: 0 },

        marginLeft: 0 },

      ".underline": {
        "NativeBase.Label": {
          left: 0,
          top: 0,
          position: "relative" },

        "NativeBase.Input": {
          left: -15 },

        marginLeft: 15 },

      ".last": {
        marginLeft: 0,
        paddingLeft: 15 },

      "NativeBase.Label": {
        paddingRight: 5 },

      marginLeft: 15 } };

  return theme;
};
}, 541, null, "native-base/dist/src/theme/components/Form.js");
__d(/* native-base/dist/src/theme/components/Separator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _platform = require(493                      );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ./../variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = function () {
  var variables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _platform2.default;
  var theme = {
    '.group': {
      height: 50,
      paddingVertical: variables.listItemPadding - 8,
      paddingTop: variables.listItemPadding + 12,
      '.bordered': {
        height: 50,
        paddingVertical: variables.listItemPadding - 8,
        paddingTop: variables.listItemPadding + 12 } },

    '.bordered': {
      '.noTopBorder': {
        borderTopWidth: 0 },

      '.noBottomBorder': {
        borderBottomWidth: 0 },

      height: 35,
      paddingTop: variables.listItemPadding + 2,
      paddingBottom: variables.listItemPadding,
      borderBottomWidth: variables.borderWidth,
      borderTopWidth: variables.borderWidth,
      borderColor: variables.listBorderColor },

    'NativeBase.Text': {
      fontSize: variables.tabBarTextSize - 2,
      color: '#777' },

    '.noTopBorder': {
      borderTopWidth: 0 },

    '.noBottomBorder': {
      borderBottomWidth: 0 },

    height: 38,
    backgroundColor: '#F0EFF5',
    flex: 1,
    justifyContent: 'center',
    paddingLeft: variables.listItemPadding + 5 };

  return theme;
};
}, 542, null, "native-base/dist/src/theme/components/Separator.js");
__d(/* native-base/dist/src/basic/Drawer/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Drawer/index.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _reactNativeDrawer = require(544                  );var _reactNativeDrawer2 = _interopRequireDefault(_reactNativeDrawer); // 544 = react-native-drawer
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes);function _interopRequireDefault(obj) { // 20 = prop-types
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Drawer = function (_Component) {
  _inherits(Drawer, _Component);
  function Drawer(props) {
    _classCallCheck(this, Drawer);return _possibleConstructorReturn(this, (Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call(this, props));
  }_createClass(Drawer, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNativeDrawer2.default, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return Drawer;
}(_react.Component);exports.default = Drawer;

Drawer.defaultProps = {
  type: "overlay",
  tapToClose: true,
  openDrawerOffset: 0.2,
  panCloseMask: 0.2,
  closedDrawerOffset: 0,
  styles: {
    drawer: {
      shadowColor: "#000000",
      shadowOpacity: 0,
      shadowRadius: 0,
      elevation: 5 },

    mainOverlay: {
      opacity: 0,
      backgroundColor: "rgba(0, 0, 0, 0.8)",
      elevation: 8 } },

  tweenHandler: function tweenHandler(ratio) {
    return {
      mainOverlay: { opacity: ratio / 2 } };
  } };
}, 543, null, "native-base/dist/src/basic/Drawer/index.js");
__d(/* react-native-drawer/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                     ); // 27 = ./../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp2,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-drawer\\index.js';

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require(181           ); // 181 = react-native

var _tweener = require(545        ); // 545 = ./tweener

var _tweener2 = _interopRequireDefault(_tweener);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Drawer: {
    displayName: 'Drawer'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-drawer/index.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var deviceScreen = _reactNative.Dimensions.get('window');
var DOUBLE_TAP_INTERVAL = 500;
var TAP_DURATION = 250;
var propsWhomRequireUpdate = ['closedDrawerOffset', 'openDrawerOffset', 'type', 'styles'];

var Drawer = _wrapComponent('Drawer')((_temp2 = _class = function (_Component) {
  _inherits(Drawer, _Component);

  function Drawer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Drawer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Drawer.__proto__ || Object.getPrototypeOf(Drawer)).call.apply(_ref, [this].concat(args))), _this), _this._length = 0, _this._prevLength = 0, _this._offsetOpen = 0, _this._offsetClosed = 0, _this._open = false, _this._panning = false, _this._tweenPending = false, _this._activeTween = null, _this._lastPress = 0, _this._panStartTime = 0, _this._syncAfterUpdate = false, _this._interactionHandle = null, _this.state = {
      viewport: deviceScreen
    }, _this.getChildContext = function () {
      return { drawer: _this };
    }, _this.initialize = function (props) {
      var fullLength = _this.getDeviceLength();
      _this._offsetClosed = _this.getClosedOffset(props, _this.state.viewport);
      _this._offsetOpen = _this.getOpenOffset(props, _this.state.viewport);

      _this._prevLength = _this._length;

      var styles = {
        container: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center'
        }
      };

      styles.main = _extends({
        position: 'absolute',
        borderWidth: 0
      }, _this.isLeftOrRightSide() ? { top: 0 } : { left: 0 }, _this.props.styles.main);

      styles.drawer = _extends({
        position: 'absolute',
        borderWidth: 0
      }, _this.isLeftOrRightSide() ? { top: 0 } : { left: 0 }, _this.props.styles.drawer);

      if (props.initializeOpen || props.open) {
        _this._open = true;
        _this._length = fullLength - _this._offsetOpen;
        styles.main[_this.props.side] = 0;
        styles.drawer[_this.props.side] = 0;
        if (props.type === 'static') styles.main[_this.props.side] = fullLength - _this._offsetOpen;
        if (props.type === 'displace') styles.main[_this.props.side] = fullLength - _this._offsetOpen;
      } else {
        _this._open = false;
        _this._length = _this._offsetClosed;
        styles.main[_this.props.side] = _this._offsetClosed;
        if (props.type === 'static') styles.drawer[_this.props.side] = 0;
        if (props.type === 'overlay') styles.drawer[_this.props.side] = _this._offsetClosed + _this._offsetOpen - fullLength;
        if (props.type === 'displace') styles.drawer[_this.props.side] = -fullLength + _this._offsetClosed + _this._offsetOpen;
      }

      if (_this.main) {
        _this.drawer.setNativeProps({ style: { left: styles.drawer.left } });
        _this.main.setNativeProps({ style: { left: styles.main.left } });
      } else {
        _this.stylesheet = _reactNative.StyleSheet.create(styles);
        _this.responder = _reactNative.PanResponder.create({
          onStartShouldSetPanResponder: _this.onStartShouldSetPanResponder,
          onStartShouldSetPanResponderCapture: _this.onStartShouldSetPanResponderCapture,
          onMoveShouldSetPanResponder: _this.onMoveShouldSetPanResponder,
          onMoveShouldSetPanResponderCapture: _this.onMoveShouldSetPanResponderCapture,
          onPanResponderMove: _this.onPanResponderMove,
          onPanResponderRelease: _this.onPanResponderRelease,
          onPanResponderTerminate: _this.onPanResponderTerminate
        });
      }

      _this.resync(null, props);
    }, _this.updatePosition = function () {
      var mainProps = {};
      var drawerProps = {};
      var ratio = (_this._length - _this._offsetClosed) / (_this.getOpenLength() - _this._offsetClosed);

      switch (_this.props.type) {
        case 'overlay':
          drawerProps[_this.props.side] = -_this.getDeviceLength() + _this._offsetOpen + _this._length;
          mainProps[_this.props.side] = _this._offsetClosed;
          break;
        case 'static':
          mainProps[_this.props.side] = _this._length;
          drawerProps[_this.props.side] = 0;
          break;
        case 'displace':
          mainProps[_this.props.side] = _this._length;
          drawerProps[_this.props.side] = -_this.getDeviceLength() + _this._length + _this._offsetOpen;
          break;
      }

      var mainOverlayProps = null;
      var drawerOverlayProps = null;
      if (_this.props.tweenHandler) {
        var propsFrag = _this.props.tweenHandler(ratio, _this.props.side);
        mainProps = _extends(mainProps, propsFrag.main);
        drawerProps = _extends(drawerProps, propsFrag.drawer);
        mainOverlayProps = propsFrag.mainOverlay;
        drawerOverlayProps = propsFrag.drawerOverlay;
      }
      if (_this.main && _this.drawer && _this.mainOverlay && _this.drawerOverlay) {
        _this.drawer.setNativeProps({ style: drawerProps });
        _this.main.setNativeProps({ style: mainProps });
        if (mainOverlayProps) _this.mainOverlay.setNativeProps({ style: mainOverlayProps });
        if (drawerOverlayProps) _this.drawerOverlay.setNativeProps({ style: drawerOverlayProps });
      }
    }, _this.onPanResponderTerminate = function (e, gestureState) {
      _this._panning = false;
      _this.shouldOpenDrawer(_this.getGestureDelta(gestureState)) ? _this.open() : _this.close();
    }, _this.onStartShouldSetPanResponderCapture = function (e, gestureState) {
      if (_this.shouldCaptureGestures()) return _this.processShouldSet(e, gestureState);
      return false;
    }, _this.onStartShouldSetPanResponder = function (e, gestureState) {
      if (!_this.shouldCaptureGestures()) return _this.processShouldSet(e, gestureState);
      return false;
    }, _this.onMoveShouldSetPanResponderCapture = function (e, gestureState) {
      if (_this.shouldCaptureGestures() && _this.props.negotiatePan) return _this.processMoveShouldSet(e, gestureState);
      return false;
    }, _this.onMoveShouldSetPanResponder = function (e, gestureState) {
      if (!_this.shouldCaptureGestures() && _this.props.negotiatePan) return _this.processMoveShouldSet(e, gestureState);
      return false;
    }, _this.onPanResponderMove = function (e, gestureState) {
      var delta = _this.getGestureDelta(gestureState);
      if (!_this.props.acceptPan) return false;

      if (_this._open ^ delta < 0 ^ _this.isRightOrBottomSide()) return false;

      delta = _this.isRightOrBottomSide() ? delta * -1 : delta;
      var length = _this._prevLength + delta;
      length = Math.min(length, _this.getOpenLength());
      length = Math.max(length, _this.getClosedLength());
      _this._length = length;

      _this.updatePosition();
      _this._panning = true;
    }, _this.onPanResponderRelease = function (e, gestureState) {
      var delta = _this.getGestureDelta(gestureState);
      _this._panning = false;
      if (Date.now() - _this._panStartTime < TAP_DURATION) _this.processTapGestures();
      if (Math.abs(delta) < 50 && _this._activeTween) return;

      _this.shouldOpenDrawer(delta) ? _this.open() : _this.close();
      _this.updatePosition();
      _this._prevLength = _this._length;
    }, _this.processShouldSet = function (e, gestureState) {
      var inMask = _this.testPanResponderMask(e, gestureState);
      if (!inMask) return false;
      _this._panStartTime = Date.now();
      if (inMask && _this.shouldCaptureGestures()) return true;
      if (_this.props.negotiatePan) return false;
      if (!_this.props.acceptPan) return false;
      _this.terminateActiveTween();
      return true;
    }, _this.processMoveShouldSet = function (e, gestureState) {
      var inMask = _this.testPanResponderMask(e, gestureState);
      if (!inMask) return false;
      if (!_this.props.acceptPan) return false;

      if (!_this.props.negotiatePan || _this.props.disabled || !_this.props.acceptPan || _this._panning) return false;
      var delta = _this.getGestureDelta(gestureState);
      var deltaOppositeAxis = _this.getGestureDeltaOppositeAxis(gestureState);
      var swipeToLeftOrTop = delta < 0 ? true : false;
      var swipeToRightOrBottom = delta > 0 ? true : false;
      var swipeOppositeAxis = Math.abs(deltaOppositeAxis) >= Math.abs(delta) ? true : false;
      var swipeInCloseDirection = _this.isLeftOrTopSide() ? swipeToLeftOrTop : swipeToRightOrBottom;
      if (swipeOppositeAxis || _this._open && !swipeInCloseDirection || !_this._open && swipeInCloseDirection) {
        return false;
      }

      _this.terminateActiveTween();
      return true;
    }, _this.processTapGestures = function () {
      if (_this._activeTween) return false;
      if (_this.props.acceptTap || _this.props.tapToClose && _this._open) {
        _this._open ? _this.close() : _this.open();
        return true;
      }
      if (_this.props.acceptDoubleTap) {
        var now = new Date().getTime();
        var timeDelta = now - _this._lastPress;
        _this._lastPress = now;
        if (timeDelta < DOUBLE_TAP_INTERVAL) {
          _this._open ? _this.close() : _this.open();
          return true;
        }
      }
      return false;
    }, _this.testPanResponderMask = function (e, gestureState) {
      if (_this.props.disabled) return false;

      if (_this.context.drawer && _this.context.drawer._open) return false;
      if (_this._childDrawer && _this._childDrawer._open) return false;

      var pos0 = _this.isLeftOrRightSide() ? e.nativeEvent.pageX : e.nativeEvent.pageY;
      var deltaOpen = _this.isLeftOrTopSide() ? _this.getDeviceLength() - pos0 : pos0;
      var deltaClose = _this.isLeftOrTopSide() ? pos0 : _this.getDeviceLength() - pos0;

      if (_this._open && deltaOpen > _this.getOpenMask()) return false;
      if (!_this._open && deltaClose > _this.getClosedMask()) return false;
      return true;
    }, _this.terminateActiveTween = function () {
      if (_this._activeTween) {
        _this._activeTween.terminate();
        _this._activeTween = null;
      }
    }, _this.open = function (type, cb) {
      var start = _this._length;
      var end = _this.getOpenLength();

      if (_this._activeTween) return;
      if (type !== 'force' && start - end === 0 && _this._open === true) return;

      _this.props.onOpenStart && _this.props.onOpenStart();
      _this.setInteractionHandle();
      _this._activeTween = (0, _tweener2.default)({
        start: _this._length,
        end: _this.getOpenLength(),
        duration: _this.props.tweenDuration,
        easingType: _this.props.tweenEasing,
        onFrame: function onFrame(tweenValue) {
          _this._length = tweenValue;
          _this.updatePosition();
        },
        onEnd: function onEnd() {
          _this._activeTween = null;
          _this._open = true;
          _this._prevLength = _this._length;
          _this.adjustForCaptureGestures();
          _this.props.onOpen();
          _this.clearInteractionHandle();

          if (typeof type === 'function') {
            type();
          } else cb && cb();
        }
      });
    }, _this.close = function (type, cb) {
      var start = _this._length;
      var end = _this.getClosedLength();

      if (_this._activeTween) return;
      if (type !== 'force' && start - end === 0 && _this._open === false) return;

      _this.props.onCloseStart && _this.props.onCloseStart();
      _this.setInteractionHandle();
      _this._activeTween = (0, _tweener2.default)({
        start: start,
        end: end,
        easingType: _this.props.tweenEasing,
        duration: _this.props.tweenDuration,
        onFrame: function onFrame(tweenValue) {
          _this._length = tweenValue;
          _this.updatePosition();
        },
        onEnd: function onEnd() {
          _this._activeTween = null;
          _this._open = false;
          _this._prevLength = _this._length;
          _this.adjustForCaptureGestures();
          _this.props.onClose();
          _this.clearInteractionHandle();

          if (typeof type === 'function') {
            type();
          } else cb && cb();
        }
      });
    }, _this.toggle = function () {
      _this._open ? _this.close() : _this.open();
    }, _this.handleSetViewport = function (e) {
      var viewport = e.nativeEvent.layout;
      var oldViewport = _this.state.viewport;
      if (viewport.width === oldViewport.width && viewport.height === oldViewport.height) return;
      var didRotationChange = viewport.width !== oldViewport.width;
      _this.resync(viewport, null, didRotationChange);
    }, _this.resync = function (viewport, props, didRotationChange) {
      if (didRotationChange) _this._syncAfterUpdate = true;
      viewport = viewport || _this.state.viewport;
      props = props || _this.props;
      _this._offsetClosed = _this.getClosedOffset(props, viewport);
      _this._offsetOpen = _this.getOpenOffset(props, viewport);
      _this.setState({ viewport: viewport });
    }, _this.requiresResync = function (nextProps) {
      for (var i = 0; i < propsWhomRequireUpdate.length; i++) {
        var key = propsWhomRequireUpdate[i];
        if (_this.props[key] !== nextProps[key]) return true;
      }
    }, _this.getDeviceLength = function () {
      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;
      return _this.isLeftOrRightSide() ? viewport.width : viewport.height;
    }, _this.getOpenLength = function () {
      return _this.getDeviceLength() - _this._offsetOpen;
    }, _this.getClosedLength = function () {
      return _this._offsetClosed;
    }, _this.getMainWidth = function () {
      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;

      return _this.isLeftOrRightSide() ? viewport.width - _this._offsetClosed : viewport.width;
    }, _this.getMainHeight = function () {
      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;

      return _this.isTopOrBottomSide() ? viewport.height - _this._offsetClosed : viewport.height;
    }, _this.getDrawerWidth = function () {
      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;

      return _this.isLeftOrRightSide() ? viewport.width - _this._offsetOpen : viewport.width;
    }, _this.getDrawerHeight = function () {
      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;

      return _this.isTopOrBottomSide() ? viewport.height - _this._offsetOpen : viewport.height;
    }, _this.getOpenMask = function () {
      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.viewport;

      if (_this.props.panCloseMask && _this.props.panCloseMask % 1 === 0) return _this.props.panCloseMask;
      if (_this.props.panCloseMask) return _this.getDeviceLength(viewport) * _this.props.panCloseMask;
      return Math.max(0.05, _this._offsetOpen);
    }, _this.getClosedMask = function () {
      if (_this.props.panOpenMask && _this.props.panOpenMask % 1 === 0) return _this.props.panOpenMask;
      if (_this.props.panOpenMask) return _this.getDeviceLength() * _this.props.panOpenMask;
      return Math.max(0.05, _this._offsetClosed);
    }, _this.getOpenOffset = function (props, viewport) {
      if (typeof props.openDrawerOffset === 'function') return props.openDrawerOffset(viewport);
      return props.openDrawerOffset > 1 || props.openDrawerOffset < 0 ? props.openDrawerOffset : props.openDrawerOffset * _this.getDeviceLength(viewport);
    }, _this.getClosedOffset = function (props, viewport) {
      if (typeof props.closedDrawerOffset === 'function') return props.closedDrawerOffset(viewport);
      return props.closedDrawerOffset > 1 || props.closedDrawerOffset < 0 ? props.closedDrawerOffset : props.closedDrawerOffset * _this.getDeviceLength(viewport);
    }, _this.getGestureDelta = function (gestureState) {
      return _this.isLeftOrRightSide() ? gestureState.dx : gestureState.dy;
    }, _this.getGestureDeltaOppositeAxis = function (gestureState) {
      return _this.isLeftOrRightSide() ? gestureState.dy : gestureState.dx;
    }, _this.isLeftOrRightSide = function () {
      if (_reactNative.I18nManager.isRTL) {
        return ["right", "left"].includes(_this.props.side);
      } else {
        return ["left", "right"].includes(_this.props.side);
      }
    }, _this.isTopOrBottomSide = function () {
      return ["top", "bottom"].includes(_this.props.side);
    }, _this.isLeftOrTopSide = function () {
      var side = "left";
      if (_reactNative.I18nManager.isRTL) {
        side = "right";
      }
      return [side, "top"].includes(_this.props.side);
    }, _this.isRightOrBottomSide = function () {
      var side = "right";
      if (_reactNative.I18nManager.isRTL) {
        side = "left";
      }
      return [side, "bottom"].includes(_this.props.side);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Drawer, [{
    key: '_registerChildDrawer',
    value: function _registerChildDrawer(drawer) {
      this._childDrawer = drawer;
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.context.drawer) this.context.drawer._registerChildDrawer(this);
      if (this.props.openDrawerThreshold && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: openDrawerThreshold is obsolete. Use panThreshold instead.');
      if (this.props.panStartCompensation && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: panStartCompensation is deprecated.');
      if (this.props.relativeDrag && process.env.NODE_ENV !== 'production') console.error('react-native-drawer: relativeDrag is deprecated.');
      this.initialize(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.requiresResync(nextProps)) this.resync(null, nextProps);

      if (nextProps.open !== null && this._open !== nextProps.open) {
        this._syncAfterUpdate = true;
        this._open = nextProps.open;
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this._syncAfterUpdate) {
        this._syncAfterUpdate = false;
        this._open ? this.open('force') : this.close('force');
      }
    }
  }, {
    key: 'shouldOpenDrawer',
    value: function shouldOpenDrawer(delta) {
      var hasActiveHeading = this._open ^ delta > 0 ^ this.isRightOrBottomSide();
      if (!hasActiveHeading) return this._open;else return this._open ^ Math.abs(delta) > this.getDeviceLength() * this.props.panThreshold;
    }
  }, {
    key: 'shouldCaptureGestures',
    value: function shouldCaptureGestures() {
      if (this.props.captureGestures === true) return true;
      if (this.props.captureGestures === 'closed' && this._open === false) return true;
      if (this.props.captureGestures === 'open' && this._open === true) return true;
      return false;
    }
  }, {
    key: 'adjustForCaptureGestures',
    value: function adjustForCaptureGestures() {
      if (!this.props.captureGestures) return;
      var shouldCapture = this.shouldCaptureGestures();
      if (this.mainOverlay && this.drawerOverlay) {
        this.mainOverlay.setNativeProps({ pointerEvents: shouldCapture && this._open ? 'auto' : 'none' });
        this.drawerOverlay.setNativeProps({ pointerEvents: shouldCapture && !this._open ? 'auto' : 'none' });
      }
    }
  }, {
    key: 'setInteractionHandle',
    value: function setInteractionHandle() {
      if (this._interactionHandle) _reactNative.InteractionManager.clearInteractionHandle(this._interactionHandle);
      if (this.props.useInteractionManager) this._interactionHandle = _reactNative.InteractionManager.createInteractionHandle();
    }
  }, {
    key: 'clearInteractionHandle',
    value: function clearInteractionHandle() {
      if (this._interactionHandle) _reactNative.InteractionManager.clearInteractionHandle(this._interactionHandle);
    }
  }, {
    key: 'render',
    value: function render() {
      var first = this.props.type === 'overlay' ? this.renderMain() : this.renderDrawer();
      var second = this.props.type === 'overlay' ? this.renderDrawer() : this.renderMain();

      return _react3.default.createElement(
        _reactNative.View,
        {
          key: 'drawerContainer',
          onLayout: this.handleSetViewport,
          style: this.stylesheet.container,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 557
          }
        },
        first,
        second
      );
    }
  }, {
    key: 'renderMain',
    value: function renderMain() {
      var _this2 = this;

      return _react3.default.createElement(
        _reactNative.View,
        _extends({}, this.responder.panHandlers, {
          key: 'main',
          ref: function ref(c) {
            return _this2.main = c;
          },
          style: [this.stylesheet.main, { height: this.getMainHeight(), width: this.getMainWidth() }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 570
          }
        }),
        this.props.children,
        _react3.default.createElement(_reactNative.View, {
          pointerEvents: this._open && this.shouldCaptureGestures() ? 'auto' : 'none',
          ref: function ref(c) {
            return _this2.mainOverlay = c;
          },
          style: [styles.overlay, this.props.styles && this.props.styles.mainOverlay],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 577
          }
        })
      );
    }
  }, {
    key: 'renderDrawer',
    value: function renderDrawer() {
      var _this3 = this;

      return _react3.default.createElement(
        _reactNative.View,
        _extends({}, this.responder.panHandlers, {
          key: 'drawer',
          ref: function ref(c) {
            return _this3.drawer = c;
          },
          elevation: this.props.elevation,
          style: [this.stylesheet.drawer, { height: this.getDrawerHeight(), width: this.getDrawerWidth() }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 588
          }
        }),
        this.props.content,
        _react3.default.createElement(_reactNative.View, {
          pointerEvents: !this._open && this.shouldCaptureGestures() ? 'auto' : 'none',
          ref: function ref(c) {
            return _this3.drawerOverlay = c;
          },
          style: [styles.overlay, this.props.styles && this.props.styles.drawerOverlay],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 596
          }
        })
      );
    }
  }]);

  return Drawer;
}(_react2.Component), _class.tweenPresets = {
  parallax: function parallax(ratio) {
    var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'left';

    var drawer = _defineProperty({}, side, -150 * (1 - ratio));
    return { drawer: drawer };
  }
}, _class.propTypes = {
  acceptDoubleTap: _propTypes2.default.bool,
  acceptPan: _propTypes2.default.bool,
  acceptTap: _propTypes2.default.bool,
  captureGestures: _propTypes2.default.oneOf([true, false, 'open', 'closed']),
  children: _propTypes2.default.node,
  closedDrawerOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),
  content: _propTypes2.default.node,
  disabled: _propTypes2.default.bool,
  elevation: _propTypes2.default.number,
  initializeOpen: _propTypes2.default.bool,
  open: _propTypes2.default.bool,
  negotiatePan: _propTypes2.default.bool,
  onClose: _propTypes2.default.func,
  onCloseStart: _propTypes2.default.func,
  onOpen: _propTypes2.default.func,
  onOpenStart: _propTypes2.default.func,
  openDrawerOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]),
  panThreshold: _propTypes2.default.number,
  panCloseMask: _propTypes2.default.number,
  panOpenMask: _propTypes2.default.number,
  side: _propTypes2.default.oneOf(['left', 'right', 'top', 'bottom']),
  styles: _propTypes2.default.object,
  tapToClose: _propTypes2.default.bool,
  tweenDuration: _propTypes2.default.number,
  tweenEasing: _propTypes2.default.string,
  tweenHandler: _propTypes2.default.func,
  type: _propTypes2.default.oneOf(['overlay', 'static', 'displace']),
  useInteractionManager: _propTypes2.default.bool,

  panStartCompensation: _propTypes2.default.bool,
  openDrawerThreshold: _propTypes2.default.any
}, _class.defaultProps = {
  open: null,
  initializeOpen: false,

  type: 'displace',
  closedDrawerOffset: 0,
  openDrawerOffset: 0,
  panThreshold: 0.25,
  panOpenMask: null,
  panCloseMask: null,

  tweenHandler: null,
  tweenDuration: 250,
  tweenEasing: 'linear',

  disabled: false,
  negotiatePan: false,
  captureGestures: 'open',
  acceptDoubleTap: false,
  acceptTap: false,
  acceptPan: true,
  tapToClose: false,

  styles: {},
  elevation: 0,
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  side: 'left',

  useInteractionManager: false
}, _class.contextTypes = { drawer: _propTypes2.default.object }, _class.childContextTypes = { drawer: _propTypes2.default.object }, _temp2));

exports.default = Drawer;


var styles = _reactNative.StyleSheet.create({
  overlay: {
    right: 0,
    left: 0,
    top: 0,
    bottom: 0,
    position: 'absolute',
    backgroundColor: 'transparent'
  }
});
}, 544, null, "react-native-drawer/index.js");
__d(/* react-native-drawer/tweener.js */function(global, require, module, exports) {var easingTypes = require(546              ); // 546 = tween-functions

module.exports = function (config) {
	return new Tween(config);
};

function Tween(config) {
	this._rafLoop = this._rafLoop.bind(this);
	this.terminate = this.terminate.bind(this);

	this._t0 = Date.now();
	this._config = config;
	this._rafLoop();
}

Tween.prototype._rafLoop = function () {
	if (this._break) {
		return;
	}

	var _config = this._config,
	    duration = _config.duration,
	    start = _config.start,
	    end = _config.end,
	    easingType = _config.easingType;

	var now = Date.now();
	var elapsed = now - this._t0;

	if (elapsed >= duration) {
		this._config.onFrame(end);
		this._config.onEnd();
		return;
	}

	var tweenVal = easingTypes[easingType](elapsed, start, end, duration);
	this._config.onFrame(tweenVal);

	requestAnimationFrame(this._rafLoop);
};

Tween.prototype.terminate = function () {
	this._break = true;
};
}, 545, null, "react-native-drawer/tweener.js");
__d(/* tween-functions/index.js */function(global, require, module, exports) {'use strict';

var tweenFunctions = {
  linear: function linear(t, b, _c, d) {
    var c = _c - b;
    return c * t / d + b;
  },
  easeInQuad: function easeInQuad(t, b, _c, d) {
    var c = _c - b;
    return c * (t /= d) * t + b;
  },
  easeOutQuad: function easeOutQuad(t, b, _c, d) {
    var c = _c - b;
    return -c * (t /= d) * (t - 2) + b;
  },
  easeInOutQuad: function easeInOutQuad(t, b, _c, d) {
    var c = _c - b;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t + b;
    } else {
      return -c / 2 * (--t * (t - 2) - 1) + b;
    }
  },
  easeInCubic: function easeInCubic(t, b, _c, d) {
    var c = _c - b;
    return c * (t /= d) * t * t + b;
  },
  easeOutCubic: function easeOutCubic(t, b, _c, d) {
    var c = _c - b;
    return c * ((t = t / d - 1) * t * t + 1) + b;
  },
  easeInOutCubic: function easeInOutCubic(t, b, _c, d) {
    var c = _c - b;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t + b;
    } else {
      return c / 2 * ((t -= 2) * t * t + 2) + b;
    }
  },
  easeInQuart: function easeInQuart(t, b, _c, d) {
    var c = _c - b;
    return c * (t /= d) * t * t * t + b;
  },
  easeOutQuart: function easeOutQuart(t, b, _c, d) {
    var c = _c - b;
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  },
  easeInOutQuart: function easeInOutQuart(t, b, _c, d) {
    var c = _c - b;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t + b;
    } else {
      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    }
  },
  easeInQuint: function easeInQuint(t, b, _c, d) {
    var c = _c - b;
    return c * (t /= d) * t * t * t * t + b;
  },
  easeOutQuint: function easeOutQuint(t, b, _c, d) {
    var c = _c - b;
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  },
  easeInOutQuint: function easeInOutQuint(t, b, _c, d) {
    var c = _c - b;
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t * t + b;
    } else {
      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    }
  },
  easeInSine: function easeInSine(t, b, _c, d) {
    var c = _c - b;
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  },
  easeOutSine: function easeOutSine(t, b, _c, d) {
    var c = _c - b;
    return c * Math.sin(t / d * (Math.PI / 2)) + b;
  },
  easeInOutSine: function easeInOutSine(t, b, _c, d) {
    var c = _c - b;
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  },
  easeInExpo: function easeInExpo(t, b, _c, d) {
    var c = _c - b;
    return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
  },
  easeOutExpo: function easeOutExpo(t, b, _c, d) {
    var c = _c - b;
    return t == d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
  },
  easeInOutExpo: function easeInOutExpo(t, b, _c, d) {
    var c = _c - b;
    if (t === 0) {
      return b;
    }
    if (t === d) {
      return b + c;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
    } else {
      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    }
  },
  easeInCirc: function easeInCirc(t, b, _c, d) {
    var c = _c - b;
    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
  },
  easeOutCirc: function easeOutCirc(t, b, _c, d) {
    var c = _c - b;
    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
  },
  easeInOutCirc: function easeInOutCirc(t, b, _c, d) {
    var c = _c - b;
    if ((t /= d / 2) < 1) {
      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
    } else {
      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    }
  },
  easeInElastic: function easeInElastic(t, b, _c, d) {
    var c = _c - b;
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      return b;
    } else if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
  },
  easeOutElastic: function easeOutElastic(t, b, _c, d) {
    var c = _c - b;
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      return b;
    } else if ((t /= d) === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
  },
  easeInOutElastic: function easeInOutElastic(t, b, _c, d) {
    var c = _c - b;
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      return b;
    } else if ((t /= d / 2) === 2) {
      return b + c;
    }
    if (!p) {
      p = d * (0.3 * 1.5);
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    if (t < 1) {
      return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    } else {
      return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;
    }
  },
  easeInBack: function easeInBack(t, b, _c, d, s) {
    var c = _c - b;
    if (s === void 0) {
      s = 1.70158;
    }
    return c * (t /= d) * t * ((s + 1) * t - s) + b;
  },
  easeOutBack: function easeOutBack(t, b, _c, d, s) {
    var c = _c - b;
    if (s === void 0) {
      s = 1.70158;
    }
    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
  },
  easeInOutBack: function easeInOutBack(t, b, _c, d, s) {
    var c = _c - b;
    if (s === void 0) {
      s = 1.70158;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
    } else {
      return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
    }
  },
  easeInBounce: function easeInBounce(t, b, _c, d) {
    var c = _c - b;
    var v;
    v = tweenFunctions.easeOutBounce(d - t, 0, c, d);
    return c - v + b;
  },
  easeOutBounce: function easeOutBounce(t, b, _c, d) {
    var c = _c - b;
    if ((t /= d) < 1 / 2.75) {
      return c * (7.5625 * t * t) + b;
    } else if (t < 2 / 2.75) {
      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
    } else if (t < 2.5 / 2.75) {
      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
    } else {
      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
    }
  },
  easeInOutBounce: function easeInOutBounce(t, b, _c, d) {
    var c = _c - b;
    var v;
    if (t < d / 2) {
      v = tweenFunctions.easeInBounce(t * 2, 0, c, d);
      return v * 0.5 + b;
    } else {
      v = tweenFunctions.easeOutBounce(t * 2 - d, 0, c, d);
      return v * 0.5 + c * 0.5 + b;
    }
  }
};

module.exports = tweenFunctions;
}, 546, null, "tween-functions/index.js");
__d(/* native-base/dist/src/basic/SwipeRow.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.SwipeRow = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/SwipeRow.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _Text = require(548     ); // 548 = ./Text
var _Left = require(550     ); // 550 = ./Left
var _Right = require(553      ); // 553 = ./Right
var _Body = require(554     ); // 554 = ./Body
var _ListItem = require(555         ); // 555 = ./ListItem
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var PREVIEW_OPEN_DELAY = 700;
var PREVIEW_CLOSE_DELAY = 300;var SwipeRow = function (_Component) {
  _inherits(SwipeRow, _Component);

  function SwipeRow(props) {
    _classCallCheck(this, SwipeRow);var _this = _possibleConstructorReturn(this, (SwipeRow.__proto__ || Object.getPrototypeOf(SwipeRow)).call(this, props));
    _this.horizontalSwipeGestureBegan = false;
    _this.swipeInitialX = null;
    _this.parentScrollEnabled = true;
    _this.ranPreview = false;
    _this.state = {
      dimensionsSet: false,
      hiddenHeight: 0,
      hiddenWidth: 0 };

    _this._translateX = new _reactNative.Animated.Value(0);return _this;
  }_createClass(SwipeRow, [{ key: "componentWillMount", value: function componentWillMount() {
      var _this2 = this;
      this._panResponder = _reactNative.PanResponder.create({
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {
          return _this2.handleOnMoveShouldSetPanResponder(e, gs);
        },
        onPanResponderMove: function onPanResponderMove(e, gs) {
          return _this2.handlePanResponderMove(e, gs);
        },
        onPanResponderRelease: function onPanResponderRelease(e, gs) {
          return _this2.handlePanResponderEnd(e, gs);
        },
        onPanResponderTerminate: function onPanResponderTerminate(e, gs) {
          return _this2.handlePanResponderEnd(e, gs);
        },
        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(_) {
          return false;
        } });
    } }, { key: "getPreviewAnimation", value: function getPreviewAnimation(toValue, delay) {
      return _reactNative.Animated.timing(this._translateX, { duration: this.props.previewDuration, toValue: toValue, delay: delay });
    } }, { key: "onContentLayout", value: function onContentLayout(e) {
      var _this3 = this;
      this.setState({
        dimensionsSet: !this.props.recalculateHiddenLayout,
        hiddenHeight: e.nativeEvent.layout.height,
        hiddenWidth: e.nativeEvent.layout.width });

      if (this.props.preview && !this.ranPreview) {
        this.ranPreview = true;
        var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;
        this.getPreviewAnimation(previewOpenValue, PREVIEW_OPEN_DELAY).start(function (_) {
          _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();
        });
      }
    } }, { key: "handleOnMoveShouldSetPanResponder", value: function handleOnMoveShouldSetPanResponder(e, gs) {
      var dx = gs.dx;
      return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;
    } }, { key: "handlePanResponderMove", value: function handlePanResponderMove(e, gestureState) {
      var dx = gestureState.dx,
          dy = gestureState.dy;
      var absDx = Math.abs(dx);
      var absDy = Math.abs(dy);

      if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {

        if (absDy > absDx && !this.horizontalSwipeGestureBegan) {

          return;
        }

        if (this.parentScrollEnabled) {

          this.parentScrollEnabled = false;
          this.props.setScrollEnabled && this.props.setScrollEnabled(false);
        }

        if (this.swipeInitialX === null) {

          this.swipeInitialX = this._translateX._value;
        }
        if (!this.horizontalSwipeGestureBegan) {
          this.horizontalSwipeGestureBegan = true;
          this.props.swipeGestureBegan && this.props.swipeGestureBegan();
        }

        var newDX = this.swipeInitialX + dx;
        if (this.props.disableLeftSwipe && newDX < 0) {
          newDX = 0;
        }
        if (this.props.disableRightSwipe && newDX > 0) {
          newDX = 0;
        }

        if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {
          newDX = this.props.stopLeftSwipe;
        }
        if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {
          newDX = this.props.stopRightSwipe;
        }

        this._translateX.setValue(newDX);
      }
    } }, { key: "handlePanResponderEnd", value: function handlePanResponderEnd(e, gestureState) {

      if (!this.parentScrollEnabled) {
        this.parentScrollEnabled = true;
        this.props.setScrollEnabled && this.props.setScrollEnabled(true);
      }

      var toValue = 0;
      if (this._translateX._value >= 0) {

        if (this._translateX._value > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {

          toValue = this.props.leftOpenValue;
        }
      } else {

        if (this._translateX._value < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {

          toValue = this.props.rightOpenValue;
        }
      }

      this.manuallySwipeRow(toValue);
    } }, { key: "closeRow", value: function closeRow() {
      this.manuallySwipeRow(0);
    } }, { key: "manuallySwipeRow", value: function manuallySwipeRow(toValue) {
      var _this4 = this;
      _reactNative.Animated.spring(this._translateX, {
        toValue: toValue,
        friction: this.props.friction,
        tension: this.props.tension }).start(function (_) {
        if (toValue === 0) {
          _this4.props.onRowDidClose && _this4.props.onRowDidClose();
        } else {
          _this4.props.onRowDidOpen && _this4.props.onRowDidOpen();
        }
      });

      if (toValue === 0) {
        this.props.onRowClose && this.props.onRowClose();
      } else {
        this.props.onRowOpen && this.props.onRowOpen(toValue);
      }

      this.swipeInitialX = null;
      this.horizontalSwipeGestureBegan = false;
    } }, { key: "renderMainContent", value: function renderMainContent() {
      var _this5 = this;

      if (this.state.dimensionsSet) {
        return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {
          style: {
            transform: [{ translateX: this._translateX }],
            zIndex: 2 }, __source: { fileName: _jsxFileName, lineNumber: 191 } }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, { list: true, __source: { fileName: _jsxFileName, lineNumber: 199 } }, this.props.body) : _react2.default.createElement(_reactNative.View, { style: { backgroundColor: '#FFF' }, __source: { fileName: _jsxFileName, lineNumber: 202 } }, this.props.body));
      } else {
        return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {
          onLayout: function onLayout(e) {
            return _this5.onContentLayout(e);
          },
          style: {
            transform: [{ translateX: this._translateX }],
            zIndex: 2 }, __source: { fileName: _jsxFileName, lineNumber: 209 } }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, { list: true, __source: { fileName: _jsxFileName, lineNumber: 218 } }, this.props.body) : _react2.default.createElement(_reactNative.View, { style: { backgroundColor: '#FFF' }, __source: { fileName: _jsxFileName, lineNumber: 221 } }, this.props.body));
      }
    } }, { key: "render", value: function render() {
      return _react2.default.createElement(_reactNative.View, { style: this.props.style ? this.props.style : undefined, __source: { fileName: _jsxFileName, lineNumber: 231 } }, _react2.default.createElement(_reactNative.View, {
        style: [styles.hidden, {
          height: this.state.hiddenHeight,
          width: this.state.hiddenWidth,
          flexDirection: "row",
          justifyContent: "space-between" }], __source: { fileName: _jsxFileName, lineNumber: 232 } }, _react2.default.createElement(_Left.Left, { style: { width: this.props.leftOpenValue, zIndex: 1 }, __source: { fileName: _jsxFileName, lineNumber: 243 } }, this.props.left), _react2.default.createElement(_Body.Body, { style: { flex: 0 }, __source: { fileName: _jsxFileName, lineNumber: 246 } }), _react2.default.createElement(_Right.Right, { style: { width: -this.props.rightOpenValue, zIndex: 1 }, __source: { fileName: _jsxFileName, lineNumber: 247 } }, this.props.right)), this.renderMainContent());
    } }]);return SwipeRow;
}(_react.Component);SwipeRow.defaultProps = { leftOpenValue: 0, rightOpenValue: 0, closeOnRowPress: true, disableLeftSwipe: false, disableRightSwipe: false, recalculateHiddenLayout: false, preview: false, previewDuration: 300, directionalDistanceChangeThreshold: 2, swipeToOpenPercent: 50 };

var styles = {
  container: {},

  hidden: {
    bottom: 0,
    left: 0,
    overflow: "hidden",
    position: "absolute",
    right: 0,
    top: 0 } };

var StyledSwipeRow = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.SwipeRow", {}, _mapPropsToStyleNames2.default)(SwipeRow);exports.SwipeRow = StyledSwipeRow;
}, 547, null, "native-base/dist/src/basic/SwipeRow.js");
__d(/* native-base/dist/src/basic/Text.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Text = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Text.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Text = function (_Component) {
  _inherits(Text, _Component);function Text() {
    _classCallCheck(this, Text);return _possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }_createClass(Text, [{ key: "render", value: function render() {
      var _this2 = this;var _props = this.props,
          uppercase = _props.uppercase,
          children = _props.children;

      var text = void 0;
      if (_lodash2.default.isArray(children) && !_lodash2.default.some(children, _lodash2.default.isObject)) {

        text = _lodash2.default.join(children, '');
      } else {
        text = children;
      }

      if (uppercase) {
        text = _lodash2.default.toUpper(text);
      }

      return _react2.default.createElement(_reactNative.Text, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 30 } }), text);
    } }]);return Text;
}(_react.Component);

Text.propTypes = _extends({}, _reactNative.Text.propTypes, {
  uppercase: _propTypes2.default.bool,
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

Text.defaultProps = {
  uppercase: false };

var StyledText = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Text", {}, _mapPropsToStyleNames2.default)(Text);exports.Text = StyledText;
}, 548, null, "native-base/dist/src/basic/Text.js");
__d(/* native-base/dist/src/Utils/mapPropsToStyleNames.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) { // 484 = lodash
  return obj && obj.__esModule ? obj : { default: obj };
}exports.default = mapPropsToStyleNames = function mapPropsToStyleNames(styleNames, props) {
  var keys = _lodash2.default.keys(props);
  var values = _lodash2.default.values(props);

  _lodash2.default.forEach(keys, function (key, index) {
    if (values[index]) {
      styleNames.push(key);
    }
  });

  return styleNames;
};
}, 549, null, "native-base/dist/src/Utils/mapPropsToStyleNames.js");
__d(/* native-base/dist/src/basic/Left.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Left = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Left.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Left = function (_Component) {
  _inherits(Left, _Component);function Left() {
    _classCallCheck(this, Left);return _possibleConstructorReturn(this, (Left.__proto__ || Object.getPrototypeOf(Left)).apply(this, arguments));
  }_createClass(Left, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }));
    } }]);return Left;
}(_react.Component);

Left.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledLeft = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Left", {}, _mapPropsToStyleNames2.default)(Left);exports.Left = StyledLeft;
}, 550, null, "native-base/dist/src/basic/Left.js");
__d(/* native-base/dist/src/Utils/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.ViewPropTypes = undefined;var _viewPropTypes = require(552              );var _viewPropTypes2 = _interopRequireDefault(_viewPropTypes);function _interopRequireDefault(obj) { // 552 = ./viewPropTypes
  return obj && obj.__esModule ? obj : { default: obj };
}exports.ViewPropTypes = _viewPropTypes2.default;
}, 551, null, "native-base/dist/src/Utils/index.js");
__d(/* native-base/dist/src/Utils/viewPropTypes.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(181           ); // 181 = react-native

var ViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;exports.default = ViewPropTypes;
}, 552, null, "native-base/dist/src/Utils/viewPropTypes.js");
__d(/* native-base/dist/src/basic/Right.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Right = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Right.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Right = function (_Component) {
  _inherits(Right, _Component);function Right() {
    _classCallCheck(this, Right);return _possibleConstructorReturn(this, (Right.__proto__ || Object.getPrototypeOf(Right)).apply(this, arguments));
  }_createClass(Right, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }));
    } }]);return Right;
}(_react.Component);

Right.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledRight = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Right", {}, _mapPropsToStyleNames2.default)(Right);exports.Right = StyledRight;
}, 553, null, "native-base/dist/src/basic/Right.js");
__d(/* native-base/dist/src/basic/Body.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Body = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Body.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Body = function (_Component) {
  _inherits(Body, _Component);function Body() {
    _classCallCheck(this, Body);return _possibleConstructorReturn(this, (Body.__proto__ || Object.getPrototypeOf(Body)).apply(this, arguments));
  }_createClass(Body, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }));
    } }]);return Body;
}(_react.Component);

Body.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledBody = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Body", {}, _mapPropsToStyleNames2.default)(Body);exports.Body = StyledBody;
}, 554, null, "native-base/dist/src/basic/Body.js");
__d(/* native-base/dist/src/basic/ListItem.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.ListItem = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/ListItem.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform);function _interopRequireDefault(obj) { // 493 = ../theme/variables/platform
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var ListItem = function (_Component) {
  _inherits(ListItem, _Component);function ListItem() {
    _classCallCheck(this, ListItem);return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
  }_createClass(ListItem, [{ key: "render", value: function render() {
      var _this2 = this;
      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;

      if (_reactNative.Platform.OS === "ios" || variables.androidRipple === false || !this.props.onPress && !this.props.onLongPress || _reactNative.Platform.Version <= 21) {
        return _react2.default.createElement(_reactNative.TouchableHighlight, {
          onPress: this.props.onPress,
          onLongPress: this.props.onLongPress,
          ref: function ref(c) {
            return _this2._root = c;
          },
          underlayColor: variables.listBtnUnderlayColor, __source: { fileName: _jsxFileName, lineNumber: 23 } }, _react2.default.createElement(_reactNative.View, _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 29 } }), this.props.children));
      } else {
        return _react2.default.createElement(_reactNative.TouchableNativeFeedback, {
          ref: function ref(c) {
            return _this2._root = c;
          },
          onPress: this.props.onPress,
          onLongPress: this.props.onLongPress,
          background: this.props.androidRippleColor ? _reactNative.TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : _reactNative.TouchableNativeFeedback.Ripple(variables.androidRippleColorDark), __source: { fileName: _jsxFileName, lineNumber: 36 } }, _react2.default.createElement(_reactNative.View, { style: { marginLeft: -17, paddingLeft: 17 }, __source: { fileName: _jsxFileName, lineNumber: 46 } }, _react2.default.createElement(_reactNative.View, _extends({}, this.props, { __source: { fileName: _jsxFileName, lineNumber: 47 } }), this.props.children)));
      }
    } }]);return ListItem;
}(_react.Component);ListItem.contextTypes = { theme: _propTypes2.default.object };

ListItem.propTypes = _extends({}, _reactNative.TouchableHighlight.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  itemDivider: _propTypes2.default.bool,
  button: _propTypes2.default.bool });

var StyledListItem = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ListItem", {}, _mapPropsToStyleNames2.default)(ListItem);exports.ListItem = StyledListItem;
}, 555, null, "native-base/dist/src/basic/ListItem.js");
__d(/* native-base/dist/src/basic/View.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.ViewNB = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/View.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var ViewNB = function (_Component) {
  _inherits(ViewNB, _Component);function ViewNB() {
    _classCallCheck(this, ViewNB);return _possibleConstructorReturn(this, (ViewNB.__proto__ || Object.getPrototypeOf(ViewNB)).apply(this, arguments));
  }_createClass(ViewNB, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return ViewNB;
}(_react.Component);

ViewNB.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledViewNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ViewNB", {}, _mapPropsToStyleNames2.default)(ViewNB);exports.ViewNB = StyledViewNB;
}, 556, null, "native-base/dist/src/basic/View.js");
__d(/* native-base/dist/src/basic/Button.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Button = undefined;var _jsxFileName = "src/basic/Button.js";var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                            );var _platform2 = _interopRequireDefault(_platform); // 493 = ./../theme/variables/platform
var _Text = require(548     ); // 548 = ./Text
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps); // 558 = ../Utils/computeProps

var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Button = function (_Component) {
  _inherits(Button, _Component);function Button() {
    _classCallCheck(this, Button);return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }_createClass(Button, [{ key: "getInitialStyle", value: function getInitialStyle() {
      return {
        borderedBtn: {
          borderWidth: this.props.bordered ? 1 : undefined,
          borderRadius: this.props.rounded && this.props.bordered ? _platform2.default.borderRadiusLarge : 2 } };
    } }, { key: "prepareRootProps", value: function prepareRootProps() {
      var defaultProps = {
        style: this.getInitialStyle().borderedBtn };

      return (0, _computeProps2.default)(this.props, defaultProps);
    } }, { key: "render", value: function render() {
      var _this2 = this;
      var children = _reactNative.Platform.OS === "ios" ? this.props.children : _react2.default.Children.map(this.props.children, function (child) {
        return child && child.type === _Text.Text ? _react2.default.cloneElement(child, _extends({ uppercase: true }, child.props)) : child;
      });

      if (_reactNative.Platform.OS === "ios" || _platform2.default.androidRipple === false || _reactNative.Platform["Version"] <= 21) {
        return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({}, this.prepareRootProps(), {
          ref: function ref(c) {
            return _this2._root = c;
          },
          activeOpacity: this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5, __source: { fileName: _jsxFileName, lineNumber: 43 } }), children);
      } else {
        return _react2.default.createElement(_reactNative.TouchableNativeFeedback, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          },
          onPress: this.props.onPress,
          background: this.props.androidRippleColor ? _reactNative.TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : _reactNative.TouchableNativeFeedback.Ripple(_platform2.default.androidRippleColor) }, this.prepareRootProps(), { __source: { fileName: _jsxFileName, lineNumber: 53 } }), _react2.default.createElement(_reactNative.View, _extends({}, this.prepareRootProps(), { __source: { fileName: _jsxFileName, lineNumber: 63 } }), children));
      }
    } }]);return Button;
}(_react.Component);

Button.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  block: _propTypes2.default.bool,
  primary: _propTypes2.default.bool,
  transparent: _propTypes2.default.bool,
  success: _propTypes2.default.bool,
  danger: _propTypes2.default.bool,
  warning: _propTypes2.default.bool,
  info: _propTypes2.default.bool,
  bordered: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  rounded: _propTypes2.default.bool,
  large: _propTypes2.default.bool,
  small: _propTypes2.default.bool,
  active: _propTypes2.default.bool });

var StyledButton = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Button", {}, _mapPropsToStyleNames2.default)(Button);exports.Button = StyledButton;
}, 557, null, "native-base/dist/src/basic/Button.js");
__d(/* native-base/dist/src/Utils/computeProps.js */function(global, require, module, exports) {"use_strict";

var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash
var _ReactNativePropRegistry = require(274                                                            );var _ReactNativePropRegistry2 = _interopRequireDefault(_ReactNativePropRegistry);function _interopRequireDefault(obj) { // 274 = react-native/Libraries/Renderer/shims/ReactNativePropRegistry
  return obj && obj.__esModule ? obj : { default: obj };
}

module.exports = function (incomingProps, defaultProps) {

  var computedProps = {};

  incomingProps = _lodash2.default.clone(incomingProps);
  delete incomingProps.children;

  var incomingPropsStyle = incomingProps.style;
  delete incomingProps.style;

  if (incomingProps) {
    _lodash2.default.assign(computedProps, defaultProps, incomingProps);
  } else {
    computedProps = defaultProps;
  }

  if (incomingPropsStyle) {
    var computedPropsStyle = {};
    computedProps.style = {};
    if (Array.isArray(incomingPropsStyle)) {
      _lodash2.default.forEach(incomingPropsStyle, function (style) {
        if (typeof style === "number") {
          _lodash2.default.merge(computedPropsStyle, _ReactNativePropRegistry2.default.getByID(style));
        } else {
          _lodash2.default.merge(computedPropsStyle, style);
        }
      });
    } else if (typeof incomingPropsStyle === "number") {
      computedPropsStyle = _ReactNativePropRegistry2.default.getByID(incomingPropsStyle);
    } else {
      computedPropsStyle = incomingPropsStyle;
    }

    _lodash2.default.merge(computedProps.style, defaultProps.style, computedPropsStyle);
  }

  return computedProps;
};
}, 558, null, "native-base/dist/src/Utils/computeProps.js");
__d(/* native-base/dist/src/basic/TabHeading.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.TabHeading = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/TabHeading.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var TabHeadingNB = function (_Component) {
  _inherits(TabHeadingNB, _Component);function TabHeadingNB() {
    _classCallCheck(this, TabHeadingNB);return _possibleConstructorReturn(this, (TabHeadingNB.__proto__ || Object.getPrototypeOf(TabHeadingNB)).apply(this, arguments));
  }_createClass(TabHeadingNB, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return TabHeadingNB;
}(_react.Component);

TabHeadingNB.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledTabHeadingNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.TabHeading", {}, _mapPropsToStyleNames2.default)(TabHeadingNB);exports.TabHeading = StyledTabHeadingNB;
}, 559, null, "native-base/dist/src/basic/TabHeading.js");
__d(/* native-base/dist/src/basic/TabContainer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.TabContainer = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/TabContainer.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var TabContainer = function (_Component) {
  _inherits(TabContainer, _Component);function TabContainer() {
    _classCallCheck(this, TabContainer);return _possibleConstructorReturn(this, (TabContainer.__proto__ || Object.getPrototypeOf(TabContainer)).apply(this, arguments));
  }_createClass(TabContainer, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return TabContainer;
}(_react.Component);

TabContainer.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledTabContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.TabContainer", {}, _mapPropsToStyleNames2.default)(TabContainer);exports.TabContainer = StyledTabContainer;
}, 560, null, "native-base/dist/src/basic/TabContainer.js");
__d(/* native-base/dist/src/basic/IconNB.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.IconNB = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/IconNB.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme

var _Ionicons = require(562                                 );var _Ionicons2 = _interopRequireDefault(_Ionicons); // 562 = react-native-vector-icons/Ionicons
var _Entypo = require(612                               );var _Entypo2 = _interopRequireDefault(_Entypo); // 612 = react-native-vector-icons/Entypo
var _FontAwesome = require(614                                    );var _FontAwesome2 = _interopRequireDefault(_FontAwesome); // 614 = react-native-vector-icons/FontAwesome
var _Foundation = require(616                                   );var _Foundation2 = _interopRequireDefault(_Foundation); // 616 = react-native-vector-icons/Foundation
var _MaterialIcons = require(618                                      );var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons); // 618 = react-native-vector-icons/MaterialIcons
var _MaterialCommunityIcons = require(620                                               );var _MaterialCommunityIcons2 = _interopRequireDefault(_MaterialCommunityIcons); // 620 = react-native-vector-icons/MaterialCommunityIcons
var _Octicons = require(622                                 );var _Octicons2 = _interopRequireDefault(_Octicons); // 622 = react-native-vector-icons/Octicons
var _Zocial = require(624                               );var _Zocial2 = _interopRequireDefault(_Zocial); // 624 = react-native-vector-icons/Zocial
var _SimpleLineIcons = require(626                                        );var _SimpleLineIcons2 = _interopRequireDefault(_SimpleLineIcons); // 626 = react-native-vector-icons/SimpleLineIcons

var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var IconNB = function (_Component) {
  _inherits(IconNB, _Component);function IconNB() {
    _classCallCheck(this, IconNB);return _possibleConstructorReturn(this, (IconNB.__proto__ || Object.getPrototypeOf(IconNB)).apply(this, arguments));
  }_createClass(IconNB, [{ key: "componentWillMount", value: function componentWillMount() {
      if (this.context.theme) {
        switch (this.context.theme["@@shoutem.theme/themeStyle"].variables.iconFamily) {
          case "Ionicons":
            this.Icon = _Ionicons2.default;
            break;
          case "Entypo":
            this.Icon = _Entypo2.default;
            break;
          case "FontAwesome":
            this.Icon = _FontAwesome2.default;
            break;
          case "Foundation":
            this.Icon = _Foundation2.default;
            break;
          case "MaterialIcons":
            this.Icon = _MaterialIcons2.default;
            break;
          case "MaterialCommunityIcons":
            this.Icon = _MaterialCommunityIcons2.default;
            break;
          case "Octicons":
            this.Icon = _Octicons2.default;
            break;
          case "Zocial":
            this.Icon = _Zocial2.default;
            break;
          case "SimpleLineIcons":
            this.Icon = _SimpleLineIcons2.default;
            break;
          default:
            this.Icon = _Ionicons2.default;}
      } else {
        this.Icon = _Ionicons2.default;
      }
    } }, { key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(this.Icon, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 62 } }));
    } }]);return IconNB;
}(_react.Component);IconNB.contextTypes = { theme: _propTypes2.default.object };

IconNB.propTypes = {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) };

var StyledIconNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.IconNB", {}, _mapPropsToStyleNames2.default)(IconNB);exports.IconNB = StyledIconNB;
}, 561, null, "native-base/dist/src/basic/IconNB.js");
__d(/* react-native-vector-icons/Ionicons.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _Ionicons = require(611                        ); // 611 = ./glyphmaps/Ionicons.json

var _Ionicons2 = _interopRequireDefault(_Ionicons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_Ionicons2.default, 'Ionicons', 'Ionicons.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 562, null, "react-native-vector-icons/Ionicons.js");
__d(/* react-native-vector-icons/lib/create-icon-set.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-vector-icons\\lib\\create-icon-set.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createIconSet;

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require(564             ); // 564 = ./react-native

var _iconButton = require(565            ); // 565 = ./icon-button

var _iconButton2 = _interopRequireDefault(_iconButton);

var _tabBarItemIos = require(608                 ); // 608 = ./tab-bar-item-ios

var _tabBarItemIos2 = _interopRequireDefault(_tabBarItemIos);

var _toolbarAndroid = require(610                ); // 610 = ./toolbar-android

var _toolbarAndroid2 = _interopRequireDefault(_toolbarAndroid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  Icon: {
    displayName: 'Icon',
    isInFunction: true
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-vector-icons/lib/create-icon-set.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;

var DEFAULT_ICON_SIZE = 12;
var DEFAULT_ICON_COLOR = 'black';

function createIconSet(glyphMap, fontFamily, fontFile) {
  var _class, _temp2;

  var fontReference = fontFamily;

  if (_reactNative.Platform.OS === 'android' && fontFile) {
    fontReference = fontFile.replace(/\.(otf|ttf)$/, '');
  }

  if (_reactNative.Platform.OS === 'windows' && fontFile) {
    fontReference = 'Assets/' + fontFile + '#' + fontFamily;
  }

  var IconNamePropType = _propTypes2.default.oneOf(Object.keys(glyphMap));

  var Icon = _wrapComponent('Icon')((_temp2 = _class = function (_Component) {
    _inherits(Icon, _Component);

    function Icon() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Icon);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Icon.__proto__ || Object.getPrototypeOf(Icon)).call.apply(_ref, [this].concat(args))), _this), _this.root = null, _this.handleRef = function (ref) {
        _this.root = ref;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Icon, [{
      key: 'setNativeProps',
      value: function setNativeProps(nativeProps) {
        if (this.root) {
          this.root.setNativeProps(nativeProps);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            name = _props.name,
            size = _props.size,
            color = _props.color,
            style = _props.style,
            props = _objectWithoutProperties(_props, ['name', 'size', 'color', 'style']);

        var glyph = glyphMap[name] || '?';
        if (typeof glyph === 'number') {
          glyph = String.fromCharCode(glyph);
        }

        var styleDefaults = {
          fontSize: size,
          color: color
        };

        var styleOverrides = {
          fontFamily: fontReference,
          fontWeight: 'normal',
          fontStyle: 'normal'
        };

        props.style = [styleDefaults, style, styleOverrides];
        props.ref = this.handleRef;

        return _react3.default.createElement(
          _reactNative.Text,
          _extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          }),
          glyph,
          this.props.children
        );
      }
    }]);

    return Icon;
  }(_react2.Component), _class.propTypes = {
    name: IconNamePropType.isRequired,
    size: _propTypes2.default.number,
    color: _propTypes2.default.string,
    children: _propTypes2.default.node,
    style: _propTypes2.default.any }, _class.defaultProps = {
    size: DEFAULT_ICON_SIZE,
    allowFontScaling: false
  }, _temp2));

  var imageSourceCache = {};

  function getImageSource(name) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;

    if (!NativeIconAPI) {
      if (_reactNative.Platform.OS === 'android') {
        throw new Error('RNVectorIconsModule not available, did you properly integrate the module?');
      }
      throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a?');
    }

    var glyph = glyphMap[name] || '?';
    if (typeof glyph === 'number') {
      glyph = String.fromCharCode(glyph);
    }

    var processedColor = (0, _reactNative.processColor)(color);
    var cacheKey = glyph + ':' + size + ':' + processedColor;
    var scale = _reactNative.PixelRatio.get();

    return new Promise(function (resolve, reject) {
      var cached = imageSourceCache[cacheKey];
      if (typeof cached !== 'undefined') {
        if (!cached || cached instanceof Error) {
          reject(cached);
        } else {
          resolve({ uri: cached, scale: scale });
        }
      } else {
        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {
          var error = typeof err === 'string' ? new Error(err) : err;
          imageSourceCache[cacheKey] = image || error || false;
          if (!error && image) {
            resolve({ uri: image, scale: scale });
          } else {
            reject(error);
          }
        });
      }
    });
  }

  Icon.Button = (0, _iconButton2.default)(Icon);
  Icon.TabBarItem = (0, _tabBarItemIos2.default)(IconNamePropType, getImageSource);
  Icon.TabBarItemIOS = Icon.TabBarItem;
  Icon.ToolbarAndroid = (0, _toolbarAndroid2.default)(IconNamePropType, getImageSource);
  Icon.getImageSource = getImageSource;

  return Icon;
}
}, 563, null, "react-native-vector-icons/lib/create-icon-set.js");
__d(/* react-native-vector-icons/lib/react-native.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require(181           ); // 181 = react-native

Object.keys(_reactNative).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _reactNative[key];
    }
  });
});
}, 564, null, "react-native-vector-icons/lib/react-native.js");
__d(/* react-native-vector-icons/lib/icon-button.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-vector-icons\\lib\\icon-button.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createIconButtonComponent;

var _isString = require(566              ); // 566 = lodash/isString

var _isString2 = _interopRequireDefault(_isString);

var _omit = require(567          ); // 567 = lodash/omit

var _omit2 = _interopRequireDefault(_omit);

var _pick = require(604          ); // 604 = lodash/pick

var _pick2 = _interopRequireDefault(_pick);

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require(564             ); // 564 = ./react-native

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  IconButton: {
    displayName: 'IconButton',
    isInFunction: true
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-vector-icons/lib/icon-button.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    padding: 8
  },
  touchable: {
    overflow: 'hidden'
  },
  icon: {
    marginRight: 10
  },
  text: {
    fontWeight: '600',
    backgroundColor: 'transparent'
  }
});

var IOS7_BLUE = '#007AFF';

function createIconButtonComponent(Icon) {
  var _class, _temp;

  return _wrapComponent('IconButton')((_temp = _class = function (_Component) {
    _inherits(IconButton, _Component);

    function IconButton() {
      _classCallCheck(this, IconButton);

      return _possibleConstructorReturn(this, (IconButton.__proto__ || Object.getPrototypeOf(IconButton)).apply(this, arguments));
    }

    _createClass(IconButton, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            style = _props.style,
            iconStyle = _props.iconStyle,
            children = _props.children,
            restProps = _objectWithoutProperties(_props, ['style', 'iconStyle', 'children']);

        var iconProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.Text.propTypes), 'style', 'name', 'size', 'color');
        var touchableProps = (0, _pick2.default)(restProps, Object.keys(_reactNative.TouchableHighlight.propTypes));
        var props = (0, _omit2.default)(restProps, Object.keys(iconProps), Object.keys(touchableProps), 'iconStyle', 'borderRadius', 'backgroundColor');
        iconProps.style = iconStyle ? [styles.icon, iconStyle] : styles.icon;

        var colorStyle = (0, _pick2.default)(this.props, 'color');
        var blockStyle = (0, _pick2.default)(this.props, 'backgroundColor', 'borderRadius');

        return _react3.default.createElement(
          _reactNative.TouchableHighlight,
          _extends({
            style: [styles.touchable, blockStyle]
          }, touchableProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 77
            }
          }),
          _react3.default.createElement(
            _reactNative.View,
            _extends({ style: [styles.container, blockStyle, style] }, props, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 81
              }
            }),
            _react3.default.createElement(Icon, _extends({}, iconProps, {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 82
              }
            })),
            (0, _isString2.default)(children) ? _react3.default.createElement(
              _reactNative.Text,
              { style: [styles.text, colorStyle], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 84
                }
              },
              children
            ) : children
          )
        );
      }
    }]);

    return IconButton;
  }(_react2.Component), _class.propTypes = {
    backgroundColor: _propTypes2.default.string,
    borderRadius: _propTypes2.default.number,
    color: _propTypes2.default.string,
    size: _propTypes2.default.number,
    iconStyle: _propTypes2.default.any,
    style: _propTypes2.default.any,
    children: _propTypes2.default.node
  }, _class.defaultProps = {
    backgroundColor: IOS7_BLUE,
    borderRadius: 5,
    color: 'white',
    size: 20
  }, _temp));
}
}, 565, null, "react-native-vector-icons/lib/icon-button.js");
__d(/* lodash/isString.js */function(global, require, module, exports) {var baseGetTag = require(54             ), // 54 = ./_baseGetTag
    isArray = require(96         ), // 96 = ./isArray
    isObjectLike = require(105             ); // 105 = ./isObjectLike

var stringTag = '[object String]';

function isString(value) {
    return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
}

module.exports = isString;
}, 566, null, "lodash/isString.js");
__d(/* lodash/omit.js */function(global, require, module, exports) {var arrayMap = require(138          ), // 138 = ./_arrayMap
    baseClone = require(568           ), // 568 = ./_baseClone
    baseUnset = require(596           ), // 596 = ./_baseUnset
    castPath = require(130          ), // 130 = ./_castPath
    copyObject = require(157            ), // 157 = ./_copyObject
    customOmitClone = require(600                 ), // 600 = ./_customOmitClone
    flatRest = require(602          ), // 602 = ./_flatRest
    getAllKeysIn = require(581              ); // 581 = ./_getAllKeysIn

var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

var omit = flatRest(function (object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = arrayMap(paths, function (path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);
  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    baseUnset(result, paths[length]);
  }
  return result;
});

module.exports = omit;
}, 567, null, "lodash/omit.js");
__d(/* lodash/_baseClone.js */function(global, require, module, exports) {var Stack = require(36        ), // 36 = ./_Stack
    arrayEach = require(569           ), // 569 = ./_arrayEach
    assignValue = require(154             ), // 154 = ./_assignValue
    baseAssign = require(570            ), // 570 = ./_baseAssign
    baseAssignIn = require(571              ), // 571 = ./_baseAssignIn
    cloneBuffer = require(575             ), // 575 = ./_cloneBuffer
    copyArray = require(576           ), // 576 = ./_copyArray
    copySymbols = require(577             ), // 577 = ./_copySymbols
    copySymbolsIn = require(578               ), // 578 = ./_copySymbolsIn
    getAllKeys = require(93             ), // 93 = ./_getAllKeys
    getAllKeysIn = require(581              ), // 581 = ./_getAllKeysIn
    getTag = require(119        ), // 119 = ./_getTag
    initCloneArray = require(582                ), // 582 = ./_initCloneArray
    initCloneByTag = require(583                ), // 583 = ./_initCloneByTag
    initCloneObject = require(594                 ), // 594 = ./_initCloneObject
    isArray = require(96         ), // 96 = ./isArray
    isBuffer = require(106         ), // 106 = ./isBuffer
    isObject = require(60          ), // 60 = ./isObject
    keys = require(100     ); // 100 = ./keys

var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }

  stack || (stack = new Stack());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }

    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;
}, 568, null, "lodash/_baseClone.js");
__d(/* lodash/_arrayEach.js */function(global, require, module, exports) {
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;
}, 569, null, "lodash/_arrayEach.js");
__d(/* lodash/_baseAssign.js */function(global, require, module, exports) {var copyObject = require(157            ), // 157 = ./_copyObject
    keys = require(100     ); // 100 = ./keys

function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;
}, 570, null, "lodash/_baseAssign.js");
__d(/* lodash/_baseAssignIn.js */function(global, require, module, exports) {var copyObject = require(157            ), // 157 = ./_copyObject
    keysIn = require(572       ); // 572 = ./keysIn

function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;
}, 571, null, "lodash/_baseAssignIn.js");
__d(/* lodash/keysIn.js */function(global, require, module, exports) {var arrayLikeKeys = require(101               ), // 101 = ./_arrayLikeKeys
    baseKeysIn = require(573            ), // 573 = ./_baseKeysIn
    isArrayLike = require(118            ); // 118 = ./isArrayLike

function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;
}, 572, null, "lodash/keysIn.js");
__d(/* lodash/_baseKeysIn.js */function(global, require, module, exports) {var isObject = require(60          ), // 60 = ./isObject
    isPrototype = require(115             ), // 115 = ./_isPrototype
    nativeKeysIn = require(574              ); // 574 = ./_nativeKeysIn

var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;
}, 573, null, "lodash/_baseKeysIn.js");
__d(/* lodash/_nativeKeysIn.js */function(global, require, module, exports) {
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;
}, 574, null, "lodash/_nativeKeysIn.js");
__d(/* lodash/_cloneBuffer.js */function(global, require, module, exports) {var root = require(56       ); // 56 = ./_root

var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

var moduleExports = freeModule && freeModule.exports === freeExports;

var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;
}, 575, null, "lodash/_cloneBuffer.js");
__d(/* lodash/_copyArray.js */function(global, require, module, exports) {
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;
}, 576, null, "lodash/_copyArray.js");
__d(/* lodash/_copySymbols.js */function(global, require, module, exports) {var copyObject = require(157            ), // 157 = ./_copyObject
    getSymbols = require(97             ); // 97 = ./_getSymbols

function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;
}, 577, null, "lodash/_copySymbols.js");
__d(/* lodash/_copySymbolsIn.js */function(global, require, module, exports) {var copyObject = require(157            ), // 157 = ./_copyObject
    getSymbolsIn = require(579              ); // 579 = ./_getSymbolsIn

function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;
}, 578, null, "lodash/_copySymbolsIn.js");
__d(/* lodash/_getSymbolsIn.js */function(global, require, module, exports) {var arrayPush = require(95            ), // 95 = ./_arrayPush
    getPrototype = require(580              ), // 580 = ./_getPrototype
    getSymbols = require(97             ), // 97 = ./_getSymbols
    stubArray = require(99           ); // 99 = ./stubArray

var nativeGetSymbols = Object.getOwnPropertySymbols;

var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;
}, 579, null, "lodash/_getSymbolsIn.js");
__d(/* lodash/_getPrototype.js */function(global, require, module, exports) {var overArg = require(117         ); // 117 = ./_overArg

var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;
}, 580, null, "lodash/_getPrototype.js");
__d(/* lodash/_getAllKeysIn.js */function(global, require, module, exports) {var baseGetAllKeys = require(94                 ), // 94 = ./_baseGetAllKeys
    getSymbolsIn = require(579              ), // 579 = ./_getSymbolsIn
    keysIn = require(572       ); // 572 = ./keysIn

function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;
}, 581, null, "lodash/_getAllKeysIn.js");
__d(/* lodash/_initCloneArray.js */function(global, require, module, exports) {
var objectProto = Object.prototype;

var hasOwnProperty = objectProto.hasOwnProperty;

function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;
}, 582, null, "lodash/_initCloneArray.js");
__d(/* lodash/_initCloneByTag.js */function(global, require, module, exports) {var cloneArrayBuffer = require(584                  ), // 584 = ./_cloneArrayBuffer
    cloneDataView = require(585               ), // 585 = ./_cloneDataView
    cloneMap = require(586          ), // 586 = ./_cloneMap
    cloneRegExp = require(589             ), // 589 = ./_cloneRegExp
    cloneSet = require(590          ), // 590 = ./_cloneSet
    cloneSymbol = require(592             ), // 592 = ./_cloneSymbol
    cloneTypedArray = require(593                 ); // 593 = ./_cloneTypedArray

var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag:case float64Tag:
    case int8Tag:case int16Tag:case int32Tag:
    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;
}, 583, null, "lodash/_initCloneByTag.js");
__d(/* lodash/_cloneArrayBuffer.js */function(global, require, module, exports) {var Uint8Array = require(89             ); // 89 = ./_Uint8Array

function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;
}, 584, null, "lodash/_cloneArrayBuffer.js");
__d(/* lodash/_cloneDataView.js */function(global, require, module, exports) {var cloneArrayBuffer = require(584                  ); // 584 = ./_cloneArrayBuffer

function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;
}, 585, null, "lodash/_cloneDataView.js");
__d(/* lodash/_cloneMap.js */function(global, require, module, exports) {var addMapEntry = require(587             ), // 587 = ./_addMapEntry
    arrayReduce = require(588             ), // 588 = ./_arrayReduce
    mapToArray = require(90             ); // 90 = ./_mapToArray

var CLONE_DEEP_FLAG = 1;

function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor());
}

module.exports = cloneMap;
}, 586, null, "lodash/_cloneMap.js");
__d(/* lodash/_addMapEntry.js */function(global, require, module, exports) {
function addMapEntry(map, pair) {
  map.set(pair[0], pair[1]);
  return map;
}

module.exports = addMapEntry;
}, 587, null, "lodash/_addMapEntry.js");
__d(/* lodash/_arrayReduce.js */function(global, require, module, exports) {
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;
}, 588, null, "lodash/_arrayReduce.js");
__d(/* lodash/_cloneRegExp.js */function(global, require, module, exports) {
var reFlags = /\w*$/;

function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;
}, 589, null, "lodash/_cloneRegExp.js");
__d(/* lodash/_cloneSet.js */function(global, require, module, exports) {var addSetEntry = require(591             ), // 591 = ./_addSetEntry
    arrayReduce = require(588             ), // 588 = ./_arrayReduce
    setToArray = require(91             ); // 91 = ./_setToArray

var CLONE_DEEP_FLAG = 1;

function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor());
}

module.exports = cloneSet;
}, 590, null, "lodash/_cloneSet.js");
__d(/* lodash/_addSetEntry.js */function(global, require, module, exports) {
function addSetEntry(set, value) {
  set.add(value);
  return set;
}

module.exports = addSetEntry;
}, 591, null, "lodash/_addSetEntry.js");
__d(/* lodash/_cloneSymbol.js */function(global, require, module, exports) {var Symbol = require(55         ); // 55 = ./_Symbol

var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;
}, 592, null, "lodash/_cloneSymbol.js");
__d(/* lodash/_cloneTypedArray.js */function(global, require, module, exports) {var cloneArrayBuffer = require(584                  ); // 584 = ./_cloneArrayBuffer

function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;
}, 593, null, "lodash/_cloneTypedArray.js");
__d(/* lodash/_initCloneObject.js */function(global, require, module, exports) {var baseCreate = require(595            ), // 595 = ./_baseCreate
    getPrototype = require(580              ), // 580 = ./_getPrototype
    isPrototype = require(115             ); // 115 = ./_isPrototype

function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}

module.exports = initCloneObject;
}, 594, null, "lodash/_initCloneObject.js");
__d(/* lodash/_baseCreate.js */function(global, require, module, exports) {var isObject = require(60          ); // 60 = ./isObject

var objectCreate = Object.create;

var baseCreate = function () {
  function object() {}
  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

module.exports = baseCreate;
}, 595, null, "lodash/_baseCreate.js");
__d(/* lodash/_baseUnset.js */function(global, require, module, exports) {var castPath = require(130          ), // 130 = ./_castPath
    last = require(597     ), // 597 = ./last
    parent = require(598        ), // 598 = ./_parent
    toKey = require(139       ); // 139 = ./_toKey

function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;
}, 596, null, "lodash/_baseUnset.js");
__d(/* lodash/last.js */function(global, require, module, exports) {
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;
}, 597, null, "lodash/last.js");
__d(/* lodash/_parent.js */function(global, require, module, exports) {var baseGet = require(129         ), // 129 = ./_baseGet
    baseSlice = require(599           ); // 599 = ./_baseSlice

function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;
}, 598, null, "lodash/_parent.js");
__d(/* lodash/_baseSlice.js */function(global, require, module, exports) {
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;
}, 599, null, "lodash/_baseSlice.js");
__d(/* lodash/_customOmitClone.js */function(global, require, module, exports) {var isPlainObject = require(601              ); // 601 = ./isPlainObject

function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

module.exports = customOmitClone;
}, 600, null, "lodash/_customOmitClone.js");
__d(/* lodash/isPlainObject.js */function(global, require, module, exports) {var baseGetTag = require(54             ), // 54 = ./_baseGetTag
    getPrototype = require(580              ), // 580 = ./_getPrototype
    isObjectLike = require(105             ); // 105 = ./isObjectLike

var objectTag = '[object Object]';

var funcProto = Function.prototype,
    objectProto = Object.prototype;

var funcToString = funcProto.toString;

var hasOwnProperty = objectProto.hasOwnProperty;

var objectCtorString = funcToString.call(Object);

function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;
}, 601, null, "lodash/isPlainObject.js");
__d(/* lodash/_flatRest.js */function(global, require, module, exports) {var flatten = require(603        ), // 603 = ./flatten
    overRest = require(160          ), // 160 = ./_overRest
    setToString = require(162             ); // 162 = ./_setToString

function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;
}, 602, null, "lodash/_flatRest.js");
__d(/* lodash/flatten.js */function(global, require, module, exports) {var baseFlatten = require(174             ); // 174 = ./_baseFlatten

function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;
}, 603, null, "lodash/flatten.js");
__d(/* lodash/pick.js */function(global, require, module, exports) {var basePick = require(605          ), // 605 = ./_basePick
    flatRest = require(602          ); // 602 = ./_flatRest

var pick = flatRest(function (object, paths) {
  return object == null ? {} : basePick(object, paths);
});

module.exports = pick;
}, 604, null, "lodash/pick.js");
__d(/* lodash/_basePick.js */function(global, require, module, exports) {var basePickBy = require(606            ), // 606 = ./_basePickBy
    hasIn = require(140      ); // 140 = ./hasIn

function basePick(object, paths) {
  return basePickBy(object, paths, function (value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;
}, 605, null, "lodash/_basePick.js");
__d(/* lodash/_basePickBy.js */function(global, require, module, exports) {var baseGet = require(129         ), // 129 = ./_baseGet
    baseSet = require(607         ), // 607 = ./_baseSet
    castPath = require(130          ); // 130 = ./_castPath

function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
        }
    }
    return result;
}

module.exports = basePickBy;
}, 606, null, "lodash/_basePickBy.js");
__d(/* lodash/_baseSet.js */function(global, require, module, exports) {var assignValue = require(154             ), // 154 = ./_assignValue
    castPath = require(130          ), // 130 = ./_castPath
    isIndex = require(108         ), // 108 = ./_isIndex
    isObject = require(60          ), // 60 = ./isObject
    toKey = require(139       ); // 139 = ./_toKey

function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;
}, 607, null, "lodash/_baseSet.js");
__d(/* react-native-vector-icons/lib/tab-bar-item-ios.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-vector-icons\\lib\\tab-bar-item-ios.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createTabBarItemIOSComponent;

var _isEqual = require(609             ); // 609 = lodash/isEqual

var _isEqual2 = _interopRequireDefault(_isEqual);

var _pick = require(604          ); // 604 = lodash/pick

var _pick2 = _interopRequireDefault(_pick);

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require(564             ); // 564 = ./react-native

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  TabBarItemIOS: {
    displayName: 'TabBarItemIOS',
    isInFunction: true
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-vector-icons/lib/tab-bar-item-ios.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

function createTabBarItemIOSComponent(IconNamePropType, getImageSource) {
  var _class, _temp;

  return _wrapComponent('TabBarItemIOS')((_temp = _class = function (_Component) {
    _inherits(TabBarItemIOS, _Component);

    function TabBarItemIOS() {
      _classCallCheck(this, TabBarItemIOS);

      return _possibleConstructorReturn(this, (TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).apply(this, arguments));
    }

    _createClass(TabBarItemIOS, [{
      key: 'updateIconSources',
      value: function updateIconSources(props) {
        var _this2 = this;

        if (props.iconName) {
          getImageSource(props.iconName, props.iconSize, props.iconColor).then(function (icon) {
            return _this2.setState({ icon: icon });
          });
        }
        if (props.selectedIconName || props.selectedIconColor) {
          var selectedIconName = props.selectedIconName || props.iconName;
          var selectedIconColor = props.selectedIconColor || props.iconColor;
          getImageSource(selectedIconName, props.iconSize, selectedIconColor).then(function (selectedIcon) {
            return _this2.setState({ selectedIcon: selectedIcon });
          });
        }
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.updateIconSources(this.props);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var keys = Object.keys(TabBarItemIOS.propTypes);
        if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
          this.updateIconSources(nextProps);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return _react3.default.createElement(_reactNative.TabBarIOS.Item, _extends({}, this.props, this.state, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 55
          }
        }));
      }
    }]);

    return TabBarItemIOS;
  }(_react2.Component), _class.propTypes = {
    iconName: IconNamePropType.isRequired,
    selectedIconName: IconNamePropType,
    iconSize: _propTypes2.default.number,
    iconColor: _propTypes2.default.string,
    selectedIconColor: _propTypes2.default.string
  }, _class.defaultProps = {
    iconSize: 30
  }, _temp));
}
}, 608, null, "react-native-vector-icons/lib/tab-bar-item-ios.js");
__d(/* lodash/isEqual.js */function(global, require, module, exports) {var baseIsEqual = require(80              ); // 80 = ./_baseIsEqual

function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;
}, 609, null, "lodash/isEqual.js");
__d(/* react-native-vector-icons/lib/toolbar-android.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                        ); // 27 = ./../../react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-vector-icons\\lib\\toolbar-android.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createToolbarAndroidComponent;

var _isEqual = require(609             ); // 609 = lodash/isEqual

var _isEqual2 = _interopRequireDefault(_isEqual);

var _pick = require(604          ); // 604 = lodash/pick

var _pick2 = _interopRequireDefault(_pick);

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require(564             ); // 564 = ./react-native

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  IconToolbarAndroid: {
    displayName: 'IconToolbarAndroid',
    isInFunction: true
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/node_modules/react-native-vector-icons/lib/toolbar-android.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

function createToolbarAndroidComponent(IconNamePropType, getImageSource) {
  var _class, _temp;

  return _wrapComponent('IconToolbarAndroid')((_temp = _class = function (_Component) {
    _inherits(IconToolbarAndroid, _Component);

    function IconToolbarAndroid() {
      _classCallCheck(this, IconToolbarAndroid);

      return _possibleConstructorReturn(this, (IconToolbarAndroid.__proto__ || Object.getPrototypeOf(IconToolbarAndroid)).apply(this, arguments));
    }

    _createClass(IconToolbarAndroid, [{
      key: 'updateIconSources',
      value: function updateIconSources(props) {
        var _this2 = this;

        var size = props.iconSize;
        var color = props.iconColor || props.titleColor;
        if (props.logoName) {
          getImageSource(props.logoName, size, color).then(function (logo) {
            return _this2.setState({ logo: logo });
          });
        }
        if (props.navIconName) {
          getImageSource(props.navIconName, size, color).then(function (navIcon) {
            return _this2.setState({ navIcon: navIcon });
          });
        }
        if (props.overflowIconName) {
          getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {
            return _this2.setState({ overflowIcon: overflowIcon });
          });
        }

        Promise.all((props.actions || []).map(function (action) {
          if (action.iconName) {
            return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {
              return _extends({}, action, { icon: icon });
            });
          }
          return Promise.resolve(action);
        })).then(function (actions) {
          return _this2.setState({ actions: actions });
        });
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.updateIconSources(this.props);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        var _this3 = this;

        var keys = Object.keys(IconToolbarAndroid.propTypes);
        if (!(0, _isEqual2.default)((0, _pick2.default)(nextProps, keys), (0, _pick2.default)(this.props, keys))) {
          var stateToEvict = {};
          if (!nextProps.logoName) {
            stateToEvict.logo = undefined;
          }
          if (!nextProps.navIconName) {
            stateToEvict.navIcon = undefined;
          }
          if (!nextProps.overflowIconName) {
            stateToEvict.overflowIcon = undefined;
          }
          if (this.state && Object.keys(stateToEvict).length) {
            this.setState(stateToEvict, function () {
              return _this3.updateIconSources(nextProps);
            });
          } else {
            this.updateIconSources(nextProps);
          }
        }
      }
    }, {
      key: 'render',
      value: function render() {
        return _react3.default.createElement(_reactNative.ToolbarAndroid, _extends({}, this.props, this.state, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 93
          }
        }));
      }
    }]);

    return IconToolbarAndroid;
  }(_react2.Component), _class.propTypes = {
    logoIconName: IconNamePropType,
    navIconName: IconNamePropType,
    overflowIconName: IconNamePropType,
    actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
      title: _propTypes2.default.string.isRequired,
      iconName: IconNamePropType,
      iconSize: _propTypes2.default.number,
      iconColor: _propTypes2.default.string,
      show: _propTypes2.default.oneOf(['always', 'ifRoom', 'never']),
      showWithText: _propTypes2.default.bool
    })),
    iconSize: _propTypes2.default.number,
    iconColor: _propTypes2.default.string
  }, _class.defaultProps = {
    iconSize: 24
  }, _temp));
}
}, 610, null, "react-native-vector-icons/lib/toolbar-android.js");
__d(/* react-native-vector-icons/glyphmaps/Ionicons.json */function(global, require, module, exports) {module.exports = module.exports = {
  "ios-add": 61698,
  "ios-add-circle": 61697,
  "ios-add-circle-outline": 61696,
  "ios-add-outline": 61698,
  "ios-alarm": 62408,
  "ios-alarm-outline": 62407,
  "ios-albums": 62410,
  "ios-albums-outline": 62409,
  "ios-alert": 61700,
  "ios-alert-outline": 61699,
  "ios-american-football": 61702,
  "ios-american-football-outline": 61701,
  "ios-analytics": 62414,
  "ios-analytics-outline": 62413,
  "ios-aperture": 61704,
  "ios-aperture-outline": 61703,
  "ios-apps": 61706,
  "ios-apps-outline": 61705,
  "ios-appstore": 61708,
  "ios-appstore-outline": 61707,
  "ios-archive": 61710,
  "ios-archive-outline": 61709,
  "ios-arrow-back": 62415,
  "ios-arrow-back-outline": 62415,
  "ios-arrow-down": 62416,
  "ios-arrow-down-outline": 62416,
  "ios-arrow-dropdown": 61712,
  "ios-arrow-dropdown-circle": 61711,
  "ios-arrow-dropdown-circle-outline": 61711,
  "ios-arrow-dropdown-outline": 61712,
  "ios-arrow-dropleft": 61714,
  "ios-arrow-dropleft-circle": 61713,
  "ios-arrow-dropleft-circle-outline": 61713,
  "ios-arrow-dropleft-outline": 61714,
  "ios-arrow-dropright": 61716,
  "ios-arrow-dropright-circle": 61715,
  "ios-arrow-dropright-circle-outline": 61715,
  "ios-arrow-dropright-outline": 61716,
  "ios-arrow-dropup": 61718,
  "ios-arrow-dropup-circle": 61717,
  "ios-arrow-dropup-circle-outline": 61717,
  "ios-arrow-dropup-outline": 61718,
  "ios-arrow-forward": 62417,
  "ios-arrow-forward-outline": 62417,
  "ios-arrow-round-back": 61719,
  "ios-arrow-round-back-outline": 61719,
  "ios-arrow-round-down": 61720,
  "ios-arrow-round-down-outline": 61720,
  "ios-arrow-round-forward": 61721,
  "ios-arrow-round-forward-outline": 61721,
  "ios-arrow-round-up": 61722,
  "ios-arrow-round-up-outline": 61722,
  "ios-arrow-up": 62424,
  "ios-arrow-up-outline": 62424,
  "ios-at": 62426,
  "ios-at-outline": 62425,
  "ios-attach": 61723,
  "ios-attach-outline": 61723,
  "ios-backspace": 61725,
  "ios-backspace-outline": 61724,
  "ios-barcode": 62428,
  "ios-barcode-outline": 62427,
  "ios-baseball": 62430,
  "ios-baseball-outline": 62429,
  "ios-basket": 61727,
  "ios-basket-outline": 61726,
  "ios-basketball": 62432,
  "ios-basketball-outline": 62431,
  "ios-battery-charging": 61728,
  "ios-battery-charging-outline": 61728,
  "ios-battery-dead": 61729,
  "ios-battery-dead-outline": 61729,
  "ios-battery-full": 61730,
  "ios-battery-full-outline": 61730,
  "ios-beaker": 61732,
  "ios-beaker-outline": 61731,
  "ios-beer": 61734,
  "ios-beer-outline": 61733,
  "ios-bicycle": 61735,
  "ios-bicycle-outline": 61735,
  "ios-bluetooth": 61736,
  "ios-bluetooth-outline": 61736,
  "ios-boat": 61738,
  "ios-boat-outline": 61737,
  "ios-body": 62436,
  "ios-body-outline": 62435,
  "ios-bonfire": 61740,
  "ios-bonfire-outline": 61739,
  "ios-book": 62440,
  "ios-book-outline": 62439,
  "ios-bookmark": 61742,
  "ios-bookmark-outline": 61741,
  "ios-bookmarks": 62442,
  "ios-bookmarks-outline": 62441,
  "ios-bowtie": 61744,
  "ios-bowtie-outline": 61743,
  "ios-briefcase": 62446,
  "ios-briefcase-outline": 62445,
  "ios-browsers": 62448,
  "ios-browsers-outline": 62447,
  "ios-brush": 61746,
  "ios-brush-outline": 61745,
  "ios-bug": 61748,
  "ios-bug-outline": 61747,
  "ios-build": 61750,
  "ios-build-outline": 61749,
  "ios-bulb": 61752,
  "ios-bulb-outline": 61751,
  "ios-bus": 61754,
  "ios-bus-outline": 61753,
  "ios-cafe": 61756,
  "ios-cafe-outline": 61755,
  "ios-calculator": 62450,
  "ios-calculator-outline": 62449,
  "ios-calendar": 62452,
  "ios-calendar-outline": 62451,
  "ios-call": 61758,
  "ios-call-outline": 61757,
  "ios-camera": 62454,
  "ios-camera-outline": 62453,
  "ios-car": 61760,
  "ios-car-outline": 61759,
  "ios-card": 61762,
  "ios-card-outline": 61761,
  "ios-cart": 62456,
  "ios-cart-outline": 62455,
  "ios-cash": 61764,
  "ios-cash-outline": 61763,
  "ios-chatboxes": 62458,
  "ios-chatboxes-outline": 62457,
  "ios-chatbubbles": 61766,
  "ios-chatbubbles-outline": 61765,
  "ios-checkbox": 61768,
  "ios-checkbox-outline": 61767,
  "ios-checkmark": 62463,
  "ios-checkmark-circle": 61770,
  "ios-checkmark-circle-outline": 61769,
  "ios-checkmark-outline": 62463,
  "ios-clipboard": 61772,
  "ios-clipboard-outline": 61771,
  "ios-clock": 62467,
  "ios-clock-outline": 62466,
  "ios-close": 62470,
  "ios-close-circle": 61774,
  "ios-close-circle-outline": 61773,
  "ios-close-outline": 62470,
  "ios-closed-captioning": 61776,
  "ios-closed-captioning-outline": 61775,
  "ios-cloud": 62476,
  "ios-cloud-circle": 61778,
  "ios-cloud-circle-outline": 61777,
  "ios-cloud-done": 61780,
  "ios-cloud-done-outline": 61779,
  "ios-cloud-download": 62472,
  "ios-cloud-download-outline": 62471,
  "ios-cloud-outline": 62473,
  "ios-cloud-upload": 62475,
  "ios-cloud-upload-outline": 62474,
  "ios-cloudy": 62480,
  "ios-cloudy-night": 62478,
  "ios-cloudy-night-outline": 62477,
  "ios-cloudy-outline": 62479,
  "ios-code": 61783,
  "ios-code-download": 61781,
  "ios-code-download-outline": 61781,
  "ios-code-outline": 61783,
  "ios-code-working": 61782,
  "ios-code-working-outline": 61782,
  "ios-cog": 62482,
  "ios-cog-outline": 62481,
  "ios-color-fill": 61785,
  "ios-color-fill-outline": 61784,
  "ios-color-filter": 62484,
  "ios-color-filter-outline": 62483,
  "ios-color-palette": 61787,
  "ios-color-palette-outline": 61786,
  "ios-color-wand": 62486,
  "ios-color-wand-outline": 62485,
  "ios-compass": 61789,
  "ios-compass-outline": 61788,
  "ios-construct": 61791,
  "ios-construct-outline": 61790,
  "ios-contact": 62490,
  "ios-contact-outline": 62489,
  "ios-contacts": 61793,
  "ios-contacts-outline": 61792,
  "ios-contract": 61794,
  "ios-contract-outline": 61794,
  "ios-contrast": 61795,
  "ios-contrast-outline": 61795,
  "ios-copy": 62492,
  "ios-copy-outline": 62491,
  "ios-create": 61797,
  "ios-create-outline": 61796,
  "ios-crop": 62494,
  "ios-crop-outline": 61798,
  "ios-cube": 61800,
  "ios-cube-outline": 61799,
  "ios-cut": 61802,
  "ios-cut-outline": 61801,
  "ios-desktop": 61804,
  "ios-desktop-outline": 61803,
  "ios-disc": 61806,
  "ios-disc-outline": 61805,
  "ios-document": 61808,
  "ios-document-outline": 61807,
  "ios-done-all": 61809,
  "ios-done-all-outline": 61809,
  "ios-download": 62496,
  "ios-download-outline": 62495,
  "ios-easel": 61811,
  "ios-easel-outline": 61810,
  "ios-egg": 61813,
  "ios-egg-outline": 61812,
  "ios-exit": 61815,
  "ios-exit-outline": 61814,
  "ios-expand": 61816,
  "ios-expand-outline": 61816,
  "ios-eye": 62501,
  "ios-eye-off": 61818,
  "ios-eye-off-outline": 61817,
  "ios-eye-outline": 62500,
  "ios-fastforward": 62503,
  "ios-fastforward-outline": 62502,
  "ios-female": 61819,
  "ios-female-outline": 61819,
  "ios-filing": 62505,
  "ios-filing-outline": 62504,
  "ios-film": 62507,
  "ios-film-outline": 62506,
  "ios-finger-print": 61820,
  "ios-finger-print-outline": 61820,
  "ios-flag": 62509,
  "ios-flag-outline": 62508,
  "ios-flame": 62511,
  "ios-flame-outline": 62510,
  "ios-flash": 61822,
  "ios-flash-outline": 61821,
  "ios-flask": 62513,
  "ios-flask-outline": 62512,
  "ios-flower": 62515,
  "ios-flower-outline": 62514,
  "ios-folder": 62517,
  "ios-folder-open": 61824,
  "ios-folder-open-outline": 61823,
  "ios-folder-outline": 62516,
  "ios-football": 62519,
  "ios-football-outline": 62518,
  "ios-funnel": 61826,
  "ios-funnel-outline": 61825,
  "ios-game-controller-a": 62521,
  "ios-game-controller-a-outline": 62520,
  "ios-game-controller-b": 62523,
  "ios-game-controller-b-outline": 62522,
  "ios-git-branch": 61827,
  "ios-git-branch-outline": 61827,
  "ios-git-commit": 61828,
  "ios-git-commit-outline": 61828,
  "ios-git-compare": 61829,
  "ios-git-compare-outline": 61829,
  "ios-git-merge": 61830,
  "ios-git-merge-outline": 61830,
  "ios-git-network": 61831,
  "ios-git-network-outline": 61831,
  "ios-git-pull-request": 61832,
  "ios-git-pull-request-outline": 61832,
  "ios-glasses": 62527,
  "ios-glasses-outline": 62526,
  "ios-globe": 61834,
  "ios-globe-outline": 61833,
  "ios-grid": 61836,
  "ios-grid-outline": 61835,
  "ios-hammer": 61838,
  "ios-hammer-outline": 61837,
  "ios-hand": 61840,
  "ios-hand-outline": 61839,
  "ios-happy": 61842,
  "ios-happy-outline": 61841,
  "ios-headset": 61844,
  "ios-headset-outline": 61843,
  "ios-heart": 62531,
  "ios-heart-outline": 62530,
  "ios-help": 62534,
  "ios-help-buoy": 61846,
  "ios-help-buoy-outline": 61845,
  "ios-help-circle": 61848,
  "ios-help-circle-outline": 61847,
  "ios-help-outline": 62534,
  "ios-home": 62536,
  "ios-home-outline": 62535,
  "ios-ice-cream": 61850,
  "ios-ice-cream-outline": 61849,
  "ios-image": 61852,
  "ios-image-outline": 61851,
  "ios-images": 61854,
  "ios-images-outline": 61853,
  "ios-infinite": 62538,
  "ios-infinite-outline": 62537,
  "ios-information": 62541,
  "ios-information-circle": 61856,
  "ios-information-circle-outline": 61855,
  "ios-information-outline": 62541,
  "ios-ionic": 61857,
  "ios-ionic-outline": 62542,
  "ios-ionitron": 61859,
  "ios-ionitron-outline": 61858,
  "ios-jet": 61861,
  "ios-jet-outline": 61860,
  "ios-key": 61863,
  "ios-key-outline": 61862,
  "ios-keypad": 62544,
  "ios-keypad-outline": 62543,
  "ios-laptop": 61864,
  "ios-laptop-outline": 61864,
  "ios-leaf": 61866,
  "ios-leaf-outline": 61865,
  "ios-link": 61994,
  "ios-link-outline": 61898,
  "ios-list": 62548,
  "ios-list-box": 61868,
  "ios-list-box-outline": 61867,
  "ios-list-outline": 62548,
  "ios-locate": 61870,
  "ios-locate-outline": 61869,
  "ios-lock": 61872,
  "ios-lock-outline": 61871,
  "ios-log-in": 61873,
  "ios-log-in-outline": 61873,
  "ios-log-out": 61874,
  "ios-log-out-outline": 61874,
  "ios-magnet": 61876,
  "ios-magnet-outline": 61875,
  "ios-mail": 61880,
  "ios-mail-open": 61878,
  "ios-mail-open-outline": 61877,
  "ios-mail-outline": 61879,
  "ios-male": 61881,
  "ios-male-outline": 61881,
  "ios-man": 61883,
  "ios-man-outline": 61882,
  "ios-map": 61885,
  "ios-map-outline": 61884,
  "ios-medal": 61887,
  "ios-medal-outline": 61886,
  "ios-medical": 62556,
  "ios-medical-outline": 62555,
  "ios-medkit": 62558,
  "ios-medkit-outline": 62557,
  "ios-megaphone": 61889,
  "ios-megaphone-outline": 61888,
  "ios-menu": 61891,
  "ios-menu-outline": 61890,
  "ios-mic": 62561,
  "ios-mic-off": 62559,
  "ios-mic-off-outline": 61892,
  "ios-mic-outline": 62560,
  "ios-microphone": 61894,
  "ios-microphone-outline": 61893,
  "ios-moon": 62568,
  "ios-moon-outline": 62567,
  "ios-more": 61896,
  "ios-more-outline": 61895,
  "ios-move": 61899,
  "ios-move-outline": 61899,
  "ios-musical-note": 62571,
  "ios-musical-note-outline": 61900,
  "ios-musical-notes": 62572,
  "ios-musical-notes-outline": 61901,
  "ios-navigate": 62574,
  "ios-navigate-outline": 62573,
  "ios-no-smoking": 61903,
  "ios-no-smoking-outline": 61902,
  "ios-notifications": 61907,
  "ios-notifications-off": 61905,
  "ios-notifications-off-outline": 61904,
  "ios-notifications-outline": 61906,
  "ios-nuclear": 61909,
  "ios-nuclear-outline": 61908,
  "ios-nutrition": 62576,
  "ios-nutrition-outline": 62575,
  "ios-open": 61911,
  "ios-open-outline": 61910,
  "ios-options": 61913,
  "ios-options-outline": 61912,
  "ios-outlet": 61915,
  "ios-outlet-outline": 61914,
  "ios-paper": 62578,
  "ios-paper-outline": 62577,
  "ios-paper-plane": 61917,
  "ios-paper-plane-outline": 61916,
  "ios-partly-sunny": 61919,
  "ios-partly-sunny-outline": 61918,
  "ios-pause": 62584,
  "ios-pause-outline": 62583,
  "ios-paw": 62586,
  "ios-paw-outline": 62585,
  "ios-people": 62588,
  "ios-people-outline": 62587,
  "ios-person": 62590,
  "ios-person-add": 61921,
  "ios-person-add-outline": 61920,
  "ios-person-outline": 62589,
  "ios-phone-landscape": 61922,
  "ios-phone-landscape-outline": 61922,
  "ios-phone-portrait": 61923,
  "ios-phone-portrait-outline": 61923,
  "ios-photos": 62594,
  "ios-photos-outline": 62593,
  "ios-pie": 62596,
  "ios-pie-outline": 62595,
  "ios-pin": 61925,
  "ios-pin-outline": 61924,
  "ios-pint": 62598,
  "ios-pint-outline": 62597,
  "ios-pizza": 61927,
  "ios-pizza-outline": 61926,
  "ios-plane": 61929,
  "ios-plane-outline": 61928,
  "ios-planet": 61931,
  "ios-planet-outline": 61930,
  "ios-play": 62600,
  "ios-play-outline": 62599,
  "ios-podium": 61933,
  "ios-podium-outline": 61932,
  "ios-power": 61935,
  "ios-power-outline": 61934,
  "ios-pricetag": 62605,
  "ios-pricetag-outline": 62604,
  "ios-pricetags": 62607,
  "ios-pricetags-outline": 62606,
  "ios-print": 61937,
  "ios-print-outline": 61936,
  "ios-pulse": 62611,
  "ios-pulse-outline": 61938,
  "ios-qr-scanner": 61939,
  "ios-qr-scanner-outline": 61939,
  "ios-quote": 61941,
  "ios-quote-outline": 61940,
  "ios-radio": 61945,
  "ios-radio-button-off": 61942,
  "ios-radio-button-off-outline": 61942,
  "ios-radio-button-on": 61943,
  "ios-radio-button-on-outline": 61943,
  "ios-radio-outline": 61944,
  "ios-rainy": 62613,
  "ios-rainy-outline": 62612,
  "ios-recording": 62615,
  "ios-recording-outline": 62614,
  "ios-redo": 62617,
  "ios-redo-outline": 62616,
  "ios-refresh": 62620,
  "ios-refresh-circle": 61990,
  "ios-refresh-circle-outline": 61988,
  "ios-refresh-outline": 62620,
  "ios-remove": 61948,
  "ios-remove-circle": 61947,
  "ios-remove-circle-outline": 61946,
  "ios-remove-outline": 61948,
  "ios-reorder": 61949,
  "ios-reorder-outline": 61949,
  "ios-repeat": 61950,
  "ios-repeat-outline": 61950,
  "ios-resize": 61951,
  "ios-resize-outline": 61951,
  "ios-restaurant": 61953,
  "ios-restaurant-outline": 61952,
  "ios-return-left": 61954,
  "ios-return-left-outline": 61954,
  "ios-return-right": 61955,
  "ios-return-right-outline": 61955,
  "ios-reverse-camera": 62623,
  "ios-reverse-camera-outline": 62622,
  "ios-rewind": 62625,
  "ios-rewind-outline": 62624,
  "ios-ribbon": 61957,
  "ios-ribbon-outline": 61956,
  "ios-rose": 62627,
  "ios-rose-outline": 62626,
  "ios-sad": 61959,
  "ios-sad-outline": 61958,
  "ios-school": 61961,
  "ios-school-outline": 61960,
  "ios-search": 62629,
  "ios-search-outline": 61962,
  "ios-send": 61964,
  "ios-send-outline": 61963,
  "ios-settings": 62631,
  "ios-settings-outline": 61965,
  "ios-share": 61969,
  "ios-share-alt": 61967,
  "ios-share-alt-outline": 61966,
  "ios-share-outline": 61968,
  "ios-shirt": 61971,
  "ios-shirt-outline": 61970,
  "ios-shuffle": 62633,
  "ios-shuffle-outline": 62633,
  "ios-skip-backward": 61973,
  "ios-skip-backward-outline": 61972,
  "ios-skip-forward": 61975,
  "ios-skip-forward-outline": 61974,
  "ios-snow": 61976,
  "ios-snow-outline": 61996,
  "ios-speedometer": 62640,
  "ios-speedometer-outline": 62639,
  "ios-square": 61978,
  "ios-square-outline": 61977,
  "ios-star": 62643,
  "ios-star-half": 62641,
  "ios-star-half-outline": 62641,
  "ios-star-outline": 62642,
  "ios-stats": 61980,
  "ios-stats-outline": 61979,
  "ios-stopwatch": 62645,
  "ios-stopwatch-outline": 62644,
  "ios-subway": 61982,
  "ios-subway-outline": 61981,
  "ios-sunny": 62647,
  "ios-sunny-outline": 62646,
  "ios-swap": 61983,
  "ios-swap-outline": 61983,
  "ios-switch": 61985,
  "ios-switch-outline": 61984,
  "ios-sync": 61986,
  "ios-sync-outline": 61986,
  "ios-tablet-landscape": 61987,
  "ios-tablet-landscape-outline": 61987,
  "ios-tablet-portrait": 62030,
  "ios-tablet-portrait-outline": 62030,
  "ios-tennisball": 62651,
  "ios-tennisball-outline": 62650,
  "ios-text": 62032,
  "ios-text-outline": 62031,
  "ios-thermometer": 62034,
  "ios-thermometer-outline": 62033,
  "ios-thumbs-down": 62036,
  "ios-thumbs-down-outline": 62035,
  "ios-thumbs-up": 62038,
  "ios-thumbs-up-outline": 62037,
  "ios-thunderstorm": 62653,
  "ios-thunderstorm-outline": 62652,
  "ios-time": 62655,
  "ios-time-outline": 62654,
  "ios-timer": 62657,
  "ios-timer-outline": 62656,
  "ios-train": 62040,
  "ios-train-outline": 62039,
  "ios-transgender": 62041,
  "ios-transgender-outline": 62041,
  "ios-trash": 62661,
  "ios-trash-outline": 62660,
  "ios-trending-down": 62042,
  "ios-trending-down-outline": 62042,
  "ios-trending-up": 62043,
  "ios-trending-up-outline": 62043,
  "ios-trophy": 62045,
  "ios-trophy-outline": 62044,
  "ios-umbrella": 62047,
  "ios-umbrella-outline": 62046,
  "ios-undo": 62663,
  "ios-undo-outline": 62662,
  "ios-unlock": 62049,
  "ios-unlock-outline": 62048,
  "ios-videocam": 62669,
  "ios-videocam-outline": 62668,
  "ios-volume-down": 62050,
  "ios-volume-down-outline": 62050,
  "ios-volume-mute": 62051,
  "ios-volume-mute-outline": 62051,
  "ios-volume-off": 62052,
  "ios-volume-off-outline": 62052,
  "ios-volume-up": 62053,
  "ios-volume-up-outline": 62053,
  "ios-walk": 62054,
  "ios-walk-outline": 62054,
  "ios-warning": 62056,
  "ios-warning-outline": 62055,
  "ios-watch": 62057,
  "ios-watch-outline": 62057,
  "ios-water": 62059,
  "ios-water-outline": 62058,
  "ios-wifi": 62061,
  "ios-wifi-outline": 62060,
  "ios-wine": 62063,
  "ios-wine-outline": 62062,
  "ios-woman": 62065,
  "ios-woman-outline": 62064,
  "logo-android": 61989,
  "logo-angular": 61991,
  "logo-apple": 61993,
  "logo-bitcoin": 61995,
  "logo-buffer": 61997,
  "logo-chrome": 61999,
  "logo-codepen": 62000,
  "logo-css3": 62001,
  "logo-designernews": 62002,
  "logo-dribbble": 62003,
  "logo-dropbox": 62004,
  "logo-euro": 62005,
  "logo-facebook": 62006,
  "logo-foursquare": 62007,
  "logo-freebsd-devil": 62008,
  "logo-github": 62009,
  "logo-google": 62010,
  "logo-googleplus": 62011,
  "logo-hackernews": 62012,
  "logo-html5": 62013,
  "logo-instagram": 62014,
  "logo-javascript": 62015,
  "logo-linkedin": 62016,
  "logo-markdown": 62017,
  "logo-nodejs": 62018,
  "logo-octocat": 62019,
  "logo-pinterest": 62020,
  "logo-playstation": 62021,
  "logo-python": 62022,
  "logo-reddit": 62023,
  "logo-rss": 62024,
  "logo-sass": 62025,
  "logo-skype": 62026,
  "logo-snapchat": 62027,
  "logo-steam": 62028,
  "logo-tumblr": 62029,
  "logo-tux": 62126,
  "logo-twitch": 62127,
  "logo-twitter": 62128,
  "logo-usd": 62129,
  "logo-vimeo": 62148,
  "logo-whatsapp": 62149,
  "logo-windows": 62255,
  "logo-wordpress": 62256,
  "logo-xbox": 62284,
  "logo-yahoo": 62285,
  "logo-yen": 62286,
  "logo-youtube": 62287,
  "md-add": 62067,
  "md-add-circle": 62066,
  "md-alarm": 62068,
  "md-albums": 62069,
  "md-alert": 62070,
  "md-american-football": 62071,
  "md-analytics": 62072,
  "md-aperture": 62073,
  "md-apps": 62074,
  "md-appstore": 62075,
  "md-archive": 62076,
  "md-arrow-back": 62077,
  "md-arrow-down": 62078,
  "md-arrow-dropdown": 62080,
  "md-arrow-dropdown-circle": 62079,
  "md-arrow-dropleft": 62082,
  "md-arrow-dropleft-circle": 62081,
  "md-arrow-dropright": 62084,
  "md-arrow-dropright-circle": 62083,
  "md-arrow-dropup": 62086,
  "md-arrow-dropup-circle": 62085,
  "md-arrow-forward": 62087,
  "md-arrow-round-back": 62088,
  "md-arrow-round-down": 62089,
  "md-arrow-round-forward": 62090,
  "md-arrow-round-up": 62091,
  "md-arrow-up": 62092,
  "md-at": 62093,
  "md-attach": 62094,
  "md-backspace": 62095,
  "md-barcode": 62096,
  "md-baseball": 62097,
  "md-basket": 62098,
  "md-basketball": 62099,
  "md-battery-charging": 62100,
  "md-battery-dead": 62101,
  "md-battery-full": 62102,
  "md-beaker": 62103,
  "md-beer": 62104,
  "md-bicycle": 62105,
  "md-bluetooth": 62106,
  "md-boat": 62107,
  "md-body": 62108,
  "md-bonfire": 62109,
  "md-book": 62110,
  "md-bookmark": 62111,
  "md-bookmarks": 62112,
  "md-bowtie": 62113,
  "md-briefcase": 62114,
  "md-browsers": 62115,
  "md-brush": 62116,
  "md-bug": 62117,
  "md-build": 62118,
  "md-bulb": 62119,
  "md-bus": 62120,
  "md-cafe": 62121,
  "md-calculator": 62122,
  "md-calendar": 62123,
  "md-call": 62124,
  "md-camera": 62125,
  "md-car": 62130,
  "md-card": 62131,
  "md-cart": 62132,
  "md-cash": 62133,
  "md-chatboxes": 62134,
  "md-chatbubbles": 62135,
  "md-checkbox": 62137,
  "md-checkbox-outline": 62136,
  "md-checkmark": 62140,
  "md-checkmark-circle": 62139,
  "md-checkmark-circle-outline": 62138,
  "md-clipboard": 62141,
  "md-clock": 62142,
  "md-close": 62144,
  "md-close-circle": 62143,
  "md-closed-captioning": 62145,
  "md-cloud": 62153,
  "md-cloud-circle": 62146,
  "md-cloud-done": 62147,
  "md-cloud-download": 62150,
  "md-cloud-outline": 62151,
  "md-cloud-upload": 62152,
  "md-cloudy": 62155,
  "md-cloudy-night": 62154,
  "md-code": 62158,
  "md-code-download": 62156,
  "md-code-working": 62157,
  "md-cog": 62159,
  "md-color-fill": 62160,
  "md-color-filter": 62161,
  "md-color-palette": 62162,
  "md-color-wand": 62163,
  "md-compass": 62164,
  "md-construct": 62165,
  "md-contact": 62166,
  "md-contacts": 62167,
  "md-contract": 62168,
  "md-contrast": 62169,
  "md-copy": 62170,
  "md-create": 62171,
  "md-crop": 62172,
  "md-cube": 62173,
  "md-cut": 62174,
  "md-desktop": 62175,
  "md-disc": 62176,
  "md-document": 62177,
  "md-done-all": 62178,
  "md-download": 62179,
  "md-easel": 62180,
  "md-egg": 62181,
  "md-exit": 62182,
  "md-expand": 62183,
  "md-eye": 62185,
  "md-eye-off": 62184,
  "md-fastforward": 62186,
  "md-female": 62187,
  "md-filing": 62188,
  "md-film": 62189,
  "md-finger-print": 62190,
  "md-flag": 62191,
  "md-flame": 62192,
  "md-flash": 62193,
  "md-flask": 62194,
  "md-flower": 62195,
  "md-folder": 62197,
  "md-folder-open": 62196,
  "md-football": 62198,
  "md-funnel": 62199,
  "md-game-controller-a": 62200,
  "md-game-controller-b": 62201,
  "md-git-branch": 62202,
  "md-git-commit": 62203,
  "md-git-compare": 62204,
  "md-git-merge": 62205,
  "md-git-network": 62206,
  "md-git-pull-request": 62207,
  "md-glasses": 62208,
  "md-globe": 62209,
  "md-grid": 62210,
  "md-hammer": 62211,
  "md-hand": 62212,
  "md-happy": 62213,
  "md-headset": 62214,
  "md-heart": 62216,
  "md-heart-outline": 62215,
  "md-help": 62219,
  "md-help-buoy": 62217,
  "md-help-circle": 62218,
  "md-home": 62220,
  "md-ice-cream": 62221,
  "md-image": 62222,
  "md-images": 62223,
  "md-infinite": 62224,
  "md-information": 62226,
  "md-information-circle": 62225,
  "md-ionic": 62227,
  "md-ionitron": 62228,
  "md-jet": 62229,
  "md-key": 62230,
  "md-keypad": 62231,
  "md-laptop": 62232,
  "md-leaf": 62233,
  "md-link": 61998,
  "md-list": 62235,
  "md-list-box": 62234,
  "md-locate": 62236,
  "md-lock": 62237,
  "md-log-in": 62238,
  "md-log-out": 62239,
  "md-magnet": 62240,
  "md-mail": 62242,
  "md-mail-open": 62241,
  "md-male": 62243,
  "md-man": 62244,
  "md-map": 62245,
  "md-medal": 62246,
  "md-medical": 62247,
  "md-medkit": 62248,
  "md-megaphone": 62249,
  "md-menu": 62250,
  "md-mic": 62252,
  "md-mic-off": 62251,
  "md-microphone": 62253,
  "md-moon": 62254,
  "md-more": 61897,
  "md-move": 62257,
  "md-musical-note": 62258,
  "md-musical-notes": 62259,
  "md-navigate": 62260,
  "md-no-smoking": 62261,
  "md-notifications": 62264,
  "md-notifications-off": 62262,
  "md-notifications-outline": 62263,
  "md-nuclear": 62265,
  "md-nutrition": 62266,
  "md-open": 62267,
  "md-options": 62268,
  "md-outlet": 62269,
  "md-paper": 62271,
  "md-paper-plane": 62270,
  "md-partly-sunny": 62272,
  "md-pause": 62273,
  "md-paw": 62274,
  "md-people": 62275,
  "md-person": 62277,
  "md-person-add": 62276,
  "md-phone-landscape": 62278,
  "md-phone-portrait": 62279,
  "md-photos": 62280,
  "md-pie": 62281,
  "md-pin": 62282,
  "md-pint": 62283,
  "md-pizza": 62292,
  "md-plane": 62293,
  "md-planet": 62294,
  "md-play": 62295,
  "md-podium": 62296,
  "md-power": 62297,
  "md-pricetag": 62298,
  "md-pricetags": 62299,
  "md-print": 62300,
  "md-pulse": 62301,
  "md-qr-scanner": 62302,
  "md-quote": 62303,
  "md-radio": 62306,
  "md-radio-button-off": 62304,
  "md-radio-button-on": 62305,
  "md-rainy": 62307,
  "md-recording": 62308,
  "md-redo": 62309,
  "md-refresh": 62310,
  "md-refresh-circle": 61992,
  "md-remove": 62312,
  "md-remove-circle": 62311,
  "md-reorder": 62313,
  "md-repeat": 62314,
  "md-resize": 62315,
  "md-restaurant": 62316,
  "md-return-left": 62317,
  "md-return-right": 62318,
  "md-reverse-camera": 62319,
  "md-rewind": 62320,
  "md-ribbon": 62321,
  "md-rose": 62322,
  "md-sad": 62323,
  "md-school": 62324,
  "md-search": 62325,
  "md-send": 62326,
  "md-settings": 62327,
  "md-share": 62329,
  "md-share-alt": 62328,
  "md-shirt": 62330,
  "md-shuffle": 62331,
  "md-skip-backward": 62332,
  "md-skip-forward": 62333,
  "md-snow": 62334,
  "md-speedometer": 62335,
  "md-square": 62337,
  "md-square-outline": 62336,
  "md-star": 62340,
  "md-star-half": 62338,
  "md-star-outline": 62339,
  "md-stats": 62341,
  "md-stopwatch": 62342,
  "md-subway": 62343,
  "md-sunny": 62344,
  "md-swap": 62345,
  "md-switch": 62346,
  "md-sync": 62347,
  "md-tablet-landscape": 62348,
  "md-tablet-portrait": 62349,
  "md-tennisball": 62350,
  "md-text": 62351,
  "md-thermometer": 62352,
  "md-thumbs-down": 62353,
  "md-thumbs-up": 62354,
  "md-thunderstorm": 62355,
  "md-time": 62356,
  "md-timer": 62357,
  "md-train": 62358,
  "md-transgender": 62359,
  "md-trash": 62360,
  "md-trending-down": 62361,
  "md-trending-up": 62362,
  "md-trophy": 62363,
  "md-umbrella": 62364,
  "md-undo": 62365,
  "md-unlock": 62366,
  "md-videocam": 62367,
  "md-volume-down": 62368,
  "md-volume-mute": 62369,
  "md-volume-off": 62370,
  "md-volume-up": 62371,
  "md-walk": 62372,
  "md-warning": 62373,
  "md-watch": 62374,
  "md-water": 62375,
  "md-wifi": 62376,
  "md-wine": 62377,
  "md-woman": 62378
};
}, 611, null, "react-native-vector-icons/glyphmaps/Ionicons.json");
__d(/* react-native-vector-icons/Entypo.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _Entypo = require(613                      ); // 613 = ./glyphmaps/Entypo.json

var _Entypo2 = _interopRequireDefault(_Entypo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_Entypo2.default, 'Entypo', 'Entypo.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 612, null, "react-native-vector-icons/Entypo.js");
__d(/* react-native-vector-icons/glyphmaps/Entypo.json */function(global, require, module, exports) {module.exports = module.exports = {
  "500px": 61696,
  "500px-with-circle": 61697,
  "add-to-list": 61698,
  "add-user": 61699,
  "address": 61700,
  "adjust": 61701,
  "air": 61702,
  "aircraft": 61703,
  "aircraft-landing": 61704,
  "aircraft-take-off": 61705,
  "align-bottom": 61706,
  "align-horizontal-middle": 61707,
  "align-left": 61708,
  "align-right": 61709,
  "align-top": 61710,
  "align-vertical-middle": 61711,
  "app-store": 61712,
  "archive": 61713,
  "area-graph": 61714,
  "arrow-bold-down": 61715,
  "arrow-bold-left": 61716,
  "arrow-bold-right": 61717,
  "arrow-bold-up": 61718,
  "arrow-down": 61719,
  "arrow-left": 61720,
  "arrow-long-down": 61721,
  "arrow-long-left": 61722,
  "arrow-long-right": 61723,
  "arrow-long-up": 61724,
  "arrow-right": 61725,
  "arrow-up": 61726,
  "arrow-with-circle-down": 61727,
  "arrow-with-circle-left": 61728,
  "arrow-with-circle-right": 61729,
  "arrow-with-circle-up": 61730,
  "attachment": 61731,
  "awareness-ribbon": 61732,
  "back": 61733,
  "back-in-time": 61734,
  "baidu": 61735,
  "bar-graph": 61736,
  "basecamp": 61737,
  "battery": 61738,
  "beamed-note": 61739,
  "behance": 61740,
  "bell": 61741,
  "blackboard": 61742,
  "block": 61743,
  "book": 61744,
  "bookmark": 61745,
  "bookmarks": 61746,
  "bowl": 61747,
  "box": 61748,
  "briefcase": 61749,
  "browser": 61750,
  "brush": 61751,
  "bucket": 61752,
  "bug": 61753,
  "cake": 61754,
  "calculator": 61755,
  "calendar": 61756,
  "camera": 61757,
  "ccw": 61758,
  "chat": 61759,
  "check": 61760,
  "chevron-down": 61761,
  "chevron-left": 61762,
  "chevron-right": 61763,
  "chevron-small-down": 61764,
  "chevron-small-left": 61765,
  "chevron-small-right": 61766,
  "chevron-small-up": 61767,
  "chevron-thin-down": 61768,
  "chevron-thin-left": 61769,
  "chevron-thin-right": 61770,
  "chevron-thin-up": 61771,
  "chevron-up": 61772,
  "chevron-with-circle-down": 61773,
  "chevron-with-circle-left": 61774,
  "chevron-with-circle-right": 61775,
  "chevron-with-circle-up": 61776,
  "circle": 61777,
  "circle-with-cross": 61778,
  "circle-with-minus": 61779,
  "circle-with-plus": 61780,
  "circular-graph": 61781,
  "clapperboard": 61782,
  "classic-computer": 61783,
  "clipboard": 61784,
  "clock": 61785,
  "cloud": 61786,
  "code": 61787,
  "cog": 61788,
  "colours": 61789,
  "compass": 61790,
  "controller-fast-backward": 61791,
  "controller-fast-forward": 61792,
  "controller-jump-to-start": 61793,
  "controller-next": 61794,
  "controller-paus": 61795,
  "controller-play": 61796,
  "controller-record": 61797,
  "controller-stop": 61798,
  "controller-volume": 61799,
  "copy": 61800,
  "creative-cloud": 61801,
  "creative-commons": 61802,
  "creative-commons-attribution": 61803,
  "creative-commons-noderivs": 61804,
  "creative-commons-noncommercial-eu": 61805,
  "creative-commons-noncommercial-us": 61806,
  "creative-commons-public-domain": 61807,
  "creative-commons-remix": 61808,
  "creative-commons-share": 61809,
  "creative-commons-sharealike": 61810,
  "credit": 61811,
  "credit-card": 61812,
  "crop": 61813,
  "cross": 61814,
  "cup": 61815,
  "cw": 61816,
  "cycle": 61817,
  "database": 61818,
  "dial-pad": 61819,
  "direction": 61820,
  "document": 61821,
  "document-landscape": 61822,
  "documents": 61823,
  "dot-single": 61824,
  "dots-three-horizontal": 61825,
  "dots-three-vertical": 61826,
  "dots-two-horizontal": 61827,
  "dots-two-vertical": 61828,
  "download": 61829,
  "dribbble": 61830,
  "dribbble-with-circle": 61831,
  "drink": 61832,
  "drive": 61833,
  "drop": 61834,
  "dropbox": 61835,
  "edit": 61836,
  "email": 61837,
  "emoji-flirt": 61838,
  "emoji-happy": 61839,
  "emoji-neutral": 61840,
  "emoji-sad": 61841,
  "erase": 61842,
  "eraser": 61843,
  "evernote": 61844,
  "export": 61845,
  "eye": 61846,
  "eye-with-line": 61847,
  "facebook": 61848,
  "facebook-with-circle": 61849,
  "feather": 61850,
  "fingerprint": 61851,
  "flag": 61852,
  "flash": 61853,
  "flashlight": 61854,
  "flat-brush": 61855,
  "flattr": 61856,
  "flickr": 61857,
  "flickr-with-circle": 61858,
  "flow-branch": 61859,
  "flow-cascade": 61860,
  "flow-line": 61861,
  "flow-parallel": 61862,
  "flow-tree": 61863,
  "flower": 61864,
  "folder": 61865,
  "folder-images": 61866,
  "folder-music": 61867,
  "folder-video": 61868,
  "forward": 61869,
  "foursquare": 61870,
  "funnel": 61871,
  "game-controller": 61872,
  "gauge": 61873,
  "github": 61874,
  "github-with-circle": 61875,
  "globe": 61876,
  "google-": 61877,
  "google--with-circle": 61878,
  "google-drive": 61879,
  "google-hangouts": 61880,
  "google-play": 61881,
  "graduation-cap": 61882,
  "grid": 61883,
  "grooveshark": 61884,
  "hair-cross": 61885,
  "hand": 61886,
  "heart": 61887,
  "heart-outlined": 61888,
  "help": 61889,
  "help-with-circle": 61890,
  "home": 61891,
  "hour-glass": 61892,
  "houzz": 61893,
  "icloud": 61894,
  "image": 61895,
  "image-inverted": 61896,
  "images": 61897,
  "inbox": 61898,
  "infinity": 61899,
  "info": 61900,
  "info-with-circle": 61901,
  "instagram": 61902,
  "instagram-with-circle": 61903,
  "install": 61904,
  "key": 61905,
  "keyboard": 61906,
  "lab-flask": 61907,
  "landline": 61908,
  "language": 61909,
  "laptop": 61910,
  "lastfm": 61911,
  "lastfm-with-circle": 61912,
  "layers": 61913,
  "leaf": 61914,
  "level-down": 61915,
  "level-up": 61916,
  "lifebuoy": 61917,
  "light-bulb": 61918,
  "light-down": 61919,
  "light-up": 61920,
  "line-graph": 61921,
  "link": 61922,
  "linkedin": 61923,
  "linkedin-with-circle": 61924,
  "list": 61925,
  "location": 61926,
  "location-pin": 61927,
  "lock": 61928,
  "lock-open": 61929,
  "log-out": 61930,
  "login": 61931,
  "loop": 61932,
  "magnet": 61933,
  "magnifying-glass": 61934,
  "mail": 61935,
  "mail-with-circle": 61936,
  "man": 61937,
  "map": 61938,
  "mask": 61939,
  "medal": 61940,
  "medium": 61941,
  "medium-with-circle": 61942,
  "megaphone": 61943,
  "menu": 61944,
  "merge": 61945,
  "message": 61946,
  "mic": 61947,
  "minus": 61948,
  "mixi": 61949,
  "mobile": 61950,
  "modern-mic": 61951,
  "moon": 61952,
  "mouse": 61953,
  "mouse-pointer": 61954,
  "music": 61955,
  "network": 61956,
  "new": 61957,
  "new-message": 61958,
  "news": 61959,
  "newsletter": 61960,
  "note": 61961,
  "notification": 61962,
  "notifications-off": 61963,
  "old-mobile": 61964,
  "old-phone": 61965,
  "onedrive": 61966,
  "open-book": 61967,
  "palette": 61968,
  "paper-plane": 61969,
  "paypal": 61970,
  "pencil": 61971,
  "phone": 61972,
  "picasa": 61973,
  "pie-chart": 61974,
  "pin": 61975,
  "pinterest": 61976,
  "pinterest-with-circle": 61977,
  "plus": 61978,
  "popup": 61979,
  "power-plug": 61980,
  "price-ribbon": 61981,
  "price-tag": 61982,
  "print": 61983,
  "progress-empty": 61984,
  "progress-full": 61985,
  "progress-one": 61986,
  "progress-two": 61987,
  "publish": 61988,
  "qq": 61989,
  "qq-with-circle": 61990,
  "quote": 61991,
  "radio": 61992,
  "raft": 61993,
  "raft-with-circle": 61994,
  "rainbow": 61995,
  "rdio": 61996,
  "rdio-with-circle": 61997,
  "remove-user": 61998,
  "renren": 61999,
  "reply": 62000,
  "reply-all": 62001,
  "resize-100-": 62002,
  "resize-full-screen": 62003,
  "retweet": 62004,
  "rocket": 62005,
  "round-brush": 62006,
  "rss": 62007,
  "ruler": 62008,
  "save": 62009,
  "scissors": 62010,
  "scribd": 62011,
  "select-arrows": 62012,
  "share": 62013,
  "share-alternative": 62014,
  "shareable": 62015,
  "shield": 62016,
  "shop": 62017,
  "shopping-bag": 62018,
  "shopping-basket": 62019,
  "shopping-cart": 62020,
  "shuffle": 62021,
  "signal": 62022,
  "sina-weibo": 62023,
  "skype": 62024,
  "skype-with-circle": 62025,
  "slideshare": 62026,
  "smashing": 62027,
  "sound": 62028,
  "sound-mix": 62029,
  "sound-mute": 62030,
  "soundcloud": 62031,
  "sports-club": 62032,
  "spotify": 62033,
  "spotify-with-circle": 62034,
  "spreadsheet": 62035,
  "squared-cross": 62036,
  "squared-minus": 62037,
  "squared-plus": 62038,
  "star": 62039,
  "star-outlined": 62040,
  "stopwatch": 62041,
  "stumbleupon": 62042,
  "stumbleupon-with-circle": 62043,
  "suitcase": 62044,
  "swap": 62045,
  "swarm": 62046,
  "sweden": 62047,
  "switch": 62048,
  "tablet": 62049,
  "tablet-mobile-combo": 62050,
  "tag": 62051,
  "text": 62052,
  "text-document": 62053,
  "text-document-inverted": 62054,
  "thermometer": 62055,
  "thumbs-down": 62056,
  "thumbs-up": 62057,
  "thunder-cloud": 62058,
  "ticket": 62059,
  "time-slot": 62060,
  "tools": 62061,
  "traffic-cone": 62062,
  "trash": 62063,
  "tree": 62064,
  "triangle-down": 62065,
  "triangle-left": 62066,
  "triangle-right": 62067,
  "triangle-up": 62068,
  "tripadvisor": 62069,
  "trophy": 62070,
  "tumblr": 62071,
  "tumblr-with-circle": 62072,
  "tv": 62073,
  "twitter": 62074,
  "twitter-with-circle": 62075,
  "typing": 62076,
  "uninstall": 62077,
  "unread": 62078,
  "untag": 62079,
  "upload": 62080,
  "upload-to-cloud": 62081,
  "user": 62082,
  "users": 62083,
  "v-card": 62084,
  "video": 62085,
  "video-camera": 62086,
  "vimeo": 62087,
  "vimeo-with-circle": 62088,
  "vine": 62089,
  "vine-with-circle": 62090,
  "vinyl": 62091,
  "vk": 62092,
  "vk-alternitive": 62093,
  "vk-with-circle": 62094,
  "voicemail": 62095,
  "wallet": 62096,
  "warning": 62097,
  "water": 62098,
  "windows-store": 62099,
  "xing": 62100,
  "xing-with-circle": 62101,
  "yelp": 62102,
  "youko": 62103,
  "youko-with-circle": 62104,
  "youtube": 62105,
  "youtube-with-circle": 62106
};
}, 613, null, "react-native-vector-icons/glyphmaps/Entypo.json");
__d(/* react-native-vector-icons/FontAwesome.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _FontAwesome = require(615                           ); // 615 = ./glyphmaps/FontAwesome.json

var _FontAwesome2 = _interopRequireDefault(_FontAwesome);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_FontAwesome2.default, 'FontAwesome', 'FontAwesome.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 614, null, "react-native-vector-icons/FontAwesome.js");
__d(/* react-native-vector-icons/glyphmaps/FontAwesome.json */function(global, require, module, exports) {module.exports = module.exports = {
  "glass": 61440,
  "music": 61441,
  "search": 61442,
  "envelope-o": 61443,
  "heart": 61444,
  "star": 61445,
  "star-o": 61446,
  "user": 61447,
  "film": 61448,
  "th-large": 61449,
  "th": 61450,
  "th-list": 61451,
  "check": 61452,
  "remove": 61453,
  "close": 61453,
  "times": 61453,
  "search-plus": 61454,
  "search-minus": 61456,
  "power-off": 61457,
  "signal": 61458,
  "gear": 61459,
  "cog": 61459,
  "trash-o": 61460,
  "home": 61461,
  "file-o": 61462,
  "clock-o": 61463,
  "road": 61464,
  "download": 61465,
  "arrow-circle-o-down": 61466,
  "arrow-circle-o-up": 61467,
  "inbox": 61468,
  "play-circle-o": 61469,
  "rotate-right": 61470,
  "repeat": 61470,
  "refresh": 61473,
  "list-alt": 61474,
  "lock": 61475,
  "flag": 61476,
  "headphones": 61477,
  "volume-off": 61478,
  "volume-down": 61479,
  "volume-up": 61480,
  "qrcode": 61481,
  "barcode": 61482,
  "tag": 61483,
  "tags": 61484,
  "book": 61485,
  "bookmark": 61486,
  "print": 61487,
  "camera": 61488,
  "font": 61489,
  "bold": 61490,
  "italic": 61491,
  "text-height": 61492,
  "text-width": 61493,
  "align-left": 61494,
  "align-center": 61495,
  "align-right": 61496,
  "align-justify": 61497,
  "list": 61498,
  "dedent": 61499,
  "outdent": 61499,
  "indent": 61500,
  "video-camera": 61501,
  "photo": 61502,
  "image": 61502,
  "picture-o": 61502,
  "pencil": 61504,
  "map-marker": 61505,
  "adjust": 61506,
  "tint": 61507,
  "edit": 61508,
  "pencil-square-o": 61508,
  "share-square-o": 61509,
  "check-square-o": 61510,
  "arrows": 61511,
  "step-backward": 61512,
  "fast-backward": 61513,
  "backward": 61514,
  "play": 61515,
  "pause": 61516,
  "stop": 61517,
  "forward": 61518,
  "fast-forward": 61520,
  "step-forward": 61521,
  "eject": 61522,
  "chevron-left": 61523,
  "chevron-right": 61524,
  "plus-circle": 61525,
  "minus-circle": 61526,
  "times-circle": 61527,
  "check-circle": 61528,
  "question-circle": 61529,
  "info-circle": 61530,
  "crosshairs": 61531,
  "times-circle-o": 61532,
  "check-circle-o": 61533,
  "ban": 61534,
  "arrow-left": 61536,
  "arrow-right": 61537,
  "arrow-up": 61538,
  "arrow-down": 61539,
  "mail-forward": 61540,
  "share": 61540,
  "expand": 61541,
  "compress": 61542,
  "plus": 61543,
  "minus": 61544,
  "asterisk": 61545,
  "exclamation-circle": 61546,
  "gift": 61547,
  "leaf": 61548,
  "fire": 61549,
  "eye": 61550,
  "eye-slash": 61552,
  "warning": 61553,
  "exclamation-triangle": 61553,
  "plane": 61554,
  "calendar": 61555,
  "random": 61556,
  "comment": 61557,
  "magnet": 61558,
  "chevron-up": 61559,
  "chevron-down": 61560,
  "retweet": 61561,
  "shopping-cart": 61562,
  "folder": 61563,
  "folder-open": 61564,
  "arrows-v": 61565,
  "arrows-h": 61566,
  "bar-chart-o": 61568,
  "bar-chart": 61568,
  "twitter-square": 61569,
  "facebook-square": 61570,
  "camera-retro": 61571,
  "key": 61572,
  "gears": 61573,
  "cogs": 61573,
  "comments": 61574,
  "thumbs-o-up": 61575,
  "thumbs-o-down": 61576,
  "star-half": 61577,
  "heart-o": 61578,
  "sign-out": 61579,
  "linkedin-square": 61580,
  "thumb-tack": 61581,
  "external-link": 61582,
  "sign-in": 61584,
  "trophy": 61585,
  "github-square": 61586,
  "upload": 61587,
  "lemon-o": 61588,
  "phone": 61589,
  "square-o": 61590,
  "bookmark-o": 61591,
  "phone-square": 61592,
  "twitter": 61593,
  "facebook-f": 61594,
  "facebook": 61594,
  "github": 61595,
  "unlock": 61596,
  "credit-card": 61597,
  "feed": 61598,
  "rss": 61598,
  "hdd-o": 61600,
  "bullhorn": 61601,
  "bell": 61683,
  "certificate": 61603,
  "hand-o-right": 61604,
  "hand-o-left": 61605,
  "hand-o-up": 61606,
  "hand-o-down": 61607,
  "arrow-circle-left": 61608,
  "arrow-circle-right": 61609,
  "arrow-circle-up": 61610,
  "arrow-circle-down": 61611,
  "globe": 61612,
  "wrench": 61613,
  "tasks": 61614,
  "filter": 61616,
  "briefcase": 61617,
  "arrows-alt": 61618,
  "group": 61632,
  "users": 61632,
  "chain": 61633,
  "link": 61633,
  "cloud": 61634,
  "flask": 61635,
  "cut": 61636,
  "scissors": 61636,
  "copy": 61637,
  "files-o": 61637,
  "paperclip": 61638,
  "save": 61639,
  "floppy-o": 61639,
  "square": 61640,
  "navicon": 61641,
  "reorder": 61641,
  "bars": 61641,
  "list-ul": 61642,
  "list-ol": 61643,
  "strikethrough": 61644,
  "underline": 61645,
  "table": 61646,
  "magic": 61648,
  "truck": 61649,
  "pinterest": 61650,
  "pinterest-square": 61651,
  "google-plus-square": 61652,
  "google-plus": 61653,
  "money": 61654,
  "caret-down": 61655,
  "caret-up": 61656,
  "caret-left": 61657,
  "caret-right": 61658,
  "columns": 61659,
  "unsorted": 61660,
  "sort": 61660,
  "sort-down": 61661,
  "sort-desc": 61661,
  "sort-up": 61662,
  "sort-asc": 61662,
  "envelope": 61664,
  "linkedin": 61665,
  "rotate-left": 61666,
  "undo": 61666,
  "legal": 61667,
  "gavel": 61667,
  "dashboard": 61668,
  "tachometer": 61668,
  "comment-o": 61669,
  "comments-o": 61670,
  "flash": 61671,
  "bolt": 61671,
  "sitemap": 61672,
  "umbrella": 61673,
  "paste": 61674,
  "clipboard": 61674,
  "lightbulb-o": 61675,
  "exchange": 61676,
  "cloud-download": 61677,
  "cloud-upload": 61678,
  "user-md": 61680,
  "stethoscope": 61681,
  "suitcase": 61682,
  "bell-o": 61602,
  "coffee": 61684,
  "cutlery": 61685,
  "file-text-o": 61686,
  "building-o": 61687,
  "hospital-o": 61688,
  "ambulance": 61689,
  "medkit": 61690,
  "fighter-jet": 61691,
  "beer": 61692,
  "h-square": 61693,
  "plus-square": 61694,
  "angle-double-left": 61696,
  "angle-double-right": 61697,
  "angle-double-up": 61698,
  "angle-double-down": 61699,
  "angle-left": 61700,
  "angle-right": 61701,
  "angle-up": 61702,
  "angle-down": 61703,
  "desktop": 61704,
  "laptop": 61705,
  "tablet": 61706,
  "mobile-phone": 61707,
  "mobile": 61707,
  "circle-o": 61708,
  "quote-left": 61709,
  "quote-right": 61710,
  "spinner": 61712,
  "circle": 61713,
  "mail-reply": 61714,
  "reply": 61714,
  "github-alt": 61715,
  "folder-o": 61716,
  "folder-open-o": 61717,
  "smile-o": 61720,
  "frown-o": 61721,
  "meh-o": 61722,
  "gamepad": 61723,
  "keyboard-o": 61724,
  "flag-o": 61725,
  "flag-checkered": 61726,
  "terminal": 61728,
  "code": 61729,
  "mail-reply-all": 61730,
  "reply-all": 61730,
  "star-half-empty": 61731,
  "star-half-full": 61731,
  "star-half-o": 61731,
  "location-arrow": 61732,
  "crop": 61733,
  "code-fork": 61734,
  "unlink": 61735,
  "chain-broken": 61735,
  "question": 61736,
  "info": 61737,
  "exclamation": 61738,
  "superscript": 61739,
  "subscript": 61740,
  "eraser": 61741,
  "puzzle-piece": 61742,
  "microphone": 61744,
  "microphone-slash": 61745,
  "shield": 61746,
  "calendar-o": 61747,
  "fire-extinguisher": 61748,
  "rocket": 61749,
  "maxcdn": 61750,
  "chevron-circle-left": 61751,
  "chevron-circle-right": 61752,
  "chevron-circle-up": 61753,
  "chevron-circle-down": 61754,
  "html5": 61755,
  "css3": 61756,
  "anchor": 61757,
  "unlock-alt": 61758,
  "bullseye": 61760,
  "ellipsis-h": 61761,
  "ellipsis-v": 61762,
  "rss-square": 61763,
  "play-circle": 61764,
  "ticket": 61765,
  "minus-square": 61766,
  "minus-square-o": 61767,
  "level-up": 61768,
  "level-down": 61769,
  "check-square": 61770,
  "pencil-square": 61771,
  "external-link-square": 61772,
  "share-square": 61773,
  "compass": 61774,
  "toggle-down": 61776,
  "caret-square-o-down": 61776,
  "toggle-up": 61777,
  "caret-square-o-up": 61777,
  "toggle-right": 61778,
  "caret-square-o-right": 61778,
  "euro": 61779,
  "eur": 61779,
  "gbp": 61780,
  "dollar": 61781,
  "usd": 61781,
  "rupee": 61782,
  "inr": 61782,
  "cny": 61783,
  "rmb": 61783,
  "yen": 61783,
  "jpy": 61783,
  "ruble": 61784,
  "rouble": 61784,
  "rub": 61784,
  "won": 61785,
  "krw": 61785,
  "bitcoin": 61786,
  "btc": 61786,
  "file": 61787,
  "file-text": 61788,
  "sort-alpha-asc": 61789,
  "sort-alpha-desc": 61790,
  "sort-amount-asc": 61792,
  "sort-amount-desc": 61793,
  "sort-numeric-asc": 61794,
  "sort-numeric-desc": 61795,
  "thumbs-up": 61796,
  "thumbs-down": 61797,
  "youtube-square": 61798,
  "youtube": 61799,
  "xing": 61800,
  "xing-square": 61801,
  "youtube-play": 61802,
  "dropbox": 61803,
  "stack-overflow": 61804,
  "instagram": 61805,
  "flickr": 61806,
  "adn": 61808,
  "bitbucket": 61809,
  "bitbucket-square": 61810,
  "tumblr": 61811,
  "tumblr-square": 61812,
  "long-arrow-down": 61813,
  "long-arrow-up": 61814,
  "long-arrow-left": 61815,
  "long-arrow-right": 61816,
  "apple": 61817,
  "windows": 61818,
  "android": 61819,
  "linux": 61820,
  "dribbble": 61821,
  "skype": 61822,
  "foursquare": 61824,
  "trello": 61825,
  "female": 61826,
  "male": 61827,
  "gittip": 61828,
  "gratipay": 61828,
  "sun-o": 61829,
  "moon-o": 61830,
  "archive": 61831,
  "bug": 61832,
  "vk": 61833,
  "weibo": 61834,
  "renren": 61835,
  "pagelines": 61836,
  "stack-exchange": 61837,
  "arrow-circle-o-right": 61838,
  "arrow-circle-o-left": 61840,
  "toggle-left": 61841,
  "caret-square-o-left": 61841,
  "dot-circle-o": 61842,
  "wheelchair": 61843,
  "vimeo-square": 61844,
  "turkish-lira": 61845,
  "try": 61845,
  "plus-square-o": 61846,
  "space-shuttle": 61847,
  "slack": 61848,
  "envelope-square": 61849,
  "wordpress": 61850,
  "openid": 61851,
  "institution": 61852,
  "bank": 61852,
  "university": 61852,
  "mortar-board": 61853,
  "graduation-cap": 61853,
  "yahoo": 61854,
  "google": 61856,
  "reddit": 61857,
  "reddit-square": 61858,
  "stumbleupon-circle": 61859,
  "stumbleupon": 61860,
  "delicious": 61861,
  "digg": 61862,
  "pied-piper-pp": 61863,
  "pied-piper-alt": 61864,
  "drupal": 61865,
  "joomla": 61866,
  "language": 61867,
  "fax": 61868,
  "building": 61869,
  "child": 61870,
  "paw": 61872,
  "spoon": 61873,
  "cube": 61874,
  "cubes": 61875,
  "behance": 61876,
  "behance-square": 61877,
  "steam": 61878,
  "steam-square": 61879,
  "recycle": 61880,
  "automobile": 61881,
  "car": 61881,
  "cab": 61882,
  "taxi": 61882,
  "tree": 61883,
  "spotify": 61884,
  "deviantart": 61885,
  "soundcloud": 61886,
  "database": 61888,
  "file-pdf-o": 61889,
  "file-word-o": 61890,
  "file-excel-o": 61891,
  "file-powerpoint-o": 61892,
  "file-photo-o": 61893,
  "file-picture-o": 61893,
  "file-image-o": 61893,
  "file-zip-o": 61894,
  "file-archive-o": 61894,
  "file-sound-o": 61895,
  "file-audio-o": 61895,
  "file-movie-o": 61896,
  "file-video-o": 61896,
  "file-code-o": 61897,
  "vine": 61898,
  "codepen": 61899,
  "jsfiddle": 61900,
  "life-bouy": 61901,
  "life-buoy": 61901,
  "life-saver": 61901,
  "support": 61901,
  "life-ring": 61901,
  "circle-o-notch": 61902,
  "ra": 61904,
  "resistance": 61904,
  "rebel": 61904,
  "ge": 61905,
  "empire": 61905,
  "git-square": 61906,
  "git": 61907,
  "y-combinator-square": 61908,
  "yc-square": 61908,
  "hacker-news": 61908,
  "tencent-weibo": 61909,
  "qq": 61910,
  "wechat": 61911,
  "weixin": 61911,
  "send": 61912,
  "paper-plane": 61912,
  "send-o": 61913,
  "paper-plane-o": 61913,
  "history": 61914,
  "circle-thin": 61915,
  "header": 61916,
  "paragraph": 61917,
  "sliders": 61918,
  "share-alt": 61920,
  "share-alt-square": 61921,
  "bomb": 61922,
  "soccer-ball-o": 61923,
  "futbol-o": 61923,
  "tty": 61924,
  "binoculars": 61925,
  "plug": 61926,
  "slideshare": 61927,
  "twitch": 61928,
  "yelp": 61929,
  "newspaper-o": 61930,
  "wifi": 61931,
  "calculator": 61932,
  "paypal": 61933,
  "google-wallet": 61934,
  "cc-visa": 61936,
  "cc-mastercard": 61937,
  "cc-discover": 61938,
  "cc-amex": 61939,
  "cc-paypal": 61940,
  "cc-stripe": 61941,
  "bell-slash": 61942,
  "bell-slash-o": 61943,
  "trash": 61944,
  "copyright": 61945,
  "at": 61946,
  "eyedropper": 61947,
  "paint-brush": 61948,
  "birthday-cake": 61949,
  "area-chart": 61950,
  "pie-chart": 61952,
  "line-chart": 61953,
  "lastfm": 61954,
  "lastfm-square": 61955,
  "toggle-off": 61956,
  "toggle-on": 61957,
  "bicycle": 61958,
  "bus": 61959,
  "ioxhost": 61960,
  "angellist": 61961,
  "cc": 61962,
  "shekel": 61963,
  "sheqel": 61963,
  "ils": 61963,
  "meanpath": 61964,
  "buysellads": 61965,
  "connectdevelop": 61966,
  "dashcube": 61968,
  "forumbee": 61969,
  "leanpub": 61970,
  "sellsy": 61971,
  "shirtsinbulk": 61972,
  "simplybuilt": 61973,
  "skyatlas": 61974,
  "cart-plus": 61975,
  "cart-arrow-down": 61976,
  "diamond": 61977,
  "ship": 61978,
  "user-secret": 61979,
  "motorcycle": 61980,
  "street-view": 61981,
  "heartbeat": 61982,
  "venus": 61985,
  "mars": 61986,
  "mercury": 61987,
  "intersex": 61988,
  "transgender": 61988,
  "transgender-alt": 61989,
  "venus-double": 61990,
  "mars-double": 61991,
  "venus-mars": 61992,
  "mars-stroke": 61993,
  "mars-stroke-v": 61994,
  "mars-stroke-h": 61995,
  "neuter": 61996,
  "genderless": 61997,
  "facebook-official": 62000,
  "pinterest-p": 62001,
  "whatsapp": 62002,
  "server": 62003,
  "user-plus": 62004,
  "user-times": 62005,
  "hotel": 62006,
  "bed": 62006,
  "viacoin": 62007,
  "train": 62008,
  "subway": 62009,
  "medium": 62010,
  "yc": 62011,
  "y-combinator": 62011,
  "optin-monster": 62012,
  "opencart": 62013,
  "expeditedssl": 62014,
  "battery-4": 62016,
  "battery": 62016,
  "battery-full": 62016,
  "battery-3": 62017,
  "battery-three-quarters": 62017,
  "battery-2": 62018,
  "battery-half": 62018,
  "battery-1": 62019,
  "battery-quarter": 62019,
  "battery-0": 62020,
  "battery-empty": 62020,
  "mouse-pointer": 62021,
  "i-cursor": 62022,
  "object-group": 62023,
  "object-ungroup": 62024,
  "sticky-note": 62025,
  "sticky-note-o": 62026,
  "cc-jcb": 62027,
  "cc-diners-club": 62028,
  "clone": 62029,
  "balance-scale": 62030,
  "hourglass-o": 62032,
  "hourglass-1": 62033,
  "hourglass-start": 62033,
  "hourglass-2": 62034,
  "hourglass-half": 62034,
  "hourglass-3": 62035,
  "hourglass-end": 62035,
  "hourglass": 62036,
  "hand-grab-o": 62037,
  "hand-rock-o": 62037,
  "hand-stop-o": 62038,
  "hand-paper-o": 62038,
  "hand-scissors-o": 62039,
  "hand-lizard-o": 62040,
  "hand-spock-o": 62041,
  "hand-pointer-o": 62042,
  "hand-peace-o": 62043,
  "trademark": 62044,
  "registered": 62045,
  "creative-commons": 62046,
  "gg": 62048,
  "gg-circle": 62049,
  "tripadvisor": 62050,
  "odnoklassniki": 62051,
  "odnoklassniki-square": 62052,
  "get-pocket": 62053,
  "wikipedia-w": 62054,
  "safari": 62055,
  "chrome": 62056,
  "firefox": 62057,
  "opera": 62058,
  "internet-explorer": 62059,
  "tv": 62060,
  "television": 62060,
  "contao": 62061,
  "500px": 62062,
  "amazon": 62064,
  "calendar-plus-o": 62065,
  "calendar-minus-o": 62066,
  "calendar-times-o": 62067,
  "calendar-check-o": 62068,
  "industry": 62069,
  "map-pin": 62070,
  "map-signs": 62071,
  "map-o": 62072,
  "map": 62073,
  "commenting": 62074,
  "commenting-o": 62075,
  "houzz": 62076,
  "vimeo": 62077,
  "black-tie": 62078,
  "fonticons": 62080,
  "reddit-alien": 62081,
  "edge": 62082,
  "credit-card-alt": 62083,
  "codiepie": 62084,
  "modx": 62085,
  "fort-awesome": 62086,
  "usb": 62087,
  "product-hunt": 62088,
  "mixcloud": 62089,
  "scribd": 62090,
  "pause-circle": 62091,
  "pause-circle-o": 62092,
  "stop-circle": 62093,
  "stop-circle-o": 62094,
  "shopping-bag": 62096,
  "shopping-basket": 62097,
  "hashtag": 62098,
  "bluetooth": 62099,
  "bluetooth-b": 62100,
  "percent": 62101,
  "gitlab": 62102,
  "wpbeginner": 62103,
  "wpforms": 62104,
  "envira": 62105,
  "universal-access": 62106,
  "wheelchair-alt": 62107,
  "question-circle-o": 62108,
  "blind": 62109,
  "audio-description": 62110,
  "volume-control-phone": 62112,
  "braille": 62113,
  "assistive-listening-systems": 62114,
  "asl-interpreting": 62115,
  "american-sign-language-interpreting": 62115,
  "deafness": 62116,
  "hard-of-hearing": 62116,
  "deaf": 62116,
  "glide": 62117,
  "glide-g": 62118,
  "signing": 62119,
  "sign-language": 62119,
  "low-vision": 62120,
  "viadeo": 62121,
  "viadeo-square": 62122,
  "snapchat": 62123,
  "snapchat-ghost": 62124,
  "snapchat-square": 62125,
  "pied-piper": 62126,
  "first-order": 62128,
  "yoast": 62129,
  "themeisle": 62130,
  "google-plus-circle": 62131,
  "google-plus-official": 62131,
  "fa": 62132,
  "font-awesome": 62132,
  "handshake-o": 62133,
  "envelope-open": 62134,
  "envelope-open-o": 62135,
  "linode": 62136,
  "address-book": 62137,
  "address-book-o": 62138,
  "vcard": 62139,
  "address-card": 62139,
  "vcard-o": 62140,
  "address-card-o": 62140,
  "user-circle": 62141,
  "user-circle-o": 62142,
  "user-o": 62144,
  "id-badge": 62145,
  "drivers-license": 62146,
  "id-card": 62146,
  "drivers-license-o": 62147,
  "id-card-o": 62147,
  "quora": 62148,
  "free-code-camp": 62149,
  "telegram": 62150,
  "thermometer-4": 62151,
  "thermometer": 62151,
  "thermometer-full": 62151,
  "thermometer-3": 62152,
  "thermometer-three-quarters": 62152,
  "thermometer-2": 62153,
  "thermometer-half": 62153,
  "thermometer-1": 62154,
  "thermometer-quarter": 62154,
  "thermometer-0": 62155,
  "thermometer-empty": 62155,
  "shower": 62156,
  "bathtub": 62157,
  "s15": 62157,
  "bath": 62157,
  "podcast": 62158,
  "window-maximize": 62160,
  "window-minimize": 62161,
  "window-restore": 62162,
  "times-rectangle": 62163,
  "window-close": 62163,
  "times-rectangle-o": 62164,
  "window-close-o": 62164,
  "bandcamp": 62165,
  "grav": 62166,
  "etsy": 62167,
  "imdb": 62168,
  "ravelry": 62169,
  "eercast": 62170,
  "microchip": 62171,
  "snowflake-o": 62172,
  "superpowers": 62173,
  "wpexplorer": 62174,
  "meetup": 62176
};
}, 615, null, "react-native-vector-icons/glyphmaps/FontAwesome.json");
__d(/* react-native-vector-icons/Foundation.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _Foundation = require(617                          ); // 617 = ./glyphmaps/Foundation.json

var _Foundation2 = _interopRequireDefault(_Foundation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_Foundation2.default, 'fontcustom', 'Foundation.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 616, null, "react-native-vector-icons/Foundation.js");
__d(/* react-native-vector-icons/glyphmaps/Foundation.json */function(global, require, module, exports) {module.exports = module.exports = {
  "address-book": 61696,
  "alert": 61697,
  "align-center": 61698,
  "align-justify": 61699,
  "align-left": 61700,
  "align-right": 61701,
  "anchor": 61702,
  "annotate": 61703,
  "archive": 61704,
  "arrow-down": 61705,
  "arrow-left": 61706,
  "arrow-right": 61707,
  "arrow-up": 61708,
  "arrows-compress": 61709,
  "arrows-expand": 61710,
  "arrows-in": 61711,
  "arrows-out": 61712,
  "asl": 61713,
  "asterisk": 61714,
  "at-sign": 61715,
  "background-color": 61716,
  "battery-empty": 61717,
  "battery-full": 61718,
  "battery-half": 61719,
  "bitcoin-circle": 61720,
  "bitcoin": 61721,
  "blind": 61722,
  "bluetooth": 61723,
  "bold": 61724,
  "book-bookmark": 61725,
  "book": 61726,
  "bookmark": 61727,
  "braille": 61728,
  "burst-new": 61729,
  "burst-sale": 61730,
  "burst": 61731,
  "calendar": 61732,
  "camera": 61733,
  "check": 61734,
  "checkbox": 61735,
  "clipboard-notes": 61736,
  "clipboard-pencil": 61737,
  "clipboard": 61738,
  "clock": 61739,
  "closed-caption": 61740,
  "cloud": 61741,
  "comment-minus": 61742,
  "comment-quotes": 61743,
  "comment-video": 61744,
  "comment": 61745,
  "comments": 61746,
  "compass": 61747,
  "contrast": 61748,
  "credit-card": 61749,
  "crop": 61750,
  "crown": 61751,
  "css3": 61752,
  "database": 61753,
  "die-five": 61754,
  "die-four": 61755,
  "die-one": 61756,
  "die-six": 61757,
  "die-three": 61758,
  "die-two": 61759,
  "dislike": 61760,
  "dollar-bill": 61761,
  "dollar": 61762,
  "download": 61763,
  "eject": 61764,
  "elevator": 61765,
  "euro": 61766,
  "eye": 61767,
  "fast-forward": 61768,
  "female-symbol": 61769,
  "female": 61770,
  "filter": 61771,
  "first-aid": 61772,
  "flag": 61773,
  "folder-add": 61774,
  "folder-lock": 61775,
  "folder": 61776,
  "foot": 61777,
  "foundation": 61778,
  "graph-bar": 61779,
  "graph-horizontal": 61780,
  "graph-pie": 61781,
  "graph-trend": 61782,
  "guide-dog": 61783,
  "hearing-aid": 61784,
  "heart": 61785,
  "home": 61786,
  "html5": 61787,
  "indent-less": 61788,
  "indent-more": 61789,
  "info": 61790,
  "italic": 61791,
  "key": 61792,
  "laptop": 61793,
  "layout": 61794,
  "lightbulb": 61795,
  "like": 61796,
  "link": 61797,
  "list-bullet": 61798,
  "list-number": 61799,
  "list-thumbnails": 61800,
  "list": 61801,
  "lock": 61802,
  "loop": 61803,
  "magnifying-glass": 61804,
  "mail": 61805,
  "male-female": 61806,
  "male-symbol": 61807,
  "male": 61808,
  "map": 61809,
  "marker": 61810,
  "megaphone": 61811,
  "microphone": 61812,
  "minus-circle": 61813,
  "minus": 61814,
  "mobile-signal": 61815,
  "mobile": 61816,
  "monitor": 61817,
  "mountains": 61818,
  "music": 61819,
  "next": 61820,
  "no-dogs": 61821,
  "no-smoking": 61822,
  "page-add": 61823,
  "page-copy": 61824,
  "page-csv": 61825,
  "page-delete": 61826,
  "page-doc": 61827,
  "page-edit": 61828,
  "page-export-csv": 61829,
  "page-export-doc": 61830,
  "page-export-pdf": 61831,
  "page-export": 61832,
  "page-filled": 61833,
  "page-multiple": 61834,
  "page-pdf": 61835,
  "page-remove": 61836,
  "page-search": 61837,
  "page": 61838,
  "paint-bucket": 61839,
  "paperclip": 61840,
  "pause": 61841,
  "paw": 61842,
  "paypal": 61843,
  "pencil": 61844,
  "photo": 61845,
  "play-circle": 61846,
  "play-video": 61847,
  "play": 61848,
  "plus": 61849,
  "pound": 61850,
  "power": 61851,
  "previous": 61852,
  "price-tag": 61853,
  "pricetag-multiple": 61854,
  "print": 61855,
  "prohibited": 61856,
  "projection-screen": 61857,
  "puzzle": 61858,
  "quote": 61859,
  "record": 61860,
  "refresh": 61861,
  "results-demographics": 61862,
  "results": 61863,
  "rewind-ten": 61864,
  "rewind": 61865,
  "rss": 61866,
  "safety-cone": 61867,
  "save": 61868,
  "share": 61869,
  "sheriff-badge": 61870,
  "shield": 61871,
  "shopping-bag": 61872,
  "shopping-cart": 61873,
  "shuffle": 61874,
  "skull": 61875,
  "social-500px": 61876,
  "social-adobe": 61877,
  "social-amazon": 61878,
  "social-android": 61879,
  "social-apple": 61880,
  "social-behance": 61881,
  "social-bing": 61882,
  "social-blogger": 61883,
  "social-delicious": 61884,
  "social-designer-news": 61885,
  "social-deviant-art": 61886,
  "social-digg": 61887,
  "social-dribbble": 61888,
  "social-drive": 61889,
  "social-dropbox": 61890,
  "social-evernote": 61891,
  "social-facebook": 61892,
  "social-flickr": 61893,
  "social-forrst": 61894,
  "social-foursquare": 61895,
  "social-game-center": 61896,
  "social-github": 61897,
  "social-google-plus": 61898,
  "social-hacker-news": 61899,
  "social-hi5": 61900,
  "social-instagram": 61901,
  "social-joomla": 61902,
  "social-lastfm": 61903,
  "social-linkedin": 61904,
  "social-medium": 61905,
  "social-myspace": 61906,
  "social-orkut": 61907,
  "social-path": 61908,
  "social-picasa": 61909,
  "social-pinterest": 61910,
  "social-rdio": 61911,
  "social-reddit": 61912,
  "social-skillshare": 61913,
  "social-skype": 61914,
  "social-smashing-mag": 61915,
  "social-snapchat": 61916,
  "social-spotify": 61917,
  "social-squidoo": 61918,
  "social-stack-overflow": 61919,
  "social-steam": 61920,
  "social-stumbleupon": 61921,
  "social-treehouse": 61922,
  "social-tumblr": 61923,
  "social-twitter": 61924,
  "social-vimeo": 61925,
  "social-windows": 61926,
  "social-xbox": 61927,
  "social-yahoo": 61928,
  "social-yelp": 61929,
  "social-youtube": 61930,
  "social-zerply": 61931,
  "social-zurb": 61932,
  "sound": 61933,
  "star": 61934,
  "stop": 61935,
  "strikethrough": 61936,
  "subscript": 61937,
  "superscript": 61938,
  "tablet-landscape": 61939,
  "tablet-portrait": 61940,
  "target-two": 61941,
  "target": 61942,
  "telephone-accessible": 61943,
  "telephone": 61944,
  "text-color": 61945,
  "thumbnails": 61946,
  "ticket": 61947,
  "torso-business": 61948,
  "torso-female": 61949,
  "torso": 61950,
  "torsos-all-female": 61951,
  "torsos-all": 61952,
  "torsos-female-male": 61953,
  "torsos-male-female": 61954,
  "torsos": 61955,
  "trash": 61956,
  "trees": 61957,
  "trophy": 61958,
  "underline": 61959,
  "universal-access": 61960,
  "unlink": 61961,
  "unlock": 61962,
  "upload-cloud": 61963,
  "upload": 61964,
  "usb": 61965,
  "video": 61966,
  "volume-none": 61967,
  "volume-strike": 61968,
  "volume": 61969,
  "web": 61970,
  "wheelchair": 61971,
  "widget": 61972,
  "wrench": 61973,
  "x-circle": 61974,
  "x": 61975,
  "yen": 61976,
  "zoom-in": 61977,
  "zoom-out": 61978
};
}, 617, null, "react-native-vector-icons/glyphmaps/Foundation.json");
__d(/* react-native-vector-icons/MaterialIcons.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _MaterialIcons = require(619                             ); // 619 = ./glyphmaps/MaterialIcons.json

var _MaterialIcons2 = _interopRequireDefault(_MaterialIcons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_MaterialIcons2.default, 'Material Icons', 'MaterialIcons.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 618, null, "react-native-vector-icons/MaterialIcons.js");
__d(/* react-native-vector-icons/glyphmaps/MaterialIcons.json */function(global, require, module, exports) {module.exports = module.exports = {
  "3d-rotation": 59469,
  "ac-unit": 60219,
  "access-alarm": 57744,
  "access-alarms": 57745,
  "access-time": 57746,
  "accessibility": 59470,
  "accessible": 59668,
  "account-balance": 59471,
  "account-balance-wallet": 59472,
  "account-box": 59473,
  "account-circle": 59475,
  "adb": 58894,
  "add": 57669,
  "add-a-photo": 58425,
  "add-alarm": 57747,
  "add-alert": 57347,
  "add-box": 57670,
  "add-circle": 57671,
  "add-circle-outline": 57672,
  "add-location": 58727,
  "add-shopping-cart": 59476,
  "add-to-photos": 58269,
  "add-to-queue": 57436,
  "adjust": 58270,
  "airline-seat-flat": 58928,
  "airline-seat-flat-angled": 58929,
  "airline-seat-individual-suite": 58930,
  "airline-seat-legroom-extra": 58931,
  "airline-seat-legroom-normal": 58932,
  "airline-seat-legroom-reduced": 58933,
  "airline-seat-recline-extra": 58934,
  "airline-seat-recline-normal": 58935,
  "airplanemode-active": 57749,
  "airplanemode-inactive": 57748,
  "airplay": 57429,
  "airport-shuttle": 60220,
  "alarm": 59477,
  "alarm-add": 59478,
  "alarm-off": 59479,
  "alarm-on": 59480,
  "album": 57369,
  "all-inclusive": 60221,
  "all-out": 59659,
  "android": 59481,
  "announcement": 59482,
  "apps": 58819,
  "archive": 57673,
  "arrow-back": 58820,
  "arrow-downward": 58843,
  "arrow-drop-down": 58821,
  "arrow-drop-down-circle": 58822,
  "arrow-drop-up": 58823,
  "arrow-forward": 58824,
  "arrow-upward": 58840,
  "art-track": 57440,
  "aspect-ratio": 59483,
  "assessment": 59484,
  "assignment": 59485,
  "assignment-ind": 59486,
  "assignment-late": 59487,
  "assignment-return": 59488,
  "assignment-returned": 59489,
  "assignment-turned-in": 59490,
  "assistant": 58271,
  "assistant-photo": 58272,
  "attach-file": 57894,
  "attach-money": 57895,
  "attachment": 58044,
  "audiotrack": 58273,
  "autorenew": 59491,
  "av-timer": 57371,
  "backspace": 57674,
  "backup": 59492,
  "battery-alert": 57756,
  "battery-charging-full": 57763,
  "battery-full": 57764,
  "battery-std": 57765,
  "battery-unknown": 57766,
  "beach-access": 60222,
  "beenhere": 58669,
  "block": 57675,
  "bluetooth": 57767,
  "bluetooth-audio": 58895,
  "bluetooth-connected": 57768,
  "bluetooth-disabled": 57769,
  "bluetooth-searching": 57770,
  "blur-circular": 58274,
  "blur-linear": 58275,
  "blur-off": 58276,
  "blur-on": 58277,
  "book": 59493,
  "bookmark": 59494,
  "bookmark-border": 59495,
  "border-all": 57896,
  "border-bottom": 57897,
  "border-clear": 57898,
  "border-color": 57899,
  "border-horizontal": 57900,
  "border-inner": 57901,
  "border-left": 57902,
  "border-outer": 57903,
  "border-right": 57904,
  "border-style": 57905,
  "border-top": 57906,
  "border-vertical": 57907,
  "branding-watermark": 57451,
  "brightness-1": 58278,
  "brightness-2": 58279,
  "brightness-3": 58280,
  "brightness-4": 58281,
  "brightness-5": 58282,
  "brightness-6": 58283,
  "brightness-7": 58284,
  "brightness-auto": 57771,
  "brightness-high": 57772,
  "brightness-low": 57773,
  "brightness-medium": 57774,
  "broken-image": 58285,
  "brush": 58286,
  "bubble-chart": 59101,
  "bug-report": 59496,
  "build": 59497,
  "burst-mode": 58428,
  "business": 57519,
  "business-center": 60223,
  "cached": 59498,
  "cake": 59369,
  "call": 57520,
  "call-end": 57521,
  "call-made": 57522,
  "call-merge": 57523,
  "call-missed": 57524,
  "call-missed-outgoing": 57572,
  "call-received": 57525,
  "call-split": 57526,
  "call-to-action": 57452,
  "camera": 58287,
  "camera-alt": 58288,
  "camera-enhance": 59644,
  "camera-front": 58289,
  "camera-rear": 58290,
  "camera-roll": 58291,
  "cancel": 58825,
  "card-giftcard": 59638,
  "card-membership": 59639,
  "card-travel": 59640,
  "casino": 60224,
  "cast": 58119,
  "cast-connected": 58120,
  "center-focus-strong": 58292,
  "center-focus-weak": 58293,
  "change-history": 59499,
  "chat": 57527,
  "chat-bubble": 57546,
  "chat-bubble-outline": 57547,
  "check": 58826,
  "check-box": 59444,
  "check-box-outline-blank": 59445,
  "check-circle": 59500,
  "chevron-left": 58827,
  "chevron-right": 58828,
  "child-care": 60225,
  "child-friendly": 60226,
  "chrome-reader-mode": 59501,
  "class": 59502,
  "clear": 57676,
  "clear-all": 57528,
  "close": 58829,
  "closed-caption": 57372,
  "cloud": 58045,
  "cloud-circle": 58046,
  "cloud-done": 58047,
  "cloud-download": 58048,
  "cloud-off": 58049,
  "cloud-queue": 58050,
  "cloud-upload": 58051,
  "code": 59503,
  "collections": 58294,
  "collections-bookmark": 58417,
  "color-lens": 58295,
  "colorize": 58296,
  "comment": 57529,
  "compare": 58297,
  "compare-arrows": 59669,
  "computer": 58122,
  "confirmation-number": 58936,
  "contact-mail": 57552,
  "contact-phone": 57551,
  "contacts": 57530,
  "content-copy": 57677,
  "content-cut": 57678,
  "content-paste": 57679,
  "control-point": 58298,
  "control-point-duplicate": 58299,
  "copyright": 59660,
  "create": 57680,
  "create-new-folder": 58060,
  "credit-card": 59504,
  "crop": 58302,
  "crop-16-9": 58300,
  "crop-3-2": 58301,
  "crop-5-4": 58303,
  "crop-7-5": 58304,
  "crop-din": 58305,
  "crop-free": 58306,
  "crop-landscape": 58307,
  "crop-original": 58308,
  "crop-portrait": 58309,
  "crop-rotate": 58423,
  "crop-square": 58310,
  "dashboard": 59505,
  "data-usage": 57775,
  "date-range": 59670,
  "dehaze": 58311,
  "delete": 59506,
  "delete-forever": 59691,
  "delete-sweep": 57708,
  "description": 59507,
  "desktop-mac": 58123,
  "desktop-windows": 58124,
  "details": 58312,
  "developer-board": 58125,
  "developer-mode": 57776,
  "device-hub": 58165,
  "devices": 57777,
  "devices-other": 58167,
  "dialer-sip": 57531,
  "dialpad": 57532,
  "directions": 58670,
  "directions-bike": 58671,
  "directions-boat": 58674,
  "directions-bus": 58672,
  "directions-car": 58673,
  "directions-railway": 58676,
  "directions-run": 58726,
  "directions-subway": 58675,
  "directions-transit": 58677,
  "directions-walk": 58678,
  "disc-full": 58896,
  "dns": 59509,
  "do-not-disturb": 58898,
  "do-not-disturb-alt": 58897,
  "do-not-disturb-off": 58947,
  "do-not-disturb-on": 58948,
  "dock": 58126,
  "domain": 59374,
  "done": 59510,
  "done-all": 59511,
  "donut-large": 59671,
  "donut-small": 59672,
  "drafts": 57681,
  "drag-handle": 57949,
  "drive-eta": 58899,
  "dvr": 57778,
  "edit": 58313,
  "edit-location": 58728,
  "eject": 59643,
  "email": 57534,
  "enhanced-encryption": 58943,
  "equalizer": 57373,
  "error": 57344,
  "error-outline": 57345,
  "euro-symbol": 59686,
  "ev-station": 58733,
  "event": 59512,
  "event-available": 58900,
  "event-busy": 58901,
  "event-note": 58902,
  "event-seat": 59651,
  "exit-to-app": 59513,
  "expand-less": 58830,
  "expand-more": 58831,
  "explicit": 57374,
  "explore": 59514,
  "exposure": 58314,
  "exposure-neg-1": 58315,
  "exposure-neg-2": 58316,
  "exposure-plus-1": 58317,
  "exposure-plus-2": 58318,
  "exposure-zero": 58319,
  "extension": 59515,
  "face": 59516,
  "fast-forward": 57375,
  "fast-rewind": 57376,
  "favorite": 59517,
  "favorite-border": 59518,
  "featured-play-list": 57453,
  "featured-video": 57454,
  "feedback": 59519,
  "fiber-dvr": 57437,
  "fiber-manual-record": 57441,
  "fiber-new": 57438,
  "fiber-pin": 57450,
  "fiber-smart-record": 57442,
  "file-download": 58052,
  "file-upload": 58054,
  "filter": 58323,
  "filter-1": 58320,
  "filter-2": 58321,
  "filter-3": 58322,
  "filter-4": 58324,
  "filter-5": 58325,
  "filter-6": 58326,
  "filter-7": 58327,
  "filter-8": 58328,
  "filter-9": 58329,
  "filter-9-plus": 58330,
  "filter-b-and-w": 58331,
  "filter-center-focus": 58332,
  "filter-drama": 58333,
  "filter-frames": 58334,
  "filter-hdr": 58335,
  "filter-list": 57682,
  "filter-none": 58336,
  "filter-tilt-shift": 58338,
  "filter-vintage": 58339,
  "find-in-page": 59520,
  "find-replace": 59521,
  "fingerprint": 59661,
  "first-page": 58844,
  "fitness-center": 60227,
  "flag": 57683,
  "flare": 58340,
  "flash-auto": 58341,
  "flash-off": 58342,
  "flash-on": 58343,
  "flight": 58681,
  "flight-land": 59652,
  "flight-takeoff": 59653,
  "flip": 58344,
  "flip-to-back": 59522,
  "flip-to-front": 59523,
  "folder": 58055,
  "folder-open": 58056,
  "folder-shared": 58057,
  "folder-special": 58903,
  "font-download": 57703,
  "format-align-center": 57908,
  "format-align-justify": 57909,
  "format-align-left": 57910,
  "format-align-right": 57911,
  "format-bold": 57912,
  "format-clear": 57913,
  "format-color-fill": 57914,
  "format-color-reset": 57915,
  "format-color-text": 57916,
  "format-indent-decrease": 57917,
  "format-indent-increase": 57918,
  "format-italic": 57919,
  "format-line-spacing": 57920,
  "format-list-bulleted": 57921,
  "format-list-numbered": 57922,
  "format-paint": 57923,
  "format-quote": 57924,
  "format-shapes": 57950,
  "format-size": 57925,
  "format-strikethrough": 57926,
  "format-textdirection-l-to-r": 57927,
  "format-textdirection-r-to-l": 57928,
  "format-underlined": 57929,
  "forum": 57535,
  "forward": 57684,
  "forward-10": 57430,
  "forward-30": 57431,
  "forward-5": 57432,
  "free-breakfast": 60228,
  "fullscreen": 58832,
  "fullscreen-exit": 58833,
  "functions": 57930,
  "g-translate": 59687,
  "gamepad": 58127,
  "games": 57377,
  "gavel": 59662,
  "gesture": 57685,
  "get-app": 59524,
  "gif": 59656,
  "golf-course": 60229,
  "gps-fixed": 57779,
  "gps-not-fixed": 57780,
  "gps-off": 57781,
  "grade": 59525,
  "gradient": 58345,
  "grain": 58346,
  "graphic-eq": 57784,
  "grid-off": 58347,
  "grid-on": 58348,
  "group": 59375,
  "group-add": 59376,
  "group-work": 59526,
  "hd": 57426,
  "hdr-off": 58349,
  "hdr-on": 58350,
  "hdr-strong": 58353,
  "hdr-weak": 58354,
  "headset": 58128,
  "headset-mic": 58129,
  "healing": 58355,
  "hearing": 57379,
  "help": 59527,
  "help-outline": 59645,
  "high-quality": 57380,
  "highlight": 57951,
  "highlight-off": 59528,
  "history": 59529,
  "home": 59530,
  "hot-tub": 60230,
  "hotel": 58682,
  "hourglass-empty": 59531,
  "hourglass-full": 59532,
  "http": 59650,
  "https": 59533,
  "image": 58356,
  "image-aspect-ratio": 58357,
  "import-contacts": 57568,
  "import-export": 57539,
  "important-devices": 59666,
  "inbox": 57686,
  "indeterminate-check-box": 59657,
  "info": 59534,
  "info-outline": 59535,
  "input": 59536,
  "insert-chart": 57931,
  "insert-comment": 57932,
  "insert-drive-file": 57933,
  "insert-emoticon": 57934,
  "insert-invitation": 57935,
  "insert-link": 57936,
  "insert-photo": 57937,
  "invert-colors": 59537,
  "invert-colors-off": 57540,
  "iso": 58358,
  "keyboard": 58130,
  "keyboard-arrow-down": 58131,
  "keyboard-arrow-left": 58132,
  "keyboard-arrow-right": 58133,
  "keyboard-arrow-up": 58134,
  "keyboard-backspace": 58135,
  "keyboard-capslock": 58136,
  "keyboard-hide": 58138,
  "keyboard-return": 58139,
  "keyboard-tab": 58140,
  "keyboard-voice": 58141,
  "kitchen": 60231,
  "label": 59538,
  "label-outline": 59539,
  "landscape": 58359,
  "language": 59540,
  "laptop": 58142,
  "laptop-chromebook": 58143,
  "laptop-mac": 58144,
  "laptop-windows": 58145,
  "last-page": 58845,
  "launch": 59541,
  "layers": 58683,
  "layers-clear": 58684,
  "leak-add": 58360,
  "leak-remove": 58361,
  "lens": 58362,
  "library-add": 57390,
  "library-books": 57391,
  "library-music": 57392,
  "lightbulb-outline": 59663,
  "line-style": 59673,
  "line-weight": 59674,
  "linear-scale": 57952,
  "link": 57687,
  "linked-camera": 58424,
  "list": 59542,
  "live-help": 57542,
  "live-tv": 58937,
  "local-activity": 58687,
  "local-airport": 58685,
  "local-atm": 58686,
  "local-bar": 58688,
  "local-cafe": 58689,
  "local-car-wash": 58690,
  "local-convenience-store": 58691,
  "local-dining": 58710,
  "local-drink": 58692,
  "local-florist": 58693,
  "local-gas-station": 58694,
  "local-grocery-store": 58695,
  "local-hospital": 58696,
  "local-hotel": 58697,
  "local-laundry-service": 58698,
  "local-library": 58699,
  "local-mall": 58700,
  "local-movies": 58701,
  "local-offer": 58702,
  "local-parking": 58703,
  "local-pharmacy": 58704,
  "local-phone": 58705,
  "local-pizza": 58706,
  "local-play": 58707,
  "local-post-office": 58708,
  "local-printshop": 58709,
  "local-see": 58711,
  "local-shipping": 58712,
  "local-taxi": 58713,
  "location-city": 59377,
  "location-disabled": 57782,
  "location-off": 57543,
  "location-on": 57544,
  "location-searching": 57783,
  "lock": 59543,
  "lock-open": 59544,
  "lock-outline": 59545,
  "looks": 58364,
  "looks-3": 58363,
  "looks-4": 58365,
  "looks-5": 58366,
  "looks-6": 58367,
  "looks-one": 58368,
  "looks-two": 58369,
  "loop": 57384,
  "loupe": 58370,
  "low-priority": 57709,
  "loyalty": 59546,
  "mail": 57688,
  "mail-outline": 57569,
  "map": 58715,
  "markunread": 57689,
  "markunread-mailbox": 59547,
  "memory": 58146,
  "menu": 58834,
  "merge-type": 57938,
  "message": 57545,
  "mic": 57385,
  "mic-none": 57386,
  "mic-off": 57387,
  "mms": 58904,
  "mode-comment": 57939,
  "mode-edit": 57940,
  "monetization-on": 57955,
  "money-off": 57948,
  "monochrome-photos": 58371,
  "mood": 59378,
  "mood-bad": 59379,
  "more": 58905,
  "more-horiz": 58835,
  "more-vert": 58836,
  "motorcycle": 59675,
  "mouse": 58147,
  "move-to-inbox": 57704,
  "movie": 57388,
  "movie-creation": 58372,
  "movie-filter": 58426,
  "multiline-chart": 59103,
  "music-note": 58373,
  "music-video": 57443,
  "my-location": 58716,
  "nature": 58374,
  "nature-people": 58375,
  "navigate-before": 58376,
  "navigate-next": 58377,
  "navigation": 58717,
  "near-me": 58729,
  "network-cell": 57785,
  "network-check": 58944,
  "network-locked": 58906,
  "network-wifi": 57786,
  "new-releases": 57393,
  "next-week": 57706,
  "nfc": 57787,
  "no-encryption": 58945,
  "no-sim": 57548,
  "not-interested": 57395,
  "note": 57455,
  "note-add": 59548,
  "notifications": 59380,
  "notifications-active": 59383,
  "notifications-none": 59381,
  "notifications-off": 59382,
  "notifications-paused": 59384,
  "offline-pin": 59658,
  "ondemand-video": 58938,
  "opacity": 59676,
  "open-in-browser": 59549,
  "open-in-new": 59550,
  "open-with": 59551,
  "pages": 59385,
  "pageview": 59552,
  "palette": 58378,
  "pan-tool": 59685,
  "panorama": 58379,
  "panorama-fish-eye": 58380,
  "panorama-horizontal": 58381,
  "panorama-vertical": 58382,
  "panorama-wide-angle": 58383,
  "party-mode": 59386,
  "pause": 57396,
  "pause-circle-filled": 57397,
  "pause-circle-outline": 57398,
  "payment": 59553,
  "people": 59387,
  "people-outline": 59388,
  "perm-camera-mic": 59554,
  "perm-contact-calendar": 59555,
  "perm-data-setting": 59556,
  "perm-device-information": 59557,
  "perm-identity": 59558,
  "perm-media": 59559,
  "perm-phone-msg": 59560,
  "perm-scan-wifi": 59561,
  "person": 59389,
  "person-add": 59390,
  "person-outline": 59391,
  "person-pin": 58714,
  "person-pin-circle": 58730,
  "personal-video": 58939,
  "pets": 59677,
  "phone": 57549,
  "phone-android": 58148,
  "phone-bluetooth-speaker": 58907,
  "phone-forwarded": 58908,
  "phone-in-talk": 58909,
  "phone-iphone": 58149,
  "phone-locked": 58910,
  "phone-missed": 58911,
  "phone-paused": 58912,
  "phonelink": 58150,
  "phonelink-erase": 57563,
  "phonelink-lock": 57564,
  "phonelink-off": 58151,
  "phonelink-ring": 57565,
  "phonelink-setup": 57566,
  "photo": 58384,
  "photo-album": 58385,
  "photo-camera": 58386,
  "photo-filter": 58427,
  "photo-library": 58387,
  "photo-size-select-actual": 58418,
  "photo-size-select-large": 58419,
  "photo-size-select-small": 58420,
  "picture-as-pdf": 58389,
  "picture-in-picture": 59562,
  "picture-in-picture-alt": 59665,
  "pie-chart": 59076,
  "pie-chart-outlined": 59077,
  "pin-drop": 58718,
  "place": 58719,
  "play-arrow": 57399,
  "play-circle-filled": 57400,
  "play-circle-outline": 57401,
  "play-for-work": 59654,
  "playlist-add": 57403,
  "playlist-add-check": 57445,
  "playlist-play": 57439,
  "plus-one": 59392,
  "poll": 59393,
  "polymer": 59563,
  "pool": 60232,
  "portable-wifi-off": 57550,
  "portrait": 58390,
  "power": 58940,
  "power-input": 58166,
  "power-settings-new": 59564,
  "pregnant-woman": 59678,
  "present-to-all": 57567,
  "print": 59565,
  "priority-high": 58949,
  "public": 59403,
  "publish": 57941,
  "query-builder": 59566,
  "question-answer": 59567,
  "queue": 57404,
  "queue-music": 57405,
  "queue-play-next": 57446,
  "radio": 57406,
  "radio-button-checked": 59447,
  "radio-button-unchecked": 59446,
  "rate-review": 58720,
  "receipt": 59568,
  "recent-actors": 57407,
  "record-voice-over": 59679,
  "redeem": 59569,
  "redo": 57690,
  "refresh": 58837,
  "remove": 57691,
  "remove-circle": 57692,
  "remove-circle-outline": 57693,
  "remove-from-queue": 57447,
  "remove-red-eye": 58391,
  "remove-shopping-cart": 59688,
  "reorder": 59646,
  "repeat": 57408,
  "repeat-one": 57409,
  "replay": 57410,
  "replay-10": 57433,
  "replay-30": 57434,
  "replay-5": 57435,
  "reply": 57694,
  "reply-all": 57695,
  "report": 57696,
  "report-problem": 59570,
  "restaurant": 58732,
  "restaurant-menu": 58721,
  "restore": 59571,
  "restore-page": 59689,
  "ring-volume": 57553,
  "room": 59572,
  "room-service": 60233,
  "rotate-90-degrees-ccw": 58392,
  "rotate-left": 58393,
  "rotate-right": 58394,
  "rounded-corner": 59680,
  "router": 58152,
  "rowing": 59681,
  "rss-feed": 57573,
  "rv-hookup": 58946,
  "satellite": 58722,
  "save": 57697,
  "scanner": 58153,
  "schedule": 59573,
  "school": 59404,
  "screen-lock-landscape": 57790,
  "screen-lock-portrait": 57791,
  "screen-lock-rotation": 57792,
  "screen-rotation": 57793,
  "screen-share": 57570,
  "sd-card": 58915,
  "sd-storage": 57794,
  "search": 59574,
  "security": 58154,
  "select-all": 57698,
  "send": 57699,
  "sentiment-dissatisfied": 59409,
  "sentiment-neutral": 59410,
  "sentiment-satisfied": 59411,
  "sentiment-very-dissatisfied": 59412,
  "sentiment-very-satisfied": 59413,
  "settings": 59576,
  "settings-applications": 59577,
  "settings-backup-restore": 59578,
  "settings-bluetooth": 59579,
  "settings-brightness": 59581,
  "settings-cell": 59580,
  "settings-ethernet": 59582,
  "settings-input-antenna": 59583,
  "settings-input-component": 59584,
  "settings-input-composite": 59585,
  "settings-input-hdmi": 59586,
  "settings-input-svideo": 59587,
  "settings-overscan": 59588,
  "settings-phone": 59589,
  "settings-power": 59590,
  "settings-remote": 59591,
  "settings-system-daydream": 57795,
  "settings-voice": 59592,
  "share": 59405,
  "shop": 59593,
  "shop-two": 59594,
  "shopping-basket": 59595,
  "shopping-cart": 59596,
  "short-text": 57953,
  "show-chart": 59105,
  "shuffle": 57411,
  "signal-cellular-4-bar": 57800,
  "signal-cellular-connected-no-internet-4-bar": 57805,
  "signal-cellular-no-sim": 57806,
  "signal-cellular-null": 57807,
  "signal-cellular-off": 57808,
  "signal-wifi-4-bar": 57816,
  "signal-wifi-4-bar-lock": 57817,
  "signal-wifi-off": 57818,
  "sim-card": 58155,
  "sim-card-alert": 58916,
  "skip-next": 57412,
  "skip-previous": 57413,
  "slideshow": 58395,
  "slow-motion-video": 57448,
  "smartphone": 58156,
  "smoke-free": 60234,
  "smoking-rooms": 60235,
  "sms": 58917,
  "sms-failed": 58918,
  "snooze": 57414,
  "sort": 57700,
  "sort-by-alpha": 57427,
  "spa": 60236,
  "space-bar": 57942,
  "speaker": 58157,
  "speaker-group": 58158,
  "speaker-notes": 59597,
  "speaker-notes-off": 59690,
  "speaker-phone": 57554,
  "spellcheck": 59598,
  "star": 59448,
  "star-border": 59450,
  "star-half": 59449,
  "stars": 59600,
  "stay-current-landscape": 57555,
  "stay-current-portrait": 57556,
  "stay-primary-landscape": 57557,
  "stay-primary-portrait": 57558,
  "stop": 57415,
  "stop-screen-share": 57571,
  "storage": 57819,
  "store": 59601,
  "store-mall-directory": 58723,
  "straighten": 58396,
  "streetview": 58734,
  "strikethrough-s": 57943,
  "style": 58397,
  "subdirectory-arrow-left": 58841,
  "subdirectory-arrow-right": 58842,
  "subject": 59602,
  "subscriptions": 57444,
  "subtitles": 57416,
  "subway": 58735,
  "supervisor-account": 59603,
  "surround-sound": 57417,
  "swap-calls": 57559,
  "swap-horiz": 59604,
  "swap-vert": 59605,
  "swap-vertical-circle": 59606,
  "switch-camera": 58398,
  "switch-video": 58399,
  "sync": 58919,
  "sync-disabled": 58920,
  "sync-problem": 58921,
  "system-update": 58922,
  "system-update-alt": 59607,
  "tab": 59608,
  "tab-unselected": 59609,
  "tablet": 58159,
  "tablet-android": 58160,
  "tablet-mac": 58161,
  "tag-faces": 58400,
  "tap-and-play": 58923,
  "terrain": 58724,
  "text-fields": 57954,
  "text-format": 57701,
  "textsms": 57560,
  "texture": 58401,
  "theaters": 59610,
  "thumb-down": 59611,
  "thumb-up": 59612,
  "thumbs-up-down": 59613,
  "time-to-leave": 58924,
  "timelapse": 58402,
  "timeline": 59682,
  "timer": 58405,
  "timer-10": 58403,
  "timer-3": 58404,
  "timer-off": 58406,
  "title": 57956,
  "toc": 59614,
  "today": 59615,
  "toll": 59616,
  "tonality": 58407,
  "touch-app": 59667,
  "toys": 58162,
  "track-changes": 59617,
  "traffic": 58725,
  "train": 58736,
  "tram": 58737,
  "transfer-within-a-station": 58738,
  "transform": 58408,
  "translate": 59618,
  "trending-down": 59619,
  "trending-flat": 59620,
  "trending-up": 59621,
  "tune": 58409,
  "turned-in": 59622,
  "turned-in-not": 59623,
  "tv": 58163,
  "unarchive": 57705,
  "undo": 57702,
  "unfold-less": 58838,
  "unfold-more": 58839,
  "update": 59683,
  "usb": 57824,
  "verified-user": 59624,
  "vertical-align-bottom": 57944,
  "vertical-align-center": 57945,
  "vertical-align-top": 57946,
  "vibration": 58925,
  "video-call": 57456,
  "video-label": 57457,
  "video-library": 57418,
  "videocam": 57419,
  "videocam-off": 57420,
  "videogame-asset": 58168,
  "view-agenda": 59625,
  "view-array": 59626,
  "view-carousel": 59627,
  "view-column": 59628,
  "view-comfy": 58410,
  "view-compact": 58411,
  "view-day": 59629,
  "view-headline": 59630,
  "view-list": 59631,
  "view-module": 59632,
  "view-quilt": 59633,
  "view-stream": 59634,
  "view-week": 59635,
  "vignette": 58421,
  "visibility": 59636,
  "visibility-off": 59637,
  "voice-chat": 58926,
  "voicemail": 57561,
  "volume-down": 57421,
  "volume-mute": 57422,
  "volume-off": 57423,
  "volume-up": 57424,
  "vpn-key": 57562,
  "vpn-lock": 58927,
  "wallpaper": 57788,
  "warning": 57346,
  "watch": 58164,
  "watch-later": 59684,
  "wb-auto": 58412,
  "wb-cloudy": 58413,
  "wb-incandescent": 58414,
  "wb-iridescent": 58422,
  "wb-sunny": 58416,
  "wc": 58941,
  "web": 57425,
  "web-asset": 57449,
  "weekend": 57707,
  "whatshot": 59406,
  "widgets": 57789,
  "wifi": 58942,
  "wifi-lock": 57825,
  "wifi-tethering": 57826,
  "work": 59641,
  "wrap-text": 57947,
  "youtube-searched-for": 59642,
  "zoom-in": 59647,
  "zoom-out": 59648,
  "zoom-out-map": 58731
};
}, 619, null, "react-native-vector-icons/glyphmaps/MaterialIcons.json");
__d(/* react-native-vector-icons/MaterialCommunityIcons.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _MaterialCommunityIcons = require(621                                      ); // 621 = ./glyphmaps/MaterialCommunityIcons.json

var _MaterialCommunityIcons2 = _interopRequireDefault(_MaterialCommunityIcons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_MaterialCommunityIcons2.default, 'Material Design Icons', 'MaterialCommunityIcons.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 620, null, "react-native-vector-icons/MaterialCommunityIcons.js");
__d(/* react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json */function(global, require, module, exports) {module.exports = module.exports = {
  "access-point": 61442,
  "access-point-network": 61443,
  "account": 61444,
  "account-alert": 61445,
  "account-box": 61446,
  "account-box-outline": 61447,
  "account-card-details": 62930,
  "account-check": 61448,
  "account-circle": 61449,
  "account-convert": 61450,
  "account-edit": 63163,
  "account-key": 61451,
  "account-location": 61452,
  "account-minus": 61453,
  "account-multiple": 61454,
  "account-multiple-minus": 62931,
  "account-multiple-outline": 61455,
  "account-multiple-plus": 61456,
  "account-network": 61457,
  "account-off": 61458,
  "account-outline": 61459,
  "account-plus": 61460,
  "account-remove": 61461,
  "account-search": 61462,
  "account-settings": 63024,
  "account-settings-variant": 63025,
  "account-star": 61463,
  "account-switch": 61465,
  "adjust": 61466,
  "air-conditioner": 61467,
  "airballoon": 61468,
  "airplane": 61469,
  "airplane-landing": 62932,
  "airplane-off": 61470,
  "airplane-takeoff": 62933,
  "airplay": 61471,
  "alarm": 61472,
  "alarm-check": 61473,
  "alarm-multiple": 61474,
  "alarm-off": 61475,
  "alarm-plus": 61476,
  "alarm-snooze": 63117,
  "album": 61477,
  "alert": 61478,
  "alert-box": 61479,
  "alert-circle": 61480,
  "alert-circle-outline": 62934,
  "alert-decagram": 63164,
  "alert-octagon": 61481,
  "alert-octagram": 63334,
  "alert-outline": 61482,
  "all-inclusive": 63165,
  "alpha": 61483,
  "alphabetical": 61484,
  "altimeter": 62935,
  "amazon": 61485,
  "amazon-clouddrive": 61486,
  "ambulance": 61487,
  "amplifier": 61488,
  "anchor": 61489,
  "android": 61490,
  "android-debug-bridge": 61491,
  "android-studio": 61492,
  "angular": 63153,
  "angularjs": 63166,
  "animation": 62936,
  "apple": 61493,
  "apple-finder": 61494,
  "apple-ios": 61495,
  "apple-keyboard-caps": 63026,
  "apple-keyboard-command": 63027,
  "apple-keyboard-control": 63028,
  "apple-keyboard-option": 63029,
  "apple-keyboard-shift": 63030,
  "apple-mobileme": 61496,
  "apple-safari": 61497,
  "application": 62996,
  "apps": 61499,
  "archive": 61500,
  "arrange-bring-forward": 61501,
  "arrange-bring-to-front": 61502,
  "arrange-send-backward": 61503,
  "arrange-send-to-back": 61504,
  "arrow-all": 61505,
  "arrow-bottom-left": 61506,
  "arrow-bottom-right": 61507,
  "arrow-compress": 62997,
  "arrow-compress-all": 61508,
  "arrow-down": 61509,
  "arrow-down-bold": 63277,
  "arrow-down-bold-box": 63278,
  "arrow-down-bold-box-outline": 63279,
  "arrow-down-bold-circle": 61511,
  "arrow-down-bold-circle-outline": 61512,
  "arrow-down-bold-hexagon-outline": 61513,
  "arrow-down-box": 63167,
  "arrow-down-drop-circle": 61514,
  "arrow-down-drop-circle-outline": 61515,
  "arrow-down-thick": 61510,
  "arrow-expand": 62998,
  "arrow-expand-all": 61516,
  "arrow-left": 61517,
  "arrow-left-bold": 63280,
  "arrow-left-bold-box": 63281,
  "arrow-left-bold-box-outline": 63282,
  "arrow-left-bold-circle": 61519,
  "arrow-left-bold-circle-outline": 61520,
  "arrow-left-bold-hexagon-outline": 61521,
  "arrow-left-box": 63168,
  "arrow-left-drop-circle": 61522,
  "arrow-left-drop-circle-outline": 61523,
  "arrow-left-thick": 61518,
  "arrow-right": 61524,
  "arrow-right-bold": 63283,
  "arrow-right-bold-box": 63284,
  "arrow-right-bold-box-outline": 63285,
  "arrow-right-bold-circle": 61526,
  "arrow-right-bold-circle-outline": 61527,
  "arrow-right-bold-hexagon-outline": 61528,
  "arrow-right-box": 63169,
  "arrow-right-drop-circle": 61529,
  "arrow-right-drop-circle-outline": 61530,
  "arrow-right-thick": 61525,
  "arrow-top-left": 61531,
  "arrow-top-right": 61532,
  "arrow-up": 61533,
  "arrow-up-bold": 63286,
  "arrow-up-bold-box": 63287,
  "arrow-up-bold-box-outline": 63288,
  "arrow-up-bold-circle": 61535,
  "arrow-up-bold-circle-outline": 61536,
  "arrow-up-bold-hexagon-outline": 61537,
  "arrow-up-box": 63170,
  "arrow-up-drop-circle": 61538,
  "arrow-up-drop-circle-outline": 61539,
  "arrow-up-thick": 61534,
  "assistant": 61540,
  "asterisk": 63171,
  "at": 61541,
  "atom": 63335,
  "attachment": 61542,
  "audiobook": 61543,
  "auto-fix": 61544,
  "auto-upload": 61545,
  "autorenew": 61546,
  "av-timer": 61547,
  "baby": 61548,
  "baby-buggy": 63118,
  "backburger": 61549,
  "backspace": 61550,
  "backup-restore": 61551,
  "bandcamp": 63092,
  "bank": 61552,
  "barcode": 61553,
  "barcode-scan": 61554,
  "barley": 61555,
  "barrel": 61556,
  "basecamp": 61557,
  "basket": 61558,
  "basket-fill": 61559,
  "basket-unfill": 61560,
  "battery": 61561,
  "battery-10": 61562,
  "battery-20": 61563,
  "battery-30": 61564,
  "battery-40": 61565,
  "battery-50": 61566,
  "battery-60": 61567,
  "battery-70": 61568,
  "battery-80": 61569,
  "battery-90": 61570,
  "battery-alert": 61571,
  "battery-charging": 61572,
  "battery-charging-100": 61573,
  "battery-charging-20": 61574,
  "battery-charging-30": 61575,
  "battery-charging-40": 61576,
  "battery-charging-60": 61577,
  "battery-charging-80": 61578,
  "battery-charging-90": 61579,
  "battery-minus": 61580,
  "battery-negative": 61581,
  "battery-outline": 61582,
  "battery-plus": 61583,
  "battery-positive": 61584,
  "battery-unknown": 61585,
  "beach": 61586,
  "beaker": 63119,
  "beats": 61591,
  "beer": 61592,
  "behance": 61593,
  "bell": 61594,
  "bell-off": 61595,
  "bell-outline": 61596,
  "bell-plus": 61597,
  "bell-ring": 61598,
  "bell-ring-outline": 61599,
  "bell-sleep": 61600,
  "beta": 61601,
  "bible": 61602,
  "bike": 61603,
  "bing": 61604,
  "binoculars": 61605,
  "bio": 61606,
  "biohazard": 61607,
  "bitbucket": 61608,
  "black-mesa": 61609,
  "blackberry": 61610,
  "blender": 61611,
  "blinds": 61612,
  "block-helper": 61613,
  "blogger": 61614,
  "bluetooth": 61615,
  "bluetooth-audio": 61616,
  "bluetooth-connect": 61617,
  "bluetooth-off": 61618,
  "bluetooth-settings": 61619,
  "bluetooth-transfer": 61620,
  "blur": 61621,
  "blur-linear": 61622,
  "blur-off": 61623,
  "blur-radial": 61624,
  "bomb": 63120,
  "bomb-off": 63172,
  "bone": 61625,
  "book": 61626,
  "book-minus": 62937,
  "book-multiple": 61627,
  "book-multiple-variant": 61628,
  "book-open": 61629,
  "book-open-page-variant": 62938,
  "book-open-variant": 61630,
  "book-plus": 62939,
  "book-variant": 61631,
  "bookmark": 61632,
  "bookmark-check": 61633,
  "bookmark-music": 61634,
  "bookmark-outline": 61635,
  "bookmark-plus": 61637,
  "bookmark-plus-outline": 61636,
  "bookmark-remove": 61638,
  "boombox": 62940,
  "bootstrap": 63173,
  "border-all": 61639,
  "border-bottom": 61640,
  "border-color": 61641,
  "border-horizontal": 61642,
  "border-inside": 61643,
  "border-left": 61644,
  "border-none": 61645,
  "border-outside": 61646,
  "border-right": 61647,
  "border-style": 61648,
  "border-top": 61649,
  "border-vertical": 61650,
  "bow-tie": 63095,
  "bowl": 62999,
  "bowling": 61651,
  "box": 61652,
  "box-cutter": 61653,
  "box-shadow": 63031,
  "bridge": 63000,
  "briefcase": 61654,
  "briefcase-check": 61655,
  "briefcase-download": 61656,
  "briefcase-upload": 61657,
  "brightness-1": 61658,
  "brightness-2": 61659,
  "brightness-3": 61660,
  "brightness-4": 61661,
  "brightness-5": 61662,
  "brightness-6": 61663,
  "brightness-7": 61664,
  "brightness-auto": 61665,
  "broom": 61666,
  "brush": 61667,
  "buffer": 63001,
  "bug": 61668,
  "bulletin-board": 61669,
  "bullhorn": 61670,
  "bullseye": 62941,
  "burst-mode": 62942,
  "bus": 61671,
  "cached": 61672,
  "cake": 61673,
  "cake-layered": 61674,
  "cake-variant": 61675,
  "calculator": 61676,
  "calendar": 61677,
  "calendar-blank": 61678,
  "calendar-check": 61679,
  "calendar-clock": 61680,
  "calendar-multiple": 61681,
  "calendar-multiple-check": 61682,
  "calendar-plus": 61683,
  "calendar-question": 63121,
  "calendar-range": 63096,
  "calendar-remove": 61684,
  "calendar-text": 61685,
  "calendar-today": 61686,
  "call-made": 61687,
  "call-merge": 61688,
  "call-missed": 61689,
  "call-received": 61690,
  "call-split": 61691,
  "camcorder": 61692,
  "camcorder-box": 61693,
  "camcorder-box-off": 61694,
  "camcorder-off": 61695,
  "camera": 61696,
  "camera-burst": 63122,
  "camera-enhance": 61697,
  "camera-front": 61698,
  "camera-front-variant": 61699,
  "camera-iris": 61700,
  "camera-off": 62943,
  "camera-party-mode": 61701,
  "camera-rear": 61702,
  "camera-rear-variant": 61703,
  "camera-switch": 61704,
  "camera-timer": 61705,
  "cancel": 63289,
  "candle": 62946,
  "candycane": 61706,
  "car": 61707,
  "car-battery": 61708,
  "car-connected": 61709,
  "car-wash": 61710,
  "cards": 63032,
  "cards-outline": 63033,
  "cards-playing-outline": 63034,
  "cards-variant": 63174,
  "carrot": 61711,
  "cart": 61712,
  "cart-off": 63083,
  "cart-outline": 61713,
  "cart-plus": 61714,
  "case-sensitive-alt": 61715,
  "cash": 61716,
  "cash-100": 61717,
  "cash-multiple": 61718,
  "cash-usd": 61719,
  "cast": 61720,
  "cast-connected": 61721,
  "cast-off": 63369,
  "castle": 61722,
  "cat": 61723,
  "ceiling-light": 63336,
  "cellphone": 61724,
  "cellphone-android": 61725,
  "cellphone-basic": 61726,
  "cellphone-dock": 61727,
  "cellphone-iphone": 61728,
  "cellphone-link": 61729,
  "cellphone-link-off": 61730,
  "cellphone-settings": 61731,
  "certificate": 61732,
  "chair-school": 61733,
  "chart-arc": 61734,
  "chart-areaspline": 61735,
  "chart-bar": 61736,
  "chart-bar-stacked": 63337,
  "chart-bubble": 62947,
  "chart-gantt": 63084,
  "chart-histogram": 61737,
  "chart-line": 61738,
  "chart-line-stacked": 63338,
  "chart-pie": 61739,
  "chart-scatterplot-hexbin": 63085,
  "chart-timeline": 63086,
  "check": 61740,
  "check-all": 61741,
  "check-circle": 62944,
  "check-circle-outline": 62945,
  "checkbox-blank": 61742,
  "checkbox-blank-circle": 61743,
  "checkbox-blank-circle-outline": 61744,
  "checkbox-blank-outline": 61745,
  "checkbox-marked": 61746,
  "checkbox-marked-circle": 61747,
  "checkbox-marked-circle-outline": 61748,
  "checkbox-marked-outline": 61749,
  "checkbox-multiple-blank": 61750,
  "checkbox-multiple-blank-circle": 63035,
  "checkbox-multiple-blank-circle-outline": 63036,
  "checkbox-multiple-blank-outline": 61751,
  "checkbox-multiple-marked": 61752,
  "checkbox-multiple-marked-circle": 63037,
  "checkbox-multiple-marked-circle-outline": 63038,
  "checkbox-multiple-marked-outline": 61753,
  "checkerboard": 61754,
  "chemical-weapon": 61755,
  "chevron-double-down": 61756,
  "chevron-double-left": 61757,
  "chevron-double-right": 61758,
  "chevron-double-up": 61759,
  "chevron-down": 61760,
  "chevron-left": 61761,
  "chevron-right": 61762,
  "chevron-up": 61763,
  "chip": 63002,
  "church": 61764,
  "circle": 63332,
  "circle-outline": 63333,
  "cisco-webex": 61765,
  "city": 61766,
  "clipboard": 61767,
  "clipboard-account": 61768,
  "clipboard-alert": 61769,
  "clipboard-arrow-down": 61770,
  "clipboard-arrow-left": 61771,
  "clipboard-check": 61772,
  "clipboard-flow": 63175,
  "clipboard-outline": 61773,
  "clipboard-plus": 63312,
  "clipboard-text": 61774,
  "clippy": 61775,
  "clock": 61776,
  "clock-alert": 62926,
  "clock-end": 61777,
  "clock-fast": 61778,
  "clock-in": 61779,
  "clock-out": 61780,
  "clock-start": 61781,
  "close": 61782,
  "close-box": 61783,
  "close-box-outline": 61784,
  "close-circle": 61785,
  "close-circle-outline": 61786,
  "close-network": 61787,
  "close-octagon": 61788,
  "close-octagon-outline": 61789,
  "close-outline": 63176,
  "closed-caption": 61790,
  "cloud": 61791,
  "cloud-check": 61792,
  "cloud-circle": 61793,
  "cloud-download": 61794,
  "cloud-off-outline": 61796,
  "cloud-outline": 61795,
  "cloud-print": 61797,
  "cloud-print-outline": 61798,
  "cloud-sync": 63039,
  "cloud-upload": 61799,
  "code-array": 61800,
  "code-braces": 61801,
  "code-brackets": 61802,
  "code-equal": 61803,
  "code-greater-than": 61804,
  "code-greater-than-or-equal": 61805,
  "code-less-than": 61806,
  "code-less-than-or-equal": 61807,
  "code-not-equal": 61808,
  "code-not-equal-variant": 61809,
  "code-parentheses": 61810,
  "code-string": 61811,
  "code-tags": 61812,
  "code-tags-check": 63123,
  "codepen": 61813,
  "coffee": 61814,
  "coffee-outline": 63177,
  "coffee-to-go": 61815,
  "coin": 61816,
  "coins": 63124,
  "collage": 63040,
  "color-helper": 61817,
  "comment": 61818,
  "comment-account": 61819,
  "comment-account-outline": 61820,
  "comment-alert": 61821,
  "comment-alert-outline": 61822,
  "comment-check": 61823,
  "comment-check-outline": 61824,
  "comment-multiple-outline": 61825,
  "comment-outline": 61826,
  "comment-plus-outline": 61827,
  "comment-processing": 61828,
  "comment-processing-outline": 61829,
  "comment-question-outline": 61830,
  "comment-remove-outline": 61831,
  "comment-text": 61832,
  "comment-text-outline": 61833,
  "compare": 61834,
  "compass": 61835,
  "compass-outline": 61836,
  "console": 61837,
  "contact-mail": 61838,
  "contacts": 63178,
  "content-copy": 61839,
  "content-cut": 61840,
  "content-duplicate": 61841,
  "content-paste": 61842,
  "content-save": 61843,
  "content-save-all": 61844,
  "content-save-settings": 63003,
  "contrast": 61845,
  "contrast-box": 61846,
  "contrast-circle": 61847,
  "cookie": 61848,
  "copyright": 62950,
  "counter": 61849,
  "cow": 61850,
  "creation": 61897,
  "credit-card": 61851,
  "credit-card-multiple": 61852,
  "credit-card-off": 62948,
  "credit-card-plus": 63093,
  "credit-card-scan": 61853,
  "crop": 61854,
  "crop-free": 61855,
  "crop-landscape": 61856,
  "crop-portrait": 61857,
  "crop-rotate": 63125,
  "crop-square": 61858,
  "crosshairs": 61859,
  "crosshairs-gps": 61860,
  "crown": 61861,
  "cube": 61862,
  "cube-outline": 61863,
  "cube-send": 61864,
  "cube-unfolded": 61865,
  "cup": 61866,
  "cup-off": 62949,
  "cup-water": 61867,
  "currency-btc": 61868,
  "currency-eur": 61869,
  "currency-gbp": 61870,
  "currency-inr": 61871,
  "currency-ngn": 61872,
  "currency-rub": 61873,
  "currency-try": 61874,
  "currency-usd": 61875,
  "currency-usd-off": 63097,
  "cursor-default": 61876,
  "cursor-default-outline": 61877,
  "cursor-move": 61878,
  "cursor-pointer": 61879,
  "cursor-text": 62951,
  "database": 61880,
  "database-minus": 61881,
  "database-plus": 61882,
  "debug-step-into": 61883,
  "debug-step-out": 61884,
  "debug-step-over": 61885,
  "decagram": 63339,
  "decagram-outline": 63340,
  "decimal-decrease": 61886,
  "decimal-increase": 61887,
  "delete": 61888,
  "delete-circle": 63106,
  "delete-empty": 63179,
  "delete-forever": 62952,
  "delete-sweep": 62953,
  "delete-variant": 61889,
  "delta": 61890,
  "deskphone": 61891,
  "desktop-mac": 61892,
  "desktop-tower": 61893,
  "details": 61894,
  "developer-board": 63126,
  "deviantart": 61895,
  "dialpad": 63004,
  "diamond": 61896,
  "dice-1": 61898,
  "dice-2": 61899,
  "dice-3": 61900,
  "dice-4": 61901,
  "dice-5": 61902,
  "dice-6": 61903,
  "dice-d10": 63342,
  "dice-d20": 62954,
  "dice-d4": 62955,
  "dice-d6": 62956,
  "dice-d8": 62957,
  "dice-multiple": 63341,
  "dictionary": 63005,
  "directions": 61904,
  "directions-fork": 63041,
  "discord": 63087,
  "disk": 62958,
  "disk-alert": 61905,
  "disqus": 61906,
  "disqus-outline": 61907,
  "division": 61908,
  "division-box": 61909,
  "dna": 63107,
  "dns": 61910,
  "do-not-disturb": 63127,
  "do-not-disturb-off": 63128,
  "dolby": 63154,
  "domain": 61911,
  "dots-horizontal": 61912,
  "dots-vertical": 61913,
  "douban": 63129,
  "download": 61914,
  "download-network": 63219,
  "drag": 61915,
  "drag-horizontal": 61916,
  "drag-vertical": 61917,
  "drawing": 61918,
  "drawing-box": 61919,
  "dribbble": 61920,
  "dribbble-box": 61921,
  "drone": 61922,
  "dropbox": 61923,
  "drupal": 61924,
  "duck": 61925,
  "dumbbell": 61926,
  "earth": 61927,
  "earth-box": 63180,
  "earth-box-off": 63181,
  "earth-off": 61928,
  "edge": 61929,
  "eject": 61930,
  "elevation-decline": 61931,
  "elevation-rise": 61932,
  "elevator": 61933,
  "email": 61934,
  "email-alert": 63182,
  "email-open": 61935,
  "email-open-outline": 62959,
  "email-outline": 61936,
  "email-secure": 61937,
  "email-variant": 62960,
  "emby": 63155,
  "emoticon": 61938,
  "emoticon-cool": 61939,
  "emoticon-dead": 63130,
  "emoticon-devil": 61940,
  "emoticon-excited": 63131,
  "emoticon-happy": 61941,
  "emoticon-neutral": 61942,
  "emoticon-poop": 61943,
  "emoticon-sad": 61944,
  "emoticon-tongue": 61945,
  "engine": 61946,
  "engine-outline": 61947,
  "equal": 61948,
  "equal-box": 61949,
  "eraser": 61950,
  "eraser-variant": 63042,
  "escalator": 61951,
  "ethernet": 61952,
  "ethernet-cable": 61953,
  "ethernet-cable-off": 61954,
  "etsy": 61955,
  "ev-station": 62961,
  "evernote": 61956,
  "exclamation": 61957,
  "exit-to-app": 61958,
  "export": 61959,
  "eye": 61960,
  "eye-off": 61961,
  "eye-off-outline": 63184,
  "eye-outline": 63183,
  "eyedropper": 61962,
  "eyedropper-variant": 61963,
  "face": 63043,
  "face-profile": 63044,
  "facebook": 61964,
  "facebook-box": 61965,
  "facebook-messenger": 61966,
  "factory": 61967,
  "fan": 61968,
  "fast-forward": 61969,
  "fast-forward-outline": 63185,
  "fax": 61970,
  "feather": 63186,
  "ferry": 61971,
  "file": 61972,
  "file-account": 63290,
  "file-chart": 61973,
  "file-check": 61974,
  "file-cloud": 61975,
  "file-delimited": 61976,
  "file-document": 61977,
  "file-document-box": 61978,
  "file-excel": 61979,
  "file-excel-box": 61980,
  "file-export": 61981,
  "file-find": 61982,
  "file-hidden": 62995,
  "file-image": 61983,
  "file-import": 61984,
  "file-lock": 61985,
  "file-multiple": 61986,
  "file-music": 61987,
  "file-outline": 61988,
  "file-pdf": 61989,
  "file-pdf-box": 61990,
  "file-plus": 63313,
  "file-powerpoint": 61991,
  "file-powerpoint-box": 61992,
  "file-presentation-box": 61993,
  "file-restore": 63088,
  "file-send": 61994,
  "file-tree": 63045,
  "file-video": 61995,
  "file-word": 61996,
  "file-word-box": 61997,
  "file-xml": 61998,
  "film": 61999,
  "filmstrip": 62000,
  "filmstrip-off": 62001,
  "filter": 62002,
  "filter-outline": 62003,
  "filter-remove": 62004,
  "filter-remove-outline": 62005,
  "filter-variant": 62006,
  "find-replace": 63187,
  "fingerprint": 62007,
  "fire": 62008,
  "firefox": 62009,
  "fish": 62010,
  "flag": 62011,
  "flag-checkered": 62012,
  "flag-outline": 62013,
  "flag-outline-variant": 62014,
  "flag-triangle": 62015,
  "flag-variant": 62016,
  "flash": 62017,
  "flash-auto": 62018,
  "flash-off": 62019,
  "flash-outline": 63188,
  "flash-red-eye": 63098,
  "flashlight": 62020,
  "flashlight-off": 62021,
  "flask": 61587,
  "flask-empty": 61588,
  "flask-empty-outline": 61589,
  "flask-outline": 61590,
  "flattr": 62022,
  "flip-to-back": 62023,
  "flip-to-front": 62024,
  "floppy": 62025,
  "flower": 62026,
  "folder": 62027,
  "folder-account": 62028,
  "folder-download": 62029,
  "folder-google-drive": 62030,
  "folder-image": 62031,
  "folder-lock": 62032,
  "folder-lock-open": 62033,
  "folder-move": 62034,
  "folder-multiple": 62035,
  "folder-multiple-image": 62036,
  "folder-multiple-outline": 62037,
  "folder-open": 63343,
  "folder-outline": 62038,
  "folder-plus": 62039,
  "folder-remove": 62040,
  "folder-star": 63132,
  "folder-upload": 62041,
  "font-awesome": 61498,
  "food": 62042,
  "food-apple": 62043,
  "food-fork-drink": 62962,
  "food-off": 62963,
  "food-variant": 62044,
  "football": 62045,
  "football-australian": 62046,
  "football-helmet": 62047,
  "format-align-bottom": 63314,
  "format-align-center": 62048,
  "format-align-justify": 62049,
  "format-align-left": 62050,
  "format-align-middle": 63315,
  "format-align-right": 62051,
  "format-align-top": 63316,
  "format-annotation-plus": 63046,
  "format-bold": 62052,
  "format-clear": 62053,
  "format-color-fill": 62054,
  "format-color-text": 63133,
  "format-float-center": 62055,
  "format-float-left": 62056,
  "format-float-none": 62057,
  "format-float-right": 62058,
  "format-font": 63189,
  "format-header-1": 62059,
  "format-header-2": 62060,
  "format-header-3": 62061,
  "format-header-4": 62062,
  "format-header-5": 62063,
  "format-header-6": 62064,
  "format-header-decrease": 62065,
  "format-header-equal": 62066,
  "format-header-increase": 62067,
  "format-header-pound": 62068,
  "format-horizontal-align-center": 63006,
  "format-horizontal-align-left": 63007,
  "format-horizontal-align-right": 63008,
  "format-indent-decrease": 62069,
  "format-indent-increase": 62070,
  "format-italic": 62071,
  "format-line-spacing": 62072,
  "format-line-style": 62920,
  "format-line-weight": 62921,
  "format-list-bulleted": 62073,
  "format-list-bulleted-type": 62074,
  "format-list-checks": 63317,
  "format-list-numbers": 62075,
  "format-page-break": 63190,
  "format-paint": 62076,
  "format-paragraph": 62077,
  "format-pilcrow": 63191,
  "format-quote-close": 62078,
  "format-quote-open": 63318,
  "format-rotate-90": 63145,
  "format-section": 63134,
  "format-size": 62079,
  "format-strikethrough": 62080,
  "format-strikethrough-variant": 62081,
  "format-subscript": 62082,
  "format-superscript": 62083,
  "format-text": 62084,
  "format-textdirection-l-to-r": 62085,
  "format-textdirection-r-to-l": 62086,
  "format-title": 62964,
  "format-underline": 62087,
  "format-vertical-align-bottom": 63009,
  "format-vertical-align-center": 63010,
  "format-vertical-align-top": 63011,
  "format-wrap-inline": 62088,
  "format-wrap-square": 62089,
  "format-wrap-tight": 62090,
  "format-wrap-top-bottom": 62091,
  "forum": 62092,
  "forward": 62093,
  "foursquare": 62094,
  "fridge": 62095,
  "fridge-filled": 62096,
  "fridge-filled-bottom": 62097,
  "fridge-filled-top": 62098,
  "fullscreen": 62099,
  "fullscreen-exit": 62100,
  "function": 62101,
  "gamepad": 62102,
  "gamepad-variant": 62103,
  "garage": 63192,
  "garage-open": 63193,
  "gas-cylinder": 63047,
  "gas-station": 62104,
  "gate": 62105,
  "gauge": 62106,
  "gavel": 62107,
  "gender-female": 62108,
  "gender-male": 62109,
  "gender-male-female": 62110,
  "gender-transgender": 62111,
  "gesture-double-tap": 63291,
  "gesture-swipe-down": 63292,
  "gesture-swipe-left": 63293,
  "gesture-swipe-right": 63294,
  "gesture-swipe-up": 63295,
  "gesture-tap": 63296,
  "gesture-two-double-tap": 63297,
  "gesture-two-tap": 63298,
  "ghost": 62112,
  "gift": 62113,
  "git": 62114,
  "github-box": 62115,
  "github-circle": 62116,
  "github-face": 63194,
  "glass-flute": 62117,
  "glass-mug": 62118,
  "glass-stange": 62119,
  "glass-tulip": 62120,
  "glassdoor": 62121,
  "glasses": 62122,
  "gmail": 62123,
  "gnome": 62124,
  "gondola": 63109,
  "google": 62125,
  "google-cardboard": 62126,
  "google-chrome": 62127,
  "google-circles": 62128,
  "google-circles-communities": 62129,
  "google-circles-extended": 62130,
  "google-circles-group": 62131,
  "google-controller": 62132,
  "google-controller-off": 62133,
  "google-drive": 62134,
  "google-earth": 62135,
  "google-glass": 62136,
  "google-keep": 63195,
  "google-maps": 62965,
  "google-nearby": 62137,
  "google-pages": 62138,
  "google-photos": 63196,
  "google-physical-web": 62139,
  "google-play": 62140,
  "google-plus": 62141,
  "google-plus-box": 62142,
  "google-translate": 62143,
  "google-wallet": 62144,
  "gradient": 63135,
  "grease-pencil": 63048,
  "grid": 62145,
  "grid-large": 63319,
  "grid-off": 62146,
  "group": 62147,
  "guitar-acoustic": 63344,
  "guitar-electric": 62148,
  "guitar-pick": 62149,
  "guitar-pick-outline": 62150,
  "hackernews": 63012,
  "hamburger": 63108,
  "hand-pointing-right": 62151,
  "hanger": 62152,
  "hangouts": 62153,
  "harddisk": 62154,
  "headphones": 62155,
  "headphones-box": 62156,
  "headphones-settings": 62157,
  "headset": 62158,
  "headset-dock": 62159,
  "headset-off": 62160,
  "heart": 62161,
  "heart-box": 62162,
  "heart-box-outline": 62163,
  "heart-broken": 62164,
  "heart-half": 63198,
  "heart-half-full": 63197,
  "heart-half-outline": 63199,
  "heart-off": 63320,
  "heart-outline": 62165,
  "heart-pulse": 62966,
  "help": 62166,
  "help-box": 63370,
  "help-circle": 62167,
  "help-circle-outline": 63013,
  "help-network": 63220,
  "hexagon": 62168,
  "hexagon-multiple": 63200,
  "hexagon-outline": 62169,
  "highway": 62967,
  "history": 62170,
  "hololens": 62171,
  "home": 62172,
  "home-map-marker": 62968,
  "home-modern": 62173,
  "home-outline": 63136,
  "home-variant": 62174,
  "hook": 63201,
  "hook-off": 63202,
  "hops": 62175,
  "hospital": 62176,
  "hospital-building": 62177,
  "hospital-marker": 62178,
  "hotel": 62179,
  "houzz": 62180,
  "houzz-box": 62181,
  "human": 62182,
  "human-child": 62183,
  "human-female": 63049,
  "human-greeting": 63050,
  "human-handsdown": 63051,
  "human-handsup": 63052,
  "human-male": 63053,
  "human-male-female": 62184,
  "human-pregnant": 62927,
  "humble-bundle": 63299,
  "image": 62185,
  "image-album": 62186,
  "image-area": 62187,
  "image-area-close": 62188,
  "image-broken": 62189,
  "image-broken-variant": 62190,
  "image-filter": 62191,
  "image-filter-black-white": 62192,
  "image-filter-center-focus": 62193,
  "image-filter-center-focus-weak": 62194,
  "image-filter-drama": 62195,
  "image-filter-frames": 62196,
  "image-filter-hdr": 62197,
  "image-filter-none": 62198,
  "image-filter-tilt-shift": 62199,
  "image-filter-vintage": 62200,
  "image-multiple": 62201,
  "import": 62202,
  "inbox": 63110,
  "inbox-arrow-down": 62203,
  "inbox-arrow-up": 62417,
  "incognito": 62969,
  "infinity": 63203,
  "information": 62204,
  "information-outline": 62205,
  "information-variant": 63054,
  "instagram": 62206,
  "instapaper": 62207,
  "internet-explorer": 62208,
  "invert-colors": 62209,
  "itunes": 63094,
  "jeepney": 62210,
  "jira": 62211,
  "jsfiddle": 62212,
  "json": 63014,
  "keg": 62213,
  "kettle": 62970,
  "key": 62214,
  "key-change": 62215,
  "key-minus": 62216,
  "key-plus": 62217,
  "key-remove": 62218,
  "key-variant": 62219,
  "keyboard": 62220,
  "keyboard-backspace": 62221,
  "keyboard-caps": 62222,
  "keyboard-close": 62223,
  "keyboard-off": 62224,
  "keyboard-return": 62225,
  "keyboard-tab": 62226,
  "keyboard-variant": 62227,
  "kickstarter": 63300,
  "kodi": 62228,
  "label": 62229,
  "label-outline": 62230,
  "lambda": 63015,
  "lamp": 63156,
  "lan": 62231,
  "lan-connect": 62232,
  "lan-disconnect": 62233,
  "lan-pending": 62234,
  "language-c": 63089,
  "language-cpp": 63090,
  "language-csharp": 62235,
  "language-css3": 62236,
  "language-html5": 62237,
  "language-javascript": 62238,
  "language-php": 62239,
  "language-python": 62240,
  "language-python-text": 62241,
  "language-swift": 63204,
  "language-typescript": 63205,
  "laptop": 62242,
  "laptop-chromebook": 62243,
  "laptop-mac": 62244,
  "laptop-off": 63206,
  "laptop-windows": 62245,
  "lastfm": 62246,
  "launch": 62247,
  "layers": 62248,
  "layers-off": 62249,
  "lead-pencil": 63055,
  "leaf": 62250,
  "led-off": 62251,
  "led-on": 62252,
  "led-outline": 62253,
  "led-variant-off": 62254,
  "led-variant-on": 62255,
  "led-variant-outline": 62256,
  "library": 62257,
  "library-books": 62258,
  "library-music": 62259,
  "library-plus": 62260,
  "lightbulb": 62261,
  "lightbulb-on": 63207,
  "lightbulb-on-outline": 63208,
  "lightbulb-outline": 62262,
  "link": 62263,
  "link-off": 62264,
  "link-variant": 62265,
  "link-variant-off": 62266,
  "linkedin": 62267,
  "linkedin-box": 62268,
  "linux": 62269,
  "loading": 63345,
  "lock": 62270,
  "lock-open": 62271,
  "lock-open-outline": 62272,
  "lock-outline": 62273,
  "lock-pattern": 63209,
  "lock-plus": 62971,
  "lock-reset": 63346,
  "login": 62274,
  "login-variant": 62972,
  "logout": 62275,
  "logout-variant": 62973,
  "looks": 62276,
  "loop": 63210,
  "loupe": 62277,
  "lumx": 62278,
  "magnet": 62279,
  "magnet-on": 62280,
  "magnify": 62281,
  "magnify-minus": 62282,
  "magnify-minus-outline": 63211,
  "magnify-plus": 62283,
  "magnify-plus-outline": 63212,
  "mail-ru": 62284,
  "mailbox": 63213,
  "map": 62285,
  "map-marker": 62286,
  "map-marker-circle": 62287,
  "map-marker-minus": 63056,
  "map-marker-multiple": 62288,
  "map-marker-off": 62289,
  "map-marker-plus": 63057,
  "map-marker-radius": 62290,
  "margin": 62291,
  "markdown": 62292,
  "marker": 63058,
  "marker-check": 62293,
  "martini": 62294,
  "material-ui": 62295,
  "math-compass": 62296,
  "matrix": 63016,
  "maxcdn": 62297,
  "medical-bag": 63214,
  "medium": 62298,
  "memory": 62299,
  "menu": 62300,
  "menu-down": 62301,
  "menu-down-outline": 63157,
  "menu-left": 62302,
  "menu-right": 62303,
  "menu-up": 62304,
  "menu-up-outline": 63158,
  "message": 62305,
  "message-alert": 62306,
  "message-bulleted": 63137,
  "message-bulleted-off": 63138,
  "message-draw": 62307,
  "message-image": 62308,
  "message-outline": 62309,
  "message-plus": 63059,
  "message-processing": 62310,
  "message-reply": 62311,
  "message-reply-text": 62312,
  "message-settings": 63215,
  "message-settings-variant": 63216,
  "message-text": 62313,
  "message-text-outline": 62314,
  "message-video": 62315,
  "meteor": 63017,
  "microphone": 62316,
  "microphone-off": 62317,
  "microphone-outline": 62318,
  "microphone-settings": 62319,
  "microphone-variant": 62320,
  "microphone-variant-off": 62321,
  "microscope": 63060,
  "microsoft": 62322,
  "minecraft": 62323,
  "minus": 62324,
  "minus-box": 62325,
  "minus-box-outline": 63217,
  "minus-circle": 62326,
  "minus-circle-outline": 62327,
  "minus-network": 62328,
  "mixcloud": 63018,
  "monitor": 62329,
  "monitor-multiple": 62330,
  "more": 62331,
  "motorbike": 62332,
  "mouse": 62333,
  "mouse-off": 62334,
  "mouse-variant": 62335,
  "mouse-variant-off": 62336,
  "move-resize": 63061,
  "move-resize-variant": 63062,
  "movie": 62337,
  "multiplication": 62338,
  "multiplication-box": 62339,
  "music": 63321,
  "music-box": 62340,
  "music-box-outline": 62341,
  "music-circle": 62342,
  "music-note": 62343,
  "music-note-bluetooth": 62974,
  "music-note-bluetooth-off": 62975,
  "music-note-eighth": 62344,
  "music-note-half": 62345,
  "music-note-off": 62346,
  "music-note-quarter": 62347,
  "music-note-sixteenth": 62348,
  "music-note-whole": 62349,
  "music-off": 63322,
  "nature": 62350,
  "nature-people": 62351,
  "navigation": 62352,
  "near-me": 62925,
  "needle": 62353,
  "nest-protect": 62354,
  "nest-thermostat": 62355,
  "netflix": 63301,
  "network": 63218,
  "new-box": 62356,
  "newspaper": 62357,
  "nfc": 62358,
  "nfc-tap": 62359,
  "nfc-variant": 62360,
  "ninja": 63347,
  "nodejs": 62361,
  "note": 62362,
  "note-multiple": 63159,
  "note-multiple-outline": 63160,
  "note-outline": 62363,
  "note-plus": 62364,
  "note-plus-outline": 62365,
  "note-text": 62366,
  "notification-clear-all": 62367,
  "npm": 63222,
  "nuke": 63139,
  "numeric": 62368,
  "numeric-0-box": 62369,
  "numeric-0-box-multiple-outline": 62370,
  "numeric-0-box-outline": 62371,
  "numeric-1-box": 62372,
  "numeric-1-box-multiple-outline": 62373,
  "numeric-1-box-outline": 62374,
  "numeric-2-box": 62375,
  "numeric-2-box-multiple-outline": 62376,
  "numeric-2-box-outline": 62377,
  "numeric-3-box": 62378,
  "numeric-3-box-multiple-outline": 62379,
  "numeric-3-box-outline": 62380,
  "numeric-4-box": 62381,
  "numeric-4-box-multiple-outline": 62382,
  "numeric-4-box-outline": 62383,
  "numeric-5-box": 62384,
  "numeric-5-box-multiple-outline": 62385,
  "numeric-5-box-outline": 62386,
  "numeric-6-box": 62387,
  "numeric-6-box-multiple-outline": 62388,
  "numeric-6-box-outline": 62389,
  "numeric-7-box": 62390,
  "numeric-7-box-multiple-outline": 62391,
  "numeric-7-box-outline": 62392,
  "numeric-8-box": 62393,
  "numeric-8-box-multiple-outline": 62394,
  "numeric-8-box-outline": 62395,
  "numeric-9-box": 62396,
  "numeric-9-box-multiple-outline": 62397,
  "numeric-9-box-outline": 62398,
  "numeric-9-plus-box": 62399,
  "numeric-9-plus-box-multiple-outline": 62400,
  "numeric-9-plus-box-outline": 62401,
  "nut": 63223,
  "nutrition": 62402,
  "oar": 63099,
  "octagon": 62403,
  "octagon-outline": 62404,
  "octagram": 63224,
  "octagram-outline": 63348,
  "odnoklassniki": 62405,
  "office": 62406,
  "oil": 62407,
  "oil-temperature": 62408,
  "omega": 62409,
  "onedrive": 62410,
  "onenote": 63302,
  "opacity": 62924,
  "open-in-app": 62411,
  "open-in-new": 62412,
  "openid": 62413,
  "opera": 62414,
  "orbit": 61464,
  "ornament": 62415,
  "ornament-variant": 62416,
  "owl": 62418,
  "package": 62419,
  "package-down": 62420,
  "package-up": 62421,
  "package-variant": 62422,
  "package-variant-closed": 62423,
  "page-first": 62976,
  "page-last": 62977,
  "page-layout-body": 63225,
  "page-layout-footer": 63226,
  "page-layout-header": 63227,
  "page-layout-sidebar-left": 63228,
  "page-layout-sidebar-right": 63229,
  "palette": 62424,
  "palette-advanced": 62425,
  "panda": 62426,
  "pandora": 62427,
  "panorama": 62428,
  "panorama-fisheye": 62429,
  "panorama-horizontal": 62430,
  "panorama-vertical": 62431,
  "panorama-wide-angle": 62432,
  "paper-cut-vertical": 62433,
  "paperclip": 62434,
  "parking": 62435,
  "pause": 62436,
  "pause-circle": 62437,
  "pause-circle-outline": 62438,
  "pause-octagon": 62439,
  "pause-octagon-outline": 62440,
  "paw": 62441,
  "paw-off": 63063,
  "pen": 62442,
  "pencil": 62443,
  "pencil-box": 62444,
  "pencil-box-outline": 62445,
  "pencil-circle": 63230,
  "pencil-circle-outline": 63349,
  "pencil-lock": 62446,
  "pencil-off": 62447,
  "pentagon": 63231,
  "pentagon-outline": 63232,
  "percent": 62448,
  "periscope": 63303,
  "pharmacy": 62449,
  "phone": 62450,
  "phone-bluetooth": 62451,
  "phone-classic": 62978,
  "phone-forward": 62452,
  "phone-hangup": 62453,
  "phone-in-talk": 62454,
  "phone-incoming": 62455,
  "phone-locked": 62456,
  "phone-log": 62457,
  "phone-minus": 63064,
  "phone-missed": 62458,
  "phone-outgoing": 62459,
  "phone-paused": 62460,
  "phone-plus": 63065,
  "phone-settings": 62461,
  "phone-voip": 62462,
  "pi": 62463,
  "pi-box": 62464,
  "piano": 63100,
  "pig": 62465,
  "pill": 62466,
  "pillar": 63233,
  "pin": 62467,
  "pin-off": 62468,
  "pine-tree": 62469,
  "pine-tree-box": 62470,
  "pinterest": 62471,
  "pinterest-box": 62472,
  "pistol": 63234,
  "pizza": 62473,
  "plane-shield": 63162,
  "play": 62474,
  "play-box-outline": 62475,
  "play-circle": 62476,
  "play-circle-outline": 62477,
  "play-pause": 62478,
  "play-protected-content": 62479,
  "playlist-check": 62919,
  "playlist-minus": 62480,
  "playlist-play": 62481,
  "playlist-plus": 62482,
  "playlist-remove": 62483,
  "playstation": 62484,
  "plex": 63161,
  "plus": 62485,
  "plus-box": 62486,
  "plus-box-outline": 63235,
  "plus-circle": 62487,
  "plus-circle-multiple-outline": 62488,
  "plus-circle-outline": 62489,
  "plus-network": 62490,
  "plus-one": 62491,
  "plus-outline": 63236,
  "pocket": 62492,
  "pokeball": 62493,
  "polaroid": 62494,
  "poll": 62495,
  "poll-box": 62496,
  "polymer": 62497,
  "pool": 62982,
  "popcorn": 62498,
  "pot": 63066,
  "pot-mix": 63067,
  "pound": 62499,
  "pound-box": 62500,
  "power": 62501,
  "power-plug": 63140,
  "power-plug-off": 63141,
  "power-settings": 62502,
  "power-socket": 62503,
  "prescription": 63237,
  "presentation": 62504,
  "presentation-play": 62505,
  "printer": 62506,
  "printer-3d": 62507,
  "printer-alert": 62508,
  "printer-settings": 63238,
  "priority-high": 62979,
  "priority-low": 62980,
  "professional-hexagon": 62509,
  "projector": 62510,
  "projector-screen": 62511,
  "publish": 63142,
  "pulse": 62512,
  "puzzle": 62513,
  "qqchat": 62981,
  "qrcode": 62514,
  "qrcode-scan": 62515,
  "quadcopter": 62516,
  "quality-high": 62517,
  "quicktime": 62518,
  "radar": 62519,
  "radiator": 62520,
  "radio": 62521,
  "radio-handheld": 62522,
  "radio-tower": 62523,
  "radioactive": 62524,
  "radiobox-blank": 62525,
  "radiobox-marked": 62526,
  "raspberrypi": 62527,
  "ray-end": 62528,
  "ray-end-arrow": 62529,
  "ray-start": 62530,
  "ray-start-arrow": 62531,
  "ray-start-end": 62532,
  "ray-vertex": 62533,
  "rdio": 62534,
  "react": 63239,
  "read": 62535,
  "readability": 62536,
  "receipt": 62537,
  "record": 62538,
  "record-rec": 62539,
  "recycle": 62540,
  "reddit": 62541,
  "redo": 62542,
  "redo-variant": 62543,
  "refresh": 62544,
  "regex": 62545,
  "relative-scale": 62546,
  "reload": 62547,
  "remote": 62548,
  "rename-box": 62549,
  "reorder-horizontal": 63111,
  "reorder-vertical": 63112,
  "repeat": 62550,
  "repeat-off": 62551,
  "repeat-once": 62552,
  "replay": 62553,
  "reply": 62554,
  "reply-all": 62555,
  "reproduction": 62556,
  "resize-bottom-right": 62557,
  "responsive": 62558,
  "restart": 63240,
  "restore": 63143,
  "rewind": 62559,
  "rewind-outline": 63241,
  "rhombus": 63242,
  "rhombus-outline": 63243,
  "ribbon": 62560,
  "road": 62561,
  "road-variant": 62562,
  "robot": 63144,
  "rocket": 62563,
  "roomba": 63244,
  "rotate-3d": 62564,
  "rotate-left": 62565,
  "rotate-left-variant": 62566,
  "rotate-right": 62567,
  "rotate-right-variant": 62568,
  "rounded-corner": 62983,
  "router-wireless": 62569,
  "routes": 62570,
  "rowing": 62984,
  "rss": 62571,
  "rss-box": 62572,
  "ruler": 62573,
  "run": 63245,
  "run-fast": 62574,
  "sale": 62575,
  "satellite": 62576,
  "satellite-variant": 62577,
  "saxophone": 62985,
  "scale": 62578,
  "scale-balance": 62929,
  "scale-bathroom": 62579,
  "scanner": 63146,
  "school": 62580,
  "screen-rotation": 62581,
  "screen-rotation-lock": 62582,
  "screwdriver": 62583,
  "script": 62584,
  "sd": 62585,
  "seal": 62586,
  "search-web": 63246,
  "seat-flat": 62587,
  "seat-flat-angled": 62588,
  "seat-individual-suite": 62589,
  "seat-legroom-extra": 62590,
  "seat-legroom-normal": 62591,
  "seat-legroom-reduced": 62592,
  "seat-recline-extra": 62593,
  "seat-recline-normal": 62594,
  "security": 62595,
  "security-home": 63113,
  "security-network": 62596,
  "select": 62597,
  "select-all": 62598,
  "select-inverse": 62599,
  "select-off": 62600,
  "selection": 62601,
  "selection-off": 63350,
  "send": 62602,
  "serial-port": 63068,
  "server": 62603,
  "server-minus": 62604,
  "server-network": 62605,
  "server-network-off": 62606,
  "server-off": 62607,
  "server-plus": 62608,
  "server-remove": 62609,
  "server-security": 62610,
  "set-all": 63351,
  "set-center": 63352,
  "set-center-right": 63353,
  "set-left": 63354,
  "set-left-center": 63355,
  "set-left-right": 63356,
  "set-none": 63357,
  "set-right": 63358,
  "settings": 62611,
  "settings-box": 62612,
  "shape-circle-plus": 63069,
  "shape-plus": 62613,
  "shape-polygon-plus": 63070,
  "shape-rectangle-plus": 63071,
  "shape-square-plus": 63072,
  "share": 62614,
  "share-variant": 62615,
  "shield": 62616,
  "shield-half-full": 63359,
  "shield-outline": 62617,
  "shopping": 62618,
  "shopping-music": 62619,
  "shovel": 63247,
  "shovel-off": 63248,
  "shredder": 62620,
  "shuffle": 62621,
  "shuffle-disabled": 62622,
  "shuffle-variant": 62623,
  "sigma": 62624,
  "sigma-lower": 63019,
  "sign-caution": 62625,
  "sign-direction": 63360,
  "sign-text": 63361,
  "signal": 62626,
  "signal-2g": 63249,
  "signal-3g": 63250,
  "signal-4g": 63251,
  "signal-hspa": 63252,
  "signal-hspa-plus": 63253,
  "signal-off": 63362,
  "signal-variant": 62986,
  "silverware": 62627,
  "silverware-fork": 62628,
  "silverware-spoon": 62629,
  "silverware-variant": 62630,
  "sim": 62631,
  "sim-alert": 62632,
  "sim-off": 62633,
  "sitemap": 62634,
  "skip-backward": 62635,
  "skip-forward": 62636,
  "skip-next": 62637,
  "skip-next-circle": 63073,
  "skip-next-circle-outline": 63074,
  "skip-previous": 62638,
  "skip-previous-circle": 63075,
  "skip-previous-circle-outline": 63076,
  "skull": 63115,
  "skype": 62639,
  "skype-business": 62640,
  "slack": 62641,
  "sleep": 62642,
  "sleep-off": 62643,
  "smoking": 62644,
  "smoking-off": 62645,
  "snapchat": 62646,
  "snowflake": 63254,
  "snowman": 62647,
  "soccer": 62648,
  "sofa": 62649,
  "solid": 63116,
  "sort": 62650,
  "sort-alphabetical": 62651,
  "sort-ascending": 62652,
  "sort-descending": 62653,
  "sort-numeric": 62654,
  "sort-variant": 62655,
  "soundcloud": 62656,
  "source-branch": 63020,
  "source-commit": 63255,
  "source-commit-end": 63256,
  "source-commit-end-local": 63257,
  "source-commit-local": 63258,
  "source-commit-next-local": 63259,
  "source-commit-start": 63260,
  "source-commit-start-next-local": 63261,
  "source-fork": 62657,
  "source-merge": 63021,
  "source-pull": 62658,
  "speaker": 62659,
  "speaker-off": 62660,
  "speaker-wireless": 63262,
  "speedometer": 62661,
  "spellcheck": 62662,
  "spotify": 62663,
  "spotlight": 62664,
  "spotlight-beam": 62665,
  "spray": 63077,
  "square": 63331,
  "square-inc": 62666,
  "square-inc-cash": 62667,
  "square-outline": 63330,
  "square-root": 63363,
  "stackexchange": 62987,
  "stackoverflow": 62668,
  "stadium": 63263,
  "stairs": 62669,
  "star": 62670,
  "star-circle": 62671,
  "star-half": 62672,
  "star-off": 62673,
  "star-outline": 62674,
  "steam": 62675,
  "steering": 62676,
  "step-backward": 62677,
  "step-backward-2": 62678,
  "step-forward": 62679,
  "step-forward-2": 62680,
  "stethoscope": 62681,
  "sticker": 62928,
  "sticker-emoji": 63364,
  "stocking": 62682,
  "stop": 62683,
  "stop-circle": 63078,
  "stop-circle-outline": 63079,
  "store": 62684,
  "store-24-hour": 62685,
  "stove": 62686,
  "subdirectory-arrow-left": 62988,
  "subdirectory-arrow-right": 62989,
  "subway": 63147,
  "subway-variant": 62687,
  "summit": 63365,
  "sunglasses": 62688,
  "surround-sound": 62917,
  "svg": 63264,
  "swap-horizontal": 62689,
  "swap-vertical": 62690,
  "swim": 62691,
  "switch": 62692,
  "sword": 62693,
  "sword-cross": 63366,
  "sync": 62694,
  "sync-alert": 62695,
  "sync-off": 62696,
  "tab": 62697,
  "tab-plus": 63323,
  "tab-unselected": 62698,
  "table": 62699,
  "table-column-plus-after": 62700,
  "table-column-plus-before": 62701,
  "table-column-remove": 62702,
  "table-column-width": 62703,
  "table-edit": 62704,
  "table-large": 62705,
  "table-row-height": 62706,
  "table-row-plus-after": 62707,
  "table-row-plus-before": 62708,
  "table-row-remove": 62709,
  "tablet": 62710,
  "tablet-android": 62711,
  "tablet-ipad": 62712,
  "taco": 63329,
  "tag": 62713,
  "tag-faces": 62714,
  "tag-heart": 63114,
  "tag-multiple": 62715,
  "tag-outline": 62716,
  "tag-plus": 63265,
  "tag-remove": 63266,
  "tag-text-outline": 62717,
  "target": 62718,
  "taxi": 62719,
  "teamviewer": 62720,
  "telegram": 62721,
  "television": 62722,
  "television-guide": 62723,
  "temperature-celsius": 62724,
  "temperature-fahrenheit": 62725,
  "temperature-kelvin": 62726,
  "tennis": 62727,
  "tent": 62728,
  "terrain": 62729,
  "test-tube": 63080,
  "text-shadow": 63081,
  "text-to-speech": 62730,
  "text-to-speech-off": 62731,
  "textbox": 62990,
  "texture": 62732,
  "theater": 62733,
  "theme-light-dark": 62734,
  "thermometer": 62735,
  "thermometer-lines": 62736,
  "thumb-down": 62737,
  "thumb-down-outline": 62738,
  "thumb-up": 62739,
  "thumb-up-outline": 62740,
  "thumbs-up-down": 62741,
  "ticket": 62742,
  "ticket-account": 62743,
  "ticket-confirmation": 62744,
  "ticket-percent": 63267,
  "tie": 62745,
  "tilde": 63268,
  "timelapse": 62746,
  "timer": 62747,
  "timer-10": 62748,
  "timer-3": 62749,
  "timer-off": 62750,
  "timer-sand": 62751,
  "timer-sand-empty": 63148,
  "timer-sand-full": 63371,
  "timetable": 62752,
  "toggle-switch": 62753,
  "toggle-switch-off": 62754,
  "tooltip": 62755,
  "tooltip-edit": 62756,
  "tooltip-image": 62757,
  "tooltip-outline": 62758,
  "tooltip-outline-plus": 62759,
  "tooltip-text": 62760,
  "tooth": 62761,
  "tor": 62762,
  "tower-beach": 63104,
  "tower-fire": 63105,
  "traffic-light": 62763,
  "train": 62764,
  "tram": 62765,
  "transcribe": 62766,
  "transcribe-close": 62767,
  "transfer": 62768,
  "transit-transfer": 63149,
  "translate": 62922,
  "treasure-chest": 63269,
  "tree": 62769,
  "trello": 62770,
  "trending-down": 62771,
  "trending-neutral": 62772,
  "trending-up": 62773,
  "triangle": 62774,
  "triangle-outline": 62775,
  "trophy": 62776,
  "trophy-award": 62777,
  "trophy-outline": 62778,
  "trophy-variant": 62779,
  "trophy-variant-outline": 62780,
  "truck": 62781,
  "truck-delivery": 62782,
  "truck-fast": 63367,
  "truck-trailer": 63270,
  "tshirt-crew": 62783,
  "tshirt-v": 62784,
  "tumblr": 62785,
  "tumblr-reblog": 62786,
  "tune": 63022,
  "tune-vertical": 63082,
  "twitch": 62787,
  "twitter": 62788,
  "twitter-box": 62789,
  "twitter-circle": 62790,
  "twitter-retweet": 62791,
  "uber": 63304,
  "ubuntu": 62792,
  "umbraco": 62793,
  "umbrella": 62794,
  "umbrella-outline": 62795,
  "undo": 62796,
  "undo-variant": 62797,
  "unfold-less-horizontal": 62798,
  "unfold-less-vertical": 63327,
  "unfold-more-horizontal": 62799,
  "unfold-more-vertical": 63328,
  "ungroup": 62800,
  "unity": 63150,
  "untappd": 62801,
  "update": 63151,
  "upload": 62802,
  "upload-network": 63221,
  "usb": 62803,
  "vector-arrange-above": 62804,
  "vector-arrange-below": 62805,
  "vector-circle": 62806,
  "vector-circle-variant": 62807,
  "vector-combine": 62808,
  "vector-curve": 62809,
  "vector-difference": 62810,
  "vector-difference-ab": 62811,
  "vector-difference-ba": 62812,
  "vector-intersection": 62813,
  "vector-line": 62814,
  "vector-point": 62815,
  "vector-polygon": 62816,
  "vector-polyline": 62817,
  "vector-radius": 63305,
  "vector-rectangle": 62918,
  "vector-selection": 62818,
  "vector-square": 61441,
  "vector-triangle": 62819,
  "vector-union": 62820,
  "verified": 62821,
  "vibrate": 62822,
  "video": 62823,
  "video-off": 62824,
  "video-switch": 62825,
  "view-agenda": 62826,
  "view-array": 62827,
  "view-carousel": 62828,
  "view-column": 62829,
  "view-dashboard": 62830,
  "view-day": 62831,
  "view-grid": 62832,
  "view-headline": 62833,
  "view-list": 62834,
  "view-module": 62835,
  "view-parallel": 63271,
  "view-quilt": 62836,
  "view-sequential": 63272,
  "view-stream": 62837,
  "view-week": 62838,
  "vimeo": 62839,
  "vine": 62840,
  "violin": 62991,
  "visualstudio": 62992,
  "vk": 62841,
  "vk-box": 62842,
  "vk-circle": 62843,
  "vlc": 62844,
  "voice": 62923,
  "voicemail": 62845,
  "volume-high": 62846,
  "volume-low": 62847,
  "volume-medium": 62848,
  "volume-minus": 63325,
  "volume-mute": 63326,
  "volume-off": 62849,
  "volume-plus": 63324,
  "vpn": 62850,
  "walk": 62851,
  "wallet": 62852,
  "wallet-giftcard": 62853,
  "wallet-membership": 62854,
  "wallet-travel": 62855,
  "wan": 62856,
  "washing-machine": 63273,
  "watch": 62857,
  "watch-export": 62858,
  "watch-import": 62859,
  "watch-vibrate": 63152,
  "water": 62860,
  "water-off": 62861,
  "water-percent": 62862,
  "water-pump": 62863,
  "watermark": 62994,
  "waves": 63372,
  "weather-cloudy": 62864,
  "weather-fog": 62865,
  "weather-hail": 62866,
  "weather-lightning": 62867,
  "weather-lightning-rainy": 63101,
  "weather-night": 62868,
  "weather-partlycloudy": 62869,
  "weather-pouring": 62870,
  "weather-rainy": 62871,
  "weather-snowy": 62872,
  "weather-snowy-rainy": 63102,
  "weather-sunny": 62873,
  "weather-sunset": 62874,
  "weather-sunset-down": 62875,
  "weather-sunset-up": 62876,
  "weather-windy": 62877,
  "weather-windy-variant": 62878,
  "web": 62879,
  "webcam": 62880,
  "webhook": 63023,
  "webpack": 63274,
  "wechat": 62993,
  "weight": 62881,
  "weight-kilogram": 62882,
  "whatsapp": 62883,
  "wheelchair-accessibility": 62884,
  "white-balance-auto": 62885,
  "white-balance-incandescent": 62886,
  "white-balance-iridescent": 62887,
  "white-balance-sunny": 62888,
  "widgets": 63275,
  "wifi": 62889,
  "wifi-off": 62890,
  "wii": 62891,
  "wiiu": 63276,
  "wikipedia": 62892,
  "window-close": 62893,
  "window-closed": 62894,
  "window-maximize": 62895,
  "window-minimize": 62896,
  "window-open": 62897,
  "window-restore": 62898,
  "windows": 62899,
  "wordpress": 62900,
  "worker": 62901,
  "wrap": 62902,
  "wrench": 62903,
  "wunderlist": 62904,
  "xaml": 63091,
  "xbox": 62905,
  "xbox-controller": 62906,
  "xbox-controller-battery-alert": 63306,
  "xbox-controller-battery-empty": 63307,
  "xbox-controller-battery-full": 63308,
  "xbox-controller-battery-low": 63309,
  "xbox-controller-battery-medium": 63310,
  "xbox-controller-battery-unknown": 63311,
  "xbox-controller-off": 62907,
  "xda": 62908,
  "xing": 62909,
  "xing-box": 62910,
  "xing-circle": 62911,
  "xml": 62912,
  "yammer": 63368,
  "yeast": 62913,
  "yelp": 62914,
  "yin-yang": 63103,
  "youtube-play": 62915,
  "zip-box": 62916
};
}, 621, null, "react-native-vector-icons/glyphmaps/MaterialCommunityIcons.json");
__d(/* react-native-vector-icons/Octicons.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _Octicons = require(623                        ); // 623 = ./glyphmaps/Octicons.json

var _Octicons2 = _interopRequireDefault(_Octicons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_Octicons2.default, 'Octicons', 'Octicons.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 622, null, "react-native-vector-icons/Octicons.js");
__d(/* react-native-vector-icons/glyphmaps/Octicons.json */function(global, require, module, exports) {module.exports = module.exports = {
  "alert": 61696,
  "arrow-down": 61697,
  "arrow-left": 61698,
  "arrow-right": 61699,
  "arrow-small-down": 61700,
  "arrow-small-left": 61701,
  "arrow-small-right": 61702,
  "arrow-small-up": 61703,
  "arrow-up": 61704,
  "beaker": 61705,
  "bell": 61706,
  "bold": 61707,
  "book": 61708,
  "bookmark": 61709,
  "briefcase": 61710,
  "broadcast": 61711,
  "browser": 61712,
  "bug": 61713,
  "calendar": 61714,
  "check": 61715,
  "checklist": 61716,
  "chevron-down": 61717,
  "chevron-left": 61718,
  "chevron-right": 61719,
  "chevron-up": 61720,
  "circle-slash": 61721,
  "circuit-board": 61722,
  "clippy": 61723,
  "clock": 61724,
  "cloud-download": 61725,
  "cloud-upload": 61726,
  "code": 61727,
  "comment": 61728,
  "comment-discussion": 61729,
  "credit-card": 61730,
  "dash": 61731,
  "dashboard": 61732,
  "database": 61733,
  "desktop-download": 61734,
  "device-camera": 61735,
  "device-camera-video": 61736,
  "device-desktop": 61737,
  "device-mobile": 61738,
  "diff": 61739,
  "diff-added": 61740,
  "diff-ignored": 61741,
  "diff-modified": 61742,
  "diff-removed": 61743,
  "diff-renamed": 61744,
  "ellipses": 61745,
  "ellipsis": 61746,
  "eye": 61747,
  "file": 61748,
  "file-binary": 61749,
  "file-code": 61750,
  "file-directory": 61751,
  "file-media": 61752,
  "file-pdf": 61753,
  "file-submodule": 61754,
  "file-symlink-directory": 61755,
  "file-symlink-file": 61756,
  "file-text": 61757,
  "file-zip": 61758,
  "flame": 61759,
  "fold": 61760,
  "gear": 61761,
  "gift": 61762,
  "gist": 61763,
  "gist-secret": 61764,
  "git-branch": 61765,
  "git-commit": 61766,
  "git-compare": 61767,
  "git-merge": 61768,
  "git-pull-request": 61769,
  "globe": 61770,
  "grabber": 61771,
  "graph": 61772,
  "heart": 61773,
  "history": 61774,
  "home": 61775,
  "horizontal-rule": 61776,
  "hubot": 61777,
  "inbox": 61778,
  "info": 61779,
  "issue-closed": 61780,
  "issue-opened": 61781,
  "issue-reopened": 61782,
  "italic": 61783,
  "jersey": 61784,
  "key": 61785,
  "keyboard": 61786,
  "law": 61787,
  "light-bulb": 61788,
  "link": 61789,
  "link-external": 61790,
  "list-ordered": 61791,
  "list-unordered": 61792,
  "location": 61793,
  "lock": 61794,
  "logo-gist": 61795,
  "logo-github": 61796,
  "mail": 61797,
  "mail-read": 61798,
  "mail-reply": 61799,
  "mark-github": 61800,
  "markdown": 61801,
  "megaphone": 61802,
  "mention": 61803,
  "milestone": 61804,
  "mirror": 61805,
  "mortar-board": 61806,
  "mute": 61807,
  "no-newline": 61808,
  "note": 61809,
  "octoface": 61810,
  "organization": 61811,
  "package": 61812,
  "paintcan": 61813,
  "pencil": 61814,
  "person": 61815,
  "pin": 61816,
  "plug": 61817,
  "plus": 61818,
  "plus-small": 61819,
  "primitive-dot": 61820,
  "primitive-square": 61821,
  "project": 61822,
  "pulse": 61823,
  "question": 61824,
  "quote": 61825,
  "radio-tower": 61826,
  "reply": 61827,
  "repo": 61828,
  "repo-clone": 61829,
  "repo-force-push": 61830,
  "repo-forked": 61831,
  "repo-pull": 61832,
  "repo-push": 61833,
  "rocket": 61834,
  "rss": 61835,
  "ruby": 61836,
  "screen-full": 61837,
  "screen-normal": 61838,
  "search": 61839,
  "server": 61840,
  "settings": 61841,
  "shield": 61842,
  "sign-in": 61843,
  "sign-out": 61844,
  "smiley": 61845,
  "squirrel": 61846,
  "star": 61847,
  "stop": 61848,
  "sync": 61849,
  "tag": 61850,
  "tasklist": 61851,
  "telescope": 61852,
  "terminal": 61853,
  "text-size": 61854,
  "three-bars": 61855,
  "thumbsdown": 61856,
  "thumbsup": 61857,
  "tools": 61858,
  "trashcan": 61859,
  "triangle-down": 61860,
  "triangle-left": 61861,
  "triangle-right": 61862,
  "triangle-up": 61863,
  "unfold": 61864,
  "unmute": 61865,
  "unverified": 61866,
  "verified": 61867,
  "versions": 61868,
  "watch": 61869,
  "x": 61870,
  "zap": 61871
};
}, 623, null, "react-native-vector-icons/glyphmaps/Octicons.json");
__d(/* react-native-vector-icons/Zocial.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _Zocial = require(625                      ); // 625 = ./glyphmaps/Zocial.json

var _Zocial2 = _interopRequireDefault(_Zocial);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_Zocial2.default, 'zocial', 'Zocial.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 624, null, "react-native-vector-icons/Zocial.js");
__d(/* react-native-vector-icons/glyphmaps/Zocial.json */function(global, require, module, exports) {module.exports = module.exports = {
  "acrobat": 61696,
  "amazon": 61697,
  "android": 61698,
  "angellist": 61699,
  "aol": 61700,
  "appnet": 61701,
  "appstore": 61702,
  "bitbucket": 61703,
  "bitcoin": 61704,
  "blogger": 61705,
  "buffer": 61706,
  "cal": 61707,
  "call": 61708,
  "cart": 61709,
  "chrome": 61710,
  "cloudapp": 61711,
  "creativecommons": 61712,
  "delicious": 61713,
  "digg": 61714,
  "disqus": 61715,
  "dribbble": 61716,
  "dropbox": 61717,
  "drupal": 61718,
  "dwolla": 61720,
  "email": 61721,
  "eventasaurus": 61722,
  "eventbrite": 61723,
  "eventful": 61724,
  "evernote": 61725,
  "facebook": 61726,
  "fivehundredpx": 61727,
  "flattr": 61728,
  "flickr": 61729,
  "forrst": 61730,
  "foursquare": 61731,
  "github": 61732,
  "gmail": 61733,
  "google": 61734,
  "googleplay": 61735,
  "googleplus": 61736,
  "gowalla": 61737,
  "grooveshark": 61738,
  "guest": 61739,
  "html5": 61740,
  "ie": 61741,
  "instagram": 61742,
  "instapaper": 61743,
  "intensedebate": 61744,
  "itunes": 61745,
  "klout": 61746,
  "lanyrd": 61747,
  "lastfm": 61748,
  "lego": 61749,
  "linkedin": 61750,
  "lkdto": 61751,
  "logmein": 61752,
  "macstore": 61753,
  "meetup": 61754,
  "myspace": 61755,
  "ninetyninedesigns": 61756,
  "openid": 61757,
  "opentable": 61758,
  "paypal": 61759,
  "persona": 61796,
  "pinboard": 61760,
  "pinterest": 61761,
  "plancast": 61762,
  "plurk": 61763,
  "pocket": 61764,
  "podcast": 61765,
  "posterous": 61766,
  "print": 61767,
  "quora": 61768,
  "reddit": 61769,
  "rss": 61770,
  "scribd": 61771,
  "skype": 61772,
  "smashing": 61773,
  "songkick": 61774,
  "soundcloud": 61775,
  "spotify": 61776,
  "stackoverflow": 61777,
  "statusnet": 61778,
  "steam": 61779,
  "stripe": 61780,
  "stumbleupon": 61781,
  "tumblr": 61782,
  "twitter": 61783,
  "viadeo": 61784,
  "vimeo": 61785,
  "vk": 61786,
  "weibo": 61787,
  "wikipedia": 61788,
  "windows": 61789,
  "wordpress": 61790,
  "xing": 61791,
  "yahoo": 61792,
  "ycombinator": 61793,
  "yelp": 61794,
  "youtube": 61795
};
}, 625, null, "react-native-vector-icons/glyphmaps/Zocial.json");
__d(/* react-native-vector-icons/SimpleLineIcons.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSource = exports.ToolbarAndroid = exports.TabBarItemIOS = exports.TabBarItem = exports.Button = undefined;

var _createIconSet = require(563                    ); // 563 = ./lib/create-icon-set

var _createIconSet2 = _interopRequireDefault(_createIconSet);

var _SimpleLineIcons = require(627                               ); // 627 = ./glyphmaps/SimpleLineIcons.json

var _SimpleLineIcons2 = _interopRequireDefault(_SimpleLineIcons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconSet = (0, _createIconSet2.default)(_SimpleLineIcons2.default, 'simple-line-icons', 'SimpleLineIcons.ttf');

exports.default = iconSet;
var Button = exports.Button = iconSet.Button;
var TabBarItem = exports.TabBarItem = iconSet.TabBarItem;
var TabBarItemIOS = exports.TabBarItemIOS = iconSet.TabBarItemIOS;
var ToolbarAndroid = exports.ToolbarAndroid = iconSet.ToolbarAndroid;
var getImageSource = exports.getImageSource = iconSet.getImageSource;
}, 626, null, "react-native-vector-icons/SimpleLineIcons.js");
__d(/* react-native-vector-icons/glyphmaps/SimpleLineIcons.json */function(global, require, module, exports) {module.exports = module.exports = {
  "user": 57349,
  "people": 57345,
  "user-female": 57344,
  "user-follow": 57346,
  "user-following": 57347,
  "user-unfollow": 57348,
  "login": 57446,
  "logout": 57445,
  "emotsmile": 57377,
  "phone": 58880,
  "call-end": 57416,
  "call-in": 57415,
  "call-out": 57414,
  "map": 57395,
  "location-pin": 57494,
  "direction": 57410,
  "directions": 57409,
  "compass": 57413,
  "layers": 57396,
  "menu": 58881,
  "list": 57447,
  "options-vertical": 58882,
  "options": 58883,
  "arrow-down": 58884,
  "arrow-left": 58885,
  "arrow-right": 58886,
  "arrow-up": 58887,
  "arrow-up-circle": 57464,
  "arrow-left-circle": 57466,
  "arrow-right-circle": 57465,
  "arrow-down-circle": 57467,
  "check": 57472,
  "clock": 57473,
  "plus": 57493,
  "minus": 58901,
  "close": 57474,
  "event": 58905,
  "exclamation": 58903,
  "organization": 58902,
  "trophy": 57350,
  "screen-smartphone": 57360,
  "screen-desktop": 57361,
  "plane": 57362,
  "notebook": 57363,
  "mustache": 57364,
  "mouse": 57365,
  "magnet": 57366,
  "energy": 57376,
  "disc": 57378,
  "cursor": 57454,
  "cursor-move": 57379,
  "crop": 57380,
  "chemistry": 57382,
  "speedometer": 57351,
  "shield": 57358,
  "screen-tablet": 57359,
  "magic-wand": 57367,
  "hourglass": 57368,
  "graduation": 57369,
  "ghost": 57370,
  "game-controller": 57371,
  "fire": 57372,
  "eyeglass": 57373,
  "envelope-open": 57374,
  "envelope-letter": 57375,
  "bell": 57383,
  "badge": 57384,
  "anchor": 57385,
  "wallet": 57386,
  "vector": 57387,
  "speech": 57388,
  "puzzle": 57389,
  "printer": 57390,
  "present": 57391,
  "playlist": 57392,
  "pin": 57393,
  "picture": 57394,
  "handbag": 57397,
  "globe-alt": 57398,
  "globe": 57399,
  "folder-alt": 57401,
  "folder": 57481,
  "film": 57402,
  "feed": 57403,
  "drop": 57406,
  "drawer": 57407,
  "docs": 57408,
  "doc": 57477,
  "diamond": 57411,
  "cup": 57412,
  "calculator": 57417,
  "bubbles": 57418,
  "briefcase": 57419,
  "book-open": 57420,
  "basket-loaded": 57421,
  "basket": 57422,
  "bag": 57423,
  "action-undo": 57424,
  "action-redo": 57425,
  "wrench": 57426,
  "umbrella": 57427,
  "trash": 57428,
  "tag": 57429,
  "support": 57430,
  "frame": 57400,
  "size-fullscreen": 57431,
  "size-actual": 57432,
  "shuffle": 57433,
  "share-alt": 57434,
  "share": 57435,
  "rocket": 57436,
  "question": 57437,
  "pie-chart": 57438,
  "pencil": 57439,
  "note": 57440,
  "loop": 57444,
  "home": 57449,
  "grid": 57450,
  "graph": 57451,
  "microphone": 57443,
  "music-tone-alt": 57441,
  "music-tone": 57442,
  "earphones-alt": 57404,
  "earphones": 57405,
  "equalizer": 57452,
  "like": 57448,
  "dislike": 57453,
  "control-start": 57455,
  "control-rewind": 57456,
  "control-play": 57457,
  "control-pause": 57458,
  "control-forward": 57459,
  "control-end": 57460,
  "volume-1": 57503,
  "volume-2": 57504,
  "volume-off": 57505,
  "calendar": 57461,
  "bulb": 57462,
  "chart": 57463,
  "ban": 57468,
  "bubble": 57469,
  "camrecorder": 57470,
  "camera": 57471,
  "cloud-download": 57475,
  "cloud-upload": 57476,
  "envelope": 57478,
  "eye": 57479,
  "flag": 57480,
  "heart": 57482,
  "info": 57483,
  "key": 57484,
  "link": 57485,
  "lock": 57486,
  "lock-open": 57487,
  "magnifier": 57488,
  "magnifier-add": 57489,
  "magnifier-remove": 57490,
  "paper-clip": 57491,
  "paper-plane": 57492,
  "power": 57495,
  "refresh": 57496,
  "reload": 57497,
  "settings": 57498,
  "star": 57499,
  "symbol-female": 57500,
  "symbol-male": 57501,
  "target": 57502,
  "credit-card": 57381,
  "paypal": 58888,
  "social-tumblr": 57354,
  "social-twitter": 57353,
  "social-facebook": 57355,
  "social-instagram": 58889,
  "social-linkedin": 58890,
  "social-pinterest": 58891,
  "social-github": 58892,
  "social-google": 58893,
  "social-reddit": 58894,
  "social-skype": 58895,
  "social-dribbble": 57357,
  "social-behance": 58896,
  "social-foursqare": 58897,
  "social-soundcloud": 58898,
  "social-spotify": 58899,
  "social-stumbleupon": 58900,
  "social-youtube": 57352,
  "social-dropbox": 57356,
  "social-vkontakte": 58904,
  "social-steam": 58912
};
}, 627, null, "react-native-vector-icons/glyphmaps/SimpleLineIcons.json");
__d(/* native-base/dist/src/basic/Icon/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Icon = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Icon/index.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types

var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme

var _IconNB = require(561        ); // 561 = ../IconNB
var _NBIcons = require(629             );var _NBIcons2 = _interopRequireDefault(_NBIcons); // 629 = ./NBIcons.json
var _platform = require(493                               );var _platform2 = _interopRequireDefault(_platform); // 493 = ./../../theme/variables/platform
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash

var _mapPropsToStyleNames = require(549                               );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Icon = function (_Component) {
  _inherits(Icon, _Component);function Icon() {
    _classCallCheck(this, Icon);return _possibleConstructorReturn(this, (Icon.__proto__ || Object.getPrototypeOf(Icon)).apply(this, arguments));
  }_createClass(Icon, [{ key: "getName", value: function getName() {
      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
      var platformStyle = variables.platformStyle;
      var platform = variables.platform;

      if (variables.iconFamily === "Ionicons") {
        if (typeof _NBIcons2.default[this.props.name] !== "object") {
          return this.props.name;
        } else if (typeof _NBIcons2.default[this.props.name] === "object") {
          var name = void 0;
          if (platform === "ios" && platformStyle !== "material") {
            name = this.props.active ? _NBIcons2.default[this.props.name].ios.active : _NBIcons2.default[this.props.name].ios.default;
          } else {
            name = this.props.active ? _NBIcons2.default[this.props.name].android.active : _NBIcons2.default[this.props.name].android.default;
          }
          return name;
        }
      } else {
        return this.props.name;
      }
    } }, { key: "getIconName", value: function getIconName() {
      if (_reactNative.Platform.OS === "ios") {
        if (this.props.ios) {
          return this.props.ios;
        } else {
          return this.props.active ? _NBIcons2.default[this.props.name].ios.active : _NBIcons2.default[this.props.name].ios.default;
        }
      } else if (this.props.android) {
        return this.props.android;
      } else {
        return this.props.active ? _NBIcons2.default[this.props.name].android.active : _NBIcons2.default[this.props.name].android.default;
      }
    } }, { key: "render", value: function render() {
      var _this2 = this;
      if (this.props.ios && this.props.android) {
        return _react2.default.createElement(_IconNB.IconNB, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          } }, this.props, {
          name: _reactNative.Platform.OS === "ios" ? this.props.ios : this.props.android, __source: { fileName: _jsxFileName, lineNumber: 58 } }));
      } else if (this.props.name && (this.props.android || this.props.ios)) {
        return _react2.default.createElement(_IconNB.IconNB, _extends({ ref: function ref(c) {
            return _this2._root = c;
          } }, this.props, { name: this.getIconName(), __source: { fileName: _jsxFileName, lineNumber: 65 } }));
      } else {
        return _react2.default.createElement(_IconNB.IconNB, _extends({ ref: function ref(c) {
            return _this2._root = c;
          } }, this.props, { name: this.getName(), __source: { fileName: _jsxFileName, lineNumber: 67 } }));
      }
    } }]);return Icon;
}(_react.Component);Icon.contextTypes = { theme: _propTypes2.default.object };

Icon.propTypes = _extends({}, _IconNB.IconNB.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  name: _propTypes2.default.string,
  ios: _propTypes2.default.string,
  android: _propTypes2.default.string,
  active: _propTypes2.default.bool });

var StyledIcon = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Icon", {}, _mapPropsToStyleNames2.default)(Icon);exports.Icon = StyledIcon;
}, 628, null, "native-base/dist/src/basic/Icon/index.js");
__d(/* native-base/dist/src/basic/Icon/NBIcons.json */function(global, require, module, exports) {module.exports = module.exports = {
  "add": {
    "android": {
      "default": "md-add",
      "active": "md-add"
    },
    "ios": {
      "default": "ios-add-outline",
      "active": "ios-add"
    }
  },
  "add-circle": {
    "android": {
      "default": "md-add-circle",
      "active": "md-add-circle"
    },
    "ios": {
      "default": "ios-add-circle-outline",
      "active": "ios-add-circle"
    }
  },
  "alarm": {
    "android": {
      "default": "md-alarm",
      "active": "md-alarm"
    },
    "ios": {
      "default": "ios-alarm-outline",
      "active": "ios-alarm"
    }
  },
  "albums": {
    "android": {
      "default": "md-albums",
      "active": "md-albums"
    },
    "ios": {
      "default": "ios-albums-outline",
      "active": "ios-albums"
    }
  },
  "alert": {
    "android": {
      "default": "md-alert",
      "active": "md-alert"
    },
    "ios": {
      "default": "ios-alert-outline",
      "active": "ios-alert"
    }
  },
  "american-football": {
    "android": {
      "default": "md-american-football",
      "active": "md-american-football"
    },
    "ios": {
      "default": "ios-american-football-outline",
      "active": "ios-american-football"
    }
  },
  "analytics": {
    "android": {
      "default": "md-analytics",
      "active": "md-analytics"
    },
    "ios": {
      "default": "ios-analytics-outline",
      "active": "ios-analytics"
    }
  },
  "aperture": {
    "android": {
      "default": "md-aperture",
      "active": "md-aperture"
    },
    "ios": {
      "default": "ios-aperture-outline",
      "active": "ios-aperture"
    }
  },
  "apps": {
    "android": {
      "default": "md-apps",
      "active": "md-apps"
    },
    "ios": {
      "default": "ios-apps-outline",
      "active": "ios-apps"
    }
  },
  "appstore": {
    "android": {
      "default": "md-appstore",
      "active": "md-appstore"
    },
    "ios": {
      "default": "ios-appstore-outline",
      "active": "ios-apps"
    }
  },
  "archive": {
    "android": {
      "default": "md-archive",
      "active": "md-archive"
    },
    "ios": {
      "default": "ios-archive-outline",
      "active": "ios-archive"
    }
  },
  "arrow-back": {
    "android": {
      "default": "md-arrow-back",
      "active": "md-arrow-back"
    },
    "ios": {
      "default": "ios-arrow-back-outline",
      "active": "ios-arrow-back"
    }
  },
  "arrow-down": {
    "android": {
      "default": "md-arrow-down",
      "active": "md-arrow-down"
    },
    "ios": {
      "default": "ios-arrow-down-outline",
      "active": "ios-arrow-down"
    }
  },
  "arrow-dropdown": {
    "android": {
      "default": "md-arrow-dropdown",
      "active": "md-arrow-dropdown"
    },
    "ios": {
      "default": "ios-arrow-dropdown-outline",
      "active": "ios-arrow-dropdown"
    }
  },
  "arrow-dropdown-circle": {
    "android": {
      "default": "md-arrow-dropdown-circle",
      "active": "md-arrow-dropdown-circle"
    },
    "ios": {
      "default": "ios-arrow-dropdown-circle-outline",
      "active": "ios-arrow-dropdown-circle"
    }
  },
  "arrow-dropleft": {
    "android": {
      "default": "md-arrow-dropleft",
      "active": "md-arrow-dropleft"
    },
    "ios": {
      "default": "ios-arrow-dropleft-outline",
      "active": "ios-arrow-dropleft"
    }
  },
  "arrow-dropleft-circle": {
    "android": {
      "default": "md-arrow-dropleft-circle",
      "active": "md-arrow-dropleft-circle"
    },
    "ios": {
      "default": "ios-arrow-dropleft-circle-outline",
      "active": "ios-arrow-dropleft-circle"
    }
  },
  "arrow-dropright": {
    "android": {
      "default": "md-arrow-dropright",
      "active": "md-arrow-dropright"
    },
    "ios": {
      "default": "ios-arrow-dropright-outline",
      "active": "ios-arrow-dropright"
    }
  },
  "arrow-dropright-circle": {
    "android": {
      "default": "md-arrow-dropright-circle",
      "active": "md-arrow-dropright-circle"
    },
    "ios": {
      "default": "ios-arrow-dropright-circle-outline",
      "active": "ios-arrow-dropright-circle"
    }
  },
  "arrow-dropup": {
    "android": {
      "default": "md-arrow-dropup",
      "active": "md-arrow-dropup"
    },
    "ios": {
      "default": "ios-arrow-dropup-outline",
      "active": "ios-arrow-dropup"
    }
  },
  "arrow-dropup-circle": {
    "android": {
      "default": "md-arrow-dropup-circle",
      "active": "md-arrow-dropup-circle"
    },
    "ios": {
      "default": "ios-arrow-dropup-circle-outline",
      "active": "ios-arrow-dropup-circle"
    }
  },
  "arrow-forward": {
    "android": {
      "default": "md-arrow-forward",
      "active": "md-arrow-forward"
    },
    "ios": {
      "default": "ios-arrow-forward-outline",
      "active": "ios-arrow-forward"
    }
  },
  "arrow-round-back": {
    "android": {
      "default": "md-arrow-round-back",
      "active": "md-arrow-round-back"
    },
    "ios": {
      "default": "ios-arrow-round-back-outline",
      "active": "ios-arrow-round-back"
    }
  },
  "arrow-round-down": {
    "android": {
      "default": "md-arrow-round-down",
      "active": "md-arrow-round-down"
    },
    "ios": {
      "default": "ios-arrow-round-down-outline",
      "active": "ios-arrow-round-down"
    }
  },
  "arrow-round-forward": {
    "android": {
      "default": "md-arrow-round-forward",
      "active": "md-arrow-round-forward"
    },
    "ios": {
      "default": "ios-arrow-round-forward-outline",
      "active": "ios-arrow-round-forward"
    }
  },
  "arrow-round-up": {
    "android": {
      "default": "md-arrow-round-up",
      "active": "md-arrow-round-up"
    },
    "ios": {
      "default": "ios-arrow-round-up-outline",
      "active": "ios-arrow-round-up"
    }
  },
  "arrow-up": {
    "android": {
      "default": "md-arrow-up",
      "active": "md-arrow-up"
    },
    "ios": {
      "default": "ios-arrow-up-outline",
      "active": "ios-arrow-up"
    }
  },
  "at": {
    "android": {
      "default": "md-at",
      "active": "md-at"
    },
    "ios": {
      "default": "ios-at-outline",
      "active": "ios-at"
    }
  },
  "attach": {
    "android": {
      "default": "md-attach",
      "active": "md-attach"
    },
    "ios": {
      "default": "ios-attach-outline",
      "active": "ios-attach"
    }
  },
  "backspace": {
    "android": {
      "default": "md-backspace",
      "active": "md-backspace"
    },
    "ios": {
      "default": "ios-backspace-outline",
      "active": "ios-backspace"
    }
  },
  "barcode": {
    "android": {
      "default": "md-barcode",
      "active": "md-barcode"
    },
    "ios": {
      "default": "ios-barcode-outline",
      "active": "ios-barcode"
    }
  },
  "baseball": {
    "android": {
      "default": "md-baseball",
      "active": "md-baseball"
    },
    "ios": {
      "default": "ios-baseball-outline",
      "active": "ios-baseball"
    }
  },
  "basket": {
    "android": {
      "default": "md-basket",
      "active": "md-basket"
    },
    "ios": {
      "default": "ios-basket-outline",
      "active": "ios-basket"
    }
  },
  "basketball": {
    "android": {
      "default": "md-basketball",
      "active": "md-basketball"
    },
    "ios": {
      "default": "ios-basketball-outline",
      "active": "ios-basketball"
    }
  },
  "battery-charging": {
    "android": {
      "default": "md-battery-charging",
      "active": "md-battery-charging"
    },
    "ios": {
      "default": "ios-battery-charging-outline",
      "active": "ios-battery-charging"
    }
  },
  "battery-dead": {
    "android": {
      "default": "md-battery-dead",
      "active": "md-battery-dead"
    },
    "ios": {
      "default": "ios-battery-dead-outline",
      "active": "ios-battery-dead"
    }
  },
  "battery-full": {
    "android": {
      "default": "md-battery-full",
      "active": "md-battery-full"
    },
    "ios": {
      "default": "ios-battery-full-outline",
      "active": "ios-battery-full"
    }
  },
  "beaker": {
    "android": {
      "default": "md-beaker",
      "active": "md-beaker"
    },
    "ios": {
      "default": "ios-beaker-outline",
      "active": "ios-beaker"
    }
  },
  "beer": {
    "android": {
      "default": "md-beer",
      "active": "md-beer"
    },
    "ios": {
      "default": "ios-beer-outline",
      "active": "ios-beer"
    }
  },
  "bicycle": {
    "android": {
      "default": "md-bicycle",
      "active": "md-bicycle"
    },
    "ios": {
      "default": "ios-bicycle-outline",
      "active": "ios-bicycle"
    }
  },
  "bluetooth": {
    "android": {
      "default": "md-bluetooth",
      "active": "md-bluetooth"
    },
    "ios": {
      "default": "ios-bluetooth-outline",
      "active": "ios-bluetooth"
    }
  },
  "boat": {
    "android": {
      "default": "md-boat",
      "active": "md-boat"
    },
    "ios": {
      "default": "ios-boat-outline",
      "active": "ios-boat"
    }
  },
  "body": {
    "android": {
      "default": "md-body",
      "active": "md-body"
    },
    "ios": {
      "default": "ios-body-outline",
      "active": "ios-body"
    }
  },
  "bonfire": {
    "android": {
      "default": "md-bonfire",
      "active": "md-bonfire"
    },
    "ios": {
      "default": "ios-bonfire-outline",
      "active": "ios-bonfire"
    }
  },
  "book": {
    "android": {
      "default": "md-book",
      "active": "md-book"
    },
    "ios": {
      "default": "ios-book-outline",
      "active": "ios-book"
    }
  },
  "bookmark": {
    "android": {
      "default": "md-bookmark",
      "active": "md-bookmark"
    },
    "ios": {
      "default": "ios-bookmark-outline",
      "active": "ios-bookmark"
    }
  },
  "bookmarks": {
    "android": {
      "default": "md-bookmarks",
      "active": "md-bookmarks"
    },
    "ios": {
      "default": "ios-bookmarks-outline",
      "active": "ios-bookmarks"
    }
  },
  "bowtie": {
    "android": {
      "default": "md-bowtie",
      "active": "md-bowtie"
    },
    "ios": {
      "default": "ios-bowtie-outline",
      "active": "ios-bowtie"
    }
  },
  "briefcase": {
    "android": {
      "default": "md-briefcase",
      "active": "md-briefcase"
    },
    "ios": {
      "default": "ios-briefcase-outline",
      "active": "ios-briefcase"
    }
  },
  "browsers": {
    "android": {
      "default": "md-browsers",
      "active": "md-browsers"
    },
    "ios": {
      "default": "ios-browsers-outline",
      "active": "ios-browsers"
    }
  },
  "brush": {
    "android": {
      "default": "md-brush",
      "active": "md-brush"
    },
    "ios": {
      "default": "ios-brush-outline",
      "active": "ios-brush"
    }
  },
  "bug": {
    "android": {
      "default": "md-bug",
      "active": "md-bug"
    },
    "ios": {
      "default": "ios-bug-outline",
      "active": "ios-bug"
    }
  },
  "build": {
    "android": {
      "default": "md-build",
      "active": "md-build"
    },
    "ios": {
      "default": "ios-build-outline",
      "active": "ios-build"
    }
  },
  "bulb": {
    "android": {
      "default": "md-bulb",
      "active": "md-bulb"
    },
    "ios": {
      "default": "ios-bulb-outline",
      "active": "ios-bulb"
    }
  },
  "bus": {
    "android": {
      "default": "md-bus",
      "active": "md-bus"
    },
    "ios": {
      "default": "ios-bus-outline",
      "active": "ios-bus"
    }
  },
  "cafe": {
    "android": {
      "default": "md-cafe",
      "active": "md-cafe"
    },
    "ios": {
      "default": "ios-cafe-outline",
      "active": "ios-cafe"
    }
  },
  "calculator": {
    "android": {
      "default": "md-calculator",
      "active": "md-calculator"
    },
    "ios": {
      "default": "ios-calculator-outline",
      "active": "ios-calculator"
    }
  },
  "calendar": {
    "android": {
      "default": "md-calendar",
      "active": "md-calendar"
    },
    "ios": {
      "default": "ios-calendar-outline",
      "active": "ios-calendar"
    }
  },
  "call": {
    "android": {
      "default": "md-call",
      "active": "md-call"
    },
    "ios": {
      "default": "ios-call-outline",
      "active": "ios-call"
    }
  },
  "camera": {
    "android": {
      "default": "md-camera",
      "active": "md-camera"
    },
    "ios": {
      "default": "ios-camera-outline",
      "active": "ios-camera"
    }
  },
  "car": {
    "android": {
      "default": "md-car",
      "active": "md-car"
    },
    "ios": {
      "default": "ios-car-outline",
      "active": "ios-car"
    }
  },
  "card": {
    "android": {
      "default": "md-card",
      "active": "md-card"
    },
    "ios": {
      "default": "ios-card-outline",
      "active": "ios-card"
    }
  },
  "cart": {
    "android": {
      "default": "md-cart",
      "active": "md-cart"
    },
    "ios": {
      "default": "ios-cart-outline",
      "active": "ios-cart"
    }
  },
  "cash": {
    "android": {
      "default": "md-cash",
      "active": "md-cash"
    },
    "ios": {
      "default": "ios-cash-outline",
      "active": "ios-cash"
    }
  },
  "chatboxes": {
    "android": {
      "default": "md-chatboxes",
      "active": "md-chatboxes"
    },
    "ios": {
      "default": "ios-chatboxes-outline",
      "active": "ios-chatboxes"
    }
  },
  "chatbubbles": {
    "android": {
      "default": "md-chatbubbles",
      "active": "md-chatbubbles"
    },
    "ios": {
      "default": "ios-chatbubbles-outline",
      "active": "ios-chatbubbles"
    }
  },
  "checkbox": {
    "android": {
      "default": "md-checkbox-outline",
      "active": "md-checkbox"
    },
    "ios": {
      "default": "ios-checkbox-outline",
      "active": "ios-checkbox"
    }
  },
  "checkmark": {
    "android": {
      "default": "md-checkmark",
      "active": "md-checkmark"
    },
    "ios": {
      "default": "ios-checkmark-outline",
      "active": "ios-checkmark"
    }
  },
  "checkmark-circle": {
    "android": {
      "default": "md-checkmark-circle-outline",
      "active": "md-checkmark-circle"
    },
    "ios": {
      "default": "ios-checkmark-circle-outline",
      "active": "ios-checkmark-circle"
    }
  },
  "clipboard": {
    "android": {
      "default": "md-clipboard",
      "active": "md-clipboard"
    },
    "ios": {
      "default": "ios-clipboard-outline",
      "active": "ios-clipboard"
    }
  },
  "clock": {
    "android": {
      "default": "md-clock",
      "active": "md-clock"
    },
    "ios": {
      "default": "ios-clock-outline",
      "active": "ios-clock"
    }
  },
  "close": {
    "android": {
      "default": "md-close",
      "active": "md-close"
    },
    "ios": {
      "default": "ios-close-outline",
      "active": "ios-close"
    }
  },
  "close-circle": {
    "android": {
      "default": "md-close-circle",
      "active": "md-close-circle"
    },
    "ios": {
      "default": "ios-close-circle-outline",
      "active": "ios-close-circle"
    }
  },
  "cloud": {
    "android": {
      "default": "md-cloud",
      "active": "md-cloud"
    },
    "ios": {
      "default": "ios-cloud-outline",
      "active": "ios-cloud"
    }
  },
  "cloud-circle": {
    "android": {
      "default": "md-cloud-circle",
      "active": "md-cloud-circle"
    },
    "ios": {
      "default": "ios-cloud-circle-outline",
      "active": "ios-cloud-circle"
    }
  },
  "cloud-done": {
    "android": {
      "default": "md-cloud-done",
      "active": "md-cloud-done"
    },
    "ios": {
      "default": "ios-cloud-done-outline",
      "active": "ios-cloud-done"
    }
  },
  "cloud-download": {
    "android": {
      "default": "md-cloud-download",
      "active": "md-cloud-download"
    },
    "ios": {
      "default": "ios-cloud-download-outline",
      "active": "ios-cloud-download"
    }
  },
  "cloud-outline": {
    "android": {
      "default": "md-cloud-outline",
      "active": "md-cloud-outline"
    },
    "ios": {
      "default": "ios-cloud-outline-outline",
      "active": "ios-cloud-outline"
    }
  },
  "cloud-upload": {
    "android": {
      "default": "md-cloud-upload",
      "active": "md-cloud-upload"
    },
    "ios": {
      "default": "ios-cloud-upload-outline",
      "active": "ios-cloud-upload"
    }
  },
  "cloudy": {
    "android": {
      "default": "md-cloudy",
      "active": "md-cloudy"
    },
    "ios": {
      "default": "ios-cloudy-outline",
      "active": "ios-cloudy"
    }
  },
  "cloudy-night": {
    "android": {
      "default": "md-cloudy-night",
      "active": "md-cloudy-night"
    },
    "ios": {
      "default": "ios-cloudy-night-outline",
      "active": "ios-cloudy-night"
    }
  },
  "code": {
    "android": {
      "default": "md-code",
      "active": "md-code"
    },
    "ios": {
      "default": "ios-code-outline",
      "active": "ios-code"
    }
  },
  "code-download": {
    "android": {
      "default": "md-code-download",
      "active": "md-code-download"
    },
    "ios": {
      "default": "ios-code-download-outline",
      "active": "ios-code-download"
    }
  },
  "code-working": {
    "android": {
      "default": "md-code-working",
      "active": "md-code-working"
    },
    "ios": {
      "default": "ios-code-working-outline",
      "active": "ios-code-working"
    }
  },
  "cog": {
    "android": {
      "default": "md-cog",
      "active": "md-cog"
    },
    "ios": {
      "default": "ios-cog-outline",
      "active": "ios-cog"
    }
  },
  "color-fill": {
    "android": {
      "default": "md-color-fill",
      "active": "md-color-fill"
    },
    "ios": {
      "default": "ios-color-fill-outline",
      "active": "ios-color-fill"
    }
  },
  "color-filter": {
    "android": {
      "default": "md-color-filter",
      "active": "md-color-filter"
    },
    "ios": {
      "default": "ios-color-filter-outline",
      "active": "ios-color-filter"
    }
  },
  "color-palette": {
    "android": {
      "default": "md-color-palette",
      "active": "md-color-palette"
    },
    "ios": {
      "default": "ios-color-palette-outline",
      "active": "ios-color-palette"
    }
  },
  "color-wand": {
    "android": {
      "default": "md-color-wand",
      "active": "md-color-wand"
    },
    "ios": {
      "default": "ios-color-wand-outline",
      "active": "ios-color-wand"
    }
  },
  "compass": {
    "android": {
      "default": "md-compass",
      "active": "md-compass"
    },
    "ios": {
      "default": "ios-compass-outline",
      "active": "ios-compass"
    }
  },
  "construct": {
    "android": {
      "default": "md-construct",
      "active": "md-construct"
    },
    "ios": {
      "default": "ios-construct-outline",
      "active": "ios-construct"
    }
  },
  "contact": {
    "android": {
      "default": "md-contact",
      "active": "md-contact"
    },
    "ios": {
      "default": "ios-contact-outline",
      "active": "ios-contact"
    }
  },
  "contacts": {
    "android": {
      "default": "md-contacts",
      "active": "md-contacts"
    },
    "ios": {
      "default": "ios-contacts-outline",
      "active": "ios-contacts"
    }
  },
  "contract": {
    "android": {
      "default": "md-contract",
      "active": "md-contract"
    },
    "ios": {
      "default": "ios-contract-outline",
      "active": "ios-contract"
    }
  },
  "contrast": {
    "android": {
      "default": "md-contrast",
      "active": "md-contrast"
    },
    "ios": {
      "default": "ios-contrast-outline",
      "active": "ios-contrast"
    }
  },
  "copy": {
    "android": {
      "default": "md-copy",
      "active": "md-copy"
    },
    "ios": {
      "default": "ios-copy-outline",
      "active": "ios-copy"
    }
  },
  "create": {
    "android": {
      "default": "md-create",
      "active": "md-create"
    },
    "ios": {
      "default": "ios-create-outline",
      "active": "ios-create"
    }
  },
  "crop": {
    "android": {
      "default": "md-crop",
      "active": "md-crop"
    },
    "ios": {
      "default": "ios-crop-outline",
      "active": "ios-crop"
    }
  },
  "cube": {
    "android": {
      "default": "md-cube",
      "active": "md-cube"
    },
    "ios": {
      "default": "ios-cube-outline",
      "active": "ios-cube"
    }
  },
  "cut": {
    "android": {
      "default": "md-cut",
      "active": "md-cut"
    },
    "ios": {
      "default": "ios-cut-outline",
      "active": "ios-cut"
    }
  },
  "desktop": {
    "android": {
      "default": "md-desktop",
      "active": "md-desktop"
    },
    "ios": {
      "default": "ios-desktop-outline",
      "active": "ios-desktop"
    }
  },
  "disc": {
    "android": {
      "default": "md-disc",
      "active": "md-disc"
    },
    "ios": {
      "default": "ios-disc-outline",
      "active": "ios-disc"
    }
  },
  "document": {
    "android": {
      "default": "md-document",
      "active": "md-document"
    },
    "ios": {
      "default": "ios-document-outline",
      "active": "ios-document"
    }
  },
  "done-all": {
    "android": {
      "default": "md-done-all",
      "active": "md-done-all"
    },
    "ios": {
      "default": "ios-done-all-outline",
      "active": "ios-done-all"
    }
  },
  "download": {
    "android": {
      "default": "md-download",
      "active": "md-download"
    },
    "ios": {
      "default": "ios-download-outline",
      "active": "ios-download"
    }
  },
  "easel": {
    "android": {
      "default": "md-easel",
      "active": "md-easel"
    },
    "ios": {
      "default": "ios-easel-outline",
      "active": "ios-easel"
    }
  },
  "egg": {
    "android": {
      "default": "md-egg",
      "active": "md-egg"
    },
    "ios": {
      "default": "ios-egg-outline",
      "active": "ios-egg"
    }
  },
  "exit": {
    "android": {
      "default": "md-exit",
      "active": "md-exit"
    },
    "ios": {
      "default": "ios-exit-outline",
      "active": "ios-exit"
    }
  },
  "expand": {
    "android": {
      "default": "md-expand",
      "active": "md-expand"
    },
    "ios": {
      "default": "ios-expand-outline",
      "active": "ios-expand"
    }
  },
  "eye": {
    "android": {
      "default": "md-eye",
      "active": "md-eye"
    },
    "ios": {
      "default": "ios-eye-outline",
      "active": "ios-eye"
    }
  },
  "eye-off": {
    "android": {
      "default": "md-eye-off",
      "active": "md-eye-off"
    },
    "ios": {
      "default": "ios-eye-off-outline",
      "active": "ios-eye-off"
    }
  },
  "fastforward": {
    "android": {
      "default": "md-fastforward",
      "active": "md-fastforward"
    },
    "ios": {
      "default": "ios-fastforward-outline",
      "active": "ios-fastforward"
    }
  },
  "female": {
    "android": {
      "default": "md-female",
      "active": "md-female"
    },
    "ios": {
      "default": "ios-female-outline",
      "active": "ios-female"
    }
  },
  "filing": {
    "android": {
      "default": "md-filing",
      "active": "md-filing"
    },
    "ios": {
      "default": "ios-filing-outline",
      "active": "ios-filing"
    }
  },
  "film": {
    "android": {
      "default": "md-film",
      "active": "md-film"
    },
    "ios": {
      "default": "ios-film-outline",
      "active": "ios-film"
    }
  },
  "finger-print": {
    "android": {
      "default": "md-finger-print",
      "active": "md-finger-print"
    },
    "ios": {
      "default": "ios-finger-print-outline",
      "active": "ios-finger-print"
    }
  },
  "flag": {
    "android": {
      "default": "md-flag",
      "active": "md-flag"
    },
    "ios": {
      "default": "ios-flag-outline",
      "active": "ios-flag"
    }
  },
  "flame": {
    "android": {
      "default": "md-flame",
      "active": "md-flame"
    },
    "ios": {
      "default": "ios-flame-outline",
      "active": "ios-flame"
    }
  },
  "flash": {
    "android": {
      "default": "md-flash",
      "active": "md-flash"
    },
    "ios": {
      "default": "ios-flash-outline",
      "active": "ios-flash"
    }
  },
  "flask": {
    "android": {
      "default": "md-flask",
      "active": "md-flask"
    },
    "ios": {
      "default": "ios-flask-outline",
      "active": "ios-flask"
    }
  },
  "flower": {
    "android": {
      "default": "md-flower",
      "active": "md-flower"
    },
    "ios": {
      "default": "ios-flower-outline",
      "active": "ios-flower"
    }
  },
  "folder": {
    "android": {
      "default": "md-folder",
      "active": "md-folder"
    },
    "ios": {
      "default": "ios-folder-outline",
      "active": "ios-folder"
    }
  },
  "folder-open": {
    "android": {
      "default": "md-folder-open",
      "active": "md-folder-open"
    },
    "ios": {
      "default": "ios-folder-open-outline",
      "active": "ios-folder-open"
    }
  },
  "football": {
    "android": {
      "default": "md-football",
      "active": "md-football"
    },
    "ios": {
      "default": "ios-football-outline",
      "active": "ios-football"
    }
  },
  "funnel": {
    "android": {
      "default": "md-funnel",
      "active": "md-funnel"
    },
    "ios": {
      "default": "ios-funnel-outline",
      "active": "ios-funnel"
    }
  },
  "game-controller-a": {
    "android": {
      "default": "md-game-controller-a",
      "active": "md-game-controller-a"
    },
    "ios": {
      "default": "ios-game-controller-a-outline",
      "active": "ios-game-controller-a"
    }
  },
  "game-controller-b": {
    "android": {
      "default": "md-game-controller-b",
      "active": "md-game-controller-b"
    },
    "ios": {
      "default": "ios-game-controller-b-outline",
      "active": "ios-game-controller-b"
    }
  },
  "git-branch": {
    "android": {
      "default": "md-git-branch",
      "active": "md-git-branch"
    },
    "ios": {
      "default": "ios-git-branch-outline",
      "active": "ios-git-branch"
    }
  },
  "git-commit": {
    "android": {
      "default": "md-git-commit",
      "active": "md-git-commit"
    },
    "ios": {
      "default": "ios-git-commit-outline",
      "active": "ios-git-commit"
    }
  },
  "git-merge": {
    "android": {
      "default": "md-git-merge",
      "active": "md-git-merge"
    },
    "ios": {
      "default": "ios-git-merge-outline",
      "active": "ios-git-merge"
    }
  },
  "git-compare": {
    "android": {
      "default": "md-git-compare",
      "active": "md-git-compare"
    },
    "ios": {
      "default": "ios-git-compare-outline",
      "active": "ios-git-compare"
    }
  },
  "git-network": {
    "android": {
      "default": "md-git-network",
      "active": "md-git-network"
    },
    "ios": {
      "default": "ios-git-network-outline",
      "active": "ios-git-network"
    }
  },
  "git-pull-request": {
    "android": {
      "default": "md-git-pull-request",
      "active": "md-git-pull-request"
    },
    "ios": {
      "default": "ios-git-pull-request-outline",
      "active": "ios-git-pull-request"
    }
  },
  "glasses": {
    "android": {
      "default": "md-glasses",
      "active": "md-glasses"
    },
    "ios": {
      "default": "ios-glasses-outline",
      "active": "ios-glasses"
    }
  },
  "globe": {
    "android": {
      "default": "md-globe",
      "active": "md-globe"
    },
    "ios": {
      "default": "ios-globe-outline",
      "active": "ios-globe"
    }
  },
  "grid": {
    "android": {
      "default": "md-grid",
      "active": "md-grid"
    },
    "ios": {
      "default": "ios-grid-outline",
      "active": "ios-grid"
    }
  },
  "hammer": {
    "android": {
      "default": "md-hammer",
      "active": "md-hammer"
    },
    "ios": {
      "default": "ios-hammer-outline",
      "active": "ios-hammer"
    }
  },
  "hand": {
    "android": {
      "default": "md-hand",
      "active": "md-hand"
    },
    "ios": {
      "default": "ios-hand-outline",
      "active": "ios-hand"
    }
  },
  "headset": {
    "android": {
      "default": "md-headset",
      "active": "md-headset"
    },
    "ios": {
      "default": "ios-headset-outline",
      "active": "ios-headset"
    }
  },
  "heart": {
    "android": {
      "default": "md-heart",
      "active": "md-heart"
    },
    "ios": {
      "default": "ios-heart-outline",
      "active": "ios-heart"
    }
  },
  "happy": {
    "android": {
      "default": "md-happy-outline",
      "active": "md-happy"
    },
    "ios": {
      "default": "ios-happy-outline",
      "active": "ios-happy"
    }
  },
  "help": {
    "android": {
      "default": "md-help",
      "active": "md-help"
    },
    "ios": {
      "default": "ios-help-outline",
      "active": "ios-help"
    }
  },
  "help-buoy": {
    "android": {
      "default": "md-help-buoy",
      "active": "md-help-buoy"
    },
    "ios": {
      "default": "ios-help-buoy-outline",
      "active": "ios-help-buoy"
    }
  },
  "help-circle": {
    "android": {
      "default": "md-help-circle",
      "active": "md-help-circle"
    },
    "ios": {
      "default": "ios-help-circle-outline",
      "active": "ios-help-circle"
    }
  },
  "home": {
    "android": {
      "default": "md-home",
      "active": "md-home"
    },
    "ios": {
      "default": "ios-home-outline",
      "active": "ios-home"
    }
  },
  "ice-cream": {
    "android": {
      "default": "md-ice-cream",
      "active": "md-ice-cream"
    },
    "ios": {
      "default": "ios-ice-cream-outline",
      "active": "ios-ice-cream"
    }
  },
  "image": {
    "android": {
      "default": "md-image",
      "active": "md-image"
    },
    "ios": {
      "default": "ios-image-outline",
      "active": "ios-image"
    }
  },
  "images": {
    "android": {
      "default": "md-images",
      "active": "md-images"
    },
    "ios": {
      "default": "ios-images-outline",
      "active": "ios-images"
    }
  },
  "infinite": {
    "android": {
      "default": "md-infinite",
      "active": "md-infinite"
    },
    "ios": {
      "default": "ios-infinite-outline",
      "active": "ios-infinite"
    }
  },
  "information": {
    "android": {
      "default": "md-information",
      "active": "md-information"
    },
    "ios": {
      "default": "ios-information-outline",
      "active": "ios-information"
    }
  },
  "information-circle": {
    "android": {
      "default": "md-information-circle",
      "active": "md-information-circle"
    },
    "ios": {
      "default": "ios-information-circle-outline",
      "active": "ios-information-circle"
    }
  },
  "ionic": {
    "android": {
      "default": "md-ionic",
      "active": "md-ionic"
    },
    "ios": {
      "default": "ios-ionic-outline",
      "active": "ios-ionic"
    }
  },
  "ionitron": {
    "android": {
      "default": "md-ionitron",
      "active": "md-ionitron"
    },
    "ios": {
      "default": "ios-ionitron-outline",
      "active": "ios-ionitron"
    }
  },
  "jet": {
    "android": {
      "default": "md-jet",
      "active": "md-jet"
    },
    "ios": {
      "default": "ios-jet-outline",
      "active": "ios-jet"
    }
  },
  "key": {
    "android": {
      "default": "md-key",
      "active": "md-key"
    },
    "ios": {
      "default": "ios-key-outline",
      "active": "ios-key"
    }
  },
  "keypad": {
    "android": {
      "default": "md-keypad",
      "active": "md-keypad"
    },
    "ios": {
      "default": "ios-keypad-outline",
      "active": "ios-keypad"
    }
  },
  "laptop": {
    "android": {
      "default": "md-laptop",
      "active": "md-laptop"
    },
    "ios": {
      "default": "ios-laptop-outline",
      "active": "ios-laptop"
    }
  },
  "leaf": {
    "android": {
      "default": "md-leaf",
      "active": "md-leaf"
    },
    "ios": {
      "default": "ios-leaf-outline",
      "active": "ios-leaf"
    }
  },
  "link": {
    "android": {
      "default": "md-link",
      "active": "md-link"
    },
    "ios": {
      "default": "ios-link-outline",
      "active": "ios-link"
    }
  },
  "list": {
    "android": {
      "default": "md-list",
      "active": "md-list"
    },
    "ios": {
      "default": "ios-list-outline",
      "active": "ios-list"
    }
  },
  "list-box": {
    "android": {
      "default": "md-list-box",
      "active": "md-list-box"
    },
    "ios": {
      "default": "ios-list-box-outline",
      "active": "ios-list-box"
    }
  },
  "locate": {
    "android": {
      "default": "md-locate",
      "active": "md-locate"
    },
    "ios": {
      "default": "ios-locate-outline",
      "active": "ios-locate"
    }
  },
  "lock": {
    "android": {
      "default": "md-lock",
      "active": "md-lock"
    },
    "ios": {
      "default": "ios-lock-outline",
      "active": "ios-lock"
    }
  },
  "log-in": {
    "android": {
      "default": "md-log-in",
      "active": "md-log-in"
    },
    "ios": {
      "default": "ios-log-in-outline",
      "active": "ios-log-in"
    }
  },
  "log-out": {
    "android": {
      "default": "md-log-out",
      "active": "md-log-out"
    },
    "ios": {
      "default": "ios-log-out-outline",
      "active": "ios-log-out"
    }
  },
  "magnet": {
    "android": {
      "default": "md-magnet",
      "active": "md-magnet"
    },
    "ios": {
      "default": "ios-magnet-outline",
      "active": "ios-magnet"
    }
  },
  "mail": {
    "android": {
      "default": "md-mail",
      "active": "md-mail"
    },
    "ios": {
      "default": "ios-mail-outline",
      "active": "ios-mail"
    }
  },
  "mail-open": {
    "android": {
      "default": "md-mail-open",
      "active": "md-mail-open"
    },
    "ios": {
      "default": "ios-mail-open-outline",
      "active": "ios-mail-open"
    }
  },
  "male": {
    "android": {
      "default": "md-male",
      "active": "md-male"
    },
    "ios": {
      "default": "ios-male-outline",
      "active": "ios-male"
    }
  },
  "man": {
    "android": {
      "default": "md-man",
      "active": "md-man"
    },
    "ios": {
      "default": "ios-man-outline",
      "active": "ios-man"
    }
  },
  "map": {
    "android": {
      "default": "md-map",
      "active": "md-map"
    },
    "ios": {
      "default": "ios-map-outline",
      "active": "ios-map"
    }
  },
  "medal": {
    "android": {
      "default": "md-medal",
      "active": "md-medal"
    },
    "ios": {
      "default": "ios-medal-outline",
      "active": "ios-medal"
    }
  },
  "medical": {
    "android": {
      "default": "md-medical",
      "active": "md-medical"
    },
    "ios": {
      "default": "ios-medical-outline",
      "active": "ios-medical"
    }
  },
  "medkit": {
    "android": {
      "default": "md-medkit",
      "active": "md-medkit"
    },
    "ios": {
      "default": "ios-medkit-outline",
      "active": "ios-medkit"
    }
  },
  "megaphone": {
    "android": {
      "default": "md-megaphone",
      "active": "md-megaphone"
    },
    "ios": {
      "default": "ios-megaphone-outline",
      "active": "ios-megaphone"
    }
  },
  "menu": {
    "android": {
      "default": "md-menu",
      "active": "md-menu"
    },
    "ios": {
      "default": "ios-menu-outline",
      "active": "ios-menu"
    }
  },
  "mic": {
    "android": {
      "default": "md-mic",
      "active": "md-mic"
    },
    "ios": {
      "default": "ios-mic-outline",
      "active": "ios-mic"
    }
  },
  "mic-off": {
    "android": {
      "default": "md-mic-off",
      "active": "md-mic-off"
    },
    "ios": {
      "default": "ios-mic-off-outline",
      "active": "ios-mic-off"
    }
  },
  "microphone": {
    "android": {
      "default": "md-microphone",
      "active": "md-microphone"
    },
    "ios": {
      "default": "ios-microphone-outline",
      "active": "ios-microphone"
    }
  },
  "moon": {
    "android": {
      "default": "md-moon",
      "active": "md-moon"
    },
    "ios": {
      "default": "ios-moon-outline",
      "active": "ios-moon"
    }
  },
  "more": {
    "android": {
      "default": "md-more",
      "active": "md-more"
    },
    "ios": {
      "default": "ios-more-outline",
      "active": "ios-more"
    }
  },
  "move": {
    "android": {
      "default": "md-move",
      "active": "md-move"
    },
    "ios": {
      "default": "ios-move-outline",
      "active": "ios-move"
    }
  },
  "musical-note": {
    "android": {
      "default": "md-musical-note",
      "active": "md-musical-note"
    },
    "ios": {
      "default": "ios-musical-note-outline",
      "active": "ios-musical-note"
    }
  },
  "musical-notes": {
    "android": {
      "default": "md-musical-notes",
      "active": "md-musical-notes"
    },
    "ios": {
      "default": "ios-musical-notes-outline",
      "active": "ios-musical-notes"
    }
  },
  "navigate": {
    "android": {
      "default": "md-navigate",
      "active": "md-navigate"
    },
    "ios": {
      "default": "ios-navigate-outline",
      "active": "ios-navigate"
    }
  },
  "no-smoking": {
    "android": {
      "default": "md-no-smoking",
      "active": "md-no-smoking"
    },
    "ios": {
      "default": "ios-no-smoking-outline",
      "active": "ios-no-smoking"
    }
  },
  "notifications": {
    "android": {
      "default": "md-notifications-outline",
      "active": "md-notifications"
    },
    "ios": {
      "default": "ios-notifications-outline",
      "active": "ios-notifications"
    }
  },
  "notifications-off": {
    "android": {
      "default": "md-notifications-off",
      "active": "md-notifications-off"
    },
    "ios": {
      "default": "ios-notifications-off-outline",
      "active": "ios-notifications-off"
    }
  },
  "nuclear": {
    "android": {
      "default": "md-nuclear",
      "active": "md-nuclear"
    },
    "ios": {
      "default": "ios-nuclear-outline",
      "active": "ios-nuclear"
    }
  },
  "nutrition": {
    "android": {
      "default": "md-nutrition",
      "active": "md-nutrition"
    },
    "ios": {
      "default": "ios-nutrition-outline",
      "active": "ios-nutrition"
    }
  },
  "open": {
    "android": {
      "default": "md-open",
      "active": "md-open"
    },
    "ios": {
      "default": "ios-open-outline",
      "active": "ios-open"
    }
  },
  "options": {
    "android": {
      "default": "md-options",
      "active": "md-options"
    },
    "ios": {
      "default": "ios-options-outline",
      "active": "ios-options"
    }
  },
  "outlet": {
    "android": {
      "default": "md-outlet",
      "active": "md-outlet"
    },
    "ios": {
      "default": "ios-outlet-outline",
      "active": "ios-outlet"
    }
  },
  "paper": {
    "android": {
      "default": "md-paper",
      "active": "md-paper"
    },
    "ios": {
      "default": "ios-paper-outline",
      "active": "ios-paper"
    }
  },
  "paper-plane": {
    "android": {
      "default": "md-paper-plane",
      "active": "md-paper-plane"
    },
    "ios": {
      "default": "ios-paper-plane-outline",
      "active": "ios-paper-plane"
    }
  },
  "partly-sunny": {
    "android": {
      "default": "md-partly-sunny",
      "active": "md-partly-sunny"
    },
    "ios": {
      "default": "ios-partly-sunny-outline",
      "active": "ios-partly-sunny"
    }
  },
  "pause": {
    "android": {
      "default": "md-pause",
      "active": "md-pause"
    },
    "ios": {
      "default": "ios-pause-outline",
      "active": "ios-pause"
    }
  },
  "paw": {
    "android": {
      "default": "md-paw",
      "active": "md-paw"
    },
    "ios": {
      "default": "ios-paw-outline",
      "active": "ios-paw"
    }
  },
  "people": {
    "android": {
      "default": "md-people",
      "active": "md-people"
    },
    "ios": {
      "default": "ios-people-outline",
      "active": "ios-people"
    }
  },
  "person": {
    "android": {
      "default": "md-person",
      "active": "md-person"
    },
    "ios": {
      "default": "ios-person-outline",
      "active": "ios-person"
    }
  },
  "person-add": {
    "android": {
      "default": "md-person-add",
      "active": "md-person-add"
    },
    "ios": {
      "default": "ios-person-add-outline",
      "active": "ios-person-add"
    }
  },
  "phone-landscape": {
    "android": {
      "default": "md-phone-landscape",
      "active": "md-phone-landscape"
    },
    "ios": {
      "default": "ios-phone-landscape-outline",
      "active": "ios-phone-landscape"
    }
  },
  "phone-portrait": {
    "android": {
      "default": "md-phone-portrait",
      "active": "md-phone-portrait"
    },
    "ios": {
      "default": "ios-phone-portrait-outline",
      "active": "ios-phone-portrait"
    }
  },
  "photos": {
    "android": {
      "default": "md-photos",
      "active": "md-photos"
    },
    "ios": {
      "default": "ios-photos-outline",
      "active": "ios-photos"
    }
  },
  "pie": {
    "android": {
      "default": "md-pie",
      "active": "md-pie"
    },
    "ios": {
      "default": "ios-pie-outline",
      "active": "ios-pie"
    }
  },
  "pin": {
    "android": {
      "default": "md-pin",
      "active": "md-pin"
    },
    "ios": {
      "default": "ios-pin-outline",
      "active": "ios-pin"
    }
  },
  "pint": {
    "android": {
      "default": "md-pint",
      "active": "md-pint"
    },
    "ios": {
      "default": "ios-pint-outline",
      "active": "ios-pint"
    }
  },
  "pizza": {
    "android": {
      "default": "md-pizza",
      "active": "md-pizza"
    },
    "ios": {
      "default": "ios-pizza-outline",
      "active": "ios-pizza"
    }
  },
  "plane": {
    "android": {
      "default": "md-plane",
      "active": "md-plane"
    },
    "ios": {
      "default": "ios-plane-outline",
      "active": "ios-plane"
    }
  },
  "planet": {
    "android": {
      "default": "md-planet",
      "active": "md-planet"
    },
    "ios": {
      "default": "ios-planet-outline",
      "active": "ios-planet"
    }
  },
  "play": {
    "android": {
      "default": "md-play",
      "active": "md-play"
    },
    "ios": {
      "default": "ios-play-outline",
      "active": "ios-play"
    }
  },
  "podium": {
    "android": {
      "default": "md-podium",
      "active": "md-podium"
    },
    "ios": {
      "default": "ios-podium-outline",
      "active": "ios-podium"
    }
  },
  "power": {
    "android": {
      "default": "md-power",
      "active": "md-power"
    },
    "ios": {
      "default": "ios-power-outline",
      "active": "ios-power"
    }
  },
  "pricetag": {
    "android": {
      "default": "md-pricetag",
      "active": "md-pricetag"
    },
    "ios": {
      "default": "ios-pricetag-outline",
      "active": "ios-pricetag"
    }
  },
  "pricetags": {
    "android": {
      "default": "md-pricetags",
      "active": "md-pricetags"
    },
    "ios": {
      "default": "ios-pricetags-outline",
      "active": "ios-pricetags"
    }
  },
  "print": {
    "android": {
      "default": "md-print",
      "active": "md-print"
    },
    "ios": {
      "default": "ios-print-outline",
      "active": "ios-print"
    }
  },
  "pulse": {
    "android": {
      "default": "md-pulse",
      "active": "md-pulse"
    },
    "ios": {
      "default": "ios-pulse-outline",
      "active": "ios-pulse"
    }
  },
  "qr-scanner": {
    "android": {
      "default": "md-qr-scanner",
      "active": "md-qr-scanner"
    },
    "ios": {
      "default": "ios-qr-scanner-outline",
      "active": "ios-qr-scanner"
    }
  },
  "quote": {
    "android": {
      "default": "md-quote",
      "active": "md-quote"
    },
    "ios": {
      "default": "ios-quote-outline",
      "active": "ios-quote"
    }
  },
  "radio": {
    "android": {
      "default": "md-radio",
      "active": "md-radio"
    },
    "ios": {
      "default": "ios-radio-outline",
      "active": "ios-radio"
    }
  },
  "radio-button-off": {
    "android": {
      "default": "md-radio-button-off",
      "active": "md-radio-button-off"
    },
    "ios": {
      "default": "ios-radio-button-off-outline",
      "active": "ios-radio-button-off"
    }
  },
  "radio-button-on": {
    "android": {
      "default": "md-radio-button-on",
      "active": "md-radio-button-on"
    },
    "ios": {
      "default": "ios-radio-button-on-outline",
      "active": "ios-radio-button-on"
    }
  },
  "rainy": {
    "android": {
      "default": "md-rainy",
      "active": "md-rainy"
    },
    "ios": {
      "default": "ios-rainy-outline",
      "active": "ios-rainy"
    }
  },
  "recording": {
    "android": {
      "default": "md-recording",
      "active": "md-recording"
    },
    "ios": {
      "default": "ios-recording-outline",
      "active": "ios-recording"
    }
  },
  "redo": {
    "android": {
      "default": "md-redo",
      "active": "md-redo"
    },
    "ios": {
      "default": "ios-redo-outline",
      "active": "ios-redo"
    }
  },
  "refresh": {
    "android": {
      "default": "md-refresh",
      "active": "md-refresh"
    },
    "ios": {
      "default": "ios-refresh-outline",
      "active": "ios-refresh"
    }
  },
  "remove": {
    "android": {
      "default": "md-remove",
      "active": "md-remove"
    },
    "ios": {
      "default": "ios-remove-outline",
      "active": "ios-remove"
    }
  },
  "remove-circle": {
    "android": {
      "default": "md-remove-circle",
      "active": "md-remove-circle"
    },
    "ios": {
      "default": "ios-remove-circle-outline",
      "active": "ios-remove-circle"
    }
  },
  "reorder": {
    "android": {
      "default": "md-reorder",
      "active": "md-reorder"
    },
    "ios": {
      "default": "ios-reorder-outline",
      "active": "ios-reorder"
    }
  },
  "repeat": {
    "android": {
      "default": "md-repeat",
      "active": "md-repeat"
    },
    "ios": {
      "default": "ios-repeat-outline",
      "active": "ios-repeat"
    }
  },
  "resize": {
    "android": {
      "default": "md-resize",
      "active": "md-resize"
    },
    "ios": {
      "default": "ios-resize-outline",
      "active": "ios-resize"
    }
  },
  "restaurant": {
    "android": {
      "default": "md-restaurant",
      "active": "md-restaurant"
    },
    "ios": {
      "default": "ios-restaurant-outline",
      "active": "ios-restaurant"
    }
  },
  "return-left": {
    "android": {
      "default": "md-return-left",
      "active": "md-return-left"
    },
    "ios": {
      "default": "ios-return-left-outline",
      "active": "ios-return-left"
    }
  },
  "return-right": {
    "android": {
      "default": "md-return-right",
      "active": "md-return-right"
    },
    "ios": {
      "default": "ios-return-right-outline",
      "active": "ios-return-right"
    }
  },
  "reverse-camera": {
    "android": {
      "default": "md-reverse-camera",
      "active": "md-reverse-camera"
    },
    "ios": {
      "default": "ios-reverse-camera-outline",
      "active": "ios-reverse-camera"
    }
  },
  "rewind": {
    "android": {
      "default": "md-rewind",
      "active": "md-rewind"
    },
    "ios": {
      "default": "ios-rewind-outline",
      "active": "ios-rewind"
    }
  },
  "ribbon": {
    "android": {
      "default": "md-ribbon",
      "active": "md-ribbon"
    },
    "ios": {
      "default": "ios-ribbon-outline",
      "active": "ios-ribbon"
    }
  },
  "rose": {
    "android": {
      "default": "md-rose",
      "active": "md-rose"
    },
    "ios": {
      "default": "ios-rose-outline",
      "active": "ios-rose"
    }
  },
  "sad": {
    "android": {
      "default": "md-sad",
      "active": "md-sad"
    },
    "ios": {
      "default": "ios-sad-outline",
      "active": "ios-sad"
    }
  },
  "school": {
    "android": {
      "default": "md-school",
      "active": "md-school"
    },
    "ios": {
      "default": "ios-school-outline",
      "active": "ios-school"
    }
  },
  "search": {
    "android": {
      "default": "md-search",
      "active": "md-search"
    },
    "ios": {
      "default": "ios-search-outline",
      "active": "ios-search"
    }
  },
  "send": {
    "android": {
      "default": "md-send",
      "active": "md-send"
    },
    "ios": {
      "default": "ios-send-outline",
      "active": "ios-send"
    }
  },
  "settings": {
    "android": {
      "default": "md-settings",
      "active": "md-settings"
    },
    "ios": {
      "default": "ios-settings-outline",
      "active": "ios-settings"
    }
  },
  "share": {
    "android": {
      "default": "md-share",
      "active": "md-share"
    },
    "ios": {
      "default": "ios-share-outline",
      "active": "ios-share"
    }
  },
  "share-all": {
    "android": {
      "default": "md-share-all",
      "active": "md-share-all"
    },
    "ios": {
      "default": "ios-share-all-outline",
      "active": "ios-share-all"
    }
  },
  "shirt": {
    "android": {
      "default": "md-shirt",
      "active": "md-shirt"
    },
    "ios": {
      "default": "ios-shirt-outline",
      "active": "ios-shirt"
    }
  },
  "shuffle": {
    "android": {
      "default": "md-shuffle",
      "active": "md-shuffle"
    },
    "ios": {
      "default": "ios-shuffle-outline",
      "active": "ios-shuffle"
    }
  },
  "skip-backward": {
    "android": {
      "default": "md-skip-backward",
      "active": "md-skip-backward"
    },
    "ios": {
      "default": "ios-skip-backward-outline",
      "active": "ios-skip-backward"
    }
  },
  "skip-forward": {
    "android": {
      "default": "md-skip-forward",
      "active": "md-skip-forward"
    },
    "ios": {
      "default": "ios-skip-forward-outline",
      "active": "ios-skip-forward"
    }
  },
  "snow": {
    "android": {
      "default": "md-snow",
      "active": "md-snow"
    },
    "ios": {
      "default": "ios-snow-outline",
      "active": "ios-snow"
    }
  },
  "speedometer": {
    "android": {
      "default": "md-speedometer",
      "active": "md-speedometer"
    },
    "ios": {
      "default": "ios-speedometer-outline",
      "active": "ios-speedometer"
    }
  },
  "square": {
    "android": {
      "default": "md-square-outline",
      "active": "md-square"
    },
    "ios": {
      "default": "ios-square-outline",
      "active": "ios-square"
    }
  },
  "star": {
    "android": {
      "default": "md-star-outline",
      "active": "md-star"
    },
    "ios": {
      "default": "ios-star-outline",
      "active": "ios-star"
    }
  },
  "star-half": {
    "android": {
      "default": "md-star-half",
      "active": "md-star-half"
    },
    "ios": {
      "default": "ios-star-half-outline",
      "active": "ios-star-half"
    }
  },
  "stats": {
    "android": {
      "default": "md-stats",
      "active": "md-stats"
    },
    "ios": {
      "default": "ios-stats-outline",
      "active": "ios-stats"
    }
  },
  "stopwatch": {
    "android": {
      "default": "md-stopwatch",
      "active": "md-stopwatch"
    },
    "ios": {
      "default": "ios-stopwatch-outline",
      "active": "ios-stopwatch"
    }
  },
  "subway": {
    "android": {
      "default": "md-subway",
      "active": "md-subway"
    },
    "ios": {
      "default": "ios-subway-outline",
      "active": "ios-subway"
    }
  },
  "sunny": {
    "android": {
      "default": "md-sunny",
      "active": "md-sunny"
    },
    "ios": {
      "default": "ios-sunny-outline",
      "active": "ios-sunny"
    }
  },
  "swap": {
    "android": {
      "default": "md-swap",
      "active": "md-swap"
    },
    "ios": {
      "default": "ios-swap-outline",
      "active": "ios-swap"
    }
  },
  "switch": {
    "android": {
      "default": "md-switch",
      "active": "md-switch"
    },
    "ios": {
      "default": "ios-switch-outline",
      "active": "ios-switch"
    }
  },
  "sync": {
    "android": {
      "default": "md-sync",
      "active": "md-sync"
    },
    "ios": {
      "default": "ios-sync-outline",
      "active": "ios-sync"
    }
  },
  "tablet-landscape": {
    "android": {
      "default": "md-tablet-landscape",
      "active": "md-tablet-landscape"
    },
    "ios": {
      "default": "ios-tablet-landscape-outline",
      "active": "ios-tablet-landscape"
    }
  },
  "tablet-portrait": {
    "android": {
      "default": "md-tablet-portrait",
      "active": "md-tablet-portrait"
    },
    "ios": {
      "default": "ios-tablet-portrait-outline",
      "active": "ios-tablet-portrait"
    }
  },
  "tennisball": {
    "android": {
      "default": "md-tennisball",
      "active": "md-tennisball"
    },
    "ios": {
      "default": "ios-tennisball-outline",
      "active": "ios-tennisball"
    }
  },
  "text": {
    "android": {
      "default": "md-text",
      "active": "md-text"
    },
    "ios": {
      "default": "ios-text-outline",
      "active": "ios-text"
    }
  },
  "thermometer": {
    "android": {
      "default": "md-thermometer",
      "active": "md-thermometer"
    },
    "ios": {
      "default": "ios-thermometer-outline",
      "active": "ios-thermometer"
    }
  },
  "thumbs-down": {
    "android": {
      "default": "md-thumbs-down",
      "active": "md-thumbs-down"
    },
    "ios": {
      "default": "ios-thumbs-down-outline",
      "active": "ios-thumbs-down"
    }
  },
  "thumbs-up": {
    "android": {
      "default": "md-thumbs-up",
      "active": "md-thumbs-up"
    },
    "ios": {
      "default": "ios-thumbs-up-outline",
      "active": "ios-thumbs-up"
    }
  },
  "thunderstorm": {
    "android": {
      "default": "md-thunderstorm",
      "active": "md-thunderstorm"
    },
    "ios": {
      "default": "ios-thunderstorm-outline",
      "active": "ios-thunderstorm"
    }
  },
  "time": {
    "android": {
      "default": "md-time",
      "active": "md-time"
    },
    "ios": {
      "default": "ios-time-outline",
      "active": "ios-time"
    }
  },
  "timer": {
    "android": {
      "default": "md-timer",
      "active": "md-timer"
    },
    "ios": {
      "default": "ios-timer-outline",
      "active": "ios-timer"
    }
  },
  "train": {
    "android": {
      "default": "md-train",
      "active": "md-train"
    },
    "ios": {
      "default": "ios-train-outline",
      "active": "ios-train"
    }
  },
  "transgender": {
    "android": {
      "default": "md-transgender",
      "active": "md-transgender"
    },
    "ios": {
      "default": "ios-transgender-outline",
      "active": "ios-transgender"
    }
  },
  "trash": {
    "android": {
      "default": "md-trash",
      "active": "md-trash"
    },
    "ios": {
      "default": "ios-trash-outline",
      "active": "ios-trash"
    }
  },
  "trending-down": {
    "android": {
      "default": "md-trending-down",
      "active": "md-trending-down"
    },
    "ios": {
      "default": "ios-trending-down-outline",
      "active": "ios-trending-down"
    }
  },
  "trending-up": {
    "android": {
      "default": "md-trending-up",
      "active": "md-trending-up"
    },
    "ios": {
      "default": "ios-trending-up-outline",
      "active": "ios-trending-up"
    }
  },
  "trophy": {
    "android": {
      "default": "md-trophy",
      "active": "md-trophy"
    },
    "ios": {
      "default": "ios-trophy-outline",
      "active": "ios-trophy"
    }
  },
  "umbrella": {
    "android": {
      "default": "md-umbrella",
      "active": "md-umbrella"
    },
    "ios": {
      "default": "ios-umbrella-outline",
      "active": "ios-umbrella"
    }
  },
  "undo": {
    "android": {
      "default": "md-undo",
      "active": "md-undo"
    },
    "ios": {
      "default": "ios-undo-outline",
      "active": "ios-undo"
    }
  },
  "unlock": {
    "android": {
      "default": "md-unlock",
      "active": "md-unlock"
    },
    "ios": {
      "default": "ios-unlock-outline",
      "active": "ios-unlock"
    }
  },
  "videocam": {
    "android": {
      "default": "md-videocam",
      "active": "md-videocam"
    },
    "ios": {
      "default": "ios-videocam-outline",
      "active": "ios-videocam"
    }
  },
  "volume-down": {
    "android": {
      "default": "md-volume-down",
      "active": "md-volume-down"
    },
    "ios": {
      "default": "ios-volume-down-outline",
      "active": "ios-volume-down"
    }
  },
  "volume-up": {
    "android": {
      "default": "md-volume-up",
      "active": "md-volume-up"
    },
    "ios": {
      "default": "ios-volume-up-outline",
      "active": "ios-volume-up"
    }
  },
  "volume-mute": {
    "android": {
      "default": "md-volume-mute",
      "active": "md-volume-mute"
    },
    "ios": {
      "default": "ios-volume-mute-outline",
      "active": "ios-volume-mute"
    }
  },
  "volume-off": {
    "android": {
      "default": "md-volume-off",
      "active": "md-volume-off"
    },
    "ios": {
      "default": "ios-volume-off-outline",
      "active": "ios-volume-off"
    }
  },
  "walk": {
    "android": {
      "default": "md-walk",
      "active": "md-walk"
    },
    "ios": {
      "default": "ios-walk-outline",
      "active": "ios-walk"
    }
  },
  "warning": {
    "android": {
      "default": "md-warning",
      "active": "md-warning"
    },
    "ios": {
      "default": "ios-warning-outline",
      "active": "ios-warning"
    }
  },
  "watch": {
    "android": {
      "default": "md-watch",
      "active": "md-watch"
    },
    "ios": {
      "default": "ios-watch-outline",
      "active": "ios-watch"
    }
  },
  "water": {
    "android": {
      "default": "md-water",
      "active": "md-water"
    },
    "ios": {
      "default": "ios-water-outline",
      "active": "ios-water"
    }
  },
  "wifi": {
    "android": {
      "default": "md-wifi",
      "active": "md-wifi"
    },
    "ios": {
      "default": "ios-wifi-outline",
      "active": "ios-wifi"
    }
  },
  "wine": {
    "android": {
      "default": "md-wine",
      "active": "md-wine"
    },
    "ios": {
      "default": "ios-wine-outline",
      "active": "ios-wine"
    }
  },
  "woman": {
    "android": {
      "default": "md-woman",
      "active": "md-woman"
    },
    "ios": {
      "default": "ios-woman-outline",
      "active": "ios-woman"
    }
  }
};
}, 629, null, "native-base/dist/src/basic/Icon/NBIcons.json");
__d(/* native-base/dist/src/basic/Header.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Header = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Header.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) { // 484 = lodash
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Header = function (_Component) {
  _inherits(Header, _Component);function Header() {
    _classCallCheck(this, Header);return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
  }_createClass(Header, [{ key: "render", value: function render() {
      var _this2 = this;
      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
      var platformStyle = variables.platformStyle;

      return _react2.default.createElement(_reactNative.View, { __source: { fileName: _jsxFileName, lineNumber: 20 } }, _react2.default.createElement(_reactNative.StatusBar, {
        backgroundColor: this.props.androidStatusBarColor ? this.props.androidStatusBarColor : variables.statusBarColor,

        barStyle: this.props.iosBarStyle ? this.props.iosBarStyle : platformStyle === "material" ? "light-content" : variables.iosStatusbar, __source: { fileName: _jsxFileName, lineNumber: 21 } }), _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 31 } })));
    } }]);return Header;
}(_react.Component);Header.contextTypes = { theme: _propTypes2.default.object };

Header.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  searchBar: _propTypes2.default.bool,
  rounded: _propTypes2.default.bool });

var StyledHeader = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Header", {}, _mapPropsToStyleNames2.default)(Header);exports.Header = StyledHeader;
}, 630, null, "native-base/dist/src/basic/Header.js");
__d(/* native-base/dist/src/basic/InputGroup.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.InputGroup = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/InputGroup.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps); // 558 = ../Utils/computeProps
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var InputGroup = function (_Component) {
  _inherits(InputGroup, _Component);function InputGroup() {
    _classCallCheck(this, InputGroup);return _possibleConstructorReturn(this, (InputGroup.__proto__ || Object.getPrototypeOf(InputGroup)).apply(this, arguments));
  }_createClass(InputGroup, [{ key: "getInitialStyle", value: function getInitialStyle() {
      return {
        roundedInputGroup: {
          borderWidth: this.props.rounded ? 1 : undefined,
          borderRadius: this.props.rounded ? _platform2.default.inputGroupRoundedBorderRadius : undefined } };
    } }, { key: "prepareRootProps", value: function prepareRootProps() {
      var defaultProps = {
        style: this.getInitialStyle().roundedInputGroup };

      return (0, _computeProps2.default)(this.props, defaultProps);
    } }, { key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.prepareRootProps(), { __source: { fileName: _jsxFileName, lineNumber: 30 } }), this.props.children);
    } }]);return InputGroup;
}(_react.Component);

InputGroup.propTypes = _extends({}, _Utils.ViewPropTypes, {

  regular: _propTypes2.default.bool,
  underline: _propTypes2.default.bool,
  rounded: _propTypes2.default.bool,
  success: _propTypes2.default.bool,
  error: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool });

var StyledInputGroup = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.InputGroup", {}, _mapPropsToStyleNames2.default)(InputGroup);exports.InputGroup = StyledInputGroup;
}, 631, null, "native-base/dist/src/basic/InputGroup.js");
__d(/* native-base/dist/src/basic/Input.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Input = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Input.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _NativeBaseComponent2 = require(633                         );var _NativeBaseComponent3 = _interopRequireDefault(_NativeBaseComponent2);function _interopRequireDefault(obj) { // 633 = ./Base/NativeBaseComponent
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Input = function (_NativeBaseComponent) {
  _inherits(Input, _NativeBaseComponent);function Input() {
    _classCallCheck(this, Input);return _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).apply(this, arguments));
  }_createClass(Input, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.TextInput, _extends({
        ref: function ref(c) {
          _this2._textInput = c;
          _this2._root = c;
        },
        editable: this.props.disabled ? false : true }, this.props, {
        placeholderTextColor: this.props.placeholderTextColor ? this.props.placeholderTextColor : _platform2.default.inputColorPlaceholder,

        underlineColorAndroid: "rgba(0,0,0,0)", __source: { fileName: _jsxFileName, lineNumber: 12 } }));
    } }]);return Input;
}(_NativeBaseComponent3.default);

Input.propTypes = _extends({}, _reactNative.TextInput.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledInput = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Input", {}, _mapPropsToStyleNames2.default)(Input);exports.Input = StyledInput;
}, 632, null, "native-base/dist/src/basic/Input.js");
__d(/* native-base/dist/src/basic/Base/NativeBaseComponent.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes);function _interopRequireDefault(obj) { // 20 = prop-types
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var NativeBaseComponent = function (_Component) {
  _inherits(NativeBaseComponent, _Component);function NativeBaseComponent() {
    _classCallCheck(this, NativeBaseComponent);return _possibleConstructorReturn(this, (NativeBaseComponent.__proto__ || Object.getPrototypeOf(NativeBaseComponent)).apply(this, arguments));
  }_createClass(NativeBaseComponent, [{ key: "getChildContext", value: function getChildContext() {
      return {
        theme: this.props.theme ? this.props.theme : this.context.theme };
    } }, { key: "getContextForegroundColor", value: function getContextForegroundColor() {
      return this.context.foregroundColor;
    } }]);return NativeBaseComponent;
}(_react.Component);NativeBaseComponent.contextTypes = { theme: _propTypes2.default.object, foregroundColor: _propTypes2.default.string };NativeBaseComponent.propTypes = { theme: _propTypes2.default.object, foregroundColor: _propTypes2.default.string };NativeBaseComponent.childContextTypes = { theme: _propTypes2.default.object, foregroundColor: _propTypes2.default.string };exports.default = NativeBaseComponent;
}, 633, null, "native-base/dist/src/basic/Base/NativeBaseComponent.js");
__d(/* native-base/dist/src/basic/Title.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Title = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Title.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Title = function (_Component) {
  _inherits(Title, _Component);function Title() {
    _classCallCheck(this, Title);return _possibleConstructorReturn(this, (Title.__proto__ || Object.getPrototypeOf(Title)).apply(this, arguments));
  }_createClass(Title, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Text, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { numberOfLines: 1, __source: { fileName: _jsxFileName, lineNumber: 9 } }));
    } }]);return Title;
}(_react.Component);

Title.propTypes = _extends({}, _reactNative.Text.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledTitle = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Title", {}, _mapPropsToStyleNames2.default)(Title);exports.Title = StyledTitle;
}, 634, null, "native-base/dist/src/basic/Title.js");
__d(/* native-base/dist/src/basic/Fab.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Fab = undefined;var _jsxFileName = "src/basic/Fab.js";var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps); // 558 = ../Utils/computeProps

var _reactNative = require(181           ); // 181 = react-native
var _Icon = require(628     ); // 628 = ./Icon
var _IconNB = require(561       ); // 561 = ./IconNB
var _Button = require(557       ); // 557 = ./Button
var _platform = require(493                            );var _platform2 = _interopRequireDefault(_platform); // 493 = ./../theme/variables/platform
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _nativeBaseShoutemTheme = require(470                        );function _interopRequireDefault(obj) { // 470 = native-base-shoutem-theme
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var _Dimensions$get = _reactNative.Dimensions.get("window"),
    height = _Dimensions$get.height,
    width = _Dimensions$get.width;

var AnimatedFab = _reactNative.Animated.createAnimatedComponent(_Button.Button);var Fab = function (_Component) {
  _inherits(Fab, _Component);

  function Fab(props) {
    _classCallCheck(this, Fab);var _this = _possibleConstructorReturn(this, (Fab.__proto__ || Object.getPrototypeOf(Fab)).call(this, props));
    _this.containerHeight = new _reactNative.Animated.Value(56);
    _this.containerWidth = new _reactNative.Animated.Value(0);
    _this.buttonScale = new _reactNative.Animated.Value(0);
    _this.state = {
      buttons: undefined,
      active: false };return _this;
  }_createClass(Fab, [{ key: "fabTopValue", value: function fabTopValue(pos) {
      if (pos === "topLeft") {
        return {
          top: 20,
          bottom: undefined,
          left: 20,
          right: undefined };
      } else if (pos === "bottomRight") {
        return {
          top: undefined,
          bottom: 20,
          left: undefined,
          right: 20 };
      } else if (pos === "bottomLeft") {
        return {
          top: undefined,
          bottom: 20,
          left: 20,
          right: undefined };
      } else if (pos === "topRight") {
        return {
          top: 20,
          bottom: undefined,
          left: undefined,
          right: 20 };
      }
    } }, { key: "fabOtherBtns", value: function fabOtherBtns(direction, i) {
      if (direction === "up") {
        return {
          top: undefined,
          bottom: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 50 : 8 : i * 50 + 65,
          left: 8,
          right: 0 };
      } else if (direction === "left") {
        return {
          top: 8,
          bottom: 0,
          left: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 8 : 8 : -(i * 50 + 50),
          right: 0 };
      } else if (direction === "down") {
        return {
          top: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 50 : 8 : i * 50 + 65,
          bottom: 0,
          left: 8,
          right: 0 };
      } else if (direction === "right") {
        return {
          top: 8,
          bottom: 0,
          left: this.props.active === false ? _reactNative.Platform.OS === "ios" ? 50 : 8 : i * 50 + 65,
          right: 0 };
      }
    } }, { key: "getInitialStyle", value: function getInitialStyle(iconStyle) {
      return {
        fab: {
          height: 56,
          width: 56,
          borderRadius: 28,
          elevation: 4,
          shadowColor: "#000",
          shadowOffset: { width: 0, height: 2 },
          shadowOpacity: 0.4,
          justifyContent: "center",
          alignItems: "center",
          shadowRadius: 2,
          position: "absolute",
          bottom: 0,
          backgroundColor: "blue" },

        container: {
          position: "absolute",
          top: this.props.position ? this.fabTopValue(this.props.position).top : undefined,
          bottom: this.props.position ? this.fabTopValue(this.props.position).bottom : 20,
          right: this.props.position ? this.fabTopValue(this.props.position).right : 20,
          left: this.props.position ? this.fabTopValue(this.props.position).left : undefined,
          width: 56,
          height: this.containerHeight,
          flexDirection: this.props.direction ? this.props.direction == "left || right" ? "row" : "column" : "column",
          alignItems: "center" },

        iconStyle: _extends({
          color: "#fff",
          fontSize: 24,
          lineHeight: _reactNative.Platform.OS == "ios" ? 27 : undefined }, iconStyle),

        buttonStyle: {
          position: "absolute",
          height: 40,
          width: 40,
          left: 7,
          borderRadius: 20,
          transform: this.state.active ? [{ scale: new _reactNative.Animated.Value(1) }] : [{ scale: this.buttonScale }],
          marginBottom: 10,
          backgroundColor: "blue" } };
    } }, { key: "getContainerStyle", value: function getContainerStyle() {
      return _lodash2.default.merge(this.getInitialStyle().container, this.props.containerStyle);
    } }, { key: "prepareFabProps", value: function prepareFabProps() {
      var defaultProps = {
        style: this.getInitialStyle().fab };

      var incomingProps = _lodash2.default.clone(this.props);
      delete incomingProps.onPress;

      return (0, _computeProps2.default)(incomingProps, defaultProps);
    } }, { key: "getOtherButtonStyle", value: function getOtherButtonStyle(child, i) {
      var type = {
        top: this.props.direction ? this.fabOtherBtns(this.props.direction, i).top : undefined,
        left: this.props.direction ? this.fabOtherBtns(this.props.direction, i).left : 8,
        right: this.props.direction ? this.fabOtherBtns(this.props.direction, i).right : 0,
        bottom: this.props.direction ? this.fabOtherBtns(this.props.direction, i).bottom : this.props.active === false ? _reactNative.Platform.OS === "ios" ? 8 : 8 : i * 50 + 65 };

      return _lodash2.default.merge(this.getInitialStyle().buttonStyle, child.props.style, type);
    } }, { key: "prepareButtonProps", value: function prepareButtonProps(child) {
      var inp = _lodash2.default.clone(child.props);
      delete inp.style;

      var defaultProps = {};

      return (0, _computeProps2.default)(inp, defaultProps);
    } }, { key: "componentDidMount", value: function componentDidMount() {
      var _this2 = this;
      var childrenArray = _react2.default.Children.toArray(this.props.children);
      var icon = _lodash2.default.remove(childrenArray, function (item) {
        if (item.type.displayName === "Styled(Button)") {
          return true;
        }
      });
      this.setState({
        buttons: icon.length });

      setTimeout(function () {
        _this2.setState({
          active: _this2.props.active });
      }, 0);
    } }, { key: "renderFab", value: function renderFab() {
      var childrenArray = _react2.default.Children.toArray(this.props.children);
      var icon = _lodash2.default.remove(childrenArray, function (item) {
        if (item.type.displayName === "Styled(Button)") {
          return true;
        }
      });

      return _react2.default.cloneElement(childrenArray[0], {
        style: this.getInitialStyle(childrenArray[0].props.style).iconStyle });
    } }, { key: "renderButtons", value: function renderButtons() {
      var _this3 = this;
      var childrenArray = _react2.default.Children.toArray(this.props.children);

      var newChildren = [];

      {
        childrenArray.slice(1).map(function (child, i) {
          newChildren.push(_react2.default.createElement(AnimatedFab, _extends({
            style: _this3.getOtherButtonStyle(child, i) }, _this3.prepareButtonProps(child, i), {
            fabButton: true,
            key: i, __source: { fileName: _jsxFileName, lineNumber: 231 } }), child.props.children));
        });
      }
      return newChildren;
    } }, { key: "upAnimate", value: function upAnimate() {
      if (!this.props.active) {
        _reactNative.Animated.spring(this.containerHeight, {
          toValue: this.state.buttons * 51.3 + 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 1 }).start();
      } else {
        this.setState({
          active: false });

        _reactNative.Animated.spring(this.containerHeight, {
          toValue: 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 0 }).start();
      }
    } }, { key: "leftAnimate", value: function leftAnimate() {
      if (!this.props.active) {
        _reactNative.Animated.spring(this.containerWidth, {
          toValue: this.state.buttons * 51.3 + 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 1 }).start();
      } else {
        this.setState({
          active: false });

        _reactNative.Animated.spring(this.containerHeight, {
          toValue: 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 0 }).start();
      }
    } }, { key: "rightAnimate", value: function rightAnimate() {
      if (!this.props.active) {
        _reactNative.Animated.spring(this.containerWidth, {
          toValue: this.state.buttons * 51.3 + 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 1 }).start();
      } else {
        this.setState({
          active: false });

        _reactNative.Animated.spring(this.containerHeight, {
          toValue: 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 0 }).start();
      }
    } }, { key: "downAnimate", value: function downAnimate() {
      if (!this.props.active) {
        _reactNative.Animated.spring(this.containerHeight, {
          toValue: 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 1 }).start();
      } else {
        this.setState({
          active: false });

        _reactNative.Animated.spring(this.containerHeight, {
          toValue: 56 }).start();
        _reactNative.Animated.spring(this.buttonScale, {
          toValue: 0 }).start();
      }
    } }, { key: "_animate", value: function _animate() {
      var _props = this.props,
          direction = _props.direction,
          position = _props.position;
      if (this.props.direction) {
        if (this.props.direction === "up") {
          this.upAnimate();
        } else if (this.props.direction === "left") {
          this.leftAnimate();
        } else if (this.props.direction === "right") {
          this.rightAnimate();
        } else if (this.props.direction === "down") {
          this.downAnimate();
        }
      } else {
        this.upAnimate();
      }
    } }, { key: "fabOnPress", value: function fabOnPress() {
      var _this4 = this;
      if (this.props.onPress) {
        this.props.onPress();
        this._animate();
        setTimeout(function () {
          _this4.setState({
            active: _this4.props.active });
        }, 100);
      }
    } }, { key: "render", value: function render() {
      var _this5 = this;var active = this.props.active;

      return _react2.default.createElement(_reactNative.Animated.View, { style: this.getContainerStyle(), __source: { fileName: _jsxFileName, lineNumber: 376 } }, this.renderButtons(), _reactNative.Platform.OS === "ios" || _platform2.default.androidRipple === false || _reactNative.Platform["Version"] <= 21 ? _react2.default.createElement(_reactNative.TouchableOpacity, _extends({ onPress: function onPress() {
          return _this5.fabOnPress();
        } }, this.prepareFabProps(), { activeOpacity: 1, __source: { fileName: _jsxFileName, lineNumber: 379 } }), this.renderFab()) : _react2.default.createElement(_reactNative.TouchableNativeFeedback, _extends({
        onPress: function onPress() {
          return _this5.fabOnPress();
        },
        background: this.props.androidRippleColor ? _reactNative.TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : _reactNative.TouchableNativeFeedback.Ripple(_platform2.default.androidRippleColor) }, this.prepareFabProps(), { __source: { fileName: _jsxFileName, lineNumber: 382 } }), _react2.default.createElement(_reactNative.View, { style: [this.getInitialStyle().fab, this.props.style], __source: { fileName: _jsxFileName, lineNumber: 391 } }, this.renderFab())));
    } }]);return Fab;
}(_react.Component);

var StyledFab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Fab", {}, _mapPropsToStyleNames2.default)(Fab);exports.Fab = StyledFab;
}, 635, null, "native-base/dist/src/basic/Fab.js");
__d(/* native-base/dist/src/basic/Badge.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Badge = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Badge.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Badge = function (_Component) {
  _inherits(Badge, _Component);function Badge() {
    _classCallCheck(this, Badge);return _possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).apply(this, arguments));
  }_createClass(Badge, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 13 } }), this.props.children);
    } }]);return Badge;
}(_react.Component);

Badge.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledBadge = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Badge", {}, _mapPropsToStyleNames2.default)(Badge);exports.Badge = StyledBadge;
}, 636, null, "native-base/dist/src/basic/Badge.js");
__d(/* native-base/dist/src/basic/Checkbox.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.CheckBox = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Checkbox.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Ionicons = require(562                                 );var _Ionicons2 = _interopRequireDefault(_Ionicons); // 562 = react-native-vector-icons/Ionicons
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps);function _interopRequireDefault(obj) { // 558 = ../Utils/computeProps
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var CheckBox = function (_Component) {
  _inherits(CheckBox, _Component);function CheckBox() {
    _classCallCheck(this, CheckBox);return _possibleConstructorReturn(this, (CheckBox.__proto__ || Object.getPrototypeOf(CheckBox)).apply(this, arguments));
  }_createClass(CheckBox, [{ key: "getInitialStyle", value: function getInitialStyle(variables) {
      return {
        checkStyle: {
          borderColor: this.props.color ? this.props.color : variables.checkboxBgColor,
          backgroundColor: this.props.checked === true ? this.props.color ? this.props.color : variables.checkboxBgColor : "transparent" } };
    } }, { key: "prepareRootProps", value: function prepareRootProps(variables) {
      var defaultProps = {
        style: this.getInitialStyle(variables).checkStyle };

      return (0, _computeProps2.default)(this.props, defaultProps);
    } }, { key: "render", value: function render() {
      var _this2 = this;
      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
      var platformStyle = variables.platformStyle;
      var platform = variables.platform;
      return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.prepareRootProps(variables), { __source: { fileName: _jsxFileName, lineNumber: 40 } }), _react2.default.createElement(_Ionicons2.default, {
        style: {
          color: this.props.checked === true ? variables.checkboxTickColor : "transparent",
          fontSize: variables.CheckboxFontSize,
          lineHeight: variables.CheckboxIconSize },

        name: platform === "ios" && platformStyle !== "material" ? "ios-checkmark-outline" : "md-checkmark", __source: { fileName: _jsxFileName, lineNumber: 41 } }));
    } }]);return CheckBox;
}(_react.Component);CheckBox.contextTypes = { theme: _propTypes2.default.object };

CheckBox.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  checked: _propTypes2.default.bool });

var StyledCheckBox = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.CheckBox", {}, _mapPropsToStyleNames2.default)(CheckBox);exports.CheckBox = StyledCheckBox;
}, 637, null, "native-base/dist/src/basic/Checkbox.js");
__d(/* native-base/dist/src/basic/Radio.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Radio = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Radio.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _Ionicons = require(562                                 );var _Ionicons2 = _interopRequireDefault(_Ionicons); // 562 = react-native-vector-icons/Ionicons
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps);function _interopRequireDefault(obj) { // 558 = ../Utils/computeProps
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Radio = function (_Component) {
  _inherits(Radio, _Component);function Radio() {
    _classCallCheck(this, Radio);return _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).apply(this, arguments));
  }_createClass(Radio, [{ key: "prepareRootProps", value: function prepareRootProps() {
      var defaultProps = {
        standardStyle: false };

      return (0, _computeProps2.default)(this.props, defaultProps);
    } }, { key: "render", value: function render() {
      var _this2 = this;
      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
      var platformStyle = variables.platformStyle;
      var platform = variables.platform;

      return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.prepareRootProps(), { __source: { fileName: _jsxFileName, lineNumber: 28 } }), _reactNative.Platform.OS === "ios" && !this.props.standardStyle ? this.props.selected && _react2.default.createElement(_Ionicons2.default, {
        style: {
          color: variables.brandPrimary,
          lineHeight: 25,
          height: 20,
          fontSize: variables.radioBtnSize },

        name: "ios-checkmark", __source: { fileName: _jsxFileName, lineNumber: 31 } }) : _react2.default.createElement(_Ionicons2.default, {
        style: {
          color: _reactNative.Platform.OS === "ios" ? this.props.selected ? variables.brandPrimary : undefined : this.props.selected ? variables.radioSelectedColorAndroid : undefined,
          lineHeight: variables.radioBtnLineHeight,
          fontSize: variables.radioBtnSize },

        name: _reactNative.Platform.OS === "ios" ? this.props.selected ? "ios-radio-button-on" : "ios-radio-button-off" : this.props.selected ? "md-radio-button-on" : "md-radio-button-off", __source: { fileName: _jsxFileName, lineNumber: 40 } }));
    } }]);return Radio;
}(_react.Component);Radio.contextTypes = { theme: _propTypes2.default.object };

Radio.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
  selected: _propTypes2.default.bool,
  standardStyle: _propTypes2.default.bool });

var StyledRadio = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Radio", {}, _mapPropsToStyleNames2.default)(Radio);exports.Radio = StyledRadio;
}, 638, null, "native-base/dist/src/basic/Radio.js");
__d(/* native-base/dist/src/basic/Thumbnail.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Thumbnail = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Thumbnail.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps); // 558 = ../Utils/computeProps
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Thumbnail = function (_Component) {
  _inherits(Thumbnail, _Component);function Thumbnail() {
    _classCallCheck(this, Thumbnail);return _possibleConstructorReturn(this, (Thumbnail.__proto__ || Object.getPrototypeOf(Thumbnail)).apply(this, arguments));
  }_createClass(Thumbnail, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Image, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return Thumbnail;
}(_react.Component);

Thumbnail.propTypes = _extends({}, _reactNative.Image.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  square: _propTypes2.default.bool,
  circular: _propTypes2.default.bool,
  size: _propTypes2.default.number });

var StyledThumbnail = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Thumbnail", {}, _mapPropsToStyleNames2.default)(Thumbnail);exports.Thumbnail = StyledThumbnail;
}, 639, null, "native-base/dist/src/basic/Thumbnail.js");
__d(/* native-base/dist/src/basic/Card.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Card = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Card.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Card = function (_Component) {
  _inherits(Card, _Component);function Card() {
    _classCallCheck(this, Card);return _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
  }_createClass(Card, [{ key: "render", value: function render() {
      var _this2 = this;
      if (this.props.dataArray && this.props.renderRow) {
        var ds = new _reactNative.ListView.DataSource({
          rowHasChanged: function rowHasChanged(r1, r2) {
            return r1 !== r2;
          } });

        var dataSource = ds.cloneWithRows(this.props.dataArray);
        return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {
          enableEmptySections: true,
          dataSource: dataSource,
          renderRow: this.props.renderRow, __source: { fileName: _jsxFileName, lineNumber: 17 } }));
      }
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 26 } }), this.props.children);
    } }]);return Card;
}(_react.Component);

Card.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  dataArray: _propTypes2.default.array,
  renderRow: _propTypes2.default.func });

var StyledCard = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Card", {}, _mapPropsToStyleNames2.default)(Card);exports.Card = StyledCard;
}, 640, null, "native-base/dist/src/basic/Card.js");
__d(/* native-base/dist/src/basic/CardItem.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.CardItem = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/CardItem.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var CardItem = function (_Component) {
  _inherits(CardItem, _Component);function CardItem() {
    _classCallCheck(this, CardItem);return _possibleConstructorReturn(this, (CardItem.__proto__ || Object.getPrototypeOf(CardItem)).apply(this, arguments));
  }_createClass(CardItem, [{ key: "render", value: function render() {
      var _this2 = this;
      if (this.props.button) {
        return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({
          ref: function ref(c) {
            return _this2._root = c;
          } }, this.props, {
          activeOpacity: this.props.button ? 0.2 : 1, __source: { fileName: _jsxFileName, lineNumber: 12 } }), this.props.children);
      } else {
        return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
            return _this2._root = c;
          } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 22 } }), this.props.children);
      }
    } }]);return CardItem;
}(_react.Component);

CardItem.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  header: _propTypes2.default.bool,
  cardBody: _propTypes2.default.bool,
  footer: _propTypes2.default.bool,
  button: _propTypes2.default.bool });

var StyledCardItem = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.CardItem", {}, _mapPropsToStyleNames2.default)(CardItem);exports.CardItem = StyledCardItem;
}, 641, null, "native-base/dist/src/basic/CardItem.js");
__d(/* native-base/dist/src/basic/H1.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.H1 = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/H1.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var H1 = function (_Component) {
  _inherits(H1, _Component);function H1() {
    _classCallCheck(this, H1);return _possibleConstructorReturn(this, (H1.__proto__ || Object.getPrototypeOf(H1)).apply(this, arguments));
  }_createClass(H1, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Text, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return H1;
}(_react.Component);

var childrenType = function childrenType(props, propName, component) {
  var error = void 0;
  var prop = props[propName];
  _react2.default.Children.forEach(prop, function (child) {
    if (typeof child !== "string") {
      error = new Error(component + " should have only string");
    }
  });
  return error;
};

H1.propTypes = _extends({}, _reactNative.Text.propTypes, {
  children: childrenType,
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledH1 = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.H1", {}, _mapPropsToStyleNames2.default)(H1);exports.H1 = StyledH1;
}, 642, null, "native-base/dist/src/basic/H1.js");
__d(/* native-base/dist/src/basic/H2.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.H2 = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/H2.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var H2 = function (_Component) {
  _inherits(H2, _Component);function H2() {
    _classCallCheck(this, H2);return _possibleConstructorReturn(this, (H2.__proto__ || Object.getPrototypeOf(H2)).apply(this, arguments));
  }_createClass(H2, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Text, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return H2;
}(_react.Component);

var childrenType = function childrenType(props, propName, component) {
  var error = void 0;
  var prop = props[propName];
  _react2.default.Children.forEach(prop, function (child) {
    if (typeof child !== "string") {
      error = new Error(component + " should have only string");
    }
  });
  return error;
};

H2.propTypes = _extends({}, _reactNative.Text.propTypes, {
  children: childrenType,
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledH2 = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.H2", {}, _mapPropsToStyleNames2.default)(H2);exports.H2 = StyledH2;
}, 643, null, "native-base/dist/src/basic/H2.js");
__d(/* native-base/dist/src/basic/H3.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.H3 = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/H3.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var H3 = function (_Component) {
  _inherits(H3, _Component);function H3() {
    _classCallCheck(this, H3);return _possibleConstructorReturn(this, (H3.__proto__ || Object.getPrototypeOf(H3)).apply(this, arguments));
  }_createClass(H3, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Text, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return H3;
}(_react.Component);

var childrenType = function childrenType(props, propName, component) {
  var error = void 0;
  var prop = props[propName];
  _react2.default.Children.forEach(prop, function (child) {
    if (typeof child !== "string") {
      error = new Error(component + " should have only string");
    }
  });
  return error;
};

H3.propTypes = _extends({}, _reactNative.Text.propTypes, {
  children: childrenType,
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledH3 = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.H3", {}, _mapPropsToStyleNames2.default)(H3);exports.H3 = StyledH3;
}, 644, null, "native-base/dist/src/basic/H3.js");
__d(/* native-base/dist/src/basic/Spinner.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Spinner = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Spinner.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Spinner = function (_Component) {
  _inherits(Spinner, _Component);function Spinner() {
    _classCallCheck(this, Spinner);return _possibleConstructorReturn(this, (Spinner.__proto__ || Object.getPrototypeOf(Spinner)).apply(this, arguments));
  }_createClass(Spinner, [{ key: "render", value: function render() {
      var _this2 = this;
      var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
      return _react2.default.createElement(_reactNative.ActivityIndicator, _extends({
        ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, {
        color: this.props.color ? this.props.color : this.props.inverse ? variables.inverseSpinnerColor : variables.defaultSpinnerColor,

        size: this.props.size ? this.props.size : "large", __source: { fileName: _jsxFileName, lineNumber: 16 } }));
    } }]);return Spinner;
}(_react.Component);Spinner.contextTypes = { theme: _propTypes2.default.object };

Spinner.propTypes = _extends({}, _reactNative.ActivityIndicator.propTypes, {
  color: _propTypes2.default.string,
  inverse: _propTypes2.default.bool });

var StyledSpinner = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Spinner", {}, _mapPropsToStyleNames2.default)(Spinner);exports.Spinner = StyledSpinner;
}, 645, null, "native-base/dist/src/basic/Spinner.js");
__d(/* native-base/dist/src/basic/Switch.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Switch = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Switch.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Switch = function (_Component) {
  _inherits(Switch, _Component);function Switch() {
    _classCallCheck(this, Switch);return _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).apply(this, arguments));
  }_createClass(Switch, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Switch, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return Switch;
}(_react.Component);

Switch.propTypes = _extends({}, Switch.propTypes);

var StyledSwitch = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Switch", {}, _mapPropsToStyleNames2.default)(Switch);exports.Switch = StyledSwitch;
}, 646, null, "native-base/dist/src/basic/Switch.js");
__d(/* native-base/dist/src/basic/Container.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Container = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Container.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _ToastContainer = require(648               ); // 648 = ./ToastContainer
var _Actionsheet = require(650            ); // 650 = ./Actionsheet
var _Text = require(548     );function _interopRequireDefault(obj) { // 548 = ./Text
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Container = function (_Component) {
  _inherits(Container, _Component);function Container() {
    _classCallCheck(this, Container);return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
  }_createClass(Container, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 19 } }), this.props.children);
    } }]);return Container;
}(_react.Component);

Container.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Container", {}, _mapPropsToStyleNames2.default)(Container);exports.Container = StyledContainer;
}, 647, null, "native-base/dist/src/basic/Container.js");
__d(/* native-base/dist/src/basic/ToastContainer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.ToastContainer = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/ToastContainer.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _Text = require(548     ); // 548 = ./Text
var _Button = require(557       ); // 557 = ./Button
var _View = require(556     ); // 556 = ./View
var _Toast = require(649      ); // 649 = ./Toast
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var ToastContainer = function (_Component) {
  _inherits(ToastContainer, _Component);
  function ToastContainer(props) {
    _classCallCheck(this, ToastContainer);var _this = _possibleConstructorReturn(this, (ToastContainer.__proto__ || Object.getPrototypeOf(ToastContainer)).call(this, props));
    _this.state = {
      modalVisible: false,
      fadeAnim: new _reactNative.Animated.Value(0) };return _this;
  }_createClass(ToastContainer, [{ key: "getToastStyle", value: function getToastStyle() {
      return {
        position: "absolute",
        opacity: this.state.fadeAnim,
        width: "100%",
        elevation: 9,
        paddingHorizontal: _reactNative.Platform.OS === "ios" ? 20 : 0,
        top: this.state.position === "top" ? this.getTop() : undefined,
        bottom: this.state.position === "bottom" ? this.getTop() : undefined };
    } }, { key: "getTop", value: function getTop() {
      if (_reactNative.Platform.OS === "ios") {
        return 30;
      } else {
        return 0;
      }
    } }, { key: "showToast", value: function showToast(_ref) {
      var _this2 = this;var config = _ref.config;
      this.setState({
        modalVisible: true,
        text: config.text,
        buttonText: config.buttonText,
        type: config.type,
        position: config.position ? config.position : "bottom",
        supportedOrientations: config.supportedOrientations,
        style: config.style,
        buttonTextStyle: config.buttonTextStyle,
        buttonStyle: config.buttonStyle,
        textStyle: config.textStyle,
        onClose: config.onClose });

      if (config.duration > 0) {
        setTimeout(function () {
          _reactNative.Animated.timing(_this2.state.fadeAnim, {
            toValue: 0,
            duration: 200 }).start();
          setTimeout(function () {
            _this2.setState({
              modalVisible: false });
          }, 500);
        }, config.duration);
      }
      _reactNative.Animated.timing(this.state.fadeAnim, {
        toValue: 1,
        duration: 200 }).start();
    } }, { key: "closeToast", value: function closeToast() {
      var _this3 = this;var onClose = this.state.onClose;

      if (onClose && typeof onClose === "function") {
        onClose();
      }

      _reactNative.Animated.timing(this.state.fadeAnim, {
        toValue: 0,
        duration: 200 }).start();
      setTimeout(function () {
        _this3.setState({
          modalVisible: false });
      }, 500);
    } }, { key: "render", value: function render() {
      var _this4 = this;
      if (this.state.modalVisible) {
        return _react2.default.createElement(_reactNative.Animated.View, { style: this.getToastStyle(), __source: { fileName: _jsxFileName, lineNumber: 95 } }, _react2.default.createElement(_Toast.Toast, {
          style: this.state.style,
          danger: this.state.type == "danger" ? true : false,
          success: this.state.type == "success" ? true : false,
          warning: this.state.type == "warning" ? true : false, __source: { fileName: _jsxFileName, lineNumber: 96 } }, _react2.default.createElement(_Text.Text, { style: this.state.textStyle, __source: { fileName: _jsxFileName, lineNumber: 102 } }, this.state.text), this.state.buttonText && _react2.default.createElement(_Button.Button, { style: this.state.buttonStyle, onPress: function onPress() {
            return _this4.closeToast();
          }, __source: { fileName: _jsxFileName, lineNumber: 106 } }, _react2.default.createElement(_Text.Text, { style: this.state.buttonTextStyle, __source: { fileName: _jsxFileName, lineNumber: 107 } }, this.state.buttonText))));
      } else return null;
    } }], [{ key: "show", value: function show(_ref2) {
      var config = _objectWithoutProperties(_ref2, []);this.toastInstance._root.showToast({ config: config });
    } }]);return ToastContainer;
}(_react.Component);

ToastContainer.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledToastContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ToastContainer", {}, _mapPropsToStyleNames2.default)(ToastContainer);exports.ToastContainer = StyledToastContainer;
}, 648, null, "native-base/dist/src/basic/ToastContainer.js");
__d(/* native-base/dist/src/basic/Toast.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Toast = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Toast.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Toast = function (_Component) {
  _inherits(Toast, _Component);function Toast() {
    _classCallCheck(this, Toast);return _possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).apply(this, arguments));
  }_createClass(Toast, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return Toast;
}(_react.Component);

Toast.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledToast = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Toast", {}, _mapPropsToStyleNames2.default)(Toast);exports.Toast = StyledToast;
}, 649, null, "native-base/dist/src/basic/Toast.js");
__d(/* native-base/dist/src/basic/Actionsheet.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.ActionSheetContainer = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Actionsheet.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _Text = require(548     ); // 548 = ./Text
var _Button = require(557       ); // 557 = ./Button
var _View = require(556     ); // 556 = ./View
var _Icon = require(628     ); // 628 = ./Icon
var _Left = require(550     ); // 550 = ./Left
var _Right = require(553      ); // 553 = ./Right
var _Body = require(554     ); // 554 = ./Body
var _List = require(651     ); // 651 = ./List
var _ListItem = require(555         ); // 555 = ./ListItem
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _Utils = require(551       );function _interopRequireDefault(obj) { // 551 = ../Utils
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var ActionSheetContainer = function (_Component) {
  _inherits(ActionSheetContainer, _Component);
  function ActionSheetContainer(props) {
    _classCallCheck(this, ActionSheetContainer);var _this = _possibleConstructorReturn(this, (ActionSheetContainer.__proto__ || Object.getPrototypeOf(ActionSheetContainer)).call(this, props));
    _this.state = {
      modalVisible: false,
      items: [] };return _this;
  }_createClass(ActionSheetContainer, [{ key: "showActionSheet", value: function showActionSheet(config, callback) {
      if (_reactNative.Platform.OS === "ios") {
        if (typeof config.options[0] == "object") {
          var options = config.options;
          var filtered = options.map(function (item) {
            return item.text;
          });
          config.options = filtered;
          _reactNative.ActionSheetIOS.showActionSheetWithOptions(config, callback);
        } else {
          _reactNative.ActionSheetIOS.showActionSheetWithOptions(config, callback);
        }
      } else {
        this.setState({
          items: config.options,
          title: config.title,
          message: config.message,
          destructiveButtonIndex: config.destructiveButtonIndex,
          cancelButtonIndex: config.cancelButtonIndex,
          modalVisible: true,
          callback: callback });
      }
    } }, { key: "componentDidMount", value: function componentDidMount() {
      if (!this.props.autoHide && this.props.duration) {
        console.warn("It's not recommended to set autoHide false with duration");
      }
    } }, { key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Modal, {
        animationType: "fade",
        transparent: true,
        visible: this.state.modalVisible,
        onRequestClose: function onRequestClose() {
          return _this2.setState({ modalVisible: false });
        }, __source: { fileName: _jsxFileName, lineNumber: 60 } }, _react2.default.createElement(_reactNative.TouchableOpacity, {
        activeOpacity: 1,
        onPress: function onPress() {
          return _this2.setState({ modalVisible: false });
        },
        style: {
          backgroundColor: "rgba(0,0,0,0.4)",
          flex: 1,
          justifyContent: "flex-end" }, __source: { fileName: _jsxFileName, lineNumber: 66 } }, _react2.default.createElement(_reactNative.TouchableOpacity, {
        activeOpacity: 1,
        style: {
          backgroundColor: "#fff",
          height: this.state.length * 80,
          padding: 15,
          elevation: 4 }, __source: { fileName: _jsxFileName, lineNumber: 75 } }, _react2.default.createElement(_Text.Text, { style: { color: "#757575" }, __source: { fileName: _jsxFileName, lineNumber: 84 } }, this.state.title), _react2.default.createElement(_List.List, {
        style: { marginHorizontal: -15, marginTop: 15 },
        dataArray: this.state.items,
        renderRow: function renderRow(data, i, id) {
          return typeof _this2.state.items[0] === "string" ? _react2.default.createElement(_ListItem.ListItem, {
            onPress: function onPress() {
              _this2.state.callback(id);
              _this2.setState({ modalVisible: false });
            },
            style: { borderColor: "transparent" }, __source: { fileName: _jsxFileName, lineNumber: 92 } }, _react2.default.createElement(_Text.Text, { __source: { fileName: _jsxFileName, lineNumber: 99 } }, data)) : _react2.default.createElement(_ListItem.ListItem, {
            onPress: function onPress() {
              _this2.state.callback(id);
              _this2.setState({ modalVisible: false });
            },
            style: { borderColor: "transparent" },
            icon: true, __source: { fileName: _jsxFileName, lineNumber: 103 } }, _react2.default.createElement(_Left.Left, { __source: { fileName: _jsxFileName, lineNumber: 111 } }, _react2.default.createElement(_Icon.Icon, {
            name: data.icon,
            style: {
              color: data.iconColor ? data.iconColor : undefined }, __source: { fileName: _jsxFileName, lineNumber: 112 } })), _react2.default.createElement(_Body.Body, { style: { borderColor: "transparent" }, __source: { fileName: _jsxFileName, lineNumber: 119 } }, _react2.default.createElement(_Text.Text, { __source: { fileName: _jsxFileName, lineNumber: 120 } }, data.text)), _react2.default.createElement(_Right.Right, { __source: { fileName: _jsxFileName, lineNumber: 124 } }));
        }, __source: { fileName: _jsxFileName, lineNumber: 87 } }))));
    } }], [{ key: "show", value: function show(config, callback) {
      this.actionsheetInstance._root.showActionSheet(config, callback);
    } }]);return ActionSheetContainer;
}(_react.Component);

ActionSheetContainer.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledActionSheetContainer = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ActionSheetContainer", {}, _mapPropsToStyleNames2.default)(ActionSheetContainer);exports.ActionSheetContainer = StyledActionSheetContainer;
}, 650, null, "native-base/dist/src/basic/Actionsheet.js");
__d(/* native-base/dist/src/basic/List.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.List = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = 'src/basic/List.js';var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme

var _SwipeRow = require(547         ); // 547 = ./SwipeRow
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var List = function (_Component) {
  _inherits(List, _Component);

  function List(props) {
    _classCallCheck(this, List);var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));
    _this._rows = {};
    _this.openCellId = null;
    if (props.dataArray && props.renderRow) {
      var rowHasChanged = props.rowHasChanged || function (r1, r2) {
        return r1 !== r2;
      };
      var ds = new _reactNative.ListView.DataSource({ rowHasChanged: rowHasChanged });
      _this.state = {
        dataSource: ds.cloneWithRows(props.dataArray) };
    } else {
      _this.state = {};
    }return _this;
  }_createClass(List, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(nextProps) {
      if (this.state.dataSource) {
        this.setState({
          dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray) });
      }
    } }, { key: 'renderChildren', value: function renderChildren() {
      var childrenArray = _react2.default.Children.map(this.props.children, function (child) {
        return child;
      });

      return childrenArray;
    } }, { key: 'setScrollEnabled', value: function setScrollEnabled(enable) {
      this._listView.setNativeProps({ scrollEnabled: enable });
    } }, { key: 'safeCloseOpenRow', value: function safeCloseOpenRow() {

      if (this._rows[this.openCellId]._root) {
        this._rows[this.openCellId]._root.closeRow();
      }
    } }, { key: 'rowSwipeGestureBegan', value: function rowSwipeGestureBegan(id) {
      if (this.props.closeOnRowBeginSwipe && this.openCellId && this.openCellId !== id) {
        this.safeCloseOpenRow();
      }
    } }, { key: 'onRowOpen', value: function onRowOpen(secId, rowId, rowMap) {
      var cellIdentifier = '' + secId + rowId;
      if (this.openCellId && this.openCellId !== cellIdentifier) {
        this.safeCloseOpenRow();
      }
      this.openCellId = cellIdentifier;
      this.props.onRowOpen && this.props.onRowOpen(secId, rowId, rowMap);
    } }, { key: 'onRowPress', value: function onRowPress(id) {
      if (this.openCellId) {
        if (this.props.closeOnRowPress) {
          this.safeCloseOpenRow();
          this.openCellId = null;
        }
      }
    } }, { key: 'closeRow', value: function closeRow(id) {
      if (this.openCellId) {
        if (this.props.closeOnRowPress) {
          this.safeCloseOpenRow();
          this.openCellId = null;
        }
      }
    } }, { key: 'onScroll', value: function onScroll(e) {
      if (this.openCellId) {
        if (this.props.closeOnScroll) {
          this.safeCloseOpenRow();
          this.openCellId = null;
        }
      }
      this.props.onScroll && this.props.onScroll(e);
    } }, { key: 'setRefs', value: function setRefs(ref) {
      this._listView = ref;
      this.props.listViewRef && this.props.listViewRef(ref);
    } }, { key: 'renderRow', value: function renderRow(rowData, secId, rowId, rowMap) {
      var _this2 = this;
      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);
      return _react2.default.createElement(_SwipeRow.SwipeRow, {
        list: true,
        ref: function ref(row) {
          return _this2._rows['' + secId + rowId] = row;
        },
        swipeGestureBegan: function swipeGestureBegan(_) {
          return _this2.rowSwipeGestureBegan('' + secId + rowId);
        },
        onRowOpen: function onRowOpen(_) {
          return _this2.onRowOpen(secId, rowId, _this2._rows);
        },
        onRowDidOpen: function onRowDidOpen(_) {
          return _this2.props.onRowDidOpen && _this2.props.onRowDidOpen(secId, rowId, _this2._rows);
        },
        onRowClose: function onRowClose(_) {
          return _this2.props.onRowClose && _this2.props.onRowClose(secId, rowId, _this2._rows);
        },
        onRowDidClose: function onRowDidClose(_) {
          return _this2.props.onRowDidClose && _this2.props.onRowDidClose(secId, rowId, _this2._rows);
        },
        onRowPress: function onRowPress(_) {
          return _this2.onRowPress('' + secId + rowId);
        },
        closeRow: function closeRow(_) {
          return _this2.closeRow('' + secId + rowId);
        },
        setScrollEnabled: function setScrollEnabled(enable) {
          return _this2.setScrollEnabled(enable);
        },
        leftOpenValue: this.props.leftOpenValue,
        rightOpenValue: this.props.rightOpenValue,
        closeOnRowPress: this.props.closeOnRowPress,
        disableLeftSwipe: this.props.disableLeftSwipe,
        disableRightSwipe: this.props.disableRightSwipe,
        stopLeftSwipe: this.props.stopLeftSwipe,
        stopRightSwipe: this.props.stopRightSwipe,
        recalculateHiddenLayout: this.props.recalculateHiddenLayout,
        style: this.props.swipeRowStyle,
        preview: (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId,
        previewDuration: this.props.previewDuration,
        previewOpenValue: this.props.previewOpenValue,
        tension: this.props.tension,
        friction: this.props.friction,
        directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,
        swipeToOpenPercent: this.props.swipeToOpenPercent,
        left: this.props.renderLeftHiddenRow(rowData, secId, rowId, this._rows),
        right: this.props.renderRightHiddenRow(rowData, secId, rowId, this._rows),
        body: this.props.renderRow(rowData, secId, rowId, this._rows), __source: { fileName: _jsxFileName, lineNumber: 110 } });
    } }, { key: 'render', value: function render() {
      var _this3 = this;
      if (this.props.renderLeftHiddenRow || this.props.renderRightHiddenRow) {
        return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {
          ref: function ref(_ref) {
            _this3.setRefs(_ref);
            _this3._root = _ref;
          },
          onScroll: function onScroll(e) {
            return _this3.onScroll(e);
          },
          renderRow: function renderRow(rowData, secId, rowId) {
            return _this3.renderRow(rowData, secId, rowId, _this3._rows);
          }, __source: { fileName: _jsxFileName, lineNumber: 146 } }));
      } else if (this.state.dataSource) {
        return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {
          ref: function ref(_ref2) {
            return _this3._root = _ref2;
          },
          enableEmptySections: true,
          dataSource: this.state.dataSource,
          renderRow: this.props.renderRow, __source: { fileName: _jsxFileName, lineNumber: 158 } }));
      }
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this3._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 168 } }), this.renderChildren());
    } }]);return List;
}(_react.Component);List.defaultProps = { leftOpenValue: 0, rightOpenValue: 0, closeOnRowBeginSwipe: false, closeOnScroll: true, closeOnRowPress: true, disableLeftSwipe: false, disableRightSwipe: false, recalculateHiddenLayout: false, previewFirstRow: false, directionalDistanceChangeThreshold: 2, swipeToOpenPercent: 50 };

var StyledList = (0, _nativeBaseShoutemTheme.connectStyle)('NativeBase.List', {}, _mapPropsToStyleNames2.default)(List);exports.List = StyledList;
}, 651, null, "native-base/dist/src/basic/List.js");
__d(/* native-base/dist/src/basic/Root.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Root = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Root.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _ToastContainer = require(648               ); // 648 = ./ToastContainer
var _Actionsheet = require(650            ); // 650 = ./Actionsheet
var _Text = require(548     );function _interopRequireDefault(obj) { // 548 = ./Text
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Root = function (_Component) {
  _inherits(Root, _Component);function Root() {
    _classCallCheck(this, Root);return _possibleConstructorReturn(this, (Root.__proto__ || Object.getPrototypeOf(Root)).apply(this, arguments));
  }_createClass(Root, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { style: { flex: 1 }, __source: { fileName: _jsxFileName, lineNumber: 14 } }), this.props.children, _react2.default.createElement(_ToastContainer.ToastContainer, {
        ref: function ref(c) {
          if (!_ToastContainer.ToastContainer.toastInstance) _ToastContainer.ToastContainer.toastInstance = c;
        }, __source: { fileName: _jsxFileName, lineNumber: 16 } }), _react2.default.createElement(_Actionsheet.ActionSheetContainer, {
        ref: function ref(c) {
          if (!_Actionsheet.ActionSheetContainer.actionsheetInstance) _Actionsheet.ActionSheetContainer.actionsheetInstance = c;
        }, __source: { fileName: _jsxFileName, lineNumber: 21 } }));
    } }]);return Root;
}(_react.Component);

Root.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledRoot = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Root", {}, _mapPropsToStyleNames2.default)(Root);exports.Root = StyledRoot;
}, 652, null, "native-base/dist/src/basic/Root.js");
__d(/* native-base/dist/src/basic/Content.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Content = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Content.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNativeKeyboardAwareScrollView = require(654                                      ); // 654 = react-native-keyboard-aware-scroll-view
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Content = function (_Component) {
  _inherits(Content, _Component);function Content() {
    _classCallCheck(this, Content);return _possibleConstructorReturn(this, (Content.__proto__ || Object.getPrototypeOf(Content)).apply(this, arguments));
  }_createClass(Content, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNativeKeyboardAwareScrollView.KeyboardAwareScrollView, _extends({
        automaticallyAdjustContentInsets: false,
        resetScrollToCoords: this.props.disableKBDismissScroll ? null : { x: 0, y: 0 },
        ref: function ref(c) {
          _this2._scrollview = c;
          _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }), this.props.children);
    } }]);return Content;
}(_react.Component);

Content.propTypes = {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  padder: _propTypes2.default.bool,
  disableKBDismissScroll: _propTypes2.default.bool,
  enableResetScrollToCoords: _propTypes2.default.bool };

var StyledContent = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Content", {}, _mapPropsToStyleNames2.default)(Content);exports.Content = StyledContent;
}, 653, null, "native-base/dist/src/basic/Content.js");
__d(/* react-native-keyboard-aware-scroll-view/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeyboardAwareListView = exports.KeyboardAwareScrollView = exports.KeyboardAwareMixin = undefined;

var _KeyboardAwareMixin = require(655                       ); // 655 = ./lib/KeyboardAwareMixin

var _KeyboardAwareMixin2 = _interopRequireDefault(_KeyboardAwareMixin);

var _KeyboardAwareScrollView = require(656                            ); // 656 = ./lib/KeyboardAwareScrollView

var _KeyboardAwareScrollView2 = _interopRequireDefault(_KeyboardAwareScrollView);

var _KeyboardAwareListView = require(657                          ); // 657 = ./lib/KeyboardAwareListView

var _KeyboardAwareListView2 = _interopRequireDefault(_KeyboardAwareListView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.KeyboardAwareMixin = _KeyboardAwareMixin2.default;
exports.KeyboardAwareScrollView = _KeyboardAwareScrollView2.default;
exports.KeyboardAwareListView = _KeyboardAwareListView2.default;
}, 654, null, "react-native-keyboard-aware-scroll-view/index.js");
__d(/* react-native-keyboard-aware-scroll-view/lib/KeyboardAwareMixin.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require(181           ); // 181 = react-native

var _reactNative2 = _interopRequireDefault(_reactNative);

var _reactTimerMixin = require(347                ); // 347 = react-timer-mixin

var _reactTimerMixin2 = _interopRequireDefault(_reactTimerMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _KAM_DEFAULT_TAB_BAR_HEIGHT = 49;
var _KAM_KEYBOARD_OPENING_TIME = 250;
var _KAM_EXTRA_HEIGHT = 75;

var KeyboardAwareMixin = {
  mixins: [_reactTimerMixin2.default],
  propTypes: {
    enableAutoAutomaticScroll: _propTypes2.default.bool,
    keyboardOpeningTime: _propTypes2.default.number,
    extraHeight: _propTypes2.default.number,
    extraScrollHeight: _propTypes2.default.number,
    enableResetScrollToCoords: _propTypes2.default.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      enableAutoAutomaticScroll: true,
      extraHeight: _KAM_EXTRA_HEIGHT,
      extraScrollHeight: 0,
      enableResetScrollToCoords: true,
      keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME
    };
  },

  setViewIsInsideTabBar: function setViewIsInsideTabBar(viewIsInsideTabBar) {
    this.viewIsInsideTabBar = viewIsInsideTabBar;
    var keyboardSpace = viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;
    if (this.state.keyboardSpace !== keyboardSpace) {
      this.setState({ keyboardSpace: keyboardSpace });
    }
  },

  setResetScrollToCoords: function setResetScrollToCoords(coords) {
    this.resetCoords = coords;
  },

  getInitialState: function getInitialState() {
    this.viewIsInsideTabBar = false;
    this.keyboardWillShowEvent = undefined;
    this.keyboardWillHideEvent = undefined;
    return {
      keyboardSpace: 0
    };
  },

  updateKeyboardSpace: function updateKeyboardSpace(frames) {
    var _this = this;

    var keyboardSpace = frames.endCoordinates.height + this.props.extraScrollHeight;
    if (this.props.viewIsInsideTabBar) {
      keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;
    }
    this.setState({ keyboardSpace: keyboardSpace });

    if (this.props.enableAutoAutomaticScroll) {
      var currentlyFocusedField = _reactNative.TextInput.State.currentlyFocusedField();
      var responder = this.getScrollResponder();
      if (!currentlyFocusedField || !responder) {
        return;
      }
      _reactNative.UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {
        if (isAncestor) {
          _reactNative.UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {
            if (y + height > frames.endCoordinates.screenY - _this.props.extraScrollHeight - _this.props.extraHeight) {
              _this.scrollToFocusedInputWithNodeHandle(currentlyFocusedField);
            }
          });
        }
      });
    }
    if (!this.resetCoords) {
      if (!this.defaultResetScrollToCoords) {
        this.defaultResetScrollToCoords = this.position;
      }
    }
  },

  resetKeyboardSpace: function resetKeyboardSpace() {
    var keyboardSpace = this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT + this.props.extraScrollHeight : this.props.extraScrollHeight;
    this.setState({ keyboardSpace: keyboardSpace });

    if (this.props.enableResetScrollToCoords === false) {
      this.defaultResetScrollToCoords = null;
      return;
    } else if (this.resetCoords) {
      this.scrollToPosition(this.resetCoords.x, this.resetCoords.y, true);
    } else {
      if (this.defaultResetScrollToCoords) {
        this.scrollToPosition(this.defaultResetScrollToCoords.x, this.defaultResetScrollToCoords.y, true);
        this.defaultResetScrollToCoords = null;
      } else {
        this.scrollToPosition(0, 0, true);
      }
    }
  },

  componentDidMount: function componentDidMount() {
    this.keyboardWillShowEvent = _reactNative.Keyboard.addListener('keyboardWillShow', this.updateKeyboardSpace);
    this.keyboardWillHideEvent = _reactNative.Keyboard.addListener('keyboardWillHide', this.resetKeyboardSpace);
  },

  componentWillUnmount: function componentWillUnmount() {
    this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();
    this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();
  },

  getScrollResponder: function getScrollResponder() {
    return this.refs._rnkasv_keyboardView && this.refs._rnkasv_keyboardView.getScrollResponder();
  },


  scrollToPosition: function scrollToPosition(x, y) {
    var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    var responder = this.getScrollResponder();
    responder && responder.scrollResponderScrollTo({ x: x, y: y, animated: animated });
  },

  scrollToEnd: function scrollToEnd() {
    var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var responder = this.getScrollResponder();
    responder && responder.scrollResponderScrollToEnd({ animated: animated });
  },

  scrollToFocusedInput: function scrollToFocusedInput(reactNode, extraHeight, keyboardOpeningTime) {
    var _this2 = this;

    if (extraHeight === undefined) {
      extraHeight = this.props.extraHeight;
    }

    if (keyboardOpeningTime === undefined) {
      keyboardOpeningTime = this.props.keyboardOpeningTime;
    }

    this.setTimeout(function () {
      var responder = _this2.getScrollResponder();
      responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);
    }, keyboardOpeningTime);
  },

  scrollToFocusedInputWithNodeHandle: function scrollToFocusedInputWithNodeHandle(nodeID, extraHeight, keyboardOpeningTime) {
    if (extraHeight === undefined) {
      extraHeight = this.props.extraHeight;
    }

    if (keyboardOpeningTime === undefined) {
      keyboardOpeningTime = this.props.keyboardOpeningTime;
    }

    var reactNode = _reactNative2.default.findNodeHandle(nodeID);
    this.scrollToFocusedInput(reactNode, extraHeight + this.props.extraScrollHeight, keyboardOpeningTime);
  },

  position: { x: 0, y: 0 },

  defaultResetScrollToCoords: null,

  handleOnScroll: function handleOnScroll(e) {
    this.position = e.nativeEvent.contentOffset;
  }
};

exports.default = KeyboardAwareMixin;
}, 655, null, "react-native-keyboard-aware-scroll-view/lib/KeyboardAwareMixin.js");
__d(/* react-native-keyboard-aware-scroll-view/lib/KeyboardAwareScrollView.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-keyboard-aware-scroll-view\\lib\\KeyboardAwareScrollView.js';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require(13     ); // 13 = react

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require(311                 ); // 311 = create-react-class

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _reactNative = require(181           ); // 181 = react-native

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _KeyboardAwareMixin = require(655                   ); // 655 = ./KeyboardAwareMixin

var _KeyboardAwareMixin2 = _interopRequireDefault(_KeyboardAwareMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KeyboardAwareScrollView = (0, _createReactClass2.default)({
  displayName: 'KeyboardAwareScrollView',

  propTypes: _extends({}, _reactNative.ScrollView.propTypes, {
    viewIsInsideTabBar: _propTypes2.default.bool,
    resetScrollToCoords: _propTypes2.default.shape({
      x: _propTypes2.default.number,
      y: _propTypes2.default.number
    })
  }),
  mixins: [_KeyboardAwareMixin2.default],

  componentWillMount: function componentWillMount() {
    this.setViewIsInsideTabBar(this.props.viewIsInsideTabBar);
    this.setResetScrollToCoords(this.props.resetScrollToCoords);
  },

  render: function render() {
    var _this = this;

    return _react2.default.createElement(
      _reactNative.ScrollView,
      _extends({
        ref: '_rnkasv_keyboardView',
        keyboardDismissMode: 'interactive',
        contentInset: { bottom: this.state.keyboardSpace },
        automaticallyAdjustContentInsets: false,
        showsVerticalScrollIndicator: true,
        scrollEventThrottle: 0
      }, this.props, {
        onScroll: function onScroll(e) {
          _this.handleOnScroll(e);
          _this.props.onScroll && _this.props.onScroll(e);
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 27
        }
      }),
      this.props.children
    );
  }
});

exports.default = KeyboardAwareScrollView;
}, 656, null, "react-native-keyboard-aware-scroll-view/lib/KeyboardAwareScrollView.js");
__d(/* react-native-keyboard-aware-scroll-view/lib/KeyboardAwareListView.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\node_modules\\react-native-keyboard-aware-scroll-view\\lib\\KeyboardAwareListView.js';

var _react = require(13     ); // 13 = react

var _react2 = _interopRequireDefault(_react);

var _createReactClass = require(311                 ); // 311 = create-react-class

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _reactNative = require(181           ); // 181 = react-native

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _KeyboardAwareMixin = require(655                   ); // 655 = ./KeyboardAwareMixin

var _KeyboardAwareMixin2 = _interopRequireDefault(_KeyboardAwareMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KeyboardAwareListView = (0, _createReactClass2.default)({
  displayName: 'KeyboardAwareListView',

  propTypes: {
    viewIsInsideTabBar: _propTypes2.default.bool,
    resetScrollToCoords: _propTypes2.default.shape({
      x: _propTypes2.default.number.isRequired,
      y: _propTypes2.default.number.isRequired
    }),
    onScroll: _propTypes2.default.func
  },
  mixins: [_KeyboardAwareMixin2.default],

  componentWillMount: function componentWillMount() {
    this.setViewIsInsideTabBar(!!this.props.viewIsInsideTabBar);
    if (this.props.resetScrollToCoords) {
      this.setResetScrollToCoords(this.props.resetScrollToCoords);
    }
  },

  onScroll: function onScroll(e) {
    this.handleOnScroll(e);
    this.props.onScroll && this.props.onScroll(e);
  },

  render: function render() {
    return _react2.default.createElement(_reactNative.ListView, _extends({
      ref: '_rnkasv_keyboardView',
      keyboardDismissMode: 'interactive',
      contentInset: { bottom: this.state.keyboardSpace },
      automaticallyAdjustContentInsets: false,
      showsVerticalScrollIndicator: true,
      scrollEventThrottle: 0
    }, this.props, {
      onScroll: this.onScroll,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 34
      }
    }));
  }
});

exports.default = KeyboardAwareListView;
}, 657, null, "react-native-keyboard-aware-scroll-view/lib/KeyboardAwareListView.js");
__d(/* native-base/dist/src/basic/Footer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Footer = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Footer.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _Utils = require(551       );function _interopRequireDefault(obj) { // 551 = ../Utils
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Footer = function (_Component) {
  _inherits(Footer, _Component);function Footer() {
    _classCallCheck(this, Footer);return _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).apply(this, arguments));
  }_createClass(Footer, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }));
    } }]);return Footer;
}(_react.Component);

Footer.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledFooter = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Footer", {}, _mapPropsToStyleNames2.default)(Footer);exports.Footer = StyledFooter;
}, 658, null, "native-base/dist/src/basic/Footer.js");
__d(/* native-base/dist/src/basic/FooterTab.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.FooterTab = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/FooterTab.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var FooterTab = function (_Component) {
  _inherits(FooterTab, _Component);function FooterTab() {
    _classCallCheck(this, FooterTab);return _possibleConstructorReturn(this, (FooterTab.__proto__ || Object.getPrototypeOf(FooterTab)).apply(this, arguments));
  }_createClass(FooterTab, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 12 } }), this.props.children);
    } }]);return FooterTab;
}(_react.Component);

FooterTab.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledFooterTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.FooterTab", {}, _mapPropsToStyleNames2.default)(FooterTab);exports.FooterTab = StyledFooterTab;
}, 659, null, "native-base/dist/src/basic/FooterTab.js");
__d(/* native-base/dist/src/basic/Form.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Form = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Form.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Form = function (_Component) {
  _inherits(Form, _Component);function Form() {
    _classCallCheck(this, Form);return _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).apply(this, arguments));
  }_createClass(Form, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }));
    } }]);return Form;
}(_react.Component);

Form.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledForm = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Form", {}, _mapPropsToStyleNames2.default)(Form);exports.Form = StyledForm;
}, 660, null, "native-base/dist/src/basic/Form.js");
__d(/* native-base/dist/src/basic/Picker.android.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.PickerNB = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Picker.android.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _createReactClass = require(311                 );var _createReactClass2 = _interopRequireDefault(_createReactClass); // 311 = create-react-class
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var PickerNB = function (_Component) {
  _inherits(PickerNB, _Component);function PickerNB() {
    _classCallCheck(this, PickerNB);return _possibleConstructorReturn(this, (PickerNB.__proto__ || Object.getPrototypeOf(PickerNB)).apply(this, arguments));
  }_createClass(PickerNB, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Picker, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }), this.props.children);
    } }]);return PickerNB;
}(_react.Component);exports.default = PickerNB;

PickerNB.Item = (0, _createReactClass2.default)({ displayName: "Item",
  render: function render() {
    return _react2.default.createElement(_reactNative.Picker.Item, _extends({}, this.props(), { __source: { fileName: _jsxFileName, lineNumber: 20 } }));
  } });

PickerNB.propTypes = _extends({}, _reactNative.Picker.propTypes);

var StyledPickerNB = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.PickerNB", {}, _mapPropsToStyleNames2.default)(PickerNB);exports.PickerNB = StyledPickerNB;
}, 661, null, "native-base/dist/src/basic/Picker.android.js");
__d(/* native-base/dist/src/basic/Separator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Separator = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Separator.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Separator = function (_Component) {
  _inherits(Separator, _Component);function Separator() {
    _classCallCheck(this, Separator);return _possibleConstructorReturn(this, (Separator.__proto__ || Object.getPrototypeOf(Separator)).apply(this, arguments));
  }_createClass(Separator, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }));
    } }]);return Separator;
}(_react.Component);

Separator.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledSeparator = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Separator", {}, _mapPropsToStyleNames2.default)(Separator);exports.Separator = StyledSeparator;
}, 662, null, "native-base/dist/src/basic/Separator.js");
__d(/* native-base/dist/src/basic/DeckSwiper.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.DeckSwiper = undefined;var _jsxFileName = "src/basic/DeckSwiper.js";var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _clamp = require(664    );var _clamp2 = _interopRequireDefault(_clamp); // 664 = clamp
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _Utils = require(551       );function _interopRequireDefault(obj) { // 551 = ../Utils
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var SWIPE_THRESHOLD = 120;var DeckSwiper = function (_Component) {
  _inherits(DeckSwiper, _Component);
  function DeckSwiper(props) {
    _classCallCheck(this, DeckSwiper);var _this = _possibleConstructorReturn(this, (DeckSwiper.__proto__ || Object.getPrototypeOf(DeckSwiper)).call(this, props));
    _this.state = {
      pan: new _reactNative.Animated.ValueXY(),
      pan2: new _reactNative.Animated.ValueXY(),
      enter: new _reactNative.Animated.Value(0.8),
      selectedItem: _this.props.dataSource[0],
      selectedItem2: _this.props.dataSource[1],
      card1Top: true,
      card2Top: false,
      fadeAnim: new _reactNative.Animated.Value(0.8),
      looping: typeof _this.props.looping === "undefined" ? true : _this.props.looping,
      disabled: _this.props.dataSource.length === 0,
      lastCard: _this.props.dataSource.length === 1 };return _this;
  }_createClass(DeckSwiper, [{ key: "componentWillReceiveProps", value: function componentWillReceiveProps(_ref) {
      var dataSource = _ref.dataSource;
      if (dataSource.length !== this.props.dataSource.length) {
        if (dataSource.length <= 1) {
          this.setState(_extends({}, this.state, {
            selectedItem: dataSource[0],
            selectedItem2: undefined,
            disabled: dataSource.length === 0,
            lastCard: dataSource.length === 1 }));

          return;
        }

        var visibleIndex = dataSource.indexOf(this.state.selectedItem);
        var currentIndex = visibleIndex < 0 ? visibleIndex + 1 : visibleIndex;
        var nextIndex = currentIndex + 1 === dataSource.length ? 0 : currentIndex + 1;

        this.setState({
          selectedItem: dataSource[currentIndex],
          selectedItem2: dataSource[nextIndex] });
      }
    } }, { key: "getInitialStyle", value: function getInitialStyle() {
      return {
        topCard: {
          position: "absolute",
          top: 0,
          right: 0,
          left: 0 } };
    } }, { key: "findNextIndexes", value: function findNextIndexes(currentIndex) {
      var newIdx = currentIndex + 1;
      var newIdx2 = currentIndex + 2;

      if (newIdx2 > this.props.dataSource.length - 1 && newIdx === this.props.dataSource.length - 1) {
        return [newIdx, 0];
      } else if (newIdx > this.props.dataSource.length - 1) {
        return [0, 1];
      }
      return [newIdx, newIdx2];
    } }, { key: "selectNext", value: function selectNext() {
      var _this2 = this;
      var dataSource = this.props.dataSource;
      var currentIndex = dataSource.indexOf(this.state.selectedItem);

      if (!this.state.looping) {

        if (currentIndex === dataSource.length - 1) {
          return this.setState({
            disabled: true });
        } else if (currentIndex === dataSource.length - 2) {

          return setTimeout(function () {
            _this2.setState({
              selectedItem: dataSource[currentIndex + 1] });

            setTimeout(function () {
              _this2.setState({
                lastCard: true });
            }, 350);
          }, 50);
        }
      }

      var nextIndexes = this.findNextIndexes(currentIndex);
      setTimeout(function () {
        _this2.setState({
          selectedItem: _this2.props.dataSource[nextIndexes[0]] });

        setTimeout(function () {
          _this2.setState({
            selectedItem2: _this2.props.dataSource[nextIndexes[1]] });
        }, 350);
      }, 50);
    } }, { key: "swipeRight", value: function swipeRight() {
      var _this3 = this;
      if (this.props.onSwiping) this.props.onSwiping("right");
      setTimeout(function () {
        _reactNative.Animated.timing(_this3.state.fadeAnim, { toValue: 1 }).start();
        _reactNative.Animated.spring(_this3.state.enter, { toValue: 1, friction: 7 }).start();
        _this3.selectNext();
        _reactNative.Animated.decay(_this3.state.pan, {
          velocity: { x: 8, y: 1 },
          deceleration: 0.98 }).start(_this3._resetState.bind(_this3));
      }, 300);
    } }, { key: "swipeLeft", value: function swipeLeft() {
      var _this4 = this;
      if (this.props.onSwiping) this.props.onSwiping("left");
      setTimeout(function () {
        _reactNative.Animated.timing(_this4.state.fadeAnim, { toValue: 1 }).start();
        _reactNative.Animated.spring(_this4.state.enter, { toValue: 1, friction: 7 }).start();
        _this4.selectNext();
        _reactNative.Animated.decay(_this4.state.pan, {
          velocity: { x: -8, y: 1 },
          deceleration: 0.98 }).start(_this4._resetState.bind(_this4));
      }, 300);
    } }, { key: "componentWillMount", value: function componentWillMount() {
      var _this5 = this;
      this._panResponder = _reactNative.PanResponder.create({
        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture() {
          return true;
        },
        onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {
          return Math.abs(gestureState.dx) > 5;
        },

        onPanResponderGrant: function onPanResponderGrant(e, gestureState) {
          _this5.state.pan.setOffset({
            x: _this5.state.pan.x._value,
            y: _this5.state.pan.y._value });

          _this5.state.pan.setValue({ x: 0, y: 0 });
        },

        onPanResponderMove: function onPanResponderMove(e, gestureState) {
          if (gestureState.dx > 20) {
            if (_this5.props.onSwiping) _this5.props.onSwiping("right", gestureState.dx);
          } else if (gestureState.dx < -20) {
            if (_this5.props.onSwiping) _this5.props.onSwiping("left", gestureState.dx);
          }
          var val = Math.abs(gestureState.dx * 0.0013);
          var opa = Math.abs(gestureState.dx * 0.0022);
          if (val > 0.2) {
            val = 0.2;
          }
          _reactNative.Animated.timing(_this5.state.fadeAnim, { toValue: 0.8 + val }).start();
          _reactNative.Animated.spring(_this5.state.enter, {
            toValue: 0.8 + val,
            friction: 7 }).start();
          _reactNative.Animated.event([null, { dx: _this5.state.pan.x }])(e, gestureState);
        },

        onPanResponderRelease: function onPanResponderRelease(e, _ref2) {
          var vx = _ref2.vx,
              vy = _ref2.vy;
          if (_this5.props.onSwiping) _this5.props.onSwiping(null);
          var velocity = void 0;

          if (vx >= 0) {
            velocity = (0, _clamp2.default)(vx, 4.5, 10);
          } else if (vx < 0) {
            velocity = (0, _clamp2.default)(vx * -1, 4.5, 10) * -1;
          }

          if (Math.abs(_this5.state.pan.x._value) > SWIPE_THRESHOLD) {
            if (velocity > 0) {
              _this5.props.onSwipeRight ? _this5.props.onSwipeRight(_this5.state.selectedItem) : undefined;
              _this5.selectNext();
            } else {
              _this5.props.onSwipeLeft ? _this5.props.onSwipeLeft(_this5.state.selectedItem) : undefined;
              _this5.selectNext();
            }

            _reactNative.Animated.decay(_this5.state.pan, {
              velocity: { x: velocity, y: vy },
              deceleration: 0.98 }).start(_this5._resetState.bind(_this5));
          } else {
            _reactNative.Animated.spring(_this5.state.pan, {
              toValue: { x: 0, y: 0 },
              friction: 4 }).start();
          }
        } });
    } }, { key: "_resetState", value: function _resetState() {
      this.state.pan.setValue({ x: 0, y: 0 });
      this.state.enter.setValue(0.8);
      this.state.fadeAnim.setValue(0.8);
      this.setState({
        card1Top: !this.state.card1Top,
        card2Top: !this.state.card2Top });

      if (this.props.onSwiping) this.props.onSwiping(null);
    } }, { key: "getCardStyles", value: function getCardStyles() {
      var _state = this.state,
          pan = _state.pan,
          pan2 = _state.pan2,
          enter = _state.enter;var _ref3 = [pan.x, pan.y],
          translateX = _ref3[0],
          translateY = _ref3[1];

      var rotate = pan.x.interpolate({
        inputRange: [-700, 0, 700],
        outputRange: ["-10deg", "0deg", "10deg"] });

      var opacity = pan.x.interpolate({
        inputRange: [-320, 0, 320],
        outputRange: [0.9, 1, 0.9] });

      var scale = enter;

      var animatedCardStyles = {
        transform: [{ translateX: translateX }, { translateY: translateY }, { rotate: rotate }],
        opacity: opacity };

      var animatedCardStyles2 = { transform: [{ scale: scale }] };

      return [animatedCardStyles, animatedCardStyles2];
    } }, { key: "render", value: function render() {
      if (this.state.disabled) {

        return _react2.default.createElement(_reactNative.View, { style: { position: "relative", flexDirection: "column" }, __source: { fileName: _jsxFileName, lineNumber: 247 } }, _react2.default.createElement(_reactNative.View, { __source: { fileName: _jsxFileName, lineNumber: 249 } }, this.props.renderEmpty && this.props.renderEmpty()));
      } else if (this.state.lastCard) {

        return _react2.default.createElement(_reactNative.View, { style: { position: "relative", flexDirection: "column" }, __source: { fileName: _jsxFileName, lineNumber: 258 } }, this.state.selectedItem === undefined ? _react2.default.createElement(_reactNative.View, { __source: { fileName: _jsxFileName, lineNumber: 260 } }) : _react2.default.createElement(_reactNative.View, { __source: { fileName: _jsxFileName, lineNumber: 261 } }, _react2.default.createElement(_reactNative.Animated.View, _extends({
          style: [this.getCardStyles()[1], this.getInitialStyle().topCard, { opacity: this.state.fadeAnim }] }, this._panResponder.panHandlers, { __source: { fileName: _jsxFileName, lineNumber: 262 } }), this.props.renderEmpty && this.props.renderEmpty()), _react2.default.createElement(_reactNative.Animated.View, _extends({
          style: [this.getCardStyles()[0], this.getInitialStyle().topCard] }, this._panResponder.panHandlers, { __source: { fileName: _jsxFileName, lineNumber: 272 } }), this.props.renderItem(this.state.selectedItem))));
      }
      return _react2.default.createElement(_reactNative.View, { style: { position: "relative", flexDirection: "column" }, __source: { fileName: _jsxFileName, lineNumber: 283 } }, this.state.selectedItem === undefined ? _react2.default.createElement(_reactNative.View, { __source: { fileName: _jsxFileName, lineNumber: 285 } }) : _react2.default.createElement(_reactNative.View, { __source: { fileName: _jsxFileName, lineNumber: 286 } }, _react2.default.createElement(_reactNative.Animated.View, _extends({
        style: [this.getCardStyles()[1], this.getInitialStyle().topCard, { opacity: this.state.fadeAnim }] }, this._panResponder.panHandlers, { __source: { fileName: _jsxFileName, lineNumber: 287 } }), this.props.renderBottom ? this.props.renderBottom(this.state.selectedItem2) : this.props.renderItem(this.state.selectedItem2)), _react2.default.createElement(_reactNative.Animated.View, _extends({
        style: [this.getCardStyles()[0], this.getInitialStyle().topCard] }, this._panResponder.panHandlers, { __source: { fileName: _jsxFileName, lineNumber: 299 } }), this.props.renderTop ? this.props.renderTop(this.state.selectedItem) : this.props.renderItem(this.state.selectedItem))));
    } }]);return DeckSwiper;
}(_react.Component);

DeckSwiper.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  dataSource: _propTypes2.default.array });

var StyledDeckSwiper = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.DeckSwiper", {}, _mapPropsToStyleNames2.default)(DeckSwiper);exports.DeckSwiper = StyledDeckSwiper;
}, 663, null, "native-base/dist/src/basic/DeckSwiper.js");
__d(/* clamp/index.js */function(global, require, module, exports) {module.exports = clamp;

function clamp(value, min, max) {
  return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
}
}, 664, null, "clamp/index.js");
__d(/* native-base/dist/src/basic/Item.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Item = undefined;var _jsxFileName = "src/basic/Item.js";var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Input = require(632      ); // 632 = ./Input
var _Label = require(666      ); // 666 = ./Label
var _Icon = require(628     ); // 628 = ./Icon

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps); // 558 = ../Utils/computeProps
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames); // 549 = ../Utils/mapPropsToStyleNames
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) { // 484 = lodash
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Item = function (_Component) {
  _inherits(Item, _Component);
  function Item(props) {
    _classCallCheck(this, Item);var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));
    _this.state = {
      text: "",
      topAnim: new _reactNative.Animated.Value(18),
      opacAnim: new _reactNative.Animated.Value(1) };return _this;
  }_createClass(Item, [{ key: "componentDidMount", value: function componentDidMount() {
      if (this.props.floatingLabel) {
        if (this.inputProps && this.inputProps.value) {
          this.setState({ isFocused: true });
          this.floatUp(-16);
        }
        if (this.inputProps && this.inputProps.getRef) this.inputProps.getRef(this._inputRef);
      }
    } }, { key: "componentWillReceiveProps", value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;
      var childrenArray = _react2.default.Children.toArray(nextProps.children);
      var inputProps = {};
      input = _lodash2.default.remove(childrenArray, function (item) {
        if (item.type.displayName === "Styled(Input)") {
          inputProps = item.props;
          _this2.inputProps = item.props;
          return item;
        }
      });
      if (this.props.floatingLabel) {
        if (this.inputProps && this.inputProps.value) {
          this.setState({ isFocused: true });
          this.floatUp(-16);
        }
        if (this.inputProps && this.inputProps.getRef) this.inputProps.getRef(this._inputRef);
      }
    } }, { key: "floatBack", value: function floatBack() {
      _reactNative.Animated.timing(this.state.topAnim, {
        toValue: 18,
        duration: 150 }).start();
      _reactNative.Animated.timing(this.state.opacAnim, {
        toValue: 1,
        duration: 150 }).start();
    } }, { key: "floatUp", value: function floatUp(e) {
      _reactNative.Animated.timing(this.state.topAnim, {
        toValue: e || -22,
        duration: 150 }).start();
      _reactNative.Animated.timing(this.state.opacAnim, {
        toValue: 0.7,
        duration: 150 }).start();
    } }, { key: "renderLabel", value: function renderLabel(label, labelProps) {
      var newLabel = [];
      if (this.props.floatingLabel) {
        if (this.state.isFocused) {
          newLabel.push(_react2.default.createElement(_Label.Label, _extends({}, labelProps, {
            key: "newFLabel",
            float: true,
            style: _extends({
              fontSize: 15,
              lineHeight: 30 }, labelProps.style) })));

          this.floatUp();
        } else {
          newLabel.push(label);
          this.floatBack();
        }
      } else {
        newLabel.push(_react2.default.createElement(_Label.Label, _extends({}, labelProps, {
          key: "newLabel" })));
      }
      return newLabel;
    } }, { key: "renderChildren", value: function renderChildren() {
      var _this3 = this;
      var newChildren = [];
      var childrenArray = _react2.default.Children.toArray(this.props.children);

      var label = [];
      var labelProps = {};
      label = _lodash2.default.remove(childrenArray, function (item) {
        if (item.type === _Label.Label) {
          labelProps = item.props;
          return item;
        }
      });

      var input = [];
      var inputProps = {};
      input = _lodash2.default.remove(childrenArray, function (item) {
        if (item.type === _Input.Input) {
          inputProps = item.props;
          _this3.inputProps = item.props;
          return item;
        }
      });

      var icon = [];
      var iconProps = {};
      icon = _lodash2.default.remove(childrenArray, function (item) {
        if (item.type === _Icon.Icon) {
          iconProps = item.props;
          return item;
        }
      });
      if (this.props.floatingLabel && icon.length) {
        newChildren.push(_react2.default.createElement(_Icon.Icon, _extends({ key: "i1" }, iconProps, { __source: { fileName: _jsxFileName, lineNumber: 137 } })));
        newChildren.push(_react2.default.createElement(_reactNative.Animated.View, {
          key: "float",
          style: {
            position: "absolute",
            left: this.props.last ? 22 : 22,
            right: 0,
            top: this.state.topAnim,
            opacity: this.state.opacAnim,
            paddingTop: _reactNative.Platform.OS === "ios" ? undefined : undefined,
            paddingBottom: _reactNative.Platform.OS === "ios" ? undefined : 12 }, __source: { fileName: _jsxFileName, lineNumber: 139 } }, _react2.default.createElement(_Label.Label, _extends({}, labelProps, { __source: { fileName: _jsxFileName, lineNumber: 151 } }), this.renderLabel(label, labelProps))));

        newChildren.push(_react2.default.createElement(_Input.Input, _extends({
          key: "l2" }, inputProps, {
          onFocus: function onFocus() {
            _this3.setState({ isFocused: true });
            inputProps.onFocus && inputProps.onFocus();
          },
          onBlur: function onBlur() {
            inputProps.value ? _this3.setState({
              isFocused: true }) : !_this3.state.text.length && _this3.setState({ isFocused: false });
            inputProps.onBlur && inputProps.onBlur();
          },
          onChangeText: function onChangeText(text) {
            _this3.setState({ text: text });
            inputProps.onChangeText && inputProps.onChangeText(text);
          }, __source: { fileName: _jsxFileName, lineNumber: 157 } })));
      } else if (this.props.floatingLabel) {
        newChildren.push(_react2.default.createElement(_reactNative.Animated.View, {
          key: "float",
          style: {
            position: "absolute",
            left: this.props.last ? 15 : 0,
            right: 0,
            top: this.state.topAnim,
            opacity: this.state.opacAnim,
            paddingTop: _reactNative.Platform.OS === "ios" ? undefined : undefined,
            paddingBottom: _reactNative.Platform.OS === "ios" ? undefined : 12 }, __source: { fileName: _jsxFileName, lineNumber: 180 } }, _react2.default.createElement(_Label.Label, _extends({}, labelProps, { __source: { fileName: _jsxFileName, lineNumber: 192 } }), this.renderLabel(label, labelProps))));

        newChildren.push(_react2.default.createElement(_Input.Input, _extends({
          ref: function ref(c) {
            return _this3._inputRef = c;
          },
          value: this.state.text,
          key: "l2" }, inputProps, {
          onFocus: function onFocus() {
            _this3.setState({ isFocused: true });
            inputProps.onFocus && inputProps.onFocus();
          },
          onBlur: function onBlur() {
            inputProps.value ? _this3.setState({
              isFocused: true }) : !_this3.state.text.length && _this3.setState({ isFocused: false });
            inputProps.onBlur && inputProps.onBlur();
          },
          onChangeText: function onChangeText(text) {
            _this3.setState({ text: text });
            inputProps.onChangeText && inputProps.onChangeText(text);
          }, __source: { fileName: _jsxFileName, lineNumber: 198 } })));
      } else if (this.props.stackedLabel && icon.length) {
        newChildren.push(_react2.default.createElement(_reactNative.View, {
          key: "s",
          style: {
            flexDirection: "row",
            flex: 1,
            width: _platform2.default.deviceWidth - 15 }, __source: { fileName: _jsxFileName, lineNumber: 223 } }, _react2.default.createElement(_Icon.Icon, _extends({ key: "s1" }, iconProps, { __source: { fileName: _jsxFileName, lineNumber: 231 } })), _react2.default.createElement(_reactNative.View, { style: { flexDirection: "column" }, __source: { fileName: _jsxFileName, lineNumber: 232 } }, _react2.default.createElement(_Label.Label, _extends({ key: "s2" }, labelProps, { __source: { fileName: _jsxFileName, lineNumber: 233 } })), _react2.default.createElement(_Input.Input, _extends({ key: "s3" }, inputProps, { style: { width: _platform2.default.deviceWidth - 40 }, __source: { fileName: _jsxFileName, lineNumber: 234 } })))));
      } else {
        return this.props.children;
      }
      return newChildren;
    } }, { key: "getInitialStyle", value: function getInitialStyle() {
      return {
        roundedInputGroup: {
          borderWidth: this.props.rounded ? _platform2.default.borderWidth * 2 : undefined,
          borderRadius: this.props.rounded ? _platform2.default.inputGroupRoundedBorderRadius : undefined } };
    } }, { key: "prepareRootProps", value: function prepareRootProps() {
      var defaultProps = {
        style: this.getInitialStyle().roundedInputGroup };

      return (0, _computeProps2.default)(this.props, defaultProps);
    } }, { key: "render", value: function render() {
      var _this4 = this;
      return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({ ref: function ref(c) {
          return _this4._root = c;
        } }, this.prepareRootProps(), { activeOpacity: 1, __source: { fileName: _jsxFileName, lineNumber: 261 } }), this.renderChildren());
    } }]);return Item;
}(_react.Component);

var childrenType = function childrenType(props, propName, component) {
  var error = void 0;
  var prop = props[propName];
  if (!props.children.length) {
    error = new Error(component + " should have both Label and Input components");
  } else if (props.children[0].type.displayName !== "Styled(Label)" || props.children[1].type.displayName !== "Styled(Input)") {
    error = new Error(component + " should have Label and Input components only");
  }
  return error;
};

Item.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  inlineLabel: _propTypes2.default.bool,
  floatingLabel: _propTypes2.default.bool,
  stackedLabel: _propTypes2.default.bool,
  fixedLabel: _propTypes2.default.bool,
  success: _propTypes2.default.bool,
  error: _propTypes2.default.bool });

var StyledItem = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Item", {}, _mapPropsToStyleNames2.default)(Item);exports.Item = StyledItem;
}, 665, null, "native-base/dist/src/basic/Item.js");
__d(/* native-base/dist/src/basic/Label.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Label = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Label.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Label = function (_Component) {
  _inherits(Label, _Component);function Label() {
    _classCallCheck(this, Label);return _possibleConstructorReturn(this, (Label.__proto__ || Object.getPrototypeOf(Label)).apply(this, arguments));
  }_createClass(Label, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Text, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return Label;
}(_react.Component);

Label.propTypes = _extends({}, _reactNative.Text.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledLabel = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Label", {}, _mapPropsToStyleNames2.default)(Label);exports.Label = StyledLabel;
}, 666, null, "native-base/dist/src/basic/Label.js");
__d(/* native-base/dist/src/basic/Segment.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Segment = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Segment.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Segment = function (_Component) {
  _inherits(Segment, _Component);function Segment() {
    _classCallCheck(this, Segment);return _possibleConstructorReturn(this, (Segment.__proto__ || Object.getPrototypeOf(Segment)).apply(this, arguments));
  }_createClass(Segment, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 10 } }));
    } }]);return Segment;
}(_react.Component);

Segment.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledSegment = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Segment", {}, _mapPropsToStyleNames2.default)(Segment);exports.Segment = StyledSegment;
}, 667, null, "native-base/dist/src/basic/Segment.js");
__d(/* native-base/dist/src/basic/Textarea.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Textarea = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Textarea.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                          );var _platform2 = _interopRequireDefault(_platform); // 493 = ../theme/variables/platform
var _computeProps = require(558                    );var _computeProps2 = _interopRequireDefault(_computeProps); // 558 = ../Utils/computeProps
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Textarea = function (_Component) {
  _inherits(Textarea, _Component);function Textarea() {
    _classCallCheck(this, Textarea);return _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).apply(this, arguments));
  }_createClass(Textarea, [{ key: "getStyle", value: function getStyle() {
      return {
        textarea: {
          height: this.props.rowSpan ? this.props.rowSpan * 25 : 60 } };
    } }, { key: "prepareRootProps", value: function prepareRootProps() {
      var defaultProps = {
        style: this.getStyle().textarea };

      return (0, _computeProps2.default)(this.props, defaultProps);
    } }, { key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.TextInput, _extends({
        ref: function ref(c) {
          _this2._textInput = c;
          _this2._root = c;
        } }, this.prepareRootProps(), {
        multiline: true,
        placeholderTextColor: this.props.placeholderTextColor ? this.props.placeholderTextColor : _platform2.default.inputColorPlaceholder,

        underlineColorAndroid: "rgba(0,0,0,0)", __source: { fileName: _jsxFileName, lineNumber: 26 } }));
    } }]);return Textarea;
}(_react.Component);

Textarea.propTypes = _extends({}, _reactNative.TextInput.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),
  rowSpan: _propTypes2.default.number,
  bordered: _propTypes2.default.bool,
  underline: _propTypes2.default.bool });

var StyledTextarea = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Textarea", {}, _mapPropsToStyleNames2.default)(Textarea);exports.Textarea = StyledTextarea;
}, 668, null, "native-base/dist/src/basic/Textarea.js");
__d(/* native-base/dist/src/basic/Tab.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Tab = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Tab.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _Utils = require(551       ); // 551 = ../Utils

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Tab = function (_Component) {
  _inherits(Tab, _Component);function Tab() {
    _classCallCheck(this, Tab);return _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).apply(this, arguments));
  }_createClass(Tab, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.View, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 12 } }), this.props.children);
    } }]);return Tab;
}(_react.Component);

Tab.propTypes = _extends({}, _Utils.ViewPropTypes, {

  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Tab", {}, _mapPropsToStyleNames2.default)(Tab);exports.Tab = StyledTab;
}, 669, null, "native-base/dist/src/basic/Tab.js");
__d(/* native-base/dist/src/basic/Tabs/index.js */function(global, require, module, exports) {var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Tabs/index.js";

var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _createReactClass = require(311                 );var _createReactClass2 = _interopRequireDefault(_createReactClass); // 311 = create-react-class

var _Utils = require(551          ); // 551 = ../../Utils

var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash);function _interopRequireDefault(obj) { // 484 = lodash
  return obj && obj.__esModule ? obj : { default: obj };
}function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}var React = require(13     );var Component = React.Component;var ReactNative = require(181           );var Dimensions = ReactNative.Dimensions, // 181 = react-native // 13 = react
    View = ReactNative.View,
    Animated = ReactNative.Animated,
    ScrollView = ReactNative.ScrollView,
    StyleSheet = ReactNative.StyleSheet,
    InteractionManager = ReactNative.InteractionManager,
    Platform = ReactNative.Platform;var TimerMixin = require(347                ); // 347 = react-timer-mixin

var SceneComponent = require(671               );var _require = require(673              ), // 673 = ./DefaultTabBar // 671 = ./SceneComponent
    DefaultTabBar = _require.DefaultTabBar;var _require2 = require(675                 ), // 675 = ./ScrollableTabBar
    ScrollableTabBar = _require2.ScrollableTabBar;

var ScrollableTabView = (0, _createReactClass2.default)({ displayName: "ScrollableTabView",
  mixins: [TimerMixin],
  statics: {
    DefaultTabBar: DefaultTabBar,
    ScrollableTabBar: ScrollableTabBar },

  propTypes: {
    tabBarPosition: _propTypes2.default.oneOf(["top", "bottom", "overlayTop", "overlayBottom"]),
    initialPage: _propTypes2.default.number,
    page: _propTypes2.default.number,
    onChangeTab: _propTypes2.default.func,
    onScroll: _propTypes2.default.func,
    renderTabBar: _propTypes2.default.any,
    style: _Utils.ViewPropTypes.style,
    contentProps: _propTypes2.default.object,
    scrollWithoutAnimation: _propTypes2.default.bool,
    locked: _propTypes2.default.bool,
    prerenderingSiblingsNumber: _propTypes2.default.number },

  getDefaultProps: function getDefaultProps() {
    return {
      tabBarPosition: "top",
      initialPage: 0,
      page: -1,
      onChangeTab: function onChangeTab() {},
      onScroll: function onScroll() {},
      contentProps: {},
      scrollWithoutAnimation: false,
      locked: false,
      prerenderingSiblingsNumber: 0 };
  },

  getInitialState: function getInitialState() {
    return {
      currentPage: this.props.initialPage,
      scrollValue: new Animated.Value(this.props.initialPage),
      containerWidth: Dimensions.get("window").width,
      sceneKeys: this.newSceneKeys({ currentPage: this.props.initialPage }) };
  },

  componentDidMount: function componentDidMount() {
    var _this = this;
    var scrollFn = function scrollFn() {
      if (_this.scrollView && Platform.OS === "android") {
        var x = _this.props.initialPage * _this.state.containerWidth;
        _this.scrollView.scrollTo({ x: x, animated: false });
      }
    };
    this.setTimeout(function () {
      InteractionManager.runAfterInteractions(scrollFn);
    }, 0);
  },

  componentWillReceiveProps: function componentWillReceiveProps(props) {
    if (props.children !== this.props.children) {
      this.updateSceneKeys({
        page: this.state.currentPage,
        children: props.children });
    }

    if (props.page >= 0 && props.page !== this.state.currentPage) {
      this.goToPage(props.page);
    }
  },

  goToPage: function goToPage(pageNumber) {
    var offset = pageNumber * this.state.containerWidth;
    if (this.scrollView) {
      this.scrollView.scrollTo({
        x: offset,
        y: 0,
        animated: !this.props.scrollWithoutAnimation });
    }

    var currentPage = this.state.currentPage;
    this.updateSceneKeys({
      page: pageNumber,
      callback: this._onChangeTab.bind(this, currentPage, pageNumber) });
  },

  renderTabBar: function renderTabBar(props) {
    if (this.props.renderTabBar === false) {
      return null;
    } else if (this.props.renderTabBar) {
      return React.cloneElement(this.props.renderTabBar(props), props);
    } else {
      return React.createElement(DefaultTabBar, _extends({}, props, { __source: { fileName: _jsxFileName, lineNumber: 107 } }));
    }
  },

  updateSceneKeys: function updateSceneKeys(_ref) {
    var page = _ref.page,
        _ref$children = _ref.children,
        children = _ref$children === undefined ? this.props.children : _ref$children,
        _ref$callback = _ref.callback,
        callback = _ref$callback === undefined ? function () {} : _ref$callback;
    var newKeys = this.newSceneKeys({
      previousKeys: this.state.sceneKeys,
      currentPage: page,
      children: children });

    this.setState({ currentPage: page, sceneKeys: newKeys }, callback);
  },

  newSceneKeys: function newSceneKeys(_ref2) {
    var _this2 = this;var _ref2$previousKeys = _ref2.previousKeys,
        previousKeys = _ref2$previousKeys === undefined ? [] : _ref2$previousKeys,
        _ref2$currentPage = _ref2.currentPage,
        currentPage = _ref2$currentPage === undefined ? 0 : _ref2$currentPage,
        _ref2$children = _ref2.children,
        children = _ref2$children === undefined ? this.props.children : _ref2$children;
    var newKeys = [];
    this._children(children).forEach(function (child, idx) {
      var key = _this2._makeSceneKey(child, idx);
      if (_this2._keyExists(previousKeys, key) || _this2._shouldRenderSceneKey(idx, currentPage)) {
        newKeys.push(key);
      }
    });
    return newKeys;
  },

  _shouldRenderSceneKey: function _shouldRenderSceneKey(idx, currentPageKey) {
    var numOfSibling = this.props.prerenderingSiblingsNumber;
    return idx < currentPageKey + numOfSibling + 1 && idx > currentPageKey - numOfSibling - 1;
  },

  _keyExists: function _keyExists(sceneKeys, key) {
    return sceneKeys.find(function (sceneKey) {
      return key === sceneKey;
    });
  },

  _makeSceneKey: function _makeSceneKey(child, idx) {
    return child.props.heading + "_" + idx;
  },

  renderScrollableContent: function renderScrollableContent() {
    var _this3 = this;
    var scenes = this._composeScenes();
    return React.createElement(ScrollView, _extends({
      horizontal: true,
      pagingEnabled: true,
      automaticallyAdjustContentInsets: false,
      contentOffset: {
        x: this.props.initialPage * this.state.containerWidth },

      ref: function ref(scrollView) {
        _this3.scrollView = scrollView;
      },
      onScroll: function onScroll(e) {
        var offsetX = e.nativeEvent.contentOffset.x;
        _this3._updateScrollValue(offsetX / _this3.state.containerWidth);
      },
      onMomentumScrollBegin: this._onMomentumScrollBeginAndEnd,
      onMomentumScrollEnd: this._onMomentumScrollBeginAndEnd,
      scrollEventThrottle: 16,
      scrollsToTop: false,
      showsHorizontalScrollIndicator: false,
      scrollEnabled: !this.props.locked,
      directionalLockEnabled: true,
      alwaysBounceVertical: false,
      keyboardDismissMode: "on-drag" }, this.props.contentProps, { __source: { fileName: _jsxFileName, lineNumber: 147 } }), scenes);
  },

  _composeScenes: function _composeScenes() {
    var _this4 = this;
    return this._children().map(function (child, idx) {
      var key = _this4._makeSceneKey(child, idx);
      return React.createElement(SceneComponent, {
        key: child.key,
        shouldUpdated: _this4._shouldRenderSceneKey(idx, _this4.state.currentPage),
        style: { width: _this4.state.containerWidth }, __source: { fileName: _jsxFileName, lineNumber: 181 } }, _this4._keyExists(_this4.state.sceneKeys, key) ? child : React.createElement(View, { heading: child.props.heading, __source: { fileName: _jsxFileName, lineNumber: 186 } }));
    });
  },

  _onMomentumScrollBeginAndEnd: function _onMomentumScrollBeginAndEnd(e) {
    var offsetX = e.nativeEvent.contentOffset.x;
    var page = Math.round(offsetX / this.state.containerWidth);
    if (this.state.currentPage !== page) {
      this._updateSelectedPage(page);
    }
  },

  _updateSelectedPage: function _updateSelectedPage(nextPage) {
    var localNextPage = nextPage;
    if (typeof localNextPage === "object") {
      localNextPage = nextPage.nativeEvent.position;
    }

    var currentPage = this.state.currentPage;
    this.updateSceneKeys({
      page: localNextPage,
      callback: this._onChangeTab.bind(this, currentPage, localNextPage) });
  },

  _onChangeTab: function _onChangeTab(prevPage, currentPage) {
    this.props.onChangeTab({
      i: currentPage,
      ref: this._children()[currentPage],
      from: prevPage });
  },

  _updateScrollValue: function _updateScrollValue(value) {
    this.state.scrollValue.setValue(value);
    this.props.onScroll(value);
  },

  _handleLayout: function _handleLayout(e) {
    var _this5 = this;var width = e.nativeEvent.layout.width;

    if (Math.round(width) !== Math.round(this.state.containerWidth)) {
      this.setState({ containerWidth: width });
      this.requestAnimationFrame(function () {
        _this5.goToPage(_this5.state.currentPage);
      });
    }
  },

  _children: function _children() {
    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.children;
    return React.Children.map(children, function (child) {
      return child;
    });
  },

  render: function render() {
    var overlayTabs = this.props.tabBarPosition === "overlayTop" || this.props.tabBarPosition === "overlayBottom";
    var tabBarProps = {
      goToPage: this.goToPage,
      tabs: this._children().map(function (child) {
        return child.props.heading;
      }),
      tabStyle: this._children().map(function (child) {
        return child.props.tabStyle;
      }),
      activeTabStyle: this._children().map(function (child) {
        return child.props.activeTabStyle;
      }),
      textStyle: this._children().map(function (child) {
        return child.props.textStyle;
      }),
      activeTextStyle: this._children().map(function (child) {
        return child.props.activeTextStyle;
      }),
      tabHeaderStyle: this._children().map(function (child) {
        return _lodash2.default.get(child.props.heading.props, "style", undefined);
      }),
      activeTab: this.state.currentPage,
      scrollValue: this.state.scrollValue,
      containerWidth: this.state.containerWidth };

    if (this.props.tabBarBackgroundColor) {
      tabBarProps.backgroundColor = this.props.tabBarBackgroundColor;
    }
    if (this.props.tabBarActiveTextColor) {
      tabBarProps.activeTextColor = this.props.tabBarActiveTextColor;
    }
    if (this.props.tabBarInactiveTextColor) {
      tabBarProps.inactiveTextColor = this.props.tabBarInactiveTextColor;
    }
    if (this.props.tabBarTextStyle) {
      tabBarProps.textStyle = this.props.tabBarTextStyle;
    }
    if (this.props.tabBarUnderlineStyle) {
      tabBarProps.underlineStyle = this.props.tabBarUnderlineStyle;
    }
    if (overlayTabs) {
      tabBarProps.style = _defineProperty({
        position: "absolute",
        left: 0,
        right: 0 }, this.props.tabBarPosition === "overlayTop" ? "top" : "bottom", 0);
    }

    return React.createElement(View, { style: [styles.container, this.props.style], onLayout: this._handleLayout, __source: { fileName: _jsxFileName, lineNumber: 281 } }, this.props.tabBarPosition === "top" && this.renderTabBar(tabBarProps), this.renderScrollableContent(), (this.props.tabBarPosition === "bottom" || overlayTabs) && this.renderTabBar(tabBarProps));
  } });

module.exports = ScrollableTabView;

var styles = StyleSheet.create({
  container: {
    flex: 1 },

  scrollableContentAndroid: {
    flex: 1 } });
}, 670, null, "native-base/dist/src/basic/Tabs/index.js");
__d(/* native-base/dist/src/basic/Tabs/SceneComponent.js */function(global, require, module, exports) {var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Tabs/SceneComponent.js";function _objectWithoutProperties(obj, keys) {
  var target = {};for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
  }return target;
}var React = require(13     ); // 13 = react
var ReactNative = require(181           );var Component = React.Component;var View = ReactNative.View, // 181 = react-native
    StyleSheet = ReactNative.StyleSheet;

var StaticContainer = require(672                ); // 672 = ./StaticContainer

var SceneComponent = function SceneComponent(Props) {
  var shouldUpdated = Props.shouldUpdated,
      props = _objectWithoutProperties(Props, ["shouldUpdated"]);
  return React.createElement(View, _extends({}, props, { __source: { fileName: _jsxFileName, lineNumber: 11 } }), React.createElement(StaticContainer, { shouldUpdate: shouldUpdated, __source: { fileName: _jsxFileName, lineNumber: 12 } }, props.children));
};

module.exports = SceneComponent;
}, 671, null, "native-base/dist/src/basic/Tabs/SceneComponent.js");
__d(/* native-base/dist/src/basic/Tabs/StaticContainer.js */function(global, require, module, exports) {var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var React = require(13     );var StaticContainer = function (_React$Component) { // 13 = react
  _inherits(StaticContainer, _React$Component);function StaticContainer() {
    _classCallCheck(this, StaticContainer);return _possibleConstructorReturn(this, (StaticContainer.__proto__ || Object.getPrototypeOf(StaticContainer)).apply(this, arguments));
  }_createClass(StaticContainer, [{ key: "shouldComponentUpdate", value: function shouldComponentUpdate(nextProps) {
      return !!nextProps.shouldUpdate;
    } }, { key: "render", value: function render() {
      var child = this.props.children;
      if (child === null || child === false) {
        return null;
      }
      return React.Children.only(child);
    } }]);return StaticContainer;
}(React.Component);

module.exports = StaticContainer;
}, 672, null, "native-base/dist/src/basic/Tabs/StaticContainer.js");
__d(/* native-base/dist/src/basic/Tabs/DefaultTabBar.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.DefaultTabBar = undefined;var _jsxFileName = "src/basic/Tabs/DefaultTabBar.js";var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _createReactClass = require(311                 );var _createReactClass2 = _interopRequireDefault(_createReactClass); // 311 = create-react-class

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                               );var _platform2 = _interopRequireDefault(_platform); // 493 = ./../../theme/variables/platform
var _index = require(469            ); // 469 = ./../../index
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash

var _Utils = require(551          );function _interopRequireDefault(obj) { // 551 = ../../Utils
  return obj && obj.__esModule ? obj : { default: obj };
}var ReactNative = require(181           );var StyleSheet = ReactNative.StyleSheet, // 181 = react-native
    View = ReactNative.View,
    Animated = ReactNative.Animated,
    Platform = ReactNative.Platform;
var Button = require(674       ); // 674 = ./Button

var DefaultTabBar = (0, _createReactClass2.default)({ displayName: "DefaultTabBar",
  propTypes: {
    goToPage: _propTypes2.default.func,
    activeTab: _propTypes2.default.number,
    tabs: _propTypes2.default.array,
    backgroundColor: _propTypes2.default.string,
    activeTextColor: _propTypes2.default.string,
    inactiveTextColor: _propTypes2.default.string,
    tabStyle: _Utils.ViewPropTypes.style,
    renderTab: _propTypes2.default.func,
    underlineStyle: _Utils.ViewPropTypes.style },

  contextTypes: {
    theme: _propTypes2.default.object },

  getDefaultProps: function getDefaultProps() {
    return {
      activeTextColor: _platform2.default.topTabBarActiveTextColor,
      inactiveTextColor: _platform2.default.topTabBarTextColor,
      backgroundColor: null };
  },

  renderTabOption: function renderTabOption(name, page) {},

  renderTab: function renderTab(name, page, isTabActive, onPressHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle) {
    var headerContent = typeof name !== "string" ? name.props.children : undefined;var _props = this.props,
        activeTextColor = _props.activeTextColor,
        inactiveTextColor = _props.inactiveTextColor;
    var textColor = isTabActive ? activeTextColor : inactiveTextColor;
    var fontWeight = isTabActive ? "bold" : "normal";
    if (typeof name === "string") {
      return _react2.default.createElement(Button, { style: { flex: 1 }, key: name, onPress: function onPress() {
          return onPressHandler(page);
        }, __source: { fileName: _jsxFileName, lineNumber: 57 } }, _react2.default.createElement(_index.TabHeading, { style: isTabActive ? activeTabStyle : tabStyle, active: isTabActive, __source: { fileName: _jsxFileName, lineNumber: 58 } }, _react2.default.createElement(_index.Text, { style: isTabActive ? activeTextStyle : textStyle, __source: { fileName: _jsxFileName, lineNumber: 59 } }, name)));
    } else {
      return _react2.default.createElement(Button, { style: { flex: 1 }, key: _lodash2.default.random(1.2, 5.2), onPress: function onPress() {
          return onPressHandler(page);
        }, __source: { fileName: _jsxFileName, lineNumber: 67 } }, _react2.default.createElement(_index.TabHeading, { style: tabHeaderStyle, active: isTabActive, __source: { fileName: _jsxFileName, lineNumber: 68 } }, headerContent));
    }
  },

  render: function render() {
    var _this = this;
    var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
    var platformStyle = variables.platformStyle;
    var containerWidth = this.props.containerWidth;
    var numberOfTabs = this.props.tabs.length;
    var tabUnderlineStyle = {
      position: "absolute",
      width: containerWidth / numberOfTabs,
      height: 4,
      backgroundColor: variables.topTabBarActiveBorderColor,
      bottom: 0 };

    var left = this.props.scrollValue.interpolate({
      inputRange: [0, 1],
      outputRange: [0, containerWidth / numberOfTabs] });

    return _react2.default.createElement(_index.TabContainer, { __source: { fileName: _jsxFileName, lineNumber: 94 } }, this.props.tabs.map(function (name, page) {
      var isTabActive = _this.props.activeTab === page;
      var renderTab = _this.props.renderTab || _this.renderTab;
      return renderTab(name, page, isTabActive, _this.props.goToPage, _this.props.tabStyle[page], _this.props.activeTabStyle[page], _this.props.textStyle[page], _this.props.activeTextStyle[page], _this.props.tabHeaderStyle[page]);
    }), _react2.default.createElement(Animated.View, { style: [tabUnderlineStyle, { left: left }, this.props.underlineStyle], __source: { fileName: _jsxFileName, lineNumber: 110 } }));
  } });

var StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.DefaultTabBar", {}, mapPropsToStyleNames)(DefaultTabBar);exports.DefaultTabBar = StyledTab;
}, 673, null, "native-base/dist/src/basic/Tabs/DefaultTabBar.js");
__d(/* native-base/dist/src/basic/Tabs/Button.android.js */function(global, require, module, exports) {var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Tabs/Button.android.js";var React = require(13     ); // 13 = react
var ReactNative = require(181           );var TouchableNativeFeedback = ReactNative.TouchableNativeFeedback, // 181 = react-native
    View = ReactNative.View;

var Button = function Button(props) {
  return React.createElement(TouchableNativeFeedback, _extends({
    delayPressIn: 0,
    background: TouchableNativeFeedback.SelectableBackground() }, props, { __source: { fileName: _jsxFileName, lineNumber: 7 } }), props.children);
};

module.exports = Button;
}, 674, null, "native-base/dist/src/basic/Tabs/Button.android.js");
__d(/* native-base/dist/src/basic/Tabs/ScrollableTabBar.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.ScrollableTab = undefined;var _jsxFileName = "src/basic/Tabs/ScrollableTabBar.js";var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _createReactClass = require(311                 );var _createReactClass2 = _interopRequireDefault(_createReactClass); // 311 = create-react-class

var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _platform = require(493                               );var _platform2 = _interopRequireDefault(_platform); // 493 = ./../../theme/variables/platform
var _index = require(469            ); // 469 = ./../../index
var _lodash = require(484     );var _lodash2 = _interopRequireDefault(_lodash); // 484 = lodash

var _Utils = require(551          );function _interopRequireDefault(obj) { // 551 = ../../Utils
  return obj && obj.__esModule ? obj : { default: obj };
}var ReactNative = require(181           );var View = ReactNative.View, // 181 = react-native
    Animated = ReactNative.Animated,
    StyleSheet = ReactNative.StyleSheet,
    ScrollView = ReactNative.ScrollView,
    Platform = ReactNative.Platform,
    Dimensions = ReactNative.Dimensions;
var Button = require(674       ); // 674 = ./Button

var WINDOW_WIDTH = Dimensions.get("window").width;

var ScrollableTabBar = (0, _createReactClass2.default)({ displayName: "ScrollableTabBar",
  propTypes: {
    goToPage: _propTypes2.default.func,
    activeTab: _propTypes2.default.number,
    tabs: _propTypes2.default.array,
    backgroundColor: _propTypes2.default.string,
    activeTextColor: _propTypes2.default.string,
    inactiveTextColor: _propTypes2.default.string,
    scrollOffset: _propTypes2.default.number,
    style: _Utils.ViewPropTypes.style,
    tabStyle: _Utils.ViewPropTypes.style,
    tabsContainerStyle: _Utils.ViewPropTypes.style,
    renderTab: _propTypes2.default.func,
    underlineStyle: _Utils.ViewPropTypes.style,
    onScroll: _propTypes2.default.func },

  contextTypes: {
    theme: _propTypes2.default.object },

  getDefaultProps: function getDefaultProps() {
    return {
      scrollOffset: 52,
      activeTextColor: "navy",
      inactiveTextColor: "black",
      backgroundColor: null,
      style: {},
      tabStyle: {},
      tabsContainerStyle: {},
      underlineStyle: {} };
  },

  getInitialState: function getInitialState() {
    this._tabsMeasurements = [];
    return {
      _leftTabUnderline: new Animated.Value(0),
      _widthTabUnderline: new Animated.Value(0),
      _containerWidth: null };
  },

  componentDidMount: function componentDidMount() {
    this.props.scrollValue.addListener(this.updateView);
  },

  updateView: function updateView(offset) {
    var position = Math.floor(offset.value);
    var pageOffset = offset.value % 1;
    var tabCount = this.props.tabs.length;
    var lastTabPosition = tabCount - 1;

    if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {
      return;
    }

    if (this.necessarilyMeasurementsCompleted(position, position === lastTabPosition)) {
      this.updateTabPanel(position, pageOffset);
      this.updateTabUnderline(position, pageOffset, tabCount);
    }
  },

  necessarilyMeasurementsCompleted: function necessarilyMeasurementsCompleted(position, isLastTab) {
    return this._tabsMeasurements[position] && (isLastTab || this._tabsMeasurements[position + 1]) && this._tabContainerMeasurements && this._containerMeasurements;
  },

  updateTabPanel: function updateTabPanel(position, pageOffset) {
    var containerWidth = this._containerMeasurements.width;
    var tabWidth = this._tabsMeasurements[position].width;
    var nextTabMeasurements = this._tabsMeasurements[position + 1];
    var nextTabWidth = nextTabMeasurements && nextTabMeasurements.width || 0;
    var tabOffset = this._tabsMeasurements[position].left;
    var absolutePageOffset = pageOffset * tabWidth;
    var newScrollX = tabOffset + absolutePageOffset;

    newScrollX -= (containerWidth - (1 - pageOffset) * tabWidth - pageOffset * nextTabWidth) / 2;
    newScrollX = newScrollX >= 0 ? newScrollX : 0;

    if (Platform.OS === "android") {
      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });
    } else {
      var rightBoundScroll = this._tabContainerMeasurements.width - this._containerMeasurements.width;
      newScrollX = newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;
      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });
    }
  },

  updateTabUnderline: function updateTabUnderline(position, pageOffset, tabCount) {
    var lineLeft = this._tabsMeasurements[position].left;
    var lineRight = this._tabsMeasurements[position].right;

    if (position < tabCount - 1) {
      var nextTabLeft = this._tabsMeasurements[position + 1].left;
      var nextTabRight = this._tabsMeasurements[position + 1].right;

      var newLineLeft = pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;
      var newLineRight = pageOffset * nextTabRight + (1 - pageOffset) * lineRight;

      this.state._leftTabUnderline.setValue(newLineLeft);
      this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);
    } else {
      this.state._leftTabUnderline.setValue(lineLeft);
      this.state._widthTabUnderline.setValue(lineRight - lineLeft);
    }
  },

  renderTab: function renderTab(name, page, isTabActive, onPressHandler, onLayoutHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle) {
    var headerContent = typeof name !== "string" ? name.props.children : undefined;var _props = this.props,
        activeTextColor = _props.activeTextColor,
        inactiveTextColor = _props.inactiveTextColor;
    var textColor = isTabActive ? activeTextColor : inactiveTextColor;
    var fontWeight = isTabActive ? "bold" : "normal";

    if (typeof name === "string") {
      return _react2.default.createElement(Button, { key: name + "_" + page, onPress: function onPress() {
          return onPressHandler(page);
        }, onLayout: onLayoutHandler, __source: { fileName: _jsxFileName, lineNumber: 146 } }, _react2.default.createElement(_index.TabHeading, { scrollable: true, style: isTabActive ? activeTabStyle : tabStyle, active: isTabActive, __source: { fileName: _jsxFileName, lineNumber: 147 } }, _react2.default.createElement(_index.Text, { style: isTabActive ? activeTextStyle : textStyle, __source: { fileName: _jsxFileName, lineNumber: 148 } }, name)));
    } else {
      return _react2.default.createElement(Button, { key: _lodash2.default.random(1.2, 5.2), onPress: function onPress() {
          return onPressHandler(page);
        }, onLayout: onLayoutHandler, __source: { fileName: _jsxFileName, lineNumber: 156 } }, _react2.default.createElement(_index.TabHeading, { scrollable: true, style: tabHeaderStyle, active: isTabActive, __source: { fileName: _jsxFileName, lineNumber: 157 } }, headerContent));
    }
  },

  measureTab: function measureTab(page, event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
        x = _event$nativeEvent$la.x,
        width = _event$nativeEvent$la.width,
        height = _event$nativeEvent$la.height;
    this._tabsMeasurements[page] = { left: x, right: x + width, width: width, height: height };
    this.updateView({ value: this.props.scrollValue._value });
  },

  render: function render() {
    var _this = this;
    var variables = this.context.theme ? this.context.theme["@@shoutem.theme/themeStyle"].variables : _platform2.default;
    var tabUnderlineStyle = {
      position: "absolute",
      height: 4,
      backgroundColor: variables.topTabBarActiveBorderColor,
      bottom: 0 };

    var dynamicTabUnderline = {
      left: this.state._leftTabUnderline,
      width: this.state._widthTabUnderline };

    return _react2.default.createElement(View, {
      style: [styles.container, { backgroundColor: this.props.backgroundColor }, this.props.style],
      onLayout: this.onContainerLayout, __source: { fileName: _jsxFileName, lineNumber: 186 } }, _react2.default.createElement(ScrollView, {
      automaticallyAdjustContentInsets: false,
      ref: function ref(scrollView) {
        _this._scrollView = scrollView;
      },
      horizontal: true,
      showsHorizontalScrollIndicator: false,
      showsVerticalScrollIndicator: false,
      directionalLockEnabled: true,
      onScroll: this.props.onScroll,
      bounces: false,
      scrollsToTop: false, __source: { fileName: _jsxFileName, lineNumber: 190 } }, _react2.default.createElement(View, {
      style: [styles.tabs, { width: this.state._containerWidth }, this.props.tabsContainerStyle],
      ref: "tabContainer",
      onLayout: this.onTabContainerLayout, __source: { fileName: _jsxFileName, lineNumber: 203 } }, this.props.tabs.map(function (name, page) {
      var isTabActive = _this.props.activeTab === page;
      var renderTab = _this.props.renderTab || _this.renderTab;
      return renderTab(name, page, isTabActive, _this.props.goToPage, _this.measureTab.bind(_this, page), _this.props.tabStyle[page], _this.props.activeTabStyle[page], _this.props.textStyle[page], _this.props.activeTextStyle[page], _this.props.tabHeaderStyle[page]);
    }), _react2.default.createElement(Animated.View, { style: [tabUnderlineStyle, dynamicTabUnderline, this.props.underlineStyle], __source: { fileName: _jsxFileName, lineNumber: 224 } }))));
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {

    if (!_lodash2.default.isEqual(this.props.tabs, nextProps.tabs) && this.state._containerWidth) {
      this.setState({ _containerWidth: null });
    }
  },

  onTabContainerLayout: function onTabContainerLayout(e) {
    this._tabContainerMeasurements = e.nativeEvent.layout;
    var width = this._tabContainerMeasurements.width;
    if (width < WINDOW_WIDTH) {
      width = WINDOW_WIDTH;
    }
    this.setState({ _containerWidth: width });
    this.updateView({ value: this.props.scrollValue._value });
  },

  onContainerLayout: function onContainerLayout(e) {
    this._containerMeasurements = e.nativeEvent.layout;
    this.updateView({ value: this.props.scrollValue._value });
  } });

var StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.ScrollableTab", {}, mapPropsToStyleNames)(ScrollableTabBar);exports.ScrollableTab = StyledTab;
var styles = StyleSheet.create({
  tab: {
    height: 49,
    alignItems: "center",
    justifyContent: "center",
    paddingLeft: 20,
    paddingRight: 20 },

  container: {
    height: 50,
    borderWidth: 1,
    borderTopWidth: 0,
    borderLeftWidth: 0,
    borderRightWidth: 0,
    borderColor: "#ccc" },

  tabs: {
    flexDirection: "row",
    justifyContent: "space-around" } });
}, 675, null, "native-base/dist/src/basic/Tabs/ScrollableTabBar.js");
__d(/* native-base/dist/src/basic/Subtitle.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });exports.Subtitle = undefined;var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};var _jsxFileName = "src/basic/Subtitle.js";var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();var _react = require(13     );var _react2 = _interopRequireDefault(_react); // 13 = react
var _propTypes = require(20          );var _propTypes2 = _interopRequireDefault(_propTypes); // 20 = prop-types
var _reactNative = require(181           ); // 181 = react-native
var _nativeBaseShoutemTheme = require(470                        ); // 470 = native-base-shoutem-theme
var _mapPropsToStyleNames = require(549                            );var _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);function _interopRequireDefault(obj) { // 549 = ../Utils/mapPropsToStyleNames
  return obj && obj.__esModule ? obj : { default: obj };
}function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && (typeof call === "object" || typeof call === "function") ? call : self;
}function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}var Subtitle = function (_Component) {
  _inherits(Subtitle, _Component);function Subtitle() {
    _classCallCheck(this, Subtitle);return _possibleConstructorReturn(this, (Subtitle.__proto__ || Object.getPrototypeOf(Subtitle)).apply(this, arguments));
  }_createClass(Subtitle, [{ key: "render", value: function render() {
      var _this2 = this;
      return _react2.default.createElement(_reactNative.Text, _extends({ ref: function ref(c) {
          return _this2._root = c;
        } }, this.props, { __source: { fileName: _jsxFileName, lineNumber: 9 } }));
    } }]);return Subtitle;
}(_react.Component);

Subtitle.propTypes = _extends({}, _reactNative.Text.propTypes, {
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]) });

var StyledSubtitle = (0, _nativeBaseShoutemTheme.connectStyle)("NativeBase.Subtitle", {}, _mapPropsToStyleNames2.default)(Subtitle);exports.Subtitle = StyledSubtitle;
}, 676, null, "native-base/dist/src/basic/Subtitle.js");
__d(/* TwitchDashboardApp/app/components/LiveUserCard.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require(13     ); // 13 = react

var _react3 = _interopRequireDefault(_react2);

var _index = require(27                                                     ); // 27 = ./../../node_modules/react-transform-hmr/lib/index.js

var _index2 = _interopRequireDefault(_index);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class,
    _temp,
    _jsxFileName = 'c:\\Users\\Erik\\Documents\\Code\\TwitchDashboardApp\\app\\components\\LiveUserCard.js';

var _propTypes = require(20          ); // 20 = prop-types

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require(181           ); // 181 = react-native

var _nativeBase = require(469          ); // 469 = native-base

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  LiveUserCard: {
    displayName: 'LiveUserCard'
  }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: 'c:/Users/Erik/Documents/Code/TwitchDashboardApp/app/components/LiveUserCard.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
  };
}

var MILISECONDS_IN_MINUTE = 60000;

var LiveUserCard = _wrapComponent('LiveUserCard')((_temp = _class = function (_Component) {
  _inherits(LiveUserCard, _Component);

  function LiveUserCard() {
    _classCallCheck(this, LiveUserCard);

    return _possibleConstructorReturn(this, (LiveUserCard.__proto__ || Object.getPrototypeOf(LiveUserCard)).apply(this, arguments));
  }

  _createClass(LiveUserCard, [{
    key: 'setImageSize',
    value: function setImageSize(height, width) {
      var url = this.props.image_url.replace('{width}', width);
      url = url.replace('{height}', height);

      return url;
    }
  }, {
    key: 'getLiveDuration',
    value: function getLiveDuration() {
      var startTime = new Date(this.props.start_time);
      var elapsedTime = Math.abs(startTime.getTime() - Date.now());

      return Math.round(elapsedTime / MILISECONDS_IN_MINUTE);
    }
  }, {
    key: 'getCardFooter',
    value: function getCardFooter() {
      if (this.props.live) {
        return this.createLiveFooter();
      } else {
        return this.createOfflineFooter();
      }
    }
  }, {
    key: 'createLiveFooter',
    value: function createLiveFooter() {
      return _react3.default.createElement(
        _nativeBase.CardItem,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        },
        _react3.default.createElement(
          _nativeBase.Left,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 49
            }
          },
          _react3.default.createElement(
            _nativeBase.Button,
            { transparent: true, __source: {
                fileName: _jsxFileName,
                lineNumber: 50
              }
            },
            _react3.default.createElement(_nativeBase.Icon, { active: true, name: 'people', __source: {
                fileName: _jsxFileName,
                lineNumber: 51
              }
            }),
            _react3.default.createElement(
              _nativeBase.Text,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 52
                }
              },
              this.props.viewers_count,
              ' Viewers'
            )
          )
        ),
        _react3.default.createElement(
          _nativeBase.Body,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          _react3.default.createElement(
            _nativeBase.Button,
            { transparent: true, __source: {
                fileName: _jsxFileName,
                lineNumber: 56
              }
            },
            _react3.default.createElement(_nativeBase.Icon, { active: true, name: 'videocam', __source: {
                fileName: _jsxFileName,
                lineNumber: 57
              }
            }),
            _react3.default.createElement(
              _nativeBase.Text,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 58
                }
              },
              'Live for ',
              this.getLiveDuration(),
              ' min'
            )
          )
        )
      );
    }
  }, {
    key: 'createOfflineFooter',
    value: function createOfflineFooter() {
      return _react3.default.createElement(
        _nativeBase.CardItem,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        },
        _react3.default.createElement(
          _nativeBase.Left,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 68
            }
          },
          _react3.default.createElement(
            _nativeBase.Button,
            { transparent: true, __source: {
                fileName: _jsxFileName,
                lineNumber: 69
              }
            },
            _react3.default.createElement(_nativeBase.Icon, { active: true, name: 'people', __source: {
                fileName: _jsxFileName,
                lineNumber: 70
              }
            }),
            _react3.default.createElement(
              _nativeBase.Text,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 71
                }
              },
              this.props.followers_count,
              ' Followers'
            )
          )
        )
      );
    }
  }, {
    key: 'getCardLiveHeaderMetadata',
    value: function getCardLiveHeaderMetadata() {
      var jsxElements = [];
      if (this.props.live) {
        jsxElements.push(_react3.default.createElement(
          _nativeBase.Text,
          { note: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          },
          this.props.game_title
        ));
        jsxElements.push(_react3.default.createElement(
          _nativeBase.Text,
          { note: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 82
            }
          },
          this.props.title
        ));
      }

      return jsxElements;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          image_url = _props.image_url,
          user_id = _props.user_id,
          username = _props.username,
          title = _props.title,
          start_time = _props.start_time,
          viewers_count = _props.viewers_count,
          game_title = _props.game_title;

      return _react3.default.createElement(
        _nativeBase.Card,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 91
          }
        },
        _react3.default.createElement(
          _nativeBase.CardItem,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 92
            }
          },
          _react3.default.createElement(
            _nativeBase.Body,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 93
              }
            },
            _react3.default.createElement(
              _nativeBase.Text,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 94
                }
              },
              username
            ),
            this.getCardLiveHeaderMetadata()
          )
        ),
        _react3.default.createElement(
          _nativeBase.CardItem,
          { cardBody: true, __source: {
              fileName: _jsxFileName,
              lineNumber: 98
            }
          },
          _react3.default.createElement(_reactNative.Image, { source: { uri: this.setImageSize(300, 533) }, style: { height: 300, width: null, flex: 1 }, __source: {
              fileName: _jsxFileName,
              lineNumber: 99
            }
          })
        ),
        this.getCardFooter()
      );
    }
  }]);

  return LiveUserCard;
}(_react2.Component), _class.propTypes = {
  image_url: _propTypes2.default.string.isRequired,
  user_id: _propTypes2.default.string.isRequired,
  username: _propTypes2.default.string.isRequired,
  title: _propTypes2.default.string,
  start_time: _propTypes2.default.string,
  viewers_count: _propTypes2.default.number,
  game_title: _propTypes2.default.string,
  followers_count: _propTypes2.default.number
}, _temp));

exports.default = LiveUserCard;
}, 677, null, "TwitchDashboardApp/app/components/LiveUserCard.js");
__d(/* TwitchDashboardApp/app/lib/TwitchAPI.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TwitchAPI = function () {
    function TwitchAPI() {
        _classCallCheck(this, TwitchAPI);
    }

    _createClass(TwitchAPI, null, [{
        key: "fetchUsersInfo",
        value: function fetchUsersInfo(user_id) {
            var response, result;
            return regeneratorRuntime.async(function fetchUsersInfo$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _context.next = 2;
                            return regeneratorRuntime.awrap(fetch("https://api.twitch.tv/helix/users?id=" + user_id, {
                                method: 'GET',
                                headers: {
                                    "client-id": "imgxjm3xjyq0kupk8ln0s11b3bpu1x"
                                }
                            }));

                        case 2:
                            response = _context.sent;
                            _context.next = 5;
                            return regeneratorRuntime.awrap(response.json());

                        case 5:
                            result = _context.sent;
                            return _context.abrupt("return", result.data);

                        case 7:
                        case "end":
                            return _context.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: "v5fetchUsersInfo",
        value: function v5fetchUsersInfo(user_id) {
            var response, result;
            return regeneratorRuntime.async(function v5fetchUsersInfo$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _context2.next = 2;
                            return regeneratorRuntime.awrap(fetch("https://api.twitch.tv/kraken/channels/" + user_id, {
                                method: 'GET',
                                headers: {
                                    "client-id": "imgxjm3xjyq0kupk8ln0s11b3bpu1x",
                                    "accept": "application/vnd.twitchtv.v5+json"
                                }
                            }));

                        case 2:
                            response = _context2.sent;
                            _context2.next = 5;
                            return regeneratorRuntime.awrap(response.json());

                        case 5:
                            result = _context2.sent;
                            return _context2.abrupt("return", result);

                        case 7:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: "fetchLiveUsers",
        value: function fetchLiveUsers(user_ids) {
            var params, response, result;
            return regeneratorRuntime.async(function fetchLiveUsers$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            params = user_ids.map(function (user_id) {
                                return "user_id=" + user_id;
                            });
                            _context3.next = 3;
                            return regeneratorRuntime.awrap(fetch("https://api.twitch.tv/helix/streams?" + params.join('&') + "&type%20=live&first=100", {
                                method: 'GET',
                                headers: {
                                    "client-id": "imgxjm3xjyq0kupk8ln0s11b3bpu1x"
                                }
                            }));

                        case 3:
                            response = _context3.sent;
                            _context3.next = 6;
                            return regeneratorRuntime.awrap(response.json());

                        case 6:
                            result = _context3.sent;
                            return _context3.abrupt("return", result.data);

                        case 8:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: "fetchVodcastUsers",
        value: function fetchVodcastUsers(user_ids) {
            var params, response, result;
            return regeneratorRuntime.async(function fetchVodcastUsers$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            params = user_ids.map(function (user_id) {
                                return "user_id=" + user_id;
                            });
                            _context4.next = 3;
                            return regeneratorRuntime.awrap(fetch("https://api.twitch.tv/helix/streams?" + params.join('&') + "&type%20=vodcast&first=100", {
                                method: 'GET',
                                headers: {
                                    "client-id": "imgxjm3xjyq0kupk8ln0s11b3bpu1x"
                                }
                            }));

                        case 3:
                            response = _context4.sent;
                            _context4.next = 6;
                            return regeneratorRuntime.awrap(response.json());

                        case 6:
                            result = _context4.sent;
                            return _context4.abrupt("return", result.data);

                        case 8:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, null, this);
        }
    }, {
        key: "getUsersFollow",
        value: function getUsersFollow(user_id) {
            var response, result, followed;
            return regeneratorRuntime.async(function getUsersFollow$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            _context5.next = 2;
                            return regeneratorRuntime.awrap(fetch("https://api.twitch.tv/helix/users/follows?from_id=" + user_id + "&first=100", {
                                method: 'GET',
                                headers: {
                                    "client-id": "imgxjm3xjyq0kupk8ln0s11b3bpu1x"
                                }
                            }));

                        case 2:
                            response = _context5.sent;
                            _context5.next = 5;
                            return regeneratorRuntime.awrap(response.json());

                        case 5:
                            result = _context5.sent;
                            followed = result.data.map(function (item) {
                                return item.to_id;
                            });
                            return _context5.abrupt("return", followed);

                        case 8:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, null, this);
        }
    }]);

    return TwitchAPI;
}();

exports.default = TwitchAPI;
}, 678, null, "TwitchDashboardApp/app/lib/TwitchAPI.js");
;require(219);
;require(0);
//# sourceMappingURL=index.android.map